#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackAcceleratorBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "FSASCommand_structs.hpp"


namespace SDK::Params
{

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ExecuteUbergraph_BP_AttackAcceleratorBase
// 0x0018 (0x0018 - 0x0000)
struct BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_SAS_PlayerState_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase");
static_assert(sizeof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase) == 0x000018, "Wrong size on BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase, EntryPoint) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase, CallFunc_GetPostProcessManager_Manager) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AttackAcceleratorBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_ReceiveTick");
static_assert(sizeof(BP_AttackAcceleratorBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_AttackAcceleratorBase_C_ReceiveTick");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnChangeAttacking
// 0x0002 (0x0002 - 0x0000)
struct BP_AttackAcceleratorBase_C_OnChangeAttacking final
{
public:
	bool                                          bAttacking;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_OnChangeAttacking) == 0x000001, "Wrong alignment on BP_AttackAcceleratorBase_C_OnChangeAttacking");
static_assert(sizeof(BP_AttackAcceleratorBase_C_OnChangeAttacking) == 0x000002, "Wrong size on BP_AttackAcceleratorBase_C_OnChangeAttacking");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnChangeAttacking, bAttacking) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_OnChangeAttacking::bAttacking' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnChangeAttacking, ReturnValue) == 0x000001, "Member 'BP_AttackAcceleratorBase_C_OnChangeAttacking::ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnCustomAttackTimingNotified
// 0x0018 (0x0018 - 0x0000)
struct BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified final
{
public:
	class FString                                 CustomName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnCustomAttackTimingNotified_ReturnValue; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified");
static_assert(sizeof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified) == 0x000018, "Wrong size on BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified, CustomName) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified::CustomName' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified, ReturnValue) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000011, "Member 'BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified, CallFunc_OnCustomAttackTimingNotified_ReturnValue) == 0x000012, "Member 'BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified::CallFunc_OnCustomAttackTimingNotified_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ChangeAccelerator
// 0x01F8 (0x01F8 - 0x0000)
struct BP_AttackAcceleratorBase_C_ChangeAccelerator final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      AccelParameter;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPlayerEvent;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                BrainCodeList;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                SASCodeList;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         DamageCancellationParam;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelSpeedRate;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResetAccelSpeed;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      AcceleratorParam;                                  // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorArray;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85AA[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85AB[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAcceleratorInterpolateTime_StartSeconds; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAcceleratorInterpolateTime_EndSeconds; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_2;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAcceleratorInterpolateTime_StartSeconds_1; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAcceleratorInterpolateTime_EndSeconds_1; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85AC[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85AD[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85AE[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85AF[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B0[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0108(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B1[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0130(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B2[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85B3[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_2;       // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B4[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList_1;         // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_3;       // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B5[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList_1;           // 0x0198(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDamageCancellation_DamageCancellation; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_1;                         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B6[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCustomStencilBits_SetupStencil;        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85B7[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_2;                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85B8[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCustomStencilBits_SetupStencil_1;      // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85B9[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_3;                         // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_ChangeAccelerator) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_ChangeAccelerator");
static_assert(sizeof(BP_AttackAcceleratorBase_C_ChangeAccelerator) == 0x0001F8, "Wrong size on BP_AttackAcceleratorBase_C_ChangeAccelerator");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, bActive) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::bActive' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, AccelParameter) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::AccelParameter' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, LbPlayerEvent) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::LbPlayerEvent' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, BrainCodeList) == 0x000018, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::BrainCodeList' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, SASCodeList) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::SASCodeList' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, DamageCancellationParam) == 0x000038, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::DamageCancellationParam' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, AccelSpeedRate) == 0x00003C, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::AccelSpeedRate' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, ResetAccelSpeed) == 0x000040, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::ResetAccelSpeed' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, AcceleratorParam) == 0x000044, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::AcceleratorParam' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, ActorArray) == 0x000050, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::ActorArray' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_MakeLiteralInt_ReturnValue) == 0x000060, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000064, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Array_Index_Variable) == 0x00006C, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Loop_Counter_Variable_1) == 0x000074, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Array_Index_Variable_1) == 0x00007C, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_IsPlayerStatus_Result) == 0x000080, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Loop_Counter_Variable_2) == 0x000084, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Add_IntInt_ReturnValue_2) == 0x000088, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetPlayerManager_PlayerManager) == 0x000090, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetPlayerManager_PlayerManager_1) == 0x000098, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetAcceleratorInterpolateTime_StartSeconds) == 0x0000A0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetAcceleratorInterpolateTime_StartSeconds' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetAcceleratorInterpolateTime_EndSeconds) == 0x0000A4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetAcceleratorInterpolateTime_EndSeconds' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetPlayerManager_PlayerManager_2) == 0x0000A8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetPlayerManager_PlayerManager_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetAcceleratorInterpolateTime_StartSeconds_1) == 0x0000B0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetAcceleratorInterpolateTime_StartSeconds_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetAcceleratorInterpolateTime_EndSeconds_1) == 0x0000B4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetAcceleratorInterpolateTime_EndSeconds_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetPlayer_ReturnValue) == 0x0000B8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_float_Variable) == 0x0000D8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetOwner_ReturnValue) == 0x0000E0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Array_Index_Variable_2) == 0x0000E8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0000F0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetBrainCodeActorList_CodeList) == 0x000108, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x000118, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetSASCodeActorList_CodeList) == 0x000130, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_bool_Variable) == 0x000140, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetOwner_ReturnValue_1) == 0x000148, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_Select_Default) == 0x000150, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_AsBPI_Player_Interface_2) == 0x000158, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_AsBPI_Player_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_bSuccess_2) == 0x000168, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetBrainCodeActorList_CodeList_1) == 0x000170, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetBrainCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_AsBPI_Player_Interface_3) == 0x000180, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_AsBPI_Player_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, K2Node_DynamicCast_bSuccess_3) == 0x000190, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetSASCodeActorList_CodeList_1) == 0x000198, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetSASCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Loop_Counter_Variable_3) == 0x0001A8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001AC, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, Temp_int_Array_Index_Variable_3) == 0x0001B0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetDamageCancellation_DamageCancellation) == 0x0001B4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetDamageCancellation_DamageCancellation' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Get_Item_1) == 0x0001B8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Length_ReturnValue_1) == 0x0001C0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001C4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetCustomStencilBits_SetupStencil) == 0x0001C8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetCustomStencilBits_SetupStencil' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Get_Item_2) == 0x0001D0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Length_ReturnValue_2) == 0x0001D8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001DC, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_GetCustomStencilBits_SetupStencil_1) == 0x0001E0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_GetCustomStencilBits_SetupStencil_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Get_Item_3) == 0x0001E8, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Array_Length_ReturnValue_3) == 0x0001F0, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_ChangeAccelerator, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001F4, "Member 'BP_AttackAcceleratorBase_C_ChangeAccelerator::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.RegistAccelerator
// 0x00C0 (0x00C0 - 0x0000)
struct BP_AttackAcceleratorBase_C_RegistAccelerator final
{
public:
	float                                         RemainTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LAcceleratorKind;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85BA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Active;                       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85BB[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager_1;             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85BC[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager_2;             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85BD[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_IsReserved_self_CastInput;                // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReserved_Reserved;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success_1;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85BE[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAcceleratorSpeed_AcceleratorSpeed;     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      K2Node_MakeStruct_AcceleratorParam;                // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85BF[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSASCommand                           K2Node_MakeStruct_FSASCommand;                     // 0x0088(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_Success;                            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_RegistAccelerator) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_RegistAccelerator");
static_assert(sizeof(BP_AttackAcceleratorBase_C_RegistAccelerator) == 0x0000C0, "Wrong size on BP_AttackAcceleratorBase_C_RegistAccelerator");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, RemainTime) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::RemainTime' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, MaxTime) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::MaxTime' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, LAcceleratorKind) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::LAcceleratorKind' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_GetSASManager_SAS_Manager) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_AsBPI_SASManager) == 0x000018, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_AsBPI_SASManager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_IsActiveSAS_Active) == 0x000029, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_IsActiveSAS_Active' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_AsBPI_SASManager_1) == 0x000030, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_AsBPI_SASManager_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_AsBPI_SASManager_2) == 0x000048, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_AsBPI_SASManager_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_CancelSAS_Success) == 0x00005A, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_CancelSAS_Success' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_IsReserved_self_CastInput) == 0x000060, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_IsReserved_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_IsReserved_Reserved) == 0x000070, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_IsReserved_Reserved' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_CancelSAS_Success_1) == 0x000071, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_CancelSAS_Success_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_GetAcceleratorSpeed_AcceleratorSpeed) == 0x000074, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_GetAcceleratorSpeed_AcceleratorSpeed' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_MakeStruct_AcceleratorParam) == 0x000078, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_MakeStruct_AcceleratorParam' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, K2Node_MakeStruct_FSASCommand) == 0x000088, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::K2Node_MakeStruct_FSASCommand' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_RegistAccelerator, CallFunc_Start_Success) == 0x0000B8, "Member 'BP_AttackAcceleratorBase_C_RegistAccelerator::CallFunc_Start_Success' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnDamage
// 0x0048 (0x0048 - 0x0000)
struct BP_AttackAcceleratorBase_C_OnDamage final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_SASCancelEffectAndSEInterface_self_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SASCancelEffectAndSEInterface_bDummy;     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C1[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Active;                       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C2[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_OnDamage) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_OnDamage");
static_assert(sizeof(BP_AttackAcceleratorBase_C_OnDamage) == 0x000048, "Wrong size on BP_AttackAcceleratorBase_C_OnDamage");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, Temp_int_Variable) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_OnDamage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_SASCancelEffectAndSEInterface_self_CastInput) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_SASCancelEffectAndSEInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_SASCancelEffectAndSEInterface_bDummy) == 0x000018, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_SASCancelEffectAndSEInterface_bDummy' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_GetSASManager_SAS_Manager) == 0x000020, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, K2Node_DynamicCast_AsBPI_SASManager) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_OnDamage::K2Node_DynamicCast_AsBPI_SASManager' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AttackAcceleratorBase_C_OnDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_IsActiveSAS_Active) == 0x000039, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_IsActiveSAS_Active' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_CancelSAS_Success) == 0x00003A, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_CancelSAS_Success' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_IsValid_ReturnValue) == 0x00003B, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x00003C, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_OnDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'BP_AttackAcceleratorBase_C_OnDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.UpdateInAccelerator
// 0x0040 (0x0040 - 0x0000)
struct BP_AttackAcceleratorBase_C_UpdateInAccelerator final
{
public:
	float                                         DeltaSecond;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RawVelocity;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C3[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C4[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAccelerator_bAccelerator;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_UpdateInAccelerator) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_UpdateInAccelerator");
static_assert(sizeof(BP_AttackAcceleratorBase_C_UpdateInAccelerator) == 0x000040, "Wrong size on BP_AttackAcceleratorBase_C_UpdateInAccelerator");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, DeltaSecond) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::DeltaSecond' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, RawVelocity) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::RawVelocity' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_IsAccelerator_bAccelerator) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_IsAccelerator_bAccelerator' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_GetVelocity_ReturnValue) == 0x00002C, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdateInAccelerator, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AttackAcceleratorBase_C_UpdateInAccelerator::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.SetPostProcessParam
// 0x0040 (0x0040 - 0x0000)
struct BP_AttackAcceleratorBase_C_SetPostProcessParam final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoRedBlurRadius;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RedBlurPower;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RedBlurColorMul;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_SetPostProcessParam) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_SetPostProcessParam");
static_assert(sizeof(BP_AttackAcceleratorBase_C_SetPostProcessParam) == 0x000040, "Wrong size on BP_AttackAcceleratorBase_C_SetPostProcessParam");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, Value) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::Value' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, NoRedBlurRadius) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::NoRedBlurRadius' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, RedBlurPower) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::RedBlurPower' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, RedBlurColorMul) == 0x00000C, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::RedBlurColorMul' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000020, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000024, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_SetPostProcessParam, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000030, "Member 'BP_AttackAcceleratorBase_C_SetPostProcessParam::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.CalcPlayerScreenVec
// 0x0050 (0x0050 - 0x0000)
struct BP_AttackAcceleratorBase_C_CalcPlayerScreenVec final
{
public:
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec) == 0x000008, "Wrong alignment on BP_AttackAcceleratorBase_C_CalcPlayerScreenVec");
static_assert(sizeof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec) == 0x000050, "Wrong size on BP_AttackAcceleratorBase_C_CalcPlayerScreenVec");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_GetActorRightVector_ReturnValue) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_GetVelocity_ReturnValue) == 0x00001C, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_GetActorForwardVector_ReturnValue) == 0x000028, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_Dot_VectorVector_ReturnValue) == 0x000034, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000038, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcPlayerScreenVec, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_AttackAcceleratorBase_C_CalcPlayerScreenVec::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.CalcBlurCenter
// 0x0020 (0x0020 - 0x0000)
struct BP_AttackAcceleratorBase_C_CalcBlurCenter final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_CalcBlurCenter) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_CalcBlurCenter");
static_assert(sizeof(BP_AttackAcceleratorBase_C_CalcBlurCenter) == 0x000020, "Wrong size on BP_AttackAcceleratorBase_C_CalcBlurCenter");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcBlurCenter, DeltaTime) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_CalcBlurCenter::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcBlurCenter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_CalcBlurCenter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcBlurCenter, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_CalcBlurCenter::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_CalcBlurCenter, CallFunc_VLerp_ReturnValue) == 0x000014, "Member 'BP_AttackAcceleratorBase_C_CalcBlurCenter::CallFunc_VLerp_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.UpdatePPTimer
// 0x0014 (0x0014 - 0x0000)
struct BP_AttackAcceleratorBase_C_UpdatePPTimer final
{
public:
	bool                                          Param_IsActive;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C6[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_UpdatePPTimer) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_UpdatePPTimer");
static_assert(sizeof(BP_AttackAcceleratorBase_C_UpdatePPTimer) == 0x000014, "Wrong size on BP_AttackAcceleratorBase_C_UpdatePPTimer");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, Param_IsActive) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::Param_IsActive' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, Temp_bool_Variable) == 0x000001, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, CallFunc_IsOver_ReturnValue) == 0x000002, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, K2Node_Select_Default) == 0x00000C, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_UpdatePPTimer, CallFunc_IsEnable_ReturnValue) == 0x000010, "Member 'BP_AttackAcceleratorBase_C_UpdatePPTimer::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.EventCancelPostProcess
// 0x0001 (0x0001 - 0x0000)
struct BP_AttackAcceleratorBase_C_EventCancelPostProcess final
{
public:
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_EventCancelPostProcess) == 0x000001, "Wrong alignment on BP_AttackAcceleratorBase_C_EventCancelPostProcess");
static_assert(sizeof(BP_AttackAcceleratorBase_C_EventCancelPostProcess) == 0x000001, "Wrong size on BP_AttackAcceleratorBase_C_EventCancelPostProcess");
static_assert(offsetof(BP_AttackAcceleratorBase_C_EventCancelPostProcess, CallFunc_IsEnable_ReturnValue) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_EventCancelPostProcess::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.IsAccelerator
// 0x0001 (0x0001 - 0x0000)
struct BP_AttackAcceleratorBase_C_IsAccelerator final
{
public:
	bool                                          Param_bAccelerator;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_IsAccelerator) == 0x000001, "Wrong alignment on BP_AttackAcceleratorBase_C_IsAccelerator");
static_assert(sizeof(BP_AttackAcceleratorBase_C_IsAccelerator) == 0x000001, "Wrong size on BP_AttackAcceleratorBase_C_IsAccelerator");
static_assert(offsetof(BP_AttackAcceleratorBase_C_IsAccelerator, Param_bAccelerator) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_IsAccelerator::Param_bAccelerator' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetRemainingSeconds
// 0x0004 (0x0004 - 0x0000)
struct BP_AttackAcceleratorBase_C_GetRemainingSeconds final
{
public:
	float                                         RemainingSec;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_GetRemainingSeconds) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_GetRemainingSeconds");
static_assert(sizeof(BP_AttackAcceleratorBase_C_GetRemainingSeconds) == 0x000004, "Wrong size on BP_AttackAcceleratorBase_C_GetRemainingSeconds");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetRemainingSeconds, RemainingSec) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_GetRemainingSeconds::RemainingSec' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetAcceleratorSpeed
// 0x0008 (0x0008 - 0x0000)
struct BP_AttackAcceleratorBase_C_GetAcceleratorSpeed final
{
public:
	float                                         AcceleratorSpeed;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASParamForKind_Param;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_GetAcceleratorSpeed) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_GetAcceleratorSpeed");
static_assert(sizeof(BP_AttackAcceleratorBase_C_GetAcceleratorSpeed) == 0x000008, "Wrong size on BP_AttackAcceleratorBase_C_GetAcceleratorSpeed");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetAcceleratorSpeed, AcceleratorSpeed) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_GetAcceleratorSpeed::AcceleratorSpeed' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetAcceleratorSpeed, CallFunc_GetSASParamForKind_Param) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_GetAcceleratorSpeed::CallFunc_GetSASParamForKind_Param' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetDamageCancellation
// 0x000C (0x000C - 0x0000)
struct BP_AttackAcceleratorBase_C_GetDamageCancellation final
{
public:
	int32                                         DamageCancellation;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASParamForKind_Param;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_GetDamageCancellation) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_GetDamageCancellation");
static_assert(sizeof(BP_AttackAcceleratorBase_C_GetDamageCancellation) == 0x00000C, "Wrong size on BP_AttackAcceleratorBase_C_GetDamageCancellation");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetDamageCancellation, DamageCancellation) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_GetDamageCancellation::DamageCancellation' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetDamageCancellation, CallFunc_GetSASParamForKind_Param) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_GetDamageCancellation::CallFunc_GetSASParamForKind_Param' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetDamageCancellation, CallFunc_FTrunc_ReturnValue) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_GetDamageCancellation::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetActiveSeconds
// 0x000C (0x000C - 0x0000)
struct BP_AttackAcceleratorBase_C_GetActiveSeconds final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_RecastSec;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASTimeParameter_ActivationSec;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackAcceleratorBase_C_GetActiveSeconds) == 0x000004, "Wrong alignment on BP_AttackAcceleratorBase_C_GetActiveSeconds");
static_assert(sizeof(BP_AttackAcceleratorBase_C_GetActiveSeconds) == 0x00000C, "Wrong size on BP_AttackAcceleratorBase_C_GetActiveSeconds");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetActiveSeconds, NewParam) == 0x000000, "Member 'BP_AttackAcceleratorBase_C_GetActiveSeconds::NewParam' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetActiveSeconds, CallFunc_GetSASTimeParameter_RecastSec) == 0x000004, "Member 'BP_AttackAcceleratorBase_C_GetActiveSeconds::CallFunc_GetSASTimeParameter_RecastSec' has a wrong offset!");
static_assert(offsetof(BP_AttackAcceleratorBase_C_GetActiveSeconds, CallFunc_GetSASTimeParameter_ActivationSec) == 0x000008, "Member 'BP_AttackAcceleratorBase_C_GetActiveSeconds::CallFunc_GetSASTimeParameter_ActivationSec' has a wrong offset!");

}

