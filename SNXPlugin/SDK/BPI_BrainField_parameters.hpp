#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BrainField

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOpenStart
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldOpenStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldOpenStart) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldOpenStart");
static_assert(sizeof(BPI_BrainField_C_BrainFieldOpenStart) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldOpenStart");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOpenStart, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldOpenStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOpenStart, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldOpenStart::IsAttacker' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOpenEnd
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldOpenEnd final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldOpenEnd) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldOpenEnd");
static_assert(sizeof(BPI_BrainField_C_BrainFieldOpenEnd) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldOpenEnd");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOpenEnd, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldOpenEnd::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOpenEnd, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldOpenEnd::IsAttacker' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldCloseStart
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldCloseStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldCloseStart) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldCloseStart");
static_assert(sizeof(BPI_BrainField_C_BrainFieldCloseStart) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldCloseStart");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseStart, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldCloseStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseStart, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldCloseStart::IsAttacker' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseStart, EndType) == 0x000009, "Member 'BPI_BrainField_C_BrainFieldCloseStart::EndType' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldCloseEnd
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldCloseEnd final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldCloseEnd) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldCloseEnd");
static_assert(sizeof(BPI_BrainField_C_BrainFieldCloseEnd) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldCloseEnd");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseEnd, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldCloseEnd::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseEnd, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldCloseEnd::IsAttacker' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldCloseEnd, EndType) == 0x000009, "Member 'BPI_BrainField_C_BrainFieldCloseEnd::EndType' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldMoveBrainField
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldMoveBrainField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldMoveBrainField) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldMoveBrainField");
static_assert(sizeof(BPI_BrainField_C_BrainFieldMoveBrainField) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldMoveBrainField");
static_assert(offsetof(BPI_BrainField_C_BrainFieldMoveBrainField, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldMoveBrainField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldMoveBrainField, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldMoveBrainField::IsAttacker' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldMoveNormalField
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldMoveNormalField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldMoveNormalField) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldMoveNormalField");
static_assert(sizeof(BPI_BrainField_C_BrainFieldMoveNormalField) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldMoveNormalField");
static_assert(offsetof(BPI_BrainField_C_BrainFieldMoveNormalField, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldMoveNormalField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldMoveNormalField, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldMoveNormalField::IsAttacker' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldMoveNormalField, EndType) == 0x000009, "Member 'BPI_BrainField_C_BrainFieldMoveNormalField::EndType' has a wrong offset!");

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOverrideStart
// 0x0010 (0x0010 - 0x0000)
struct BPI_BrainField_C_BrainFieldOverrideStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BrainField_C_BrainFieldOverrideStart) == 0x000008, "Wrong alignment on BPI_BrainField_C_BrainFieldOverrideStart");
static_assert(sizeof(BPI_BrainField_C_BrainFieldOverrideStart) == 0x000010, "Wrong size on BPI_BrainField_C_BrainFieldOverrideStart");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOverrideStart, BrainFieldUser) == 0x000000, "Member 'BPI_BrainField_C_BrainFieldOverrideStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(BPI_BrainField_C_BrainFieldOverrideStart, IsAttacker) == 0x000008, "Member 'BPI_BrainField_C_BrainFieldOverrideStart::IsAttacker' has a wrong offset!");

}

