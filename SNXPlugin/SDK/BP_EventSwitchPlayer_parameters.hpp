#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventSwitchPlayer

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ExecuteUbergraph_BP_EventSwitchPlayer
// 0x000C (0x000C - 0x0000)
struct BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaySimulate_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer) == 0x000004, "Wrong alignment on BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer");
static_assert(sizeof(BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer) == 0x00000C, "Wrong size on BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer");
static_assert(offsetof(BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer, EntryPoint) == 0x000000, "Member 'BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer, CallFunc_IsPlaySimulate_ReturnValue) == 0x000008, "Member 'BP_EventSwitchPlayer_C_ExecuteUbergraph_BP_EventSwitchPlayer::CallFunc_IsPlaySimulate_ReturnValue' has a wrong offset!");

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_EventSwitchPlayer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EventSwitchPlayer_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_EventSwitchPlayer_C_ReceiveTick");
static_assert(sizeof(BP_EventSwitchPlayer_C_ReceiveTick) == 0x000004, "Wrong size on BP_EventSwitchPlayer_C_ReceiveTick");
static_assert(offsetof(BP_EventSwitchPlayer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_EventSwitchPlayer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.Initialize
// 0x0038 (0x0038 - 0x0000)
struct BP_EventSwitchPlayer_C_Initialize final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8465[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopMax;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPreviewPlayerID_PlayerID;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8466[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadAsset_IsValid;                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8467[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Object;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8468[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EventSwitchPlayer_C_Initialize) == 0x000008, "Wrong alignment on BP_EventSwitchPlayer_C_Initialize");
static_assert(sizeof(BP_EventSwitchPlayer_C_Initialize) == 0x000038, "Wrong size on BP_EventSwitchPlayer_C_Initialize");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, PlayerId) == 0x000000, "Member 'BP_EventSwitchPlayer_C_Initialize::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, LoopMax) == 0x000004, "Member 'BP_EventSwitchPlayer_C_Initialize::LoopMax' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_GetPreviewPlayerID_PlayerID) == 0x000008, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_GetPreviewPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, Temp_int_Variable) == 0x00000C, "Member 'BP_EventSwitchPlayer_C_Initialize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_LoadAsset_IsValid) == 0x000014, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_LoadAsset_IsValid' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_LoadAsset_Object) == 0x000018, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_LoadAsset_Object' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, K2Node_DynamicCast_AsSkeletal_Mesh) == 0x000020, "Member 'BP_EventSwitchPlayer_C_Initialize::K2Node_DynamicCast_AsSkeletal_Mesh' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_EventSwitchPlayer_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000029, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_GetNumMaterials_ReturnValue) == 0x00002C, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_Initialize, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'BP_EventSwitchPlayer_C_Initialize::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.UpdateSimulate
// 0x0010 (0x0010 - 0x0000)
struct BP_EventSwitchPlayer_C_UpdateSimulate final
{
public:
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPreviewPlayerID_PlayerID;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EventSwitchPlayer_C_UpdateSimulate) == 0x000008, "Wrong alignment on BP_EventSwitchPlayer_C_UpdateSimulate");
static_assert(sizeof(BP_EventSwitchPlayer_C_UpdateSimulate) == 0x000010, "Wrong size on BP_EventSwitchPlayer_C_UpdateSimulate");
static_assert(offsetof(BP_EventSwitchPlayer_C_UpdateSimulate, CallFunc_GetAttachParentActor_ReturnValue) == 0x000000, "Member 'BP_EventSwitchPlayer_C_UpdateSimulate::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_UpdateSimulate, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_EventSwitchPlayer_C_UpdateSimulate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_UpdateSimulate, CallFunc_GetPreviewPlayerID_PlayerID) == 0x000009, "Member 'BP_EventSwitchPlayer_C_UpdateSimulate::CallFunc_GetPreviewPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_UpdateSimulate, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'BP_EventSwitchPlayer_C_UpdateSimulate::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.GetPreviewPlayerID
// 0x0028 (0x0028 - 0x0000)
struct BP_EventSwitchPlayer_C_GetPreviewPlayerID final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8469[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ParentActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventSwitchPlayerRoot_C*            K2Node_DynamicCast_AsBP_Event_Switch_Player_Root;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPreviewPlayerID_PlayerID;              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_846A[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EventSwitchPlayer_C_GetPreviewPlayerID) == 0x000008, "Wrong alignment on BP_EventSwitchPlayer_C_GetPreviewPlayerID");
static_assert(sizeof(BP_EventSwitchPlayer_C_GetPreviewPlayerID) == 0x000028, "Wrong size on BP_EventSwitchPlayer_C_GetPreviewPlayerID");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, PlayerId) == 0x000000, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, ParentActor) == 0x000008, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::ParentActor' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, K2Node_DynamicCast_AsBP_Event_Switch_Player_Root) == 0x000010, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::K2Node_DynamicCast_AsBP_Event_Switch_Player_Root' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, CallFunc_GetPreviewPlayerID_PlayerID) == 0x00001A, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::CallFunc_GetPreviewPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_GetPreviewPlayerID, CallFunc_GetAttachParentActor_ReturnValue) == 0x000020, "Member 'BP_EventSwitchPlayer_C_GetPreviewPlayerID::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");

// Function BP_EventSwitchPlayer.BP_EventSwitchPlayer_C.LoadAsset
// 0x00D0 (0x00D0 - 0x0000)
struct BP_EventSwitchPlayer_C_LoadAsset final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         AssetList;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	EPlayerID                                     PlayerId;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846B[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                LoadObject;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_Array_Get_Item;                           // 0x0038(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846C[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 CallFunc_Array_Get_Item_1;                         // 0x0070(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EventSwitchPlayer_C_LoadAsset) == 0x000008, "Wrong alignment on BP_EventSwitchPlayer_C_LoadAsset");
static_assert(sizeof(BP_EventSwitchPlayer_C_LoadAsset) == 0x0000D0, "Wrong size on BP_EventSwitchPlayer_C_LoadAsset");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, AssetList) == 0x000000, "Member 'BP_EventSwitchPlayer_C_LoadAsset::AssetList' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, PlayerId) == 0x000010, "Member 'BP_EventSwitchPlayer_C_LoadAsset::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, IsValid) == 0x000011, "Member 'BP_EventSwitchPlayer_C_LoadAsset::IsValid' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, Object) == 0x000018, "Member 'BP_EventSwitchPlayer_C_LoadAsset::Object' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, LoadObject) == 0x000020, "Member 'BP_EventSwitchPlayer_C_LoadAsset::LoadObject' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000028, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00002C, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000030, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x000034, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue) == 0x000060, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_IsValid_ReturnValue_1) == 0x000069, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000098, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000C8, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EventSwitchPlayer_C_LoadAsset, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000C9, "Member 'BP_EventSwitchPlayer_C_LoadAsset::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

}

