#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HitCheckConvertFuncLibrary

#include "Basic.hpp"

#include "CollisionValueDataBP_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CommonHitResultBP_structs.hpp"
#include "SkillParameter_structs.hpp"
#include "CollisionRumtimeDataBP_structs.hpp"
#include "CollitionConditionDataBP_structs.hpp"
#include "CollisionValueKindBP_structs.hpp"
#include "ConditionKindBP_structs.hpp"
#include "CollisionElementDataBP_structs.hpp"
#include "ElementKindBP_structs.hpp"
#include "CollisionHitTeamBP_structs.hpp"
#include "DamageKindBP_structs.hpp"
#include "CollisionCommonInfoBP_structs.hpp"
#include "AttackCollisionInfoBP_structs.hpp"


namespace SDK::Params
{

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ElementKindToC
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ElementKindToC final
{
public:
	ElementKindBP                                 In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5309[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ElementKindToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ElementKindToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ElementKindToC) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_ElementKindToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_4) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_5) == 0x000016, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, Temp_byte_Variable_6) == 0x000017, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToC, K2Node_Select_Default) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToC::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ConditionKindToC
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ConditionKindToC final
{
public:
	EConditionKindBP                              In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ConditionKindToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ConditionKindToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ConditionKindToC) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_ConditionKindToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_4) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_5) == 0x000016, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, Temp_byte_Variable_6) == 0x000017, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToC, K2Node_Select_Default) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToC::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionValueKindToC
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionValueKindToC final
{
public:
	ECollisionValueKindBP                         In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionValueKind                         Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionValueKindBP                         Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionValueKind                         Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionValueKind                         K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionValueKindToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionValueKindToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToC, K2Node_Select_Default) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToC::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.DamageKindToC
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_DamageKindToC final
{
public:
	EDamageKindBP                                 In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCDamageKind                                 Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageKindBP                                 Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCDamageKind                                 Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCDamageKind                                 Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCDamageKind                                 K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_DamageKindToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_DamageKindToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_DamageKindToC) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_DamageKindToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToC, K2Node_Select_Default) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToC::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionHitTeamToC
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionHitTeamToC final
{
public:
	ECollisionHitTeamBP                           In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionHitTeamToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionHitTeamToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToC, K2Node_Select_Default) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToC::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionCommonInfoToC
// 0x0210 (0x0210 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC final
{
public:
	struct FCollisionCommonInfoBP                 In;                                                // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionCommonInfo                 Out;                                               // 0x0080(0x0070)(Parm, OutParm)
	TArray<struct FHCCollisionValueData>          ValueDatas_l;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FHCCollisionConditionData>      ConditionDatas_l;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FHCCollisionElementData>        ElementDatas_l;                                    // 0x0110(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           CallFunc_CollisionHitTeamToC_Out;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530E[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCDamageKind                                 CallFunc_DamageKindToC_Out;                        // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_530F[0x2];                                     // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollitionConditionDataBP              CallFunc_Array_Get_Item;                           // 0x0144(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionValueDataBP                  CallFunc_Array_Get_Item_1;                         // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionConditionData              CallFunc_ConditionDataToC_Out;                     // 0x0154(0x0008)(NoDestructor)
	struct FHCCollisionValueData                  CallFunc_CollisionValueDataToC_Out;                // 0x015C(0x0008)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5310[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionElementDataBP                CallFunc_Array_Get_Item_2;                         // 0x0174(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionElementData                CallFunc_ElementDataToC_Out;                       // 0x0180(0x0008)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5311[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5312[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 K2Node_MakeStruct_HCCollisionCommonInfo;           // 0x01A0(0x0070)()
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC) == 0x000210, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, __WorldContext) == 0x000078, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Out) == 0x000080, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, ValueDatas_l) == 0x0000F0, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::ValueDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, ConditionDatas_l) == 0x000100, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::ConditionDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, ElementDatas_l) == 0x000110, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::ElementDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Loop_Counter_Variable) == 0x000120, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Add_IntInt_ReturnValue) == 0x000124, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_CollisionHitTeamToC_Out) == 0x000128, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_CollisionHitTeamToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Length_ReturnValue) == 0x00012C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Length_ReturnValue_1) == 0x000130, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Length_ReturnValue_2) == 0x000134, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Less_IntInt_ReturnValue) == 0x000138, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_DamageKindToC_Out) == 0x000139, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_DamageKindToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Array_Index_Variable) == 0x00013C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Array_Index_Variable_1) == 0x000140, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Get_Item) == 0x000144, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Get_Item_1) == 0x00014C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_ConditionDataToC_Out) == 0x000154, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_ConditionDataToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_CollisionValueDataToC_Out) == 0x00015C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_CollisionValueDataToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Loop_Counter_Variable_1) == 0x000164, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Less_IntInt_ReturnValue_1) == 0x000168, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Add_IntInt_ReturnValue_1) == 0x00016C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Array_Index_Variable_2) == 0x000170, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Get_Item_2) == 0x000174, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Add_ReturnValue) == 0x00017C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_ElementDataToC_Out) == 0x000180, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_ElementDataToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, Temp_int_Loop_Counter_Variable_2) == 0x000188, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Add_ReturnValue_1) == 0x00018C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Less_IntInt_ReturnValue_2) == 0x000190, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Add_IntInt_ReturnValue_2) == 0x000194, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, CallFunc_Array_Add_ReturnValue_2) == 0x000198, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC, K2Node_MakeStruct_HCCollisionCommonInfo) == 0x0001A0, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToC::K2Node_MakeStruct_HCCollisionCommonInfo' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ElementDataToC
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ElementDataToC final
{
public:
	struct FCollisionElementDataBP                In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionElementData                Out;                                               // 0x0010(0x0008)(Parm, OutParm, NoDestructor)
	EHCElementKind                                CallFunc_ElementKindToC_Out;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5313[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionElementData                K2Node_MakeStruct_HCCollisionElementData;          // 0x0020(0x0008)(NoDestructor)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ElementDataToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ElementDataToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ElementDataToC) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_ElementDataToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, CallFunc_ElementKindToC_Out) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::CallFunc_ElementKindToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToC, K2Node_MakeStruct_HCCollisionElementData) == 0x000020, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToC::K2Node_MakeStruct_HCCollisionElementData' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ConditionDataToC
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ConditionDataToC final
{
public:
	struct FCollitionConditionDataBP              In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionConditionData              Out;                                               // 0x0010(0x0008)(Parm, OutParm, NoDestructor)
	EConditionKind                                CallFunc_ConditionKindToC_Out;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5314[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionConditionData              K2Node_MakeStruct_HCCollisionConditionData;        // 0x0020(0x0008)(NoDestructor)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ConditionDataToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ConditionDataToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ConditionDataToC) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_ConditionDataToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, CallFunc_ConditionKindToC_Out) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::CallFunc_ConditionKindToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToC, K2Node_MakeStruct_HCCollisionConditionData) == 0x000020, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToC::K2Node_MakeStruct_HCCollisionConditionData' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionValueDataToC
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionValueDataToC final
{
public:
	struct FCollisionValueDataBP                  In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionValueData                  Out;                                               // 0x0010(0x0008)(Parm, OutParm, NoDestructor)
	EHCCollisionValueKind                         CallFunc_CollisionValueKindToC_Out;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5315[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionValueData                  K2Node_MakeStruct_HCCollisionValueData;            // 0x001C(0x0008)(NoDestructor)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionValueDataToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionValueDataToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC, CallFunc_CollisionValueKindToC_Out) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToC::CallFunc_CollisionValueKindToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToC, K2Node_MakeStruct_HCCollisionValueData) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToC::K2Node_MakeStruct_HCCollisionValueData' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.AttackCollisionInfoToC
// 0x0820 (0x0820 - 0x0000)
struct HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC final
{
public:
	struct FAttackCollisionInfoBP                 In;                                                // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class AActor*                                 AttackOwner;                                       // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCAttackCollisionInfo                 Out;                                               // 0x00D0(0x0280)(Parm, OutParm)
	struct FHCCollisionCommonInfo                 CallFunc_CollisionCommonInfoToC_Out;               // 0x0350(0x0070)()
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo; // 0x03C0(0x00F0)()
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo_1; // 0x04B0(0x00F0)()
	struct FHCAttackCollisionInfo                 K2Node_MakeStruct_HCAttackCollisionInfo;           // 0x05A0(0x0280)()
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC) == 0x000820, "Wrong size on HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, AttackOwner) == 0x0000C0, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::AttackOwner' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, __WorldContext) == 0x0000C8, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, Out) == 0x0000D0, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, CallFunc_CollisionCommonInfoToC_Out) == 0x000350, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::CallFunc_CollisionCommonInfoToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo) == 0x0003C0, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo_1) == 0x0004B0, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::CallFunc_GetSkillParameterTableWithReplace_SkillCommonInfo_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC, K2Node_MakeStruct_HCAttackCollisionInfo) == 0x0005A0, "Member 'HitCheckConvertFuncLibrary_C_AttackCollisionInfoToC::K2Node_MakeStruct_HCAttackCollisionInfo' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.HitResultToBP
// 0x0568 (0x0568 - 0x0000)
struct HitCheckConvertFuncLibrary_C_HitResultToBP final
{
public:
	struct FHCHitResult                           In;                                                // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UObject*                                __WorldContext;                                    // 0x01C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCommonHitResultBP                     Out;                                               // 0x01C8(0x0190)(Parm, OutParm, HasGetValueTypeHash)
	struct FCollisionCommonInfoBP                 CallFunc_CollisionCommonInfoToBP_out;              // 0x0358(0x0078)(HasGetValueTypeHash)
	struct FCollisionRumtimeDataBP                CallFunc_RuntimeDataToBP_Out;                      // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCommonHitResultBP                     K2Node_MakeStruct_CommonHitResultBP;               // 0x03D8(0x0190)(HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_HitResultToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_HitResultToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_HitResultToBP) == 0x000568, "Wrong size on HitCheckConvertFuncLibrary_C_HitResultToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, __WorldContext) == 0x0001C0, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, Out) == 0x0001C8, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, CallFunc_CollisionCommonInfoToBP_out) == 0x000358, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::CallFunc_CollisionCommonInfoToBP_out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, CallFunc_RuntimeDataToBP_Out) == 0x0003D0, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::CallFunc_RuntimeDataToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToBP, K2Node_MakeStruct_CommonHitResultBP) == 0x0003D8, "Member 'HitCheckConvertFuncLibrary_C_HitResultToBP::K2Node_MakeStruct_CommonHitResultBP' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionCommonInfoToBP
// 0x0230 (0x0230 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP final
{
public:
	struct FHCCollisionCommonInfo                 In;                                                // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionCommonInfoBP                 Out;                                               // 0x0078(0x0078)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FCollisionValueDataBP>          ValueDatas_l;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FCollitionConditionDataBP>      ConditionDatas_l;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FCollisionElementDataBP>        ElementDatas_l;                                    // 0x0110(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           CallFunc_CollisionHitTeamToBP_Out;                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5316[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDamageKindBP                                 CallFunc_DamageKindToBP_Out;                       // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5317[0x2];                                     // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionConditionData              CallFunc_Array_Get_Item;                           // 0x0144(0x0008)(NoDestructor)
	struct FHCCollisionValueData                  CallFunc_Array_Get_Item_1;                         // 0x014C(0x0008)(NoDestructor)
	struct FCollitionConditionDataBP              CallFunc_ConditionDataToBP_Out;                    // 0x0154(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionValueDataBP                  CallFunc_CollisionValueDataToBP_Out;               // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5318[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5319[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCollisionElementDataBP>        K2Node_MakeArray_Array;                            // 0x0178(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHCCollisionElementData                CallFunc_Array_Get_Item_2;                         // 0x0188(0x0008)(NoDestructor)
	struct FCollisionElementDataBP                CallFunc_ElementDataToBP_Out;                      // 0x0190(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531A[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionCommonInfoBP                 K2Node_MakeStruct_CollisionCommonInfoBP;           // 0x01A0(0x0078)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531B[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP) == 0x000230, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, __WorldContext) == 0x000070, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Out) == 0x000078, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, ValueDatas_l) == 0x0000F0, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::ValueDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, ConditionDatas_l) == 0x000100, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::ConditionDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, ElementDatas_l) == 0x000110, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::ElementDatas_l' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Loop_Counter_Variable) == 0x000120, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Add_IntInt_ReturnValue) == 0x000124, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_CollisionHitTeamToBP_Out) == 0x000128, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_CollisionHitTeamToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Length_ReturnValue) == 0x00012C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Length_ReturnValue_1) == 0x000130, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Length_ReturnValue_2) == 0x000134, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Less_IntInt_ReturnValue) == 0x000138, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_DamageKindToBP_Out) == 0x000139, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_DamageKindToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Array_Index_Variable) == 0x00013C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Array_Index_Variable_1) == 0x000140, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Get_Item) == 0x000144, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Get_Item_1) == 0x00014C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_ConditionDataToBP_Out) == 0x000154, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_ConditionDataToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_CollisionValueDataToBP_Out) == 0x00015C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_CollisionValueDataToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Loop_Counter_Variable_1) == 0x000164, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Less_IntInt_ReturnValue_1) == 0x000168, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Add_IntInt_ReturnValue_1) == 0x00016C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Array_Index_Variable_2) == 0x000170, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, K2Node_MakeArray_Array) == 0x000178, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Get_Item_2) == 0x000188, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_ElementDataToBP_Out) == 0x000190, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_ElementDataToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_MakeLiteralByte_ReturnValue) == 0x000198, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, K2Node_MakeStruct_CollisionCommonInfoBP) == 0x0001A0, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::K2Node_MakeStruct_CollisionCommonInfoBP' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Add_ReturnValue) == 0x000218, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Add_ReturnValue_1) == 0x00021C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Array_Add_ReturnValue_2) == 0x000220, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, Temp_int_Loop_Counter_Variable_2) == 0x000224, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Less_IntInt_ReturnValue_2) == 0x000228, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP, CallFunc_Add_IntInt_ReturnValue_2) == 0x00022C, "Member 'HitCheckConvertFuncLibrary_C_CollisionCommonInfoToBP::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.DamageKindToBP
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_DamageKindToBP final
{
public:
	EHCDamageKind                                 In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageKindBP                                 Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCDamageKind                                 Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageKindBP                                 Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageKindBP                                 Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageKindBP                                 K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_DamageKindToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_DamageKindToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_DamageKindToBP) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_DamageKindToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_DamageKindToBP, K2Node_Select_Default) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_DamageKindToBP::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionHitTeamToBP
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP final
{
public:
	EHCCollisionHitTeam                           In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionHitTeam                           Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionHitTeamBP                           K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP, K2Node_Select_Default) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_CollisionHitTeamToBP::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ElementKindToBP
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ElementKindToBP final
{
public:
	EHCElementKind                                In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCElementKind                                Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ElementKindToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ElementKindToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ElementKindToBP) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_ElementKindToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_4) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_5) == 0x000016, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, Temp_byte_Variable_6) == 0x000017, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementKindToBP, K2Node_Select_Default) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ElementKindToBP::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ConditionKindToBP
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ConditionKindToBP final
{
public:
	EConditionKind                                In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Out;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKind                                Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ConditionKindToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ConditionKindToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ConditionKindToBP) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_ConditionKindToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_2) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_3) == 0x000014, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_4) == 0x000015, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_5) == 0x000016, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, Temp_byte_Variable_6) == 0x000017, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionKindToBP, K2Node_Select_Default) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ConditionKindToBP::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionValueKindToBP
// 0x0018 (0x0018 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionValueKindToBP final
{
public:
	EHCCollisionValueKind                         NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5320[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionValueKindBP                         NewParam1;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCCollisionValueKind                         Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionValueKindBP                         Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionValueKindBP                         K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionValueKindToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP) == 0x000018, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionValueKindToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, NewParam) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::NewParam' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, NewParam1) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::NewParam1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, Temp_byte_Variable) == 0x000011, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, Temp_byte_Variable_1) == 0x000012, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueKindToBP, K2Node_Select_Default) == 0x000013, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueKindToBP::K2Node_Select_Default' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ElementDataToBP
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ElementDataToBP final
{
public:
	struct FHCCollisionElementData                In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionElementDataBP                Out;                                               // 0x0010(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ElementKindBP                                 CallFunc_ElementKindToBP_Out;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5321[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionElementDataBP                K2Node_MakeStruct_CollisionElementDataBP;          // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ElementDataToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ElementDataToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ElementDataToBP) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_ElementDataToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, CallFunc_ElementKindToBP_Out) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::CallFunc_ElementKindToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ElementDataToBP, K2Node_MakeStruct_CollisionElementDataBP) == 0x000020, "Member 'HitCheckConvertFuncLibrary_C_ElementDataToBP::K2Node_MakeStruct_CollisionElementDataBP' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.ConditionDataToBP
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_ConditionDataToBP final
{
public:
	struct FHCCollisionConditionData              In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollitionConditionDataBP              Out;                                               // 0x0010(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConditionKindBP                              CallFunc_ConditionKindToBP_Out;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5322[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollitionConditionDataBP              K2Node_MakeStruct_CollitionConditionDataBP;        // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_ConditionDataToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_ConditionDataToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_ConditionDataToBP) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_ConditionDataToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, CallFunc_ConditionKindToBP_Out) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::CallFunc_ConditionKindToBP_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_ConditionDataToBP, K2Node_MakeStruct_CollitionConditionDataBP) == 0x000020, "Member 'HitCheckConvertFuncLibrary_C_ConditionDataToBP::K2Node_MakeStruct_CollitionConditionDataBP' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.CollisionValueDataToBP
// 0x0028 (0x0028 - 0x0000)
struct HitCheckConvertFuncLibrary_C_CollisionValueDataToBP final
{
public:
	struct FHCCollisionValueData                  In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionValueDataBP                  Out;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionValueKindBP                         CallFunc_CollisionValueKindToBP_NewParam1;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5323[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionValueDataBP                  K2Node_MakeStruct_CollisionValueDataBP;            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_CollisionValueDataToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP) == 0x000028, "Wrong size on HitCheckConvertFuncLibrary_C_CollisionValueDataToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP, CallFunc_CollisionValueKindToBP_NewParam1) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToBP::CallFunc_CollisionValueKindToBP_NewParam1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_CollisionValueDataToBP, K2Node_MakeStruct_CollisionValueDataBP) == 0x00001C, "Member 'HitCheckConvertFuncLibrary_C_CollisionValueDataToBP::K2Node_MakeStruct_CollisionValueDataBP' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.RuntimeDataToBP
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_RuntimeDataToBP final
{
public:
	struct FHCRuntimeData                         In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionRumtimeDataBP                Out;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionRumtimeDataBP                K2Node_MakeStruct_CollisionRumtimeDataBP;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_RuntimeDataToBP");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_RuntimeDataToBP");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToBP::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToBP::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToBP, K2Node_MakeStruct_CollisionRumtimeDataBP) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToBP::K2Node_MakeStruct_CollisionRumtimeDataBP' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.HitResultToC
// 0x0590 (0x0590 - 0x0000)
struct HitCheckConvertFuncLibrary_C_HitResultToC final
{
public:
	struct FCommonHitResultBP                     In;                                                // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0190(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           Out;                                               // 0x0198(0x01C0)(Parm, OutParm, ContainsInstancedReference)
	struct FHCCollisionCommonInfo                 CallFunc_CollisionCommonInfoToC_Out;               // 0x0358(0x0070)()
	struct FHCRuntimeData                         CallFunc_RuntimeDataToC_Out;                       // 0x03C8(0x0008)(NoDestructor)
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x03D0(0x01C0)(ContainsInstancedReference)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_HitResultToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_HitResultToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_HitResultToC) == 0x000590, "Wrong size on HitCheckConvertFuncLibrary_C_HitResultToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, __WorldContext) == 0x000190, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, Out) == 0x000198, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, CallFunc_CollisionCommonInfoToC_Out) == 0x000358, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::CallFunc_CollisionCommonInfoToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, CallFunc_RuntimeDataToC_Out) == 0x0003C8, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::CallFunc_RuntimeDataToC_Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_HitResultToC, K2Node_MakeStruct_HCHitResult) == 0x0003D0, "Member 'HitCheckConvertFuncLibrary_C_HitResultToC::K2Node_MakeStruct_HCHitResult' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.RuntimeDataToC
// 0x0020 (0x0020 - 0x0000)
struct HitCheckConvertFuncLibrary_C_RuntimeDataToC final
{
public:
	struct FCollisionRumtimeDataBP                In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCRuntimeData                         Out;                                               // 0x0010(0x0008)(Parm, OutParm, NoDestructor)
	struct FHCRuntimeData                         K2Node_MakeStruct_HCRuntimeData;                   // 0x0018(0x0008)(NoDestructor)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_RuntimeDataToC) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_RuntimeDataToC");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_RuntimeDataToC) == 0x000020, "Wrong size on HitCheckConvertFuncLibrary_C_RuntimeDataToC");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToC, In) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToC::In' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToC, __WorldContext) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToC::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToC, Out) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToC::Out' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_RuntimeDataToC, K2Node_MakeStruct_HCRuntimeData) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_RuntimeDataToC::K2Node_MakeStruct_HCRuntimeData' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.GetSkillParameterTable
// 0x0308 (0x0308 - 0x0000)
struct HitCheckConvertFuncLibrary_C_GetSkillParameterTable final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillParam;                                        // 0x0018(0x00F0)(Parm, OutParm)
	class FName                                   DataName;                                          // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTable;                                         // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillParameter                        Data;                                              // 0x0118(0x00F0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5324[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillParameter                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0210(0x00F0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_GetSkillParameterTable");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable) == 0x000308, "Wrong size on HitCheckConvertFuncLibrary_C_GetSkillParameterTable");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, Table) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::Table' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, Param_Name) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::Param_Name' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, __WorldContext) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, SkillParam) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::SkillParam' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, DataName) == 0x000108, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::DataName' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, DataTable) == 0x000110, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::DataTable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, Data) == 0x000118, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::Data' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, CallFunc_IsValid_ReturnValue) == 0x000208, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000210, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000300, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function HitCheckConvertFuncLibrary.HitCheckConvertFuncLibrary_C.GetSkillParameterTableWithReplace
// 0x0500 (0x0500 - 0x0000)
struct HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace final
{
public:
	class UDataTable*                             OrgTable;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillCommonInfo;                                   // 0x0020(0x00F0)(Parm, OutParm)
	bool                                          LbFoundReplace;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5325[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillParameter                        LSkillParam;                                       // 0x0118(0x00F0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     LResultInfo;                                       // 0x0208(0x00F0)(Edit, BlueprintVisible)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5326[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCharacterReplaceSkillTable_SkillTable; // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillParameter                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0318(0x00F0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5327[0x5];                                     // 0x040B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_GetSkillParameterTable_SkillParam;        // 0x0410(0x00F0)()
};
static_assert(alignof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace) == 0x000008, "Wrong alignment on HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace");
static_assert(sizeof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace) == 0x000500, "Wrong size on HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, OrgTable) == 0x000000, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::OrgTable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, SkillName) == 0x000008, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::SkillName' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, OwnerActor) == 0x000010, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::OwnerActor' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, __WorldContext) == 0x000018, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::__WorldContext' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, SkillCommonInfo) == 0x000020, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::SkillCommonInfo' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, LbFoundReplace) == 0x000110, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::LbFoundReplace' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, LSkillParam) == 0x000118, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::LSkillParam' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, LResultInfo) == 0x000208, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::LResultInfo' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0002F8, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, K2Node_DynamicCast_bSuccess) == 0x000308, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_GetCharacterReplaceSkillTable_SkillTable) == 0x000310, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_GetCharacterReplaceSkillTable_SkillTable' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_GetDataTableRowFromName_OutRow) == 0x000318, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000408, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_IsValid_ReturnValue) == 0x000409, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_IsValid_ReturnValue_1) == 0x00040A, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace, CallFunc_GetSkillParameterTable_SkillParam) == 0x000410, "Member 'HitCheckConvertFuncLibrary_C_GetSkillParameterTableWithReplace::CallFunc_GetSkillParameterTable_SkillParam' has a wrong offset!");

}

