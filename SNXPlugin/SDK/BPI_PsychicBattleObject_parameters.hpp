#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PsychicBattleObject

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.SetMeshes
// 0x0010 (0x0010 - 0x0000)
struct BPI_PsychicBattleObject_C_SetMeshes final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp0100;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkelMeshComp0200;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_SetMeshes) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_SetMeshes");
static_assert(sizeof(BPI_PsychicBattleObject_C_SetMeshes) == 0x000010, "Wrong size on BPI_PsychicBattleObject_C_SetMeshes");
static_assert(offsetof(BPI_PsychicBattleObject_C_SetMeshes, SkelMeshComp0100) == 0x000000, "Member 'BPI_PsychicBattleObject_C_SetMeshes::SkelMeshComp0100' has a wrong offset!");
static_assert(offsetof(BPI_PsychicBattleObject_C_SetMeshes, SkelMeshComp0200) == 0x000008, "Member 'BPI_PsychicBattleObject_C_SetMeshes::SkelMeshComp0200' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.SetMontages
// 0x0020 (0x0020 - 0x0000)
struct BPI_PsychicBattleObject_C_SetMontages final
{
public:
	TArray<class UAnimMontage*>                   Animation0100;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Animation0200;                                     // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_SetMontages) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_SetMontages");
static_assert(sizeof(BPI_PsychicBattleObject_C_SetMontages) == 0x000020, "Wrong size on BPI_PsychicBattleObject_C_SetMontages");
static_assert(offsetof(BPI_PsychicBattleObject_C_SetMontages, Animation0100) == 0x000000, "Member 'BPI_PsychicBattleObject_C_SetMontages::Animation0100' has a wrong offset!");
static_assert(offsetof(BPI_PsychicBattleObject_C_SetMontages, Animation0200) == 0x000010, "Member 'BPI_PsychicBattleObject_C_SetMontages::Animation0200' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.CreateMeshes
// 0x0010 (0x0010 - 0x0000)
struct BPI_PsychicBattleObject_C_CreateMeshes final
{
public:
	class USkeletalMesh*                          SkelMesh0100;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          SkelMesh0200;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_CreateMeshes) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_CreateMeshes");
static_assert(sizeof(BPI_PsychicBattleObject_C_CreateMeshes) == 0x000010, "Wrong size on BPI_PsychicBattleObject_C_CreateMeshes");
static_assert(offsetof(BPI_PsychicBattleObject_C_CreateMeshes, SkelMesh0100) == 0x000000, "Member 'BPI_PsychicBattleObject_C_CreateMeshes::SkelMesh0100' has a wrong offset!");
static_assert(offsetof(BPI_PsychicBattleObject_C_CreateMeshes, SkelMesh0200) == 0x000008, "Member 'BPI_PsychicBattleObject_C_CreateMeshes::SkelMesh0200' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.AppendMesh
// 0x0010 (0x0010 - 0x0000)
struct BPI_PsychicBattleObject_C_AppendMesh final
{
public:
	class UStaticMesh*                            Mesh0100;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh0200;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_AppendMesh) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_AppendMesh");
static_assert(sizeof(BPI_PsychicBattleObject_C_AppendMesh) == 0x000010, "Wrong size on BPI_PsychicBattleObject_C_AppendMesh");
static_assert(offsetof(BPI_PsychicBattleObject_C_AppendMesh, Mesh0100) == 0x000000, "Member 'BPI_PsychicBattleObject_C_AppendMesh::Mesh0100' has a wrong offset!");
static_assert(offsetof(BPI_PsychicBattleObject_C_AppendMesh, Mesh0200) == 0x000008, "Member 'BPI_PsychicBattleObject_C_AppendMesh::Mesh0200' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.PlayPhaseAnimation
// 0x0001 (0x0001 - 0x0000)
struct BPI_PsychicBattleObject_C_PlayPhaseAnimation final
{
public:
	EPsychicBattleAnimationPhaseType              BattleAnimationPhase;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_PlayPhaseAnimation) == 0x000001, "Wrong alignment on BPI_PsychicBattleObject_C_PlayPhaseAnimation");
static_assert(sizeof(BPI_PsychicBattleObject_C_PlayPhaseAnimation) == 0x000001, "Wrong size on BPI_PsychicBattleObject_C_PlayPhaseAnimation");
static_assert(offsetof(BPI_PsychicBattleObject_C_PlayPhaseAnimation, BattleAnimationPhase) == 0x000000, "Member 'BPI_PsychicBattleObject_C_PlayPhaseAnimation::BattleAnimationPhase' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.SetUserID
// 0x0001 (0x0001 - 0x0000)
struct BPI_PsychicBattleObject_C_SetUserID final
{
public:
	EPlayerID                                     UserPlayerID;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_SetUserID) == 0x000001, "Wrong alignment on BPI_PsychicBattleObject_C_SetUserID");
static_assert(sizeof(BPI_PsychicBattleObject_C_SetUserID) == 0x000001, "Wrong size on BPI_PsychicBattleObject_C_SetUserID");
static_assert(offsetof(BPI_PsychicBattleObject_C_SetUserID, UserPlayerID) == 0x000000, "Member 'BPI_PsychicBattleObject_C_SetUserID::UserPlayerID' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.GetAppendMeshPlayer
// 0x0008 (0x0008 - 0x0000)
struct BPI_PsychicBattleObject_C_GetAppendMeshPlayer final
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_GetAppendMeshPlayer) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_GetAppendMeshPlayer");
static_assert(sizeof(BPI_PsychicBattleObject_C_GetAppendMeshPlayer) == 0x000008, "Wrong size on BPI_PsychicBattleObject_C_GetAppendMeshPlayer");
static_assert(offsetof(BPI_PsychicBattleObject_C_GetAppendMeshPlayer, MeshComp) == 0x000000, "Member 'BPI_PsychicBattleObject_C_GetAppendMeshPlayer::MeshComp' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.GetAppendMeshEnemy
// 0x0008 (0x0008 - 0x0000)
struct BPI_PsychicBattleObject_C_GetAppendMeshEnemy final
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_GetAppendMeshEnemy) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_GetAppendMeshEnemy");
static_assert(sizeof(BPI_PsychicBattleObject_C_GetAppendMeshEnemy) == 0x000008, "Wrong size on BPI_PsychicBattleObject_C_GetAppendMeshEnemy");
static_assert(offsetof(BPI_PsychicBattleObject_C_GetAppendMeshEnemy, MeshComp) == 0x000000, "Member 'BPI_PsychicBattleObject_C_GetAppendMeshEnemy::MeshComp' has a wrong offset!");

// Function BPI_PsychicBattleObject.BPI_PsychicBattleObject_C.ChangeAppendMesh
// 0x0010 (0x0010 - 0x0000)
struct BPI_PsychicBattleObject_C_ChangeAppendMesh final
{
public:
	class UStaticMesh*                            Mesh0100;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh0200;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PsychicBattleObject_C_ChangeAppendMesh) == 0x000008, "Wrong alignment on BPI_PsychicBattleObject_C_ChangeAppendMesh");
static_assert(sizeof(BPI_PsychicBattleObject_C_ChangeAppendMesh) == 0x000010, "Wrong size on BPI_PsychicBattleObject_C_ChangeAppendMesh");
static_assert(offsetof(BPI_PsychicBattleObject_C_ChangeAppendMesh, Mesh0100) == 0x000000, "Member 'BPI_PsychicBattleObject_C_ChangeAppendMesh::Mesh0100' has a wrong offset!");
static_assert(offsetof(BPI_PsychicBattleObject_C_ChangeAppendMesh, Mesh0200) == 0x000008, "Member 'BPI_PsychicBattleObject_C_ChangeAppendMesh::Mesh0200' has a wrong offset!");

}

