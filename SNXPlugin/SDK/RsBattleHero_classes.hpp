#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RsBattleHero

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "F_SASInputData_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "EPsychicDitherType_structs.hpp"
#include "EPlayerPsychicActionParam_structs.hpp"
#include "RSBattlePlayer_classes.hpp"
#include "EPlayerUseItemSpeed_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass RsBattleHero.RsBattleHero_C
// 0x02E0 (0x1FD0 - 0x1CF0)
class ARsBattleHero_C final : public ARSBattlePlayer_C
{
public:
	uint8                                         Pad_5484[0x4];                                     // 0x1CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_RsBattleHero_C;                     // 0x1CE8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_NexusDriveComponent_C*              BP_NexusDriveComponent;                            // 0x1CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerPsychicObjectComponent_C*     BP_PlayerPsychicObjectComponent;                   // 0x1CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerSequencerComponent_C*         BP_PlayerSequencerComponent;                       // 0x1D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamagePostEffectComponent_C*           DamagePostEffectComponent;                         // 0x1D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SAS_PlayerState_C*                  BP_SAS_PlayerState;                                // 0x1D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerEmissionComponent_C*          BP_PlayerEmissionComponent;                        // 0x1D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPsychicGrabComponent_C*                PsychicGrabComponent;                              // 0x1D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EnpcSASTimeLine__Direction_40BE0B2848433BB641F9E4A9E97A4077; // 0x1D28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5485[0x7];                                     // 0x1D29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnpcSASTimeLine;                                   // 0x1D30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicThrowActionTime;                            // 0x1D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicCaptureActionTime;                          // 0x1D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIK_Init;                                         // 0x1D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5486[0x3];                                     // 0x1D41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               HandRotator;                                       // 0x1D44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                HandOffset;                                        // 0x1D50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AfterTelepoInvincibleTimer;                        // 0x1D5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   AfterTelepoInvincibleClaimantName;                 // 0x1D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAnimOverrideSASColor;                           // 0x1D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5487[0x3];                                     // 0x1D71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             SASSeeThroughTimer;                                // 0x1D74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FName>                           HideSASOutlineClaimantList;                        // 0x1D80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchPsychicUniqueSuccess;                      // 0x1D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatchPsychicCaptureCompleted;                   // 0x1DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatchPsychicCaptureCancel;                      // 0x1DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatchPsychicComboAttack;                        // 0x1DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSet<class FName>                             PsychicEffectClaimantList;                         // 0x1DD0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         UniquePsychicBonusLevel;                           // 0x1E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPrecedeInputPsychic;                              // 0x1E24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPrecedeInputPsychicUnique;                        // 0x1E25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5488[0x2];                                     // 0x1E26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FF_SASInputData>                SASInputData;                                      // 0x1E28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AMapGimmickObject*                      CurrentMapGimmickObject;                           // 0x1E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableCaptureMapGimmick;                          // 0x1E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPayPsychicCost;                                   // 0x1E41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicComboPostProcess;                          // 0x1E42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelMapGimmick;                                 // 0x1E43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   ClaimantNameDrive;                                 // 0x1E44(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AutoStealthIntervalTimer;                          // 0x1E4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             AutoStealthTimer;                                  // 0x1E58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             CoverDamageIntervalTimer;                          // 0x1E64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAction_AirJump;                               // 0x1E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAction_BlowRecovery;                          // 0x1E71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAttack_AirCombo1;                             // 0x1E72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAttack_AirLongPressAttack;                    // 0x1E73(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAttack_WeaponCombo1;                          // 0x1E74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAttack_WeaponCombo2;                          // 0x1E75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkillAttack_PsychicSlam;                           // 0x1E76(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5489[0x1];                                     // 0x1E77(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAttack_ChargeAttackLV;                        // 0x1E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_WeaponCrashScale;                            // 0x1E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_PsychicCrashScale;                           // 0x1E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_DownDamageUp;                                // 0x1E84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAttack_BrainFieldThrowLevel;                  // 0x1E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAttack_BrainFieldSwingLevel;                  // 0x1E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAttack_BrainFieldChargeLevel;                 // 0x1E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBeginPsychicDither;                               // 0x1E94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_548A[0x3];                                     // 0x1E95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PsychicDitherIgnoreList;                           // 0x1E98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchPsychicUniqueInputStart;                   // 0x1EA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PsychicDitherTimer;                                // 0x1EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicDitherTimerMax;                             // 0x1EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchPsychicUniqueEnd;                          // 0x1EC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PsychicDitherEndTime;                              // 0x1ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_548B[0x4];                                     // 0x1ED4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SeeThroughPostProcessClaimantNameList;             // 0x1ED8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Param_CancelSASCostRate;                           // 0x1EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SASStackNum;                                       // 0x1EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchPsychicUniqueAimBegin;                     // 0x1EF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bCaptureTypeCombo;                                 // 0x1F00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SASKind                                     EnpcSASDirectionKind;                              // 0x1F01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_548C[0x6];                                     // 0x1F02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAssassinAttackData                    Param_AssassinAttack;                              // 0x1F08(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Skill_AerialAttackPsychicGaugeUp;                  // 0x1F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skill_PinchStatusUp;                               // 0x1F4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_548D[0x3];                                     // 0x1F4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Skill_DriveCrashScale;                             // 0x1F50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkillAction_NoStockBrainField;                     // 0x1F54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreBrainFieldStock;                            // 0x1F55(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_548E[0x2];                                     // 0x1F56(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   BrainFieldBackGroundVoiceHandle;                   // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_PinchAttackUpRate;                           // 0x1F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_PinchDamageDownRate;                         // 0x1F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skill_BrainFieldOverKill;                          // 0x1F68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Skill_AutoPickUp;                                  // 0x1F69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_548F[0x2];                                     // 0x1F6A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAttack_PsychicComboAddLevel;                  // 0x1F6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAttack_AerialPsychicComboAddLevel;            // 0x1F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnpcUseDuelPole;                                 // 0x1F74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychicInputButtonPressed;                        // 0x1F75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SASKindNative                               LastUseSASKind;                                    // 0x1F76(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5490[0x1];                                     // 0x1F77(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastUseSASCount;                                   // 0x1F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5491[0x4];                                     // 0x1F7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   PsychicComboCaptureSEHandle;                       // 0x1F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_JustDodgeUpRecoveryValue;                    // 0x1F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5492[0x4];                                     // 0x1F8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillSASRecoverData                   Skill_SasRecover;                                  // 0x1F90(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsEnpcSasCamera;                                   // 0x1FA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnpcSasTimeDilation;                             // 0x1FA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Skill_OverkillBonus;                               // 0x1FAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5493[0x1];                                     // 0x1FAB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAction_AirDodgeCount;                         // 0x1FAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_BrainFieldDamageCut;                         // 0x1FB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SasRecastRecoveryDelayTime;                        // 0x1FB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPsychicActionParam                     LastFlyingPsychicPattern;                          // 0x1FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            LastBrainFieldChargeAttackInputKind;               // 0x1FB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5494[0x2];                                     // 0x1FBA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnpcSasTimeDilationTimer;                          // 0x1FBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAttack_BackStepAttackCount;                   // 0x1FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSasTelepoAttackAirResetOnce;                      // 0x1FC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTelepoComboSetting;                               // 0x1FC5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTelepoComboSettingAir;                            // 0x1FC6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5495[0x1];                                     // 0x1FC7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackupManualAssaultVisionSasRate;                  // 0x1FC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreManualHologramAttack;                       // 0x1FCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void DispatchPsychicUniqueSuccess__DelegateSignature(class UAnimMontage* Montage);
	void DispatchPsychicCaptureCompleted__DelegateSignature(class UAnimMontage* FirstAttackMontage);
	void DispatchPsychicCaptureCancel__DelegateSignature();
	void DispatchPsychicComboAttack__DelegateSignature();
	void DispatchPsychicUniqueInputStart__DelegateSignature();
	void DispatchPsychicUniqueEnd__DelegateSignature();
	void DispatchPsychicUniqueAimBegin__DelegateSignature(class ABP_PsychicObjectBasic_C* PsychicObject);
	void ExecuteUbergraph_RsBattleHero(int32 EntryPoint);
	void UnregisterDelayDriveEnd(EPlayerID PlayerId);
	void RegisterDelayDriveEnd(EPlayerID PlayerId);
	void UnregisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	void RegisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	void UnbindHologramOff();
	void BindHologramOff();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_0_ChangeTargetDelegate__DelegateSignature(class ARSCharacterBase* Target, bool bLockOn, bool bLostTarget);
	void OnDamageingForPlayer(const struct FHCHitResult& HitResult, float DamageValue);
	void ResetCoverDamagePlayer();
	void OnUpdateDriveHUD();
	void OnDeadPlayerCore();
	void DamageAfter(TArray<struct FHCHitResult>& Result);
	void BadStateEffectOn(EHCBadState bad);
	void OnPlayerAssetLoad();
	void OnInitialize();
	void OnUpdateHUD();
	void SetupPhychicCaptureMaterial(bool IsStart);
	void TickDelaySasRecoveryEffect(float DeltaSeconds);
	void UnbindDelaySasRecoveryEffect();
	void BindDelaySasRecoveryEffect();
	void OnEquipSAS(E_SASButton Button, E_SASKindNative Kind);
	void OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Param_Owner);
	void OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Param_Owner);
	void OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Param_Owner);
	void OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner);
	void OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Param_Owner);
	void OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Param_Owner);
	void OnFireEnd(const struct FFSASFireParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnFireStart(const struct FFSASFireParam& Param, class AActor* Param_Owner);
	void OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Param_Owner);
	void OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, float RemainTime, bool bHologram);
	void OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, bool bHologram);
	void OnInitializeDebug();
	void OnAnimNotifyInputPsychic();
	void ReceiveMontageBlendingOut(class UAnimMontage* Montage, bool Interrupted);
	void ReceiveMontageEnded(class UAnimMontage* Montage, bool Interrupted);
	void TickCaptureVibration(float DeltaSeconds);
	void UnbindCaptureVibration();
	void BindCaptureVibration();
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueObjectControlStart__DelegateSignature(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_2_UniqueObjectAddGauge__DelegateSignature();
	void SetPsychicEmissionInterface(bool bON, class FName ClaimantName);
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueObjectEnd__DelegateSignature(bool Input_success_in);
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_5_UniqueInputStart__DelegateSignature();
	void BndEvt__AttackInput_K2Node_ComponentBoundEvent_2_ChangePsychicComboLevelDelegate__DelegateSignature(int32 PsychicComboLevel);
	void BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ChangePsychicComboLevelDelegate__DelegateSignature(int32 PsychicComboLevel);
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_ComboAttackStart__DelegateSignature();
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_UniqueAttackSuccess__DelegateSignature(class UAnimMontage* Unique_montage);
	void BndEvt__BP_PlayerPsychicObjectComponent_K2Node_ComponentBoundEvent_0_CaptureSuccess__DelegateSignature(class UAnimMontage* Unique_montage);
	void OnInputTriggerSASHologramAttackManual();
	void OnInputReleasePsychicField();
	void OnInputTriggerPsychicField();
	void OnInputTriggerSASAllOff();
	void OnInputTriggerSASHologramAttack();
	void OnInputTriggerRessurect();
	void OnInputReleaseBrainFieldPsychicRight();
	void OnInputTriggerBrainFieldPsychicRight();
	void OnInputTriggerBrainFieldPsychicLeft();
	void OnInputTriggerBrainFieldPsychicUp();
	void OnInputTriggerChangeSASSet();
	void OnInputReleaseMapGimmick();
	void OnInputTriggerMapGimmick();
	void OnInputReleasePsychicSpecial();
	void OnInputTriggerPsychicSpecial();
	void OnInputTriggerIntercept();
	void OnInputReleasePsychic();
	void OnInputTriggerPsychic();
	void OnInputTriggerBrainField();
	void OnInputTriggerDownSAS();
	void OnInputTriggerUpSAS();
	void OnInputTriggerRightSAS();
	void OnInputTriggerLeftSAS();
	void OnInputTriggerBrainCrash();
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldPsychicGaugeDelegate__DelegateSignature(bool bChangeDirection);
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_RequestLunaticBrainTalkDelegate__DelegateSignature(EPlayerBrainFieldDanger DangerLV, bool bFirstBrainField);
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_2_PlayerBrainFieldIntarvalEndDelegate__DelegateSignature();
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_1_PlayerBrainFieldStateDelegate__DelegateSignature(EPlayerBrainFieldState State, EPlayerBrainFieldState PrevState);
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainFieldUpdateDelegate__DelegateSignature(float DeltaSeconds);
	void OnEnpcSasTimeDilationTick(float DeltaSeconds);
	void UnbindEnpcSasTimeDilationTick();
	void BindEnpcSasTimeDilationTick();
	void SuspendEnpcSASDirection();
	void BeginEnpcSASDirection();
	void BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerBrainTalkHitCountDelegate__DelegateSignature();
	void BrainTalk_FindTarget(const TArray<EFindTargetBrainTalkType>& Type);
	void BrainTalk_FnishUniqueObject();
	void BrainTalk_FirstSasElectric();
	void BrainTalk_FirstSasFire();
	void BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_5_NexusDriveSasBegin__DelegateSignature(E_SASKindNative SasKind);
	void BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_4_NexusDriveActivate__DelegateSignature(bool bActivate);
	void BndEvt__BP_NexusDriveComponent_K2Node_ComponentBoundEvent_3_NexusDriveSasEnd__DelegateSignature(E_SASKindNative SasKind);
	void NexusDriveAttackHitRecovery(const struct FHCHitResult& HitResult, bool bCopyPlayer);
	void EnpcSASTimeLine__Cable__EventFunc();
	void EnpcSASTimeLine__Reaction__EventFunc();
	void EnpcSASTimeLine__Effect__EventFunc();
	void EnpcSASTimeLine__StartCameraAttention__EventFunc();
	void EnpcSASTimeLine__EndCameraAttention__EventFunc();
	void EnpcSASTimeLine__StartTimeDilation__EventFunc();
	void EnpcSASTimeLine__EndTimeDilation__EventFunc();
	void EnpcSASTimeLine__RegistSAS__EventFunc();
	void EnpcSASTimeLine__UpdateFunc();
	void EnpcSASTimeLine__FinishedFunc();
	void UserConstructionScript();
	void CheckInputPsychic(bool* Dummy);
	void InputBrainCrash();
	void StartSAS(E_SASButton Sas_button);
	void OnAttackActorHit(const struct FHCHitResult& HitResult, bool* Dummy);
	void PostTick(float DeltaSeconds, bool* Dummy);
	void MainTick(float DeltaSeconds, bool* Dummy);
	void UpdateBrainField(float DeltaSeconds);
	void Set_Cable_Brain_Field_Mode(bool bEnable);
	void IsEnableBrainField(bool* bEnable);
	void GetBrainFieldTimeRate(float* Rate);
	void StartSAS_UI(E_SASButton SASButton);
	void OnChangeBattleReady(bool bBattle, bool* bDummy);
	bool CalcDamageByAttack(float& RefPhysicsDamage, float& RefObjDamage, float& RefFlameDamage, float& RefElectricDamage, float& RefCriticalDamageRate, class AActor* DefenseActor);
	void SetPsychicObjectEnableRange(bool Is_Brain_Field_in, float* Range);
	float CalcFinalDamageByAttack(float Damage, class AActor* DefenseActor, const struct FHCSkillCommonInfo& SkillInfo);
	bool OverwriteAttackCollisionInfo(struct FHCCollisionCommonInfo& RefCommonInfo, struct FHCSkillCommonInfo& RefSkill);
	void SetCanAnimOverrideSASColor(bool Enable, bool* Dummy);
	void GetCanAnimOverrideSASColor(bool* Enabled);
	void PreTick(float DeltaSeconds, bool* Dummy);
	void SetSasStealth(bool Stealth_on_in, bool Hero_order_in, bool Check_delay, bool Check_ignore, bool No_sas_cancel_in, bool From_event_in, bool* Dummy);
	void SetHideSASOutline(bool bHide, class FName ClaimantName, bool* bDummy);
	void CopyPlayerOn(float AppearTime, bool* bDummy);
	void InitializeSAS(bool* bDummy);
	void OnDestroy(bool* bDummy);
	void SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy);
	void SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime);
	void CheckHardenRestriction(EPlayerActionKind Action_kind_in, bool* Dummy);
	void OpenBrainFieldSetting(bool* bDummy);
	void CloseBrainFieldSetting(EBrainFieldEndType EndType, bool* bDummy);
	void IsEnableActionRecovery(bool* Enable);
	void PsychicObjectThrow(bool bSlam);
	void PsychicObjectCombo(int32 Level, int32 Param_Index, float AttractTime, bool AirCombo, bool EnemyDirectShot);
	void PsychicObjectCancel();
	void SetCaptureAction();
	void InputTriggerPsychic(bool bUnique);
	void InputReleasePsychic(bool bUnique);
	void SetPsychicEmission(bool bON, class FName ClaimantName);
	void SetUniquePsychicAttackLevel(int32 Param_UniquePsychicBonusLevel);
	void OnBeginOverlapMapGimmick(class AMapGimmickObject* Gimmick, const struct FVector& LookAtPos);
	void OnEndOverlapMapGimmick(class AMapGimmickObject* Gimmick);
	void InputMapGimmick(bool bPress);
	void CancelMapGimmick();
	void CaptureMapGimmick();
	void ResetPayPsychicCost();
	void GetAttackMotionPlayRate(float* PlayRate);
	void InputTriggerBrainField();
	void OnBeginDrive(bool* Dummy);
	void OnEndDrive(bool bInterruption, bool bLocationChange, bool* Dummy);
	void CheckCaptureAnimPattern(const struct FVector& ObjectLocation, int32 RandomFront, EPlayerCaptureAnimPattern* Pattern);
	void ChangeSASSet();
	void InputSAS(E_SASButton Sas_button);
	void ClearPrecedeInput(bool* bDummy);
	bool CheckFriendCoverDamage(float DamageValue);
	void CheckActivateDamageCover(float DamageValue, bool* bActivate, bool* bLethalDamage, bool* bLargeDamage);
	void CheckCoverDamageAblePlayer(EPlayerID InPlayerID, bool* bOK);
	void SearchAIPsychicObject(bool* bFiound);
	void CheckAIPsychicObject(bool bCapture, bool bAttack, bool* bOK);
	void DamageBefore(bool IgnoreAutoSasMetal, bool* bDummy);
	void SubHardenTime(float SubTime, bool* bDummy);
	void CheckAutoStealth(bool* bSuccess);
	void UpdateAutoStealth();
	void DebugGetObjectAnimationName(class FText* AnimationName);
	void InputTriggerSASHologramAttack(bool bManual);
	void GetSASActiveSeconds(E_SASButton SASButton, float* RemainingSec);
	int32 GetWeakNumber();
	void DoEventStart(bool* bDummy);
	void DoStaticEventStart(bool* bDummy);
	void DoStaticEventEnd(bool* bDummy);
	void DoDynamicEventStart(bool* bDummy);
	void DoDynamicEventEnd(bool* bDummy);
	void DoApplySkill(bool* bDummy);
	void ApplySkillAction();
	void ApplySkillAttack();
	void OnBrainFieldMoveBrainField(bool* bDummy);
	void OnBrainFieldMoveNormalField(bool* bDummy);
	void OnBrainFieldOpenEnd(bool* bDummy);
	void OnBrainFieldCloseStart(bool* bDummy);
	void ApplySkillOther();
	void SetActionStateObstructPsychic(bool* bDummy);
	bool IsEnableSASHologramAttack(ESASHologramAttackTiming Timing);
	void AreaChangeBegin(bool* bDummy);
	void AreaChangeEnd(bool* bDummy);
	void IsEnableInputPsychicCombo(bool* bEnable);
	void DoTimerPause(bool bPause, bool* bDummy);
	void OnEnterActionState(EPlayerActionKind NewState, int32 Param, bool* bDummy);
	void OnEnterUpperActionState(EPlayerUpperActionKind NewState, int32 Param, bool* bDummy);
	void BeginPsychicDither(class FName ParameterName, bool* bDummy);
	void EndPsychicDither(bool bNoInterp, bool* bDummy);
	void UpdatePsychicDither(bool* bDummy);
	void GatherPsychicDitherIgnoreList(EPsychicDitherType DitherType, float Param0, float Param1, bool* bSuccess, TArray<class AActor*>* IgnoreActorList);
	void BeginDriveSequence(bool* bSuccess);
	void SetSeeThroughSetting(bool bEnable, class FName ClaimantName, bool* bDummy);
	void InputSASAllOff();
	void IsEnableSASInput(bool* bEnable);
	void OnDriveGaugeMax(ENotifyDriveEvent Reason, bool* bDummy);
	void InputTriggerBrainFieldAttackLeft();
	void InputTriggerBrainFieldAttackUp();
	void InputTriggerBrainFieldAttackRight();
	void InputReleaseBrainFieldAttackRight();
	void GetActiveSASNum(int32* Num);
	void InputTriggerBrainFieldEnd();
	void RequestBrainFieldHelp(bool* bDummy);
	void OnBrainFieldState(EPlayerBrainFieldState State, EPlayerBrainFieldState PrevState);
	void SASCancelAll(bool bCancelCost);
	void IsEnableIntercept(bool* bOK);
	void IsEnableJustDodgePsychic(bool* bOK);
	void InputPsychicField(bool bPress);
	void GetPsychicFieldCaptureNum(int32* Num);
	void BeginPsychicField();
	void EndPsychicField();
	void BeginEnpcSAS(E_SASKind Kind, bool* bDummy);
	void FinishEnpcSASDirection();
	void InitializeDataTable();
	void PlayBrainFieldBackGroundVoice(int32 Step);
	void StopBrainFieldBackGroundVoice();
	void CheckAbleInterceptInReactionChance(bool* bAbleIntercept);
	float CalcFinalDamageByDefence(float Damage, class AActor* AttackActor);
	void OnAreaChange(bool bChangeLocation, bool* bDummy);
	void IsEventBrainCrash(bool* IsEvent);
	void EventBrainCrash();
	void CheckBrainFieldLunaticBrainTalk(bool* bOK);
	void PlayBrainFieldLunaticBrainTalk(EPlayerBrainFieldDanger DangerLV, bool bFirst);
	void GetBrainFieldLunaticBrainTalkID(EPlayerBrainFieldDanger DangerLV, bool bFirst, class FName* BrainTalkID);
	void BrainFieldDangerDirection(bool bTimeUp);
	void CheckNpcPsychicCombo();
	bool CheckStrongCharacter(class ARSCharacterBase* CheckCharacter);
	bool IsEnableBackStepAttack();
	void SASCount(E_SASKindNative Kind);
	void PlayPsychicComboCaptureSE(bool* bDummy);
	void StopPsychicComboCaptureSE(bool* bDummy);
	void CheckSASGuardFire();
	bool IsEnableSASCoverDamageFromPlayerID(EPlayerID CoverPlayerID);
	void GetAsyncCopyParameter(bool* bCheckCopy, struct FVector* Right, struct FVector* Left);
	void PlayerSkillJustDodgeUp();
	void BrainCrashEventEnd(class UAnimMontage* Montage);
	void OnBrainFieldOpenStart(bool* bDummy);
	void UpdateAirDodgeCount();
	void ApplySASEffectActive(E_SASKindNative Kind, bool bActivate, bool* bDummy);
	void ApplySASEffectPassive(E_SASKindNative Kind, bool* bDummy);
	bool IsUseAbleSASRecastGauge(E_SASKindNative SasKind);
	bool GetSASEffectFixParam(E_SASKindNative InKind, TArray<struct F_SASParamNative>* OutFixParam);
	void ApplySASEffectPassiveAll(bool bLinkAbleOnly, bool* bDummy);
	void CheckSasGuardElectric();
	void SASCancelEffectAndSE(bool bEffect, bool bSE, bool bCancelAll);
	void SasRecastRecoverEffect(float DelayTime);
	void KpiGameOver();
	void CancelActiveSAS(E_SASKindNative SasKind, bool CancelSASCost);
	void GetSASRecastAndActiveGaugeRate(E_SASButton SASButton, float* SASGaugeRate, bool* IsActive);
	void SubCombinationVisionCost(EPlayerID HologramPlayerID, bool* bDummy);
	void PayMapGimmckCost();
	void ChargeSASRemainTime(float ChargeRate);
	void CheckCaptureVibrationEnd();
	void OnHologramOff();
	void OnCancelSASCutin(E_SASKind SasKind);
	bool IsEnableSasSelectSlow();
	void ResetFlyingCombo();
	void TelepoComboSettingCoordinate(bool bEnableAttack, bool bPrevEnableAttack, bool bEnableAttackAir, bool bPrevEnableAttackAir);
	void SASCancelEffectAndSEInterface(bool bEffect, bool bSE, bool* bDummy);
	bool EventManagerStart(bool EnableTick, bool Visibility);
	void EndEnpcSASDirectionTimeDilation();
	bool IsManualHologramAttack();
	void GetManualHologramAttackPlayerID(EPlayerID* PlayerId);
	void OnNexusDriveSasBegin(E_SASKindNative Kind);
	void OnNexusDriveSasEnd(E_SASKindNative Kind);
	void OnNexusDriveActivate(bool bActivate);
	void GetNexusDriveHardenSubTimeRate(float* Rate);
	void GetAnimNotifyCondition(int32 ConditionNo, bool* Result);
	float GetManualAssaultVisionSasGaugeRate();
	void ApplyWireAndSasCableColor();
	void IsNexusDriveSeeThroughBestJustDodge(bool* bBestJustDodge);
	void IsEnableSasCableExColor(E_SASKind SasKind, bool* bEnable);
	void SetChargeLevelForNexusDrive(int32 ChargeLevel, bool* bDummy);
	void ForceEndSeeThroughPostProcess();
	bool BeginPhotoMode();
	bool EndPhotoMode();
	bool IsActiveNexusDriveSas(E_SASKindNative Kind);
	float GetNexusDriveMetal_DamageRate();
	float GetNexusDriveAccelerator_DamageRate();
	bool IsActiveNexusDriveAny();
	bool IsRegisterNpcDriveForNexusDrive(EPlayerID PlayerId);
	bool IsRegisterActiveSasKindAny();
	bool GetNexusDriveTelepoDamageRateForJewelPool(float* OutCrashRate, float* OutWinceRate, float* OutKnockbackRate, float* OutDownRate, const struct FHCSkillCommonInfo& InSkill);
	bool GetNexusDriveTelepoAttackRate(float* OutDamageRate, float* OutCrashRate, float* OutWinceRate, float* OutKnockbackRate, float* OutDownRate, const struct FHCSkillCommonInfo& InSkill);
	bool GetNexusDriveStealth_AttackParam(float* OutCrashRate, float* OutKnockback, float* OutDown);
	bool GetNexusDrivePsychic_PsychicFieldDown(float* OutDown);
	bool GetNexusDriveCombinationVisionCost(float* OutCost, E_SASKindNative SasKind);

	void CanBrainCrash(bool* Param_CanBrainCrash) const;
	void IsCanSAS_Use(E_SASButton SASButton, bool* IsSASUse) const;
	void IsChangeAbleBrainField(bool* bOK) const;
	void GetSAS_MaxActiveSeconds(E_SASKindNative SasKind, float* ActivationSeconds) const;
	void GetSASKindforButton(E_SASButton SASButton, E_SASKindNative* SasKind) const;
	void GetSASParamForKind(E_SASKind SasKind, int32 SASParam, float* Param) const;
	void IsEnableSASEffect(E_SASKind Kind, ESASEffect Effect, bool* bEnable, float* Param0, float* Param1, float* Param2, float* Param3) const;
	void GetSASParamDataCurrentLevel(E_SASKind Kind, struct FF_SASParam* Param) const;
	bool IsIgnoreVisionFog() const;
	void CalcPsychicCost(bool bUnique, bool bMapGimmick, bool bPsychicCombo, float* Cost) const;
	void SearchSASButtonFromKind(E_SASKind SasKind, bool bSearchLatest, E_SASButton* SASButton) const;
	void GetMapGimmickLookAtLocation(struct FVector* Location) const;
	void GetMapGimmickObject(class AMapGimmickObject** MapGimmickObject) const;
	void IsCancelMapGimmick(bool* bCancel) const;
	void GetUseItemSpeed(EPlayerUseItemSpeed* Speed) const;
	void IsActiveSAS_ForKind(E_SASKind SAS_Kind, bool* IsActive) const;
	void IsActiveSAS_ForButton(E_SASButton SASButton, bool* IsSAS) const;
	void GetBrainFieldPsychicAttackLevel(EPsychicObjectBrainFieldAttackType Type, int32* Level) const;
	void IsPsychicCostZero(bool bUnique, bool bMapGimmick, bool* bZero) const;
	void SubPsychicFieldCost() const;
	void IsEnpcSASLinkAble(E_SASKind Kind, bool* bOK) const;
	void CheckAssassinAttack(EAssassinAttackHit Type, class ARSBattleCharacter_C* DamagedActor, bool* bSuccess, bool* bArmorBreak) const;
	void IsAutoTakenItem(bool* bAuto) const;
	void NeedsDispNoDamage(bool* bNeedsDipsNoDamage) const;
	void IsAutoStealth(bool* bAuto) const;
	void CheckDisableBeginSAS_Telepo(bool* bDisable) const;
	void GetSASTimeParameter(E_SASKind Kind, float* RecastSec, float* ActivationSec) const;
	void IsEnableSASEffectInterface(E_SASKindNative Kind, ESASEffect Effect, bool* OutEnable, float* OutParam0, float* OutParam1, float* OutParam2, float* OutParam3) const;
	void GetCharacterReplaceSkillTable(class UDataTable* Original, class UDataTable** SkillTable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RsBattleHero_C">();
	}
	static class ARsBattleHero_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARsBattleHero_C>();
	}
};
static_assert(alignof(ARsBattleHero_C) == 0x000010, "Wrong alignment on ARsBattleHero_C");
static_assert(sizeof(ARsBattleHero_C) == 0x001FD0, "Wrong size on ARsBattleHero_C");
static_assert(offsetof(ARsBattleHero_C, UberGraphFrame_RsBattleHero_C) == 0x001CE8, "Member 'ARsBattleHero_C::UberGraphFrame_RsBattleHero_C' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BP_NexusDriveComponent) == 0x001CF0, "Member 'ARsBattleHero_C::BP_NexusDriveComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BP_PlayerPsychicObjectComponent) == 0x001CF8, "Member 'ARsBattleHero_C::BP_PlayerPsychicObjectComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BP_PlayerSequencerComponent) == 0x001D00, "Member 'ARsBattleHero_C::BP_PlayerSequencerComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DamagePostEffectComponent) == 0x001D08, "Member 'ARsBattleHero_C::DamagePostEffectComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BP_SAS_PlayerState) == 0x001D10, "Member 'ARsBattleHero_C::BP_SAS_PlayerState' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BP_PlayerEmissionComponent) == 0x001D18, "Member 'ARsBattleHero_C::BP_PlayerEmissionComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicGrabComponent) == 0x001D20, "Member 'ARsBattleHero_C::PsychicGrabComponent' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, EnpcSASTimeLine__Direction_40BE0B2848433BB641F9E4A9E97A4077) == 0x001D28, "Member 'ARsBattleHero_C::EnpcSASTimeLine__Direction_40BE0B2848433BB641F9E4A9E97A4077' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, EnpcSASTimeLine) == 0x001D30, "Member 'ARsBattleHero_C::EnpcSASTimeLine' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicThrowActionTime) == 0x001D38, "Member 'ARsBattleHero_C::PsychicThrowActionTime' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicCaptureActionTime) == 0x001D3C, "Member 'ARsBattleHero_C::PsychicCaptureActionTime' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, IsIK_Init) == 0x001D40, "Member 'ARsBattleHero_C::IsIK_Init' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, HandRotator) == 0x001D44, "Member 'ARsBattleHero_C::HandRotator' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, HandOffset) == 0x001D50, "Member 'ARsBattleHero_C::HandOffset' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, AfterTelepoInvincibleTimer) == 0x001D5C, "Member 'ARsBattleHero_C::AfterTelepoInvincibleTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, AfterTelepoInvincibleClaimantName) == 0x001D68, "Member 'ARsBattleHero_C::AfterTelepoInvincibleClaimantName' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, CanAnimOverrideSASColor) == 0x001D70, "Member 'ARsBattleHero_C::CanAnimOverrideSASColor' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SASSeeThroughTimer) == 0x001D74, "Member 'ARsBattleHero_C::SASSeeThroughTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, HideSASOutlineClaimantList) == 0x001D80, "Member 'ARsBattleHero_C::HideSASOutlineClaimantList' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicUniqueSuccess) == 0x001D90, "Member 'ARsBattleHero_C::DispatchPsychicUniqueSuccess' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicCaptureCompleted) == 0x001DA0, "Member 'ARsBattleHero_C::DispatchPsychicCaptureCompleted' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicCaptureCancel) == 0x001DB0, "Member 'ARsBattleHero_C::DispatchPsychicCaptureCancel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicComboAttack) == 0x001DC0, "Member 'ARsBattleHero_C::DispatchPsychicComboAttack' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicEffectClaimantList) == 0x001DD0, "Member 'ARsBattleHero_C::PsychicEffectClaimantList' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, UniquePsychicBonusLevel) == 0x001E20, "Member 'ARsBattleHero_C::UniquePsychicBonusLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bPrecedeInputPsychic) == 0x001E24, "Member 'ARsBattleHero_C::bPrecedeInputPsychic' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bPrecedeInputPsychicUnique) == 0x001E25, "Member 'ARsBattleHero_C::bPrecedeInputPsychicUnique' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SASInputData) == 0x001E28, "Member 'ARsBattleHero_C::SASInputData' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, CurrentMapGimmickObject) == 0x001E38, "Member 'ARsBattleHero_C::CurrentMapGimmickObject' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bEnableCaptureMapGimmick) == 0x001E40, "Member 'ARsBattleHero_C::bEnableCaptureMapGimmick' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bPayPsychicCost) == 0x001E41, "Member 'ARsBattleHero_C::bPayPsychicCost' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bPsychicComboPostProcess) == 0x001E42, "Member 'ARsBattleHero_C::bPsychicComboPostProcess' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bCancelMapGimmick) == 0x001E43, "Member 'ARsBattleHero_C::bCancelMapGimmick' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, ClaimantNameDrive) == 0x001E44, "Member 'ARsBattleHero_C::ClaimantNameDrive' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, AutoStealthIntervalTimer) == 0x001E4C, "Member 'ARsBattleHero_C::AutoStealthIntervalTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, AutoStealthTimer) == 0x001E58, "Member 'ARsBattleHero_C::AutoStealthTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, CoverDamageIntervalTimer) == 0x001E64, "Member 'ARsBattleHero_C::CoverDamageIntervalTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAction_AirJump) == 0x001E70, "Member 'ARsBattleHero_C::SkillAction_AirJump' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAction_BlowRecovery) == 0x001E71, "Member 'ARsBattleHero_C::SkillAction_BlowRecovery' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_AirCombo1) == 0x001E72, "Member 'ARsBattleHero_C::SkillAttack_AirCombo1' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_AirLongPressAttack) == 0x001E73, "Member 'ARsBattleHero_C::SkillAttack_AirLongPressAttack' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_WeaponCombo1) == 0x001E74, "Member 'ARsBattleHero_C::SkillAttack_WeaponCombo1' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_WeaponCombo2) == 0x001E75, "Member 'ARsBattleHero_C::SkillAttack_WeaponCombo2' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_PsychicSlam) == 0x001E76, "Member 'ARsBattleHero_C::SkillAttack_PsychicSlam' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_ChargeAttackLV) == 0x001E78, "Member 'ARsBattleHero_C::SkillAttack_ChargeAttackLV' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_WeaponCrashScale) == 0x001E7C, "Member 'ARsBattleHero_C::Skill_WeaponCrashScale' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_PsychicCrashScale) == 0x001E80, "Member 'ARsBattleHero_C::Skill_PsychicCrashScale' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_DownDamageUp) == 0x001E84, "Member 'ARsBattleHero_C::Skill_DownDamageUp' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_BrainFieldThrowLevel) == 0x001E88, "Member 'ARsBattleHero_C::SkillAttack_BrainFieldThrowLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_BrainFieldSwingLevel) == 0x001E8C, "Member 'ARsBattleHero_C::SkillAttack_BrainFieldSwingLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_BrainFieldChargeLevel) == 0x001E90, "Member 'ARsBattleHero_C::SkillAttack_BrainFieldChargeLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bBeginPsychicDither) == 0x001E94, "Member 'ARsBattleHero_C::bBeginPsychicDither' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicDitherIgnoreList) == 0x001E98, "Member 'ARsBattleHero_C::PsychicDitherIgnoreList' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicUniqueInputStart) == 0x001EA8, "Member 'ARsBattleHero_C::DispatchPsychicUniqueInputStart' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicDitherTimer) == 0x001EB8, "Member 'ARsBattleHero_C::PsychicDitherTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicDitherTimerMax) == 0x001EBC, "Member 'ARsBattleHero_C::PsychicDitherTimerMax' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicUniqueEnd) == 0x001EC0, "Member 'ARsBattleHero_C::DispatchPsychicUniqueEnd' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicDitherEndTime) == 0x001ED0, "Member 'ARsBattleHero_C::PsychicDitherEndTime' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SeeThroughPostProcessClaimantNameList) == 0x001ED8, "Member 'ARsBattleHero_C::SeeThroughPostProcessClaimantNameList' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Param_CancelSASCostRate) == 0x001EE8, "Member 'ARsBattleHero_C::Param_CancelSASCostRate' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SASStackNum) == 0x001EEC, "Member 'ARsBattleHero_C::SASStackNum' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, DispatchPsychicUniqueAimBegin) == 0x001EF0, "Member 'ARsBattleHero_C::DispatchPsychicUniqueAimBegin' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bCaptureTypeCombo) == 0x001F00, "Member 'ARsBattleHero_C::bCaptureTypeCombo' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, EnpcSASDirectionKind) == 0x001F01, "Member 'ARsBattleHero_C::EnpcSASDirectionKind' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Param_AssassinAttack) == 0x001F08, "Member 'ARsBattleHero_C::Param_AssassinAttack' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_AerialAttackPsychicGaugeUp) == 0x001F48, "Member 'ARsBattleHero_C::Skill_AerialAttackPsychicGaugeUp' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_PinchStatusUp) == 0x001F4C, "Member 'ARsBattleHero_C::Skill_PinchStatusUp' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_DriveCrashScale) == 0x001F50, "Member 'ARsBattleHero_C::Skill_DriveCrashScale' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAction_NoStockBrainField) == 0x001F54, "Member 'ARsBattleHero_C::SkillAction_NoStockBrainField' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bIgnoreBrainFieldStock) == 0x001F55, "Member 'ARsBattleHero_C::bIgnoreBrainFieldStock' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BrainFieldBackGroundVoiceHandle) == 0x001F58, "Member 'ARsBattleHero_C::BrainFieldBackGroundVoiceHandle' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_PinchAttackUpRate) == 0x001F60, "Member 'ARsBattleHero_C::Skill_PinchAttackUpRate' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_PinchDamageDownRate) == 0x001F64, "Member 'ARsBattleHero_C::Skill_PinchDamageDownRate' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_BrainFieldOverKill) == 0x001F68, "Member 'ARsBattleHero_C::Skill_BrainFieldOverKill' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_AutoPickUp) == 0x001F69, "Member 'ARsBattleHero_C::Skill_AutoPickUp' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_PsychicComboAddLevel) == 0x001F6C, "Member 'ARsBattleHero_C::SkillAttack_PsychicComboAddLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_AerialPsychicComboAddLevel) == 0x001F70, "Member 'ARsBattleHero_C::SkillAttack_AerialPsychicComboAddLevel' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, IsEnpcUseDuelPole) == 0x001F74, "Member 'ARsBattleHero_C::IsEnpcUseDuelPole' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bPsychicInputButtonPressed) == 0x001F75, "Member 'ARsBattleHero_C::bPsychicInputButtonPressed' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, LastUseSASKind) == 0x001F76, "Member 'ARsBattleHero_C::LastUseSASKind' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, LastUseSASCount) == 0x001F78, "Member 'ARsBattleHero_C::LastUseSASCount' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, PsychicComboCaptureSEHandle) == 0x001F80, "Member 'ARsBattleHero_C::PsychicComboCaptureSEHandle' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_JustDodgeUpRecoveryValue) == 0x001F88, "Member 'ARsBattleHero_C::Skill_JustDodgeUpRecoveryValue' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_SasRecover) == 0x001F90, "Member 'ARsBattleHero_C::Skill_SasRecover' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, IsEnpcSasCamera) == 0x001FA8, "Member 'ARsBattleHero_C::IsEnpcSasCamera' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, IsEnpcSasTimeDilation) == 0x001FA9, "Member 'ARsBattleHero_C::IsEnpcSasTimeDilation' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_OverkillBonus) == 0x001FAA, "Member 'ARsBattleHero_C::Skill_OverkillBonus' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAction_AirDodgeCount) == 0x001FAC, "Member 'ARsBattleHero_C::SkillAction_AirDodgeCount' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, Skill_BrainFieldDamageCut) == 0x001FB0, "Member 'ARsBattleHero_C::Skill_BrainFieldDamageCut' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SasRecastRecoveryDelayTime) == 0x001FB4, "Member 'ARsBattleHero_C::SasRecastRecoveryDelayTime' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, LastFlyingPsychicPattern) == 0x001FB8, "Member 'ARsBattleHero_C::LastFlyingPsychicPattern' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, LastBrainFieldChargeAttackInputKind) == 0x001FB9, "Member 'ARsBattleHero_C::LastBrainFieldChargeAttackInputKind' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, EnpcSasTimeDilationTimer) == 0x001FBC, "Member 'ARsBattleHero_C::EnpcSasTimeDilationTimer' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, SkillAttack_BackStepAttackCount) == 0x001FC0, "Member 'ARsBattleHero_C::SkillAttack_BackStepAttackCount' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bSasTelepoAttackAirResetOnce) == 0x001FC4, "Member 'ARsBattleHero_C::bSasTelepoAttackAirResetOnce' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bTelepoComboSetting) == 0x001FC5, "Member 'ARsBattleHero_C::bTelepoComboSetting' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bTelepoComboSettingAir) == 0x001FC6, "Member 'ARsBattleHero_C::bTelepoComboSettingAir' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, BackupManualAssaultVisionSasRate) == 0x001FC8, "Member 'ARsBattleHero_C::BackupManualAssaultVisionSasRate' has a wrong offset!");
static_assert(offsetof(ARsBattleHero_C, bIgnoreManualHologramAttack) == 0x001FCC, "Member 'ARsBattleHero_C::bIgnoreManualHologramAttack' has a wrong offset!");

}

