#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SASInterface

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "E_SASKind_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_SASInterface.BPI_SASInterface_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_SASInterface_C final : public IInterface
{
public:
	void OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Owner, bool bHologram);
	void OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Owner, float RemainTime, bool bHologram);
	void OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Owner);
	void OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Owner, float RemainTime);
	void OnFireStart(const struct FFSASFireParam& Param, class AActor* Owner);
	void OnFireEnd(const struct FFSASFireParam& Param, class AActor* Owner, float RemainTime);
	void OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Owner);
	void OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Owner, float RemainTime);
	void OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Owner);
	void OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Owner, float RemainTime);
	void OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Owner);
	void OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Owner, float RemainTime);
	void OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Owner);
	void OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Owner, float RemainTime);
	void OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Owner);
	void OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Owner, float RemainTime);
	void OnCutInStart();
	void OnCutInEnd();
	void SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy);
	void SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime);
	void OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Owner);
	void OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Owner, float RemainTime);

	void IsAcceleratorValid(bool* Valid) const;
	void IsAccelerating(bool* Accelerating) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_SASInterface_C">();
	}
	static class IBPI_SASInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_SASInterface_C>();
	}
};
static_assert(alignof(IBPI_SASInterface_C) == 0x000008, "Wrong alignment on IBPI_SASInterface_C");
static_assert(sizeof(IBPI_SASInterface_C) == 0x000028, "Wrong size on IBPI_SASInterface_C");

}

