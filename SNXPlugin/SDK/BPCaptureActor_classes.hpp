#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPCaptureActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FEventSettingCapData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "ERenderTargetType_structs.hpp"
#include "FRenderTargetData_structs.hpp"
#include "MovieScene_structs.hpp"
#include "FChangeFaceData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPCaptureActor.BPCaptureActor_C
// 0x0820 (0x0A58 - 0x0238)
class ABPCaptureActor_C : public AEventCaptureActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 CharaFacePartsCustomComponent;                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CharaFacePartsComponent;                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_co0300;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_static_pl_sky;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CaptureModel;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSSceneCaptureComponent2D*             RSSceneCaptureComponent2D;                         // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FrameParticleAlphaTimeline_Track_E998C6614D99BCCEC6362B9B84F3718F; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FrameParticleAlphaTimeline__Direction_E998C6614D99BCCEC6362B9B84F3718F; // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D9[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FrameParticleAlphaTimeline;                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NoiseAdvancedTimeline_GlitchCurve_5729C23D46E753B230A2F680C09382F2; // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NoiseAdvancedTimeline_FringeCurve_5729C23D46E753B230A2F680C09382F2; // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseAdvancedTimeline_NoiseCurve_5729C23D46E753B230A2F680C09382F2; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseAdvancedTimeline_MonitorNoiseCurve_5729C23D46E753B230A2F680C09382F2; // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            NoiseAdvancedTimeline__Direction_5729C23D46E753B230A2F680C09382F2; // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DA[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     NoiseAdvancedTimeline;                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseTimeline_Track_E6D277BA484692FFE03CC0B5AA3F5B1D; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            NoiseTimeline__Direction_E6D277BA484692FFE03CC0B5AA3F5B1D; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DB[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     NoiseTimeline;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineAddBoardAnimWeightCurve_Track_E59A3A01434E2BBB6AAE77A278E9528A; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineAddBoardAnimWeightCurve__Direction_E59A3A01434E2BBB6AAE77A278E9528A; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DC[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineAddBoardAnimWeightCurve;                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_3_ParamYCurve_26CF180A46E0FE07CD22B28C225E0474; // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_3_ParamXCurve_26CF180A46E0FE07CD22B28C225E0474; // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoardParamCurveTimelineBase_3__Direction_26CF180A46E0FE07CD22B28C225E0474; // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DD[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoardParamCurveTimelineBase_3;                     // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectGaussFilterTimeline_Track_D1C10B9E40FE142F89097F8BE08263F3; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EffectGaussFilterTimeline__Direction_D1C10B9E40FE142F89097F8BE08263F3; // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DE[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EffectGaussFilterTimeline;                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_2_ParamYCurve_10EA6CDD49920DC83A38C3982973510E; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_2_ParamXCurve_10EA6CDD49920DC83A38C3982973510E; // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoardParamCurveTimelineBase_2__Direction_10EA6CDD49920DC83A38C3982973510E; // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48DF[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoardParamCurveTimelineBase_2;                     // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_1_ParamYCurve_63A3D6EC42C3F05297FFF49C5F34B24E; // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurveTimelineBase_1_ParamXCurve_63A3D6EC42C3F05297FFF49C5F34B24E; // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoardParamCurveTimelineBase_1__Direction_63A3D6EC42C3F05297FFF49C5F34B24E; // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E0[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoardParamCurveTimelineBase_1;                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrossFadeTimeline_Track_77235619450957C9FC9D208EF5E46B84; // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CrossFadeTimeline__Direction_77235619450957C9FC9D208EF5E46B84; // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E1[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CrossFadeTimeline;                                 // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TelepathyTimeLine_StaticTelepathy_loop_C4D48D5047DAF2C17A7F7DB746010AC1; // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TelepathyTimeLine__Direction_C4D48D5047DAF2C17A7F7DB746010AC1; // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E2[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TelepathyTimeLine;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EffectAlphaTimeline__Direction_7BC54E104812DB0FB50E8C82820DA397; // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E3[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EffectAlphaTimeline;                               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EffectMoveTimeline__Direction_FC24475242A91A71BE0D3C964E50B323; // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E4[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EffectMoveTimeline;                                // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EffectScaleTimeline__Direction_7EE5F94043797CE93BB05CA3CE777981; // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E5[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EffectScaleTimeline;                               // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       MIDList;                                           // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     CameraTransformList;                               // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  PlaneMeshList;                                     // 0x03B8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimSequence*>                  BPCharaList;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             CurrentAnimationData;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MovieManager_C*                     MovieManager;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERenderTargetType                             UsedRenderTargetType;                              // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E6[0x7];                                     // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         VecAnimNamePath;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  VecIsAnimationLoop;                                // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CharaAnimFolderPath;                               // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CurrentFrameParticle;                              // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleStart;                                        // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleEnd;                                          // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ScaleCurve;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoveCurve;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveStart;                                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveEnd;                                           // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaStart;                                        // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaEnd;                                          // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AlphaCurve;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       ParticleMIDArray;                                  // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 SkyMeshActor;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FBoardAnimationInfo>            VecNextBoardAnim;                                  // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   PlaneMeshAssetList;                                // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> StaticCutFramePSAsset;                             // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                StaticCutFramePSObject;                            // 0x04A8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   ChildActorAsset;                                   // 0x04B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LinearToSRGBMaterialAsset;                         // 0x04E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           StaticPlSkyMeshAsset;                              // 0x0508(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_EventCaptureCamera_C*               GeneralCaptureCamera;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  GeneralStaticSequenceActor;                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         VecPlAnimNamePath;                                 // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CurrentFrameTelepathyParticle;                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                StaticCutTelepathyPSObject;                        // 0x0558(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> StaticCutTelepathyPSAsset;                         // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       TelepathyParticleMIDArray;                         // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ASequencerParticle*>             GeneralParticles;                                  // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     LinearToSRGBMaterial;                              // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                StaticCutOverTelepathyPSObject;                    // 0x05A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> StaticCutOverTelepathyPSAsset;                     // 0x05B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CurrentFrameOverTelepathyParticle;                 // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_XParamName_1;                      // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_YParamName_1;                      // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_XParamName_2;                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_YParamName_2;                      // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrossFadeCapActor;                               // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_48E7[0x3];                                     // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BeforeCapturePresetName;                           // 0x05EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E8[0x4];                                     // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultCrossFadeCurve;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_XParamRate_1;                      // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_YParamRate_1;                      // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_XParamRate_2;                      // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_YParamRate_2;                      // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFRenderTargetData                     MainRTData;                                        // 0x0610(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Add_1;                          // 0x0628(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Add_2;                          // 0x0634(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Mul_1;                          // 0x0640(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Mul_2;                          // 0x064C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANpcSkeletalMeshActor*                  NpcSkeletalActor;                                  // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CurrentCrossFadeTimelineDirection;                 // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E9[0x7];                                     // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastBordAnimationName;                             // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	EEventCaptureType                             CurrentCaptureType;                                // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48EA[0x3];                                     // 0x0679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequenceEffectAlpha;                               // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEventSettingCapData                  CurrentSettingCapData;                             // 0x0680(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFChangeFaceData>               ChangeFaceDataArray;                               // 0x06F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FFChangeFaceData                       NextChangeFaceData;                                // 0x0708(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48EB[0x4];                                     // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CurrentChangeFaceTimeHandle;                       // 0x0720(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureActorIndex;                                 // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48EC[0x4];                                     // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCaptureActor_C*                      CrossFadeCapActor;                                 // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEveryFrameCapture;                               // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48ED[0x7];                                     // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       MI_static_pl_16_9Asset;                            // 0x0740(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstance*                      MI_static_pl_16_9Object;                           // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       MI_static_pl_skyAsset;                             // 0x0770(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstance*                      MI_static_pl_skyObject;                            // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateCaptureScene;                              // 0x07A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48EE[0x7];                                     // 0x07A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattleCharacter_C*>           BindActorArray;                                    // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             FaceDataList;                                      // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CharaLipSyncAnimMontage;                           // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCaptureCrossFadeCapActor;                        // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48EF[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CharaDefaultFaceAnimMontage;                       // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEventPlAnimationCurveParam>    CurrentPlAnimationCurveDataList;                   // 0x07D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BeforeCrossFadeCurveValue;                         // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_XParamName_3;                      // 0x07EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoardParamCurve_YParamName_3;                      // 0x07F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_XParamRate_3;                      // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoardParamCurve_YParamRate_3;                      // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Add_3;                          // 0x0804(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoardParamCurve_Sp_Mul_3;                          // 0x0810(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48F0[0x4];                                     // 0x081C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultAddBoardAnimCurve;                          // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GeneralParticleDirty;                              // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeforeAlphaCurveValue;                             // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEffectAlpha;                                // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitGeneralCapture;                                // 0x0834(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F1[0x3];                                     // 0x0835(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ImageMaterialAnimMontage;                          // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       MI_static_pl_CharaBGAsset;                         // 0x0840(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstance*                      MI_static_pl_CharaBG;                              // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 FacialCaptureActor;                                // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FacialCaptureMesh;                                 // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             EyeDataList;                                       // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          CharaFacePartsMesh;                                // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           CharaFacePartsMeshAsset;                           // 0x0890(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveFloat*                            DefaultFrameParticleFadeCurve;                     // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStaticPlType                                 BeforeStaticPlType;                                // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48F2[0x3];                                     // 0x08C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneralParticleHandle;                             // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 HighResRenderTarget2;                              // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 HighResRenderTarget3;                              // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HighResRenderIndex;                                // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERenderTargetType                             HighResUsedRenderTargetType2;                      // 0x08DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERenderTargetType                             HighResUsedRenderTargetType3;                      // 0x08DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48F3[0x2];                                     // 0x08DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HighResRestoreMPCGlobalRate;                       // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FaceTAACount;                                      // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     GeneralParticleBindings;                           // 0x08E8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HighResMode;                                       // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F4[0x7];                                     // 0x08F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_MenuPlayerBase_C*>           GeneralBindingSpawnInstance;                       // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         HighResPauseMeshes;                                // 0x0910(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class ASkeletalMeshActor*>             GeneralBindingSpawnWeaponInstance;                 // 0x0920(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         GeneralTAACaptureTime;                             // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GeneralTAACaptureMode;                             // 0x0934(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreOptimizeTickCharaFaceParts;                 // 0x0935(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreOptimizeTickStaticPlWidget;                 // 0x0936(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F5[0x1];                                     // 0x0937(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CharaPartsDataList;                                // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BGWaitMode;                                        // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F6[0x7];                                     // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             DebugStaticPLMaterial;                             // 0x0948(0x0010)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash)
	bool                                          GStaticRemoveEventCommand;                         // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GeneralParticleRetry;                              // 0x0959(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F7[0x2];                                     // 0x095A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeneralTAACaptureSeconds;                          // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DynamicTextureRowName;                             // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  One6_9PlaneMeshList;                               // 0x0968(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  One_1PlaneMeshList;                                // 0x0978(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   One6_9PlaneMeshAssetList;                          // 0x0988(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   One_1PlaneMeshAssetList;                           // 0x0998(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	struct FRandomStream                          PlRandomStream;                                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	TArray<class UParticleSystem*>                StaticCut1_1FramePSObject;                         // 0x09B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                StaticCut16_9FramePSObject;                        // 0x09C0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> StaticCut1_1FramePSAsset;                          // 0x09D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> StaticCut16_9FramePSAsset;                         // 0x09E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsUseRandomPl;                                     // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48F8[0x3];                                     // 0x09F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackupMaterialParam_SrcTexX;                       // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackupMaterialParam_SrcTexY;                       // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48F9[0x4];                                     // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              MaterialSources;                                   // 0x0A00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HiddenMark;                                        // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ParticleAfterActorTickOff;                         // 0x0A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48FA[0x6];                                     // 0x0A12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DecalBP;                                           // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighResProjectionScaleX;                           // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoreOptimizeTickCharaFacePartsCustom;           // 0x0A24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SetupStoreSequencerInGameTransform;                // 0x0A25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48FB[0x2];                                     // 0x0A26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> HighResTickPauseParticles;                         // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          HighResResetCull;                                  // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GeneralTAACaptureManyCap;                          // 0x0A39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CaptureGeneralStatic;                              // 0x0A3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstRipSync;                                      // 0x0A3B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48FC[0x4];                                     // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AttachmentIDList;                                  // 0x0A40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Find;                                              // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPCaptureActor(int32 EntryPoint);
	void DelayFirstRipSync();
	void PrivateGeneralCapturePost();
	void ForceCaptureFinish();
	void CancelTAACaptureSetting();
	void TAACaptureSetting();
	void DebugRetryCapture();
	void AlphaFadeFrameParticle(class UCurveFloat* Curve);
	void StoreSequencerInGameTransform(class ULevelSequence* Sequnece, float SequencePosition);
	void SetBoadAddAnimWeightCurve(class UCurveFloat* Curve);
	void OnCaptureModelMontageEnd(class UAnimMontage* Montage, bool bInterrupted);
	void BoardParamCurveTimelineReset();
	void PrivateCapturePost();
	void StopCrossFadeSequencer();
	void BoardParamCurveTimeline(class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate, const struct FVector& Sp_Add, const struct FVector& Sp_Mul);
	void StartTelepathyLoop();
	void CrossFade(class UCurveFloat* Curve);
	void EventSettingNormalBoard(class FName SocketName);
	void EventSettingGeneralBoard(class FName SocketName);
	void EventOnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void StopWaitSequencer();
	void StopSequenceAlpha();
	void SequenceAlpha(float Time, float Start, float End, class UCurveFloat* Curve, bool Loop);
	void SetEffectAlpha(float Alpha);
	void SetEffectMove(const struct FVector2D& Offset);
	void SetEffectScale(float Scale);
	void SequenceMove(float Time, const struct FVector2D& Start, const struct FVector2D& End, class UCurveFloat* Curve, bool Loop);
	void SequenceScale(float Time, float Start, float End, class UCurveFloat* Curve, bool Loop);
	void EventSettingCapture(class FName CapturePresetName, class FName CharaAnimationTableName, float CharaAnimationStartFrame);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void EffectNoiseAdvanced(class UCurveFloat* MonitorNoiseCurve, class UCurveVector* FringeCurve, class UCurveVector* GlitchCurve, class UCurveFloat* NoiseCurve, bool IsLoop);
	void EffectNoise(class UCurveFloat* Curve, bool IsLoop);
	void EffectGaussFilter(class UCurveFloat* Curve, bool CurveReverse);
	void FrameParticleAlphaTimeline__UpdateFunc();
	void FrameParticleAlphaTimeline__FinishedFunc();
	void TimelineAddBoardAnimWeightCurve__UpdateFunc();
	void TimelineAddBoardAnimWeightCurve__FinishedFunc();
	void BoardParamCurveTimelineBase_3__UpdateFunc();
	void BoardParamCurveTimelineBase_3__FinishedFunc();
	void BoardParamCurveTimelineBase_2__UpdateFunc();
	void BoardParamCurveTimelineBase_2__FinishedFunc();
	void BoardParamCurveTimelineBase_1__UpdateFunc();
	void BoardParamCurveTimelineBase_1__FinishedFunc();
	void TelepathyTimeLine__UpdateFunc();
	void TelepathyTimeLine__FinishedFunc();
	void CrossFadeTimeline__UpdateFunc();
	void CrossFadeTimeline__FinishedFunc();
	void EffectAlphaTimeline__UpdateFunc();
	void EffectAlphaTimeline__FinishedFunc();
	void EffectMoveTimeline__UpdateFunc();
	void EffectMoveTimeline__FinishedFunc();
	void EffectScaleTimeline__UpdateFunc();
	void EffectScaleTimeline__FinishedFunc();
	void NoiseAdvancedTimeline__UpdateFunc();
	void NoiseAdvancedTimeline__FinishedFunc();
	void NoiseTimeline__UpdateFunc();
	void NoiseTimeline__FinishedFunc();
	void EffectGaussFilterTimeline__UpdateFunc();
	void EffectGaussFilterTimeline__FinishedFunc();
	void SettingCapture(int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture, bool IsSeamlessInGameCapture, bool IsNoStaticPlSetting, bool IsHiddenPlFrameEffect, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, EEventCaptureRenderType RenderType, float ToneMapCounterValue);
	void PlayBoardAnimation(const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, bool IsAddMotion, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData, bool* IsSuccess);
	void SetPlaneMeshHiddenInGame(bool IsHidden);
	void AddBoardAnimation(const class FString& BoardAnimationIndex, bool IsLoop);
	void CaptureScene();
	void IsEndMotion(bool* Param_IsEndMotion);
	class UAnimationAsset* GetAnimSequenceForAnimNamePath(const class FString& Prefix, bool IsBoardOrbitAnimation);
	class UAnimationAsset* GetCharaAnimSequence(class UObject* Object, class FName InName);
	void EventEnd(bool IsCrossFadeActor);
	class UClass* GetCharaAnimInstance(class UObject* Object);
	class UAnimationAsset* GetCharaFaceAnimMontage(class UObject* Object, const class FString& FacialName, bool* IsFaceAnimation);
	class UAnimationAsset* GetCharaBodyAnimMontage(class UObject* Object);
	void CalcTimelineRate(class UTimelineComponent* Timeline, class UCurveFloat* Curve, float* Rate);
	void StartEvent();
	void EndEvent();
	void SetTicks(bool Enabled);
	void GetBP_static_pl(class ACharacter** ASCharacter);
	void SetActorLocationForSocketName(class FName SocketName, EStaticPlType StaticPlType);
	void SetupAlphaSort();
	void SetCaptureShowOnlyActors();
	void SetSceneCaptureRenderTarget();
	void ClearSceneCaptureRenderTarget();
	void CheckAutoBoardAnimation();
	void StartAutoBoardAnimaton(const class FString& BoardAnimatonName, class UAnimMontage* AddBordAnimMontage, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData);
	void LoadAsset();
	void ResetBoardAnimation();
	void SetAnimMontageTransform(const class FString& BoardAnimName);
	void CaptureSceneGeneralStatic(class ULevelSequence* InSequence, float NewPlaybackPosition, bool IsSeamlessInGameCapture, EEventCaptureRenderType RenderType, float ToneMapCounterValue);
	void SettingMovieTexture(class UMaterialInstanceDynamic* MaterialInstance, class FName MovieTextureRowName);
	void SetTexParameterForTexDatatable(class UDataTable* DataTable, class FName RowName, class UMaterialInstanceDynamic* InputPin, class UTexture** AsTexture);
	void SettingGeneralBoardAnimation(class UAnimMontage* AnimMontage);
	void SettingNormalBoardAnimation(class UAnimMontage* AnimMontage);
	void PrivateSetupGeneralStaticParticle(class ARSLevelSequenceActor* LevelSequenceActor, TArray<struct FMovieSceneObjectBindingID>* BindingID);
	void SetupPPM(class URSSceneCaptureComponent2D* SceneCapture, class UCineCameraComponent* AddPostProcess);
	void SetTelepathyParticleMIDArray(class URSParticleSystemComponentBase* ParticleComponent);
	void UpdateAnimationRate();
	void SettingNpcModel(class FName CharaAnimName, class FName CharaFaceAnimName, int32 NpcMeshTableID, int32 NpcMaterialTableID);
	void SetModelHiddenInGame(bool IsHiddenCaptureModel);
	class UAnimationAsset* GetAnimSequenceForAnimFullPath(const class FString& Prefix);
	void PlayNodeAnimation(const class FString& BoardAnimationIndex);
	void SetAllPartsVisibility(bool NewVisibility);
	void ClearStoreRenderTarget();
	void SetCharaBodyAnimMontage(class FName SectionName);
	void SetCharaFaceAnimMontage(class FName SectionName);
	void StartChangeFaceTimer(TArray<struct FFChangeFaceData>& Param_ChangeFaceDataArray);
	void OnChangeFaceTimerEnd();
	void SetChangeFaceTimer();
	void ClearChangeFaceTimerData();
	void SettingCharaBGCapture();
	void SetCharaBGData(class FName CapturePresetName, EStaticPlType StaticPlType);
	void UpdateCaptureSceneFace();
	void PlayCharaMeshMontage(class UAnimMontage* AnimMontage, float InPlayRate, float InTimeToStartMontageAt, class FName SectionName);
	void UpdatePhaseAnimCurveData();
	void RemoveSequencerInPsychicObject();
	void OnCaptureSequencerFinished(bool RemoveEventCommand);
	void StoreSequencerInGame(class ULevelSequence* Sequencer, float SequencePosition);
	void PrivateResetGemeralParticles();
	void PlayBoardCurveValueMontage(class UAnimMontage* AnimMontage, bool IsLoop, class UCurveFloat* MontageWeghtCurveAsset);
	void SetupSkeletalMeshes(class ARSLevelSequenceActor* Sequencer);
	void ClearFacialModelCaptureMesh();
	void SetCharaEyeData(class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold);
	void SettingCharaFacePartsMesh(class FName FaceAnimationName, class FName CharaPartsDTRowName);
	void SetDebugPl();
	void SetFrameParticleAlpha(float Alpha);
	void SetCharaFaceMaterialParameter(class FName SectionName);
	void SetSequenceInGamePartyMember();
	void PrivateSetupStageParam(class ARSLevelSequenceActor* LevelSequence, TArray<class ABP_MenuPlayerBase_C*>& BindingSpawnPlayers, TArray<class ASkeletalMeshActor*>& BindingSpawnWeapons, bool UseInGamePlayer);
	void SetupFacialCaptureMaterial(bool IsNPC);
	void PrivateSetupHighResRenderTarget(const class FText& ErrorInformation);
	void PrivateGetRenderTarget(bool IsFace, const class FText& ErrorInformation, struct FFRenderTargetData* RTData);
	void PrivateSetupPlMaterialRenderType(class UMaterialInstanceDynamic* Mid, EEventCaptureRenderType RenderType);
	void PrivateSetupHighResCapture(class URSSceneCaptureComponent2D* SceneCapture, EEventCaptureRenderType RenderType);
	void SetupFacialCaptureRenderSetting(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, class AActor* Actor, class USkeletalMeshComponent* SkelMeshComp);
	void AdjustCaptureTarget(EEventCaptureType CaptureType, int32 FaceBoardMeshIndex, bool Reset);
	void SetupFacialCaptureRenderSettingInternal(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, struct FEventFacialCaptureRenderSettings* RenderSetting, bool* NpMaterial);
	void SetupFacialCaptureRenderSettingNPC(class URSSceneCaptureComponent2D* SceneCapture, class FName CapturePresetName, class ANpcSkeletalMeshActor* NPCSkelActor);
	void PrivateSetupHighResCaptureMaterial(bool UseHighRes);
	class UAnimationAsset* Get_Chara_Face_Part_AnimSequence(class UObject* Object, const class FString& FacialName, bool* IsFaceAnimation);
	void DestroyFrameParticle();
	void PrivatePauseHighResInGameActorsAnimation();
	void PrivateRestoreHighResAnimation();
	void IsGStaticTAACaptureRun(bool* Run);
	void IsGStaticTAACaptureFirst(bool* Run);
	void Setup_GStatic_TAACapture(EEventCaptureRenderType RenderType, bool* ErrorTextureTarget);
	void StartGStatic_TAACapture(bool UseTAA, bool ManyCapture);
	void EndGStatic_TAACapture();
	void OnOptimizeTick();
	void OffOptimizeTick();
	bool IsTownPeopleSkeletalMesh(const class FString& CharaObjectName);
	void PlayNpcMeshMontage(class UAnimMontage* AnimMontage, float InPlayRate, float InTimeToStartMontageAt, class FName SectionName);
	void TAAForceCaptureFinishEventStack();
	void ChangeCharaMaterial(class FName RowName);
	void UpdateGeneralParticles();
	void OnSkipButton();
	void Update_Frame_Drop(float DeltaSeconds);
	void GetRandomPlaneMesh(TArray<class USkeletalMesh*>& PlanList, class USkeletalMesh** PlaneMesh);
	void Check_and_Change_Light_Material_BP();
	void Set_All_Tick_Enabled(bool Enabled);
	void Set_Hidden_Mark(bool Hidden);
	void Set_Hidden_by_Current_Status();
	void SetBloodDecalBP();
	void ClearBloodDecalBP();
	class UAnimationAsset* Get_Anim_Sequence_from_Path(const class FString& Path, bool Load);
	void GetGeneralStaticBindingActors(TArray<class ABP_MenuPlayerBase_C*>* Param_GeneralBindingSpawnInstance, TArray<class ASkeletalMeshActor*>* Param_GeneralBindingSpawnWeaponInstance);
	void Is_Valid_Curve_Param_Type(ECurveParamType CurveParamType, bool* ReturnIsValid);
	void IsStartRipSyncCrossFadeChara(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPCaptureActor_C">();
	}
	static class ABPCaptureActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPCaptureActor_C>();
	}
};
static_assert(alignof(ABPCaptureActor_C) == 0x000008, "Wrong alignment on ABPCaptureActor_C");
static_assert(sizeof(ABPCaptureActor_C) == 0x000A58, "Wrong size on ABPCaptureActor_C");
static_assert(offsetof(ABPCaptureActor_C, UberGraphFrame) == 0x000238, "Member 'ABPCaptureActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaFacePartsCustomComponent) == 0x000240, "Member 'ABPCaptureActor_C::CharaFacePartsCustomComponent' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaFacePartsComponent) == 0x000248, "Member 'ABPCaptureActor_C::CharaFacePartsComponent' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, SM_co0300) == 0x000250, "Member 'ABPCaptureActor_C::SM_co0300' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, SM_static_pl_sky) == 0x000258, "Member 'ABPCaptureActor_C::SM_static_pl_sky' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ChildActor) == 0x000260, "Member 'ABPCaptureActor_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CaptureModel) == 0x000268, "Member 'ABPCaptureActor_C::CaptureModel' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, RSSceneCaptureComponent2D) == 0x000270, "Member 'ABPCaptureActor_C::RSSceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, Camera) == 0x000278, "Member 'ABPCaptureActor_C::Camera' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DefaultSceneRoot) == 0x000280, "Member 'ABPCaptureActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FrameParticleAlphaTimeline_Track_E998C6614D99BCCEC6362B9B84F3718F) == 0x000288, "Member 'ABPCaptureActor_C::FrameParticleAlphaTimeline_Track_E998C6614D99BCCEC6362B9B84F3718F' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FrameParticleAlphaTimeline__Direction_E998C6614D99BCCEC6362B9B84F3718F) == 0x00028C, "Member 'ABPCaptureActor_C::FrameParticleAlphaTimeline__Direction_E998C6614D99BCCEC6362B9B84F3718F' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FrameParticleAlphaTimeline) == 0x000290, "Member 'ABPCaptureActor_C::FrameParticleAlphaTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline_GlitchCurve_5729C23D46E753B230A2F680C09382F2) == 0x000298, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline_GlitchCurve_5729C23D46E753B230A2F680C09382F2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline_FringeCurve_5729C23D46E753B230A2F680C09382F2) == 0x0002A4, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline_FringeCurve_5729C23D46E753B230A2F680C09382F2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline_NoiseCurve_5729C23D46E753B230A2F680C09382F2) == 0x0002B0, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline_NoiseCurve_5729C23D46E753B230A2F680C09382F2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline_MonitorNoiseCurve_5729C23D46E753B230A2F680C09382F2) == 0x0002B4, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline_MonitorNoiseCurve_5729C23D46E753B230A2F680C09382F2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline__Direction_5729C23D46E753B230A2F680C09382F2) == 0x0002B8, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline__Direction_5729C23D46E753B230A2F680C09382F2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseAdvancedTimeline) == 0x0002C0, "Member 'ABPCaptureActor_C::NoiseAdvancedTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseTimeline_Track_E6D277BA484692FFE03CC0B5AA3F5B1D) == 0x0002C8, "Member 'ABPCaptureActor_C::NoiseTimeline_Track_E6D277BA484692FFE03CC0B5AA3F5B1D' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseTimeline__Direction_E6D277BA484692FFE03CC0B5AA3F5B1D) == 0x0002CC, "Member 'ABPCaptureActor_C::NoiseTimeline__Direction_E6D277BA484692FFE03CC0B5AA3F5B1D' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NoiseTimeline) == 0x0002D0, "Member 'ABPCaptureActor_C::NoiseTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TimelineAddBoardAnimWeightCurve_Track_E59A3A01434E2BBB6AAE77A278E9528A) == 0x0002D8, "Member 'ABPCaptureActor_C::TimelineAddBoardAnimWeightCurve_Track_E59A3A01434E2BBB6AAE77A278E9528A' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TimelineAddBoardAnimWeightCurve__Direction_E59A3A01434E2BBB6AAE77A278E9528A) == 0x0002DC, "Member 'ABPCaptureActor_C::TimelineAddBoardAnimWeightCurve__Direction_E59A3A01434E2BBB6AAE77A278E9528A' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TimelineAddBoardAnimWeightCurve) == 0x0002E0, "Member 'ABPCaptureActor_C::TimelineAddBoardAnimWeightCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_3_ParamYCurve_26CF180A46E0FE07CD22B28C225E0474) == 0x0002E8, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_3_ParamYCurve_26CF180A46E0FE07CD22B28C225E0474' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_3_ParamXCurve_26CF180A46E0FE07CD22B28C225E0474) == 0x0002EC, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_3_ParamXCurve_26CF180A46E0FE07CD22B28C225E0474' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_3__Direction_26CF180A46E0FE07CD22B28C225E0474) == 0x0002F0, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_3__Direction_26CF180A46E0FE07CD22B28C225E0474' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_3) == 0x0002F8, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectGaussFilterTimeline_Track_D1C10B9E40FE142F89097F8BE08263F3) == 0x000300, "Member 'ABPCaptureActor_C::EffectGaussFilterTimeline_Track_D1C10B9E40FE142F89097F8BE08263F3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectGaussFilterTimeline__Direction_D1C10B9E40FE142F89097F8BE08263F3) == 0x000304, "Member 'ABPCaptureActor_C::EffectGaussFilterTimeline__Direction_D1C10B9E40FE142F89097F8BE08263F3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectGaussFilterTimeline) == 0x000308, "Member 'ABPCaptureActor_C::EffectGaussFilterTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_2_ParamYCurve_10EA6CDD49920DC83A38C3982973510E) == 0x000310, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_2_ParamYCurve_10EA6CDD49920DC83A38C3982973510E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_2_ParamXCurve_10EA6CDD49920DC83A38C3982973510E) == 0x000314, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_2_ParamXCurve_10EA6CDD49920DC83A38C3982973510E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_2__Direction_10EA6CDD49920DC83A38C3982973510E) == 0x000318, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_2__Direction_10EA6CDD49920DC83A38C3982973510E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_2) == 0x000320, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_1_ParamYCurve_63A3D6EC42C3F05297FFF49C5F34B24E) == 0x000328, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_1_ParamYCurve_63A3D6EC42C3F05297FFF49C5F34B24E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_1_ParamXCurve_63A3D6EC42C3F05297FFF49C5F34B24E) == 0x00032C, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_1_ParamXCurve_63A3D6EC42C3F05297FFF49C5F34B24E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_1__Direction_63A3D6EC42C3F05297FFF49C5F34B24E) == 0x000330, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_1__Direction_63A3D6EC42C3F05297FFF49C5F34B24E' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurveTimelineBase_1) == 0x000338, "Member 'ABPCaptureActor_C::BoardParamCurveTimelineBase_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CrossFadeTimeline_Track_77235619450957C9FC9D208EF5E46B84) == 0x000340, "Member 'ABPCaptureActor_C::CrossFadeTimeline_Track_77235619450957C9FC9D208EF5E46B84' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CrossFadeTimeline__Direction_77235619450957C9FC9D208EF5E46B84) == 0x000344, "Member 'ABPCaptureActor_C::CrossFadeTimeline__Direction_77235619450957C9FC9D208EF5E46B84' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CrossFadeTimeline) == 0x000348, "Member 'ABPCaptureActor_C::CrossFadeTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TelepathyTimeLine_StaticTelepathy_loop_C4D48D5047DAF2C17A7F7DB746010AC1) == 0x000350, "Member 'ABPCaptureActor_C::TelepathyTimeLine_StaticTelepathy_loop_C4D48D5047DAF2C17A7F7DB746010AC1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TelepathyTimeLine__Direction_C4D48D5047DAF2C17A7F7DB746010AC1) == 0x000354, "Member 'ABPCaptureActor_C::TelepathyTimeLine__Direction_C4D48D5047DAF2C17A7F7DB746010AC1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TelepathyTimeLine) == 0x000358, "Member 'ABPCaptureActor_C::TelepathyTimeLine' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectAlphaTimeline__Direction_7BC54E104812DB0FB50E8C82820DA397) == 0x000360, "Member 'ABPCaptureActor_C::EffectAlphaTimeline__Direction_7BC54E104812DB0FB50E8C82820DA397' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectAlphaTimeline) == 0x000368, "Member 'ABPCaptureActor_C::EffectAlphaTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectMoveTimeline__Direction_FC24475242A91A71BE0D3C964E50B323) == 0x000370, "Member 'ABPCaptureActor_C::EffectMoveTimeline__Direction_FC24475242A91A71BE0D3C964E50B323' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectMoveTimeline) == 0x000378, "Member 'ABPCaptureActor_C::EffectMoveTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectScaleTimeline__Direction_7EE5F94043797CE93BB05CA3CE777981) == 0x000380, "Member 'ABPCaptureActor_C::EffectScaleTimeline__Direction_7EE5F94043797CE93BB05CA3CE777981' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EffectScaleTimeline) == 0x000388, "Member 'ABPCaptureActor_C::EffectScaleTimeline' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, RenderTarget) == 0x000390, "Member 'ABPCaptureActor_C::RenderTarget' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MIDList) == 0x000398, "Member 'ABPCaptureActor_C::MIDList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CameraTransformList) == 0x0003A8, "Member 'ABPCaptureActor_C::CameraTransformList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, PlaneMeshList) == 0x0003B8, "Member 'ABPCaptureActor_C::PlaneMeshList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BPCharaList) == 0x0003C8, "Member 'ABPCaptureActor_C::BPCharaList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentAnimationData) == 0x0003D8, "Member 'ABPCaptureActor_C::CurrentAnimationData' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MovieManager) == 0x0003E0, "Member 'ABPCaptureActor_C::MovieManager' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, UsedRenderTargetType) == 0x0003E8, "Member 'ABPCaptureActor_C::UsedRenderTargetType' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, VecAnimNamePath) == 0x0003F0, "Member 'ABPCaptureActor_C::VecAnimNamePath' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, VecIsAnimationLoop) == 0x000400, "Member 'ABPCaptureActor_C::VecIsAnimationLoop' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaAnimFolderPath) == 0x000410, "Member 'ABPCaptureActor_C::CharaAnimFolderPath' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentFrameParticle) == 0x000420, "Member 'ABPCaptureActor_C::CurrentFrameParticle' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ScaleStart) == 0x000428, "Member 'ABPCaptureActor_C::ScaleStart' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ScaleEnd) == 0x00042C, "Member 'ABPCaptureActor_C::ScaleEnd' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ScaleCurve) == 0x000430, "Member 'ABPCaptureActor_C::ScaleCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MoveCurve) == 0x000438, "Member 'ABPCaptureActor_C::MoveCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MoveStart) == 0x000440, "Member 'ABPCaptureActor_C::MoveStart' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MoveEnd) == 0x000448, "Member 'ABPCaptureActor_C::MoveEnd' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, AlphaStart) == 0x000450, "Member 'ABPCaptureActor_C::AlphaStart' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, AlphaEnd) == 0x000454, "Member 'ABPCaptureActor_C::AlphaEnd' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, AlphaCurve) == 0x000458, "Member 'ABPCaptureActor_C::AlphaCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ParticleMIDArray) == 0x000460, "Member 'ABPCaptureActor_C::ParticleMIDArray' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, SkyMeshActor) == 0x000470, "Member 'ABPCaptureActor_C::SkyMeshActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, VecNextBoardAnim) == 0x000478, "Member 'ABPCaptureActor_C::VecNextBoardAnim' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, PlaneMeshAssetList) == 0x000488, "Member 'ABPCaptureActor_C::PlaneMeshAssetList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutFramePSAsset) == 0x000498, "Member 'ABPCaptureActor_C::StaticCutFramePSAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutFramePSObject) == 0x0004A8, "Member 'ABPCaptureActor_C::StaticCutFramePSObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ChildActorAsset) == 0x0004B8, "Member 'ABPCaptureActor_C::ChildActorAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, LinearToSRGBMaterialAsset) == 0x0004E0, "Member 'ABPCaptureActor_C::LinearToSRGBMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticPlSkyMeshAsset) == 0x000508, "Member 'ABPCaptureActor_C::StaticPlSkyMeshAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralCaptureCamera) == 0x000530, "Member 'ABPCaptureActor_C::GeneralCaptureCamera' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralStaticSequenceActor) == 0x000538, "Member 'ABPCaptureActor_C::GeneralStaticSequenceActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, VecPlAnimNamePath) == 0x000540, "Member 'ABPCaptureActor_C::VecPlAnimNamePath' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentFrameTelepathyParticle) == 0x000550, "Member 'ABPCaptureActor_C::CurrentFrameTelepathyParticle' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutTelepathyPSObject) == 0x000558, "Member 'ABPCaptureActor_C::StaticCutTelepathyPSObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutTelepathyPSAsset) == 0x000568, "Member 'ABPCaptureActor_C::StaticCutTelepathyPSAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, TelepathyParticleMIDArray) == 0x000578, "Member 'ABPCaptureActor_C::TelepathyParticleMIDArray' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralParticles) == 0x000588, "Member 'ABPCaptureActor_C::GeneralParticles' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, LinearToSRGBMaterial) == 0x000598, "Member 'ABPCaptureActor_C::LinearToSRGBMaterial' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutOverTelepathyPSObject) == 0x0005A0, "Member 'ABPCaptureActor_C::StaticCutOverTelepathyPSObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCutOverTelepathyPSAsset) == 0x0005B0, "Member 'ABPCaptureActor_C::StaticCutOverTelepathyPSAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentFrameOverTelepathyParticle) == 0x0005C0, "Member 'ABPCaptureActor_C::CurrentFrameOverTelepathyParticle' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamName_1) == 0x0005C8, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamName_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamName_1) == 0x0005D0, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamName_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamName_2) == 0x0005D8, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamName_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamName_2) == 0x0005E0, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamName_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, IsCrossFadeCapActor) == 0x0005E8, "Member 'ABPCaptureActor_C::IsCrossFadeCapActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BeforeCapturePresetName) == 0x0005EC, "Member 'ABPCaptureActor_C::BeforeCapturePresetName' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DefaultCrossFadeCurve) == 0x0005F8, "Member 'ABPCaptureActor_C::DefaultCrossFadeCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamRate_1) == 0x000600, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamRate_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamRate_1) == 0x000604, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamRate_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamRate_2) == 0x000608, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamRate_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamRate_2) == 0x00060C, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamRate_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MainRTData) == 0x000610, "Member 'ABPCaptureActor_C::MainRTData' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Add_1) == 0x000628, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Add_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Add_2) == 0x000634, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Add_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Mul_1) == 0x000640, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Mul_1' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Mul_2) == 0x00064C, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Mul_2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NpcSkeletalActor) == 0x000658, "Member 'ABPCaptureActor_C::NpcSkeletalActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentCrossFadeTimelineDirection) == 0x000660, "Member 'ABPCaptureActor_C::CurrentCrossFadeTimelineDirection' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, LastBordAnimationName) == 0x000668, "Member 'ABPCaptureActor_C::LastBordAnimationName' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentCaptureType) == 0x000678, "Member 'ABPCaptureActor_C::CurrentCaptureType' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, SequenceEffectAlpha) == 0x00067C, "Member 'ABPCaptureActor_C::SequenceEffectAlpha' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentSettingCapData) == 0x000680, "Member 'ABPCaptureActor_C::CurrentSettingCapData' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ChangeFaceDataArray) == 0x0006F8, "Member 'ABPCaptureActor_C::ChangeFaceDataArray' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, NextChangeFaceData) == 0x000708, "Member 'ABPCaptureActor_C::NextChangeFaceData' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentChangeFaceTimeHandle) == 0x000720, "Member 'ABPCaptureActor_C::CurrentChangeFaceTimeHandle' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CaptureActorIndex) == 0x000728, "Member 'ABPCaptureActor_C::CaptureActorIndex' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CrossFadeCapActor) == 0x000730, "Member 'ABPCaptureActor_C::CrossFadeCapActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, IsEveryFrameCapture) == 0x000738, "Member 'ABPCaptureActor_C::IsEveryFrameCapture' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_16_9Asset) == 0x000740, "Member 'ABPCaptureActor_C::MI_static_pl_16_9Asset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_16_9Object) == 0x000768, "Member 'ABPCaptureActor_C::MI_static_pl_16_9Object' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_skyAsset) == 0x000770, "Member 'ABPCaptureActor_C::MI_static_pl_skyAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_skyObject) == 0x000798, "Member 'ABPCaptureActor_C::MI_static_pl_skyObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, IsUpdateCaptureScene) == 0x0007A0, "Member 'ABPCaptureActor_C::IsUpdateCaptureScene' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BindActorArray) == 0x0007A8, "Member 'ABPCaptureActor_C::BindActorArray' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FaceDataList) == 0x0007B8, "Member 'ABPCaptureActor_C::FaceDataList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaLipSyncAnimMontage) == 0x0007C0, "Member 'ABPCaptureActor_C::CharaLipSyncAnimMontage' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, IsCaptureCrossFadeCapActor) == 0x0007C8, "Member 'ABPCaptureActor_C::IsCaptureCrossFadeCapActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaDefaultFaceAnimMontage) == 0x0007D0, "Member 'ABPCaptureActor_C::CharaDefaultFaceAnimMontage' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentPlAnimationCurveDataList) == 0x0007D8, "Member 'ABPCaptureActor_C::CurrentPlAnimationCurveDataList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BeforeCrossFadeCurveValue) == 0x0007E8, "Member 'ABPCaptureActor_C::BeforeCrossFadeCurveValue' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamName_3) == 0x0007EC, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamName_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamName_3) == 0x0007F4, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamName_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_XParamRate_3) == 0x0007FC, "Member 'ABPCaptureActor_C::BoardParamCurve_XParamRate_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_YParamRate_3) == 0x000800, "Member 'ABPCaptureActor_C::BoardParamCurve_YParamRate_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Add_3) == 0x000804, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Add_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BoardParamCurve_Sp_Mul_3) == 0x000810, "Member 'ABPCaptureActor_C::BoardParamCurve_Sp_Mul_3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DefaultAddBoardAnimCurve) == 0x000820, "Member 'ABPCaptureActor_C::DefaultAddBoardAnimCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralParticleDirty) == 0x000828, "Member 'ABPCaptureActor_C::GeneralParticleDirty' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BeforeAlphaCurveValue) == 0x00082C, "Member 'ABPCaptureActor_C::BeforeAlphaCurveValue' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CurrentEffectAlpha) == 0x000830, "Member 'ABPCaptureActor_C::CurrentEffectAlpha' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, WaitGeneralCapture) == 0x000834, "Member 'ABPCaptureActor_C::WaitGeneralCapture' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ImageMaterialAnimMontage) == 0x000838, "Member 'ABPCaptureActor_C::ImageMaterialAnimMontage' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_CharaBGAsset) == 0x000840, "Member 'ABPCaptureActor_C::MI_static_pl_CharaBGAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MI_static_pl_CharaBG) == 0x000868, "Member 'ABPCaptureActor_C::MI_static_pl_CharaBG' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FacialCaptureActor) == 0x000870, "Member 'ABPCaptureActor_C::FacialCaptureActor' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FacialCaptureMesh) == 0x000878, "Member 'ABPCaptureActor_C::FacialCaptureMesh' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, EyeDataList) == 0x000880, "Member 'ABPCaptureActor_C::EyeDataList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaFacePartsMesh) == 0x000888, "Member 'ABPCaptureActor_C::CharaFacePartsMesh' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaFacePartsMeshAsset) == 0x000890, "Member 'ABPCaptureActor_C::CharaFacePartsMeshAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DefaultFrameParticleFadeCurve) == 0x0008B8, "Member 'ABPCaptureActor_C::DefaultFrameParticleFadeCurve' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BeforeStaticPlType) == 0x0008C0, "Member 'ABPCaptureActor_C::BeforeStaticPlType' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralParticleHandle) == 0x0008C4, "Member 'ABPCaptureActor_C::GeneralParticleHandle' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResRenderTarget2) == 0x0008C8, "Member 'ABPCaptureActor_C::HighResRenderTarget2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResRenderTarget3) == 0x0008D0, "Member 'ABPCaptureActor_C::HighResRenderTarget3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResRenderIndex) == 0x0008D8, "Member 'ABPCaptureActor_C::HighResRenderIndex' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResUsedRenderTargetType2) == 0x0008DC, "Member 'ABPCaptureActor_C::HighResUsedRenderTargetType2' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResUsedRenderTargetType3) == 0x0008DD, "Member 'ABPCaptureActor_C::HighResUsedRenderTargetType3' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResRestoreMPCGlobalRate) == 0x0008E0, "Member 'ABPCaptureActor_C::HighResRestoreMPCGlobalRate' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FaceTAACount) == 0x0008E4, "Member 'ABPCaptureActor_C::FaceTAACount' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralParticleBindings) == 0x0008E8, "Member 'ABPCaptureActor_C::GeneralParticleBindings' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResMode) == 0x0008F8, "Member 'ABPCaptureActor_C::HighResMode' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralBindingSpawnInstance) == 0x000900, "Member 'ABPCaptureActor_C::GeneralBindingSpawnInstance' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResPauseMeshes) == 0x000910, "Member 'ABPCaptureActor_C::HighResPauseMeshes' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralBindingSpawnWeaponInstance) == 0x000920, "Member 'ABPCaptureActor_C::GeneralBindingSpawnWeaponInstance' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralTAACaptureTime) == 0x000930, "Member 'ABPCaptureActor_C::GeneralTAACaptureTime' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralTAACaptureMode) == 0x000934, "Member 'ABPCaptureActor_C::GeneralTAACaptureMode' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, RestoreOptimizeTickCharaFaceParts) == 0x000935, "Member 'ABPCaptureActor_C::RestoreOptimizeTickCharaFaceParts' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, RestoreOptimizeTickStaticPlWidget) == 0x000936, "Member 'ABPCaptureActor_C::RestoreOptimizeTickStaticPlWidget' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CharaPartsDataList) == 0x000938, "Member 'ABPCaptureActor_C::CharaPartsDataList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BGWaitMode) == 0x000940, "Member 'ABPCaptureActor_C::BGWaitMode' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DebugStaticPLMaterial) == 0x000948, "Member 'ABPCaptureActor_C::DebugStaticPLMaterial' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GStaticRemoveEventCommand) == 0x000958, "Member 'ABPCaptureActor_C::GStaticRemoveEventCommand' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralParticleRetry) == 0x000959, "Member 'ABPCaptureActor_C::GeneralParticleRetry' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralTAACaptureSeconds) == 0x00095C, "Member 'ABPCaptureActor_C::GeneralTAACaptureSeconds' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DynamicTextureRowName) == 0x000960, "Member 'ABPCaptureActor_C::DynamicTextureRowName' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, One6_9PlaneMeshList) == 0x000968, "Member 'ABPCaptureActor_C::One6_9PlaneMeshList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, One_1PlaneMeshList) == 0x000978, "Member 'ABPCaptureActor_C::One_1PlaneMeshList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, One6_9PlaneMeshAssetList) == 0x000988, "Member 'ABPCaptureActor_C::One6_9PlaneMeshAssetList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, One_1PlaneMeshAssetList) == 0x000998, "Member 'ABPCaptureActor_C::One_1PlaneMeshAssetList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, PlRandomStream) == 0x0009A8, "Member 'ABPCaptureActor_C::PlRandomStream' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCut1_1FramePSObject) == 0x0009B0, "Member 'ABPCaptureActor_C::StaticCut1_1FramePSObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCut16_9FramePSObject) == 0x0009C0, "Member 'ABPCaptureActor_C::StaticCut16_9FramePSObject' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCut1_1FramePSAsset) == 0x0009D0, "Member 'ABPCaptureActor_C::StaticCut1_1FramePSAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, StaticCut16_9FramePSAsset) == 0x0009E0, "Member 'ABPCaptureActor_C::StaticCut16_9FramePSAsset' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, IsUseRandomPl) == 0x0009F0, "Member 'ABPCaptureActor_C::IsUseRandomPl' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BackupMaterialParam_SrcTexX) == 0x0009F4, "Member 'ABPCaptureActor_C::BackupMaterialParam_SrcTexX' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, BackupMaterialParam_SrcTexY) == 0x0009F8, "Member 'ABPCaptureActor_C::BackupMaterialParam_SrcTexY' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, MaterialSources) == 0x000A00, "Member 'ABPCaptureActor_C::MaterialSources' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HiddenMark) == 0x000A10, "Member 'ABPCaptureActor_C::HiddenMark' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, ParticleAfterActorTickOff) == 0x000A11, "Member 'ABPCaptureActor_C::ParticleAfterActorTickOff' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, DecalBP) == 0x000A18, "Member 'ABPCaptureActor_C::DecalBP' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResProjectionScaleX) == 0x000A20, "Member 'ABPCaptureActor_C::HighResProjectionScaleX' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, RestoreOptimizeTickCharaFacePartsCustom) == 0x000A24, "Member 'ABPCaptureActor_C::RestoreOptimizeTickCharaFacePartsCustom' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, SetupStoreSequencerInGameTransform) == 0x000A25, "Member 'ABPCaptureActor_C::SetupStoreSequencerInGameTransform' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResTickPauseParticles) == 0x000A28, "Member 'ABPCaptureActor_C::HighResTickPauseParticles' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, HighResResetCull) == 0x000A38, "Member 'ABPCaptureActor_C::HighResResetCull' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, GeneralTAACaptureManyCap) == 0x000A39, "Member 'ABPCaptureActor_C::GeneralTAACaptureManyCap' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, CaptureGeneralStatic) == 0x000A3A, "Member 'ABPCaptureActor_C::CaptureGeneralStatic' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, FirstRipSync) == 0x000A3B, "Member 'ABPCaptureActor_C::FirstRipSync' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, AttachmentIDList) == 0x000A40, "Member 'ABPCaptureActor_C::AttachmentIDList' has a wrong offset!");
static_assert(offsetof(ABPCaptureActor_C, Find) == 0x000A50, "Member 'ABPCaptureActor_C::Find' has a wrong offset!");

}

