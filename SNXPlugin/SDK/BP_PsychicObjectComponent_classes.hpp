#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PsychicObjectComponent

#include "Basic.hpp"

#include "PsychicObjectSizeParameter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "PsychicObjectAttackType_structs.hpp"
#include "SPsychicCaptureMaterial_structs.hpp"
#include "PsychicObjectSoundData2_structs.hpp"
#include "Enum_ui_pk_weight_gauge_button_structs.hpp"
#include "PsychicGrabMovementSizeData_structs.hpp"
#include "Enum_ui_pk_weight_gauge_size_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PsychicObjectComponent.BP_PsychicObjectComponent_C
// 0x1780 (0x1850 - 0x00D0)
class UBP_PsychicObjectComponent_C final : public URSAsyncTaskActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	BattlePrototype::EPsychicObjectID             PsychicObjectID;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueType                      PsychicObjectUniqueType;                           // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        PsychicObjectSize;                                 // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAsync;                                            // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70FB[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         HudMain;                                           // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        CaptureOwner;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicAnimObject_C*                   AnimOwner;                                         // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActorFix;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicObjectActive;                              // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicObjectProcedure                       ProcedurePhase;                                    // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectState                           PsychicObjectState;                                // 0x010A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnemyOwner;                                       // 0x010B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNpcOwner;                                         // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMetamophosisOwner;                                // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCommon;                                     // 0x010E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70FC[0x1];                                     // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AsyncCommonRefList;                                // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bRequestAsyncCommon;                               // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncCommon;                                      // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipNormalCapture;                                // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCapture;                                    // 0x0123(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDispDamageMesh;                                   // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70FD[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PsychicObjectMass;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureVibrate;                                   // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bComboCapture;                                     // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70FE[0x2];                                     // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CaptureTypeNo;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70FF[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TickNameList;                                      // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniqueObject;                                     // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bParentObj;                                        // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bChildObj;                                         // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseAttackCapsule;                                 // 0x014B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bChildDestroy;                                     // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7100[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletNum;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBulletParent;                                     // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7101[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       BulletList;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBulletObj;                                        // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckBulletCollProfile;                           // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7102[0x6];                                     // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               BulletParentObj;                                   // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletIndex;                                       // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueMontageType               UniqueMontageType;                                 // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyPsyObj;                                       // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFloatObject;                                      // 0x017E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7103[0x1];                                     // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatObjectLinearDamping;                          // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatObjectAngularDamping;                         // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatObjectLinearDampingBackup;                    // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatObjectAngularDampingBackup;                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoRespawnObj;                                     // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7104[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       ChildObjList;                                      // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             CaptureTimer;                                      // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CaptureTime;                                       // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CaptureTimeDailtionName;                           // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_SASKind                                     CaptureSasKind;                                    // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7105[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureRate;                                       // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureRateEx;                                     // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapturePassTime;                                   // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureLevel;                                     // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDisplay;                                     // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7106[0x2];                                     // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftUpTime;                                        // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpHeight;                                      // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7107[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PsychicComponentMain_C*             Pcm;                                               // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLiftUp;                                           // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLiftUpSe;                                         // 0x01F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncLiftUp;                               // 0x01F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncLiftUp;                                      // 0x01F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             LiftUpTimer;                                       // 0x01F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LiftUpRate;                                        // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7108[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 FocusMeshList;                                     // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 CaptureMeshList;                                   // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 AuraMeshList;                                      // 0x0228(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       CaptureChildList;                                  // 0x0238(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 DestroyEffectMeshList;                             // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bCurrentDeltaSecond;                               // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7109[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentDeltaSecond;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCameraTransform;                                  // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_710A[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraPos;                                         // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRot;                                         // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CameraDir;                                         // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 InstanceValueList;                                 // 0x0288(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                WorkPsyObjPos;                                     // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkPsyObjRot;                                     // 0x02A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WorkLerpPosStt;                                    // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLerpPosEnd;                                    // 0x02BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLerpPos;                                       // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkLerpRotStt;                                    // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkLerpRotEnd;                                    // 0x02E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkLerpRot;                                       // 0x02EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         WorkRate;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_710B[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         MeshComp;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ArrowComp;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   LiftUpPosEaseType;                                 // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   LiftUpRotEaseType;                                 // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_710C[0x2];                                     // 0x0312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowAccelTime;                                    // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackUnique;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackCombo;                                      // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackBrainField;                                 // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackSwing;                                      // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipAttack;                                       // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncAttack;                               // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncAttack;                                      // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackThrow;                                      // 0x031F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackSkipAttach;                                 // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_710D[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             ThrowAccelTimer;                                   // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             ThrowLimitTimer;                                   // 0x0330(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ThrowVector;                                       // 0x033C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedStt;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedMax;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackComboParam;                                 // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAirCombo;                                         // 0x0355(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_710E[0x2];                                     // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComboLevel;                                        // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ComboIndex;                                        // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedNormal;                                  // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedCombo;                                   // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedUnique;                                  // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedCopy;                                    // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedNormalEnemy;                             // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedComboEnemy;                              // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedBrnFieldEnemy;                           // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedPsyFieldEnemy;                           // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedEnemyObj;                                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedEnemyRate;                               // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedIntercept;                               // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedInterceptEm0100;                         // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedInterceptEm0200;                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedInterceptEm8200;                         // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedInterceptEm8400;                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   ThrowSpeedEaseType;                                // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_710F[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowLimitTime;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractTime;                                       // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttractEnemy;                                     // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractNoAttach;                                  // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractAttackBlend;                               // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractSwingArrow;                                // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncAttract;                              // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncAttract;                                     // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7110[0x2];                                     // 0x03AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             AttractTimer;                                      // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEasingFunc                                   AttractPosEaseType;                                // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   AttractRotEaseType;                                // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7111[0x2];                                     // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackSphereRadius;                                // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCapsuleRadius;                               // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCapsuleHalfHeight;                           // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackComboOffset;                                 // 0x03CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackLerpTime;                                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   AttackLerpEaseType;                                // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7112[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinSpeedMax;                                      // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackEndTime;                                     // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPsychicObjectUniqueInputType>         UniqueAttackIputTypeOld;                           // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EPsychicObjectUniqueInputButton>       UniqueAttackInputButtonOld;                        // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  UniqueAttackInputSuccessOld;                       // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         InputEndTimeOld;                                   // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputEndTimerOld;                                  // 0x041C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InputWaitTimeOld;                                  // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7113[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueTimeDailtionName;                            // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         UniqueTimeDilationRateOld;                         // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyEffectTime;                                 // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbDispStatusID;                                   // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusSize;                                 // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusActive;                               // 0x044A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusPhase;                                // 0x044B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusState;                                // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusPhysic;                               // 0x044D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusProfile;                              // 0x044E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusCapture;                              // 0x044F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusLiftUp;                               // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispStatusAttract;                              // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispAttackSphere;                               // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispChild;                                      // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispAttackCollision;                            // 0x0454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDrawAsyncCommon;                                // 0x0455(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawTickActor;                               // 0x0456(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawTickComponent;                           // 0x0457(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawInUse;                                   // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintSimulate;                               // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintSimulateCheck;                          // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDrawPhysicForce;                                // 0x045B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintEffect;                                    // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintSound;                                     // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAbolishMainSimulate;                              // 0x045E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7114[0x1];                                     // 0x045F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugLastAnimationName;                            // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDbDispStatusVibrateOld;                           // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbOptionLiftUpOld;                                // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7115[0x2];                                     // 0x0472(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             DestroyEffectTimer;                                // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                AttractOffset;                                     // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttractOffsetEm;                                   // 0x048C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbOptionKeepAttractOld;                           // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7116[0x3];                                     // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             AttackLerpTimer;                                   // 0x049C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CaptureType;                                       // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureLevelMax;                                   // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureLevel;                                      // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputWaitTimerOld;                                 // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMeshComponent*                         BackupComp;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         WreckageComp;                                      // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               PsyObjOwner;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AttackSphere;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      AttackCapsule;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    AttackPrimitive;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_UniqueObjectComponentBase_C*        UnqObjComp;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SplineComp;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueAttackCount;                                 // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueAttackMax;                                   // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRequestAsyncAttackUnique;                         // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncAttackUnique;                                // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueAttackInputSign;                            // 0x0512(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWeightGauge;                                      // 0x0513(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackEnd;                                        // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7117[0x3];                                     // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             AttackEndTimer;                                    // 0x0518(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackSpin;                                       // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7118[0x3];                                     // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             RotLerpTimer;                                      // 0x0528(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotLerpTime;                                       // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackThrowSkipActor;                             // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckHitFloor;                                    // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckHitWall;                                     // 0x053A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckHitCeiling;                                  // 0x053B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitFloor;                                         // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitCelling;                                       // 0x053D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitWall;                                          // 0x053E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipCheckWall;                                    // 0x053F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckHitAttackEnd;                                // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7119[0x3];                                     // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttackPosPrev;                                     // 0x0544(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackPosNow;                                      // 0x0550(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeNormal;                                 // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeCombo;                                  // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711A[0x4];                                     // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CapturePosCurve;                                   // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CaptureHeightCurve;                                // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CaptureRotCurve;                                   // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVibrate;                                          // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bVibrateProc;                                      // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bVibrateHandle;                                    // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bVibrateAngle;                                     // 0x0583(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncVibrate;                              // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncVibrate;                                     // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711B[0x2];                                     // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             VibrateTimer;                                      // 0x0588(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         VibrateTime;                                       // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VibrateSignType;                                   // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateStartTime;                                  // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateEndTime;                                    // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateRangeMin;                                   // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateRangeMax;                                   // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateSpeedRate;                                  // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateRate;                                       // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpStartTime;                                   // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpEndTime;                                     // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpRangeMin;                                    // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiftUpRangeMax;                                    // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibratePosOffset;                                  // 0x05C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LiftUpOffset;                                      // 0x05D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipHoming;                                       // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711C[0x3];                                     // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingSpeedNormal;                                 // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedCombo;                                  // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedUnique;                                 // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedCopy;                                   // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedNormalEnemy;                            // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedComboEnemy;                             // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedBrnFieldEnemy;                          // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedNormal_em8400;                          // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedCombo_em8400;                           // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedBrnField_em8400;                        // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedEnemyObj;                               // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedEnemyRate;                              // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedIntercept;                              // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedInterceptEm0100;                        // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedInterceptEm0200;                        // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedInterceptEm8200;                        // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeedInterceptEm8400;                        // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeed;                                       // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleSpeedVt;                               // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleSpeedHz;                               // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleRange;                                 // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleVt;                                    // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleHz;                                    // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateAngleRate;                                  // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAngleOffsetStt;                             // 0x0640(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAngleOffsetEnd;                             // 0x064C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAngleOffsetEx;                              // 0x0658(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAxisVt;                                     // 0x0664(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAxisHz;                                     // 0x0670(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VibrateAxisEnd;                                    // 0x067C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ui_pk_weight_gauge_button                WeightGaugeButtonType;                             // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711D[0x7];                                     // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CaptureLevelTime;                                  // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDbAttractAttackPl;                                // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbUniqueAnim;                                     // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711E[0x2];                                     // 0x06A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             CheckHitTimer;                                     // 0x06A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CheckHitTime;                                      // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHandleGrab;                                       // 0x06B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHandleGrabLock;                                   // 0x06B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHandleGrabRot;                                    // 0x06B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseHandleGrabCenter;                              // 0x06B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HandleLinearDamping;                               // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExtendLerp;                                       // 0x06BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bExtendLerpPos;                                    // 0x06BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711F[0x2];                                     // 0x06BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExtendLerpPosCalc;                                 // 0x06C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExtendLerpPosAnim;                                 // 0x06CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExtendLerpPosTgt;                                  // 0x06D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             ExtendLerpTimer;                                   // 0x06E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ExtendLerpTime;                                    // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtendLerpRate;                                    // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTestPhysCaptureProc;                              // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7120[0x3];                                     // 0x06F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PhysCapturePos;                                    // 0x06FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             PhysCapLiftUpTimer;                                // 0x0708(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             PhysCapThrowTimer;                                 // 0x0714(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPhysCapLiftUp;                                    // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7121[0x3];                                     // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysCaptureRandAngle;                              // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCaptureRandAngleZ;                             // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PhysCaptureRandAxisZ;                              // 0x072C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapLiftUpForce;                                // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapLiftUpForceBase;                            // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapLiftUpForceMin;                             // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapLiftUpForceMax;                             // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapLiftUpForceTime;                            // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   PhysCapLiftUpForceEase;                            // 0x074C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7122[0x3];                                     // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysCapThrowForce;                                 // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapThrowForceBase;                             // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapThrowForceMin;                              // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapThrowForceMax;                              // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapThrowForceTime;                             // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   PhysCapThrowForceEase;                             // 0x0764(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7123[0x3];                                     // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AnimObjPos;                                        // 0x0768(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AnimObjRot;                                        // 0x0774(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<int32>                                 AttackTypeList;                                    // 0x0780(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AttackTypeIndex;                                   // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractAttackRate;                                 // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttractAttackStart;                               // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractSkipAttack;                                // 0x0799(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCallAttractSuccess;                               // 0x079A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7124[0x1];                                     // 0x079B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorkLerpPosStt_0;                                  // 0x079C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLerpPosEnd_0;                                  // 0x07A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLerpPos_0;                                     // 0x07B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkLerpRotStt_0;                                  // 0x07C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkLerpRotEnd_0;                                  // 0x07CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkLerpRot_0;                                     // 0x07D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7125[0x4];                                     // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAttractPos;                                   // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurveAttractRot;                                   // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         EffectAttack;                                      // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         EffectWreckage;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroyDelay;                                     // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7126[0x3];                                     // 0x0809(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             DestroyDelayTimer;                                 // 0x080C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DestroyDelayTime;                                  // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyDelayTimeRateCopy;                          // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyDelayTimeEnemy;                             // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroyEffect;                                    // 0x0824(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7127[0x3];                                     // 0x0825(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EmitterAttackDirectDrop;                           // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class URSParticleSystemComponentBase*> ParticleChildCapture;                              // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bEffectAttack;                                     // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7128[0x7];                                     // 0x0841(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicObjectSoundData2               SoundData;                                         // 0x0848(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUpdateFocusPos;                                   // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7129[0x7];                                     // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AttackComboAnimSeq;                                // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PartsParent;                                       // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712A[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       PartsObjList;                                      // 0x08A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPartsObj;                                         // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712B[0x7];                                     // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               PartsParentObj;                                    // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBackupAttackParam;                                // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicObjectSizeType                        BackupAttackSize;                                  // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	PsychicObjectAttackType::EPsychicObjectAttackType BackupAttackType;                                  // 0x08CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_712C[0x1];                                     // 0x08CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackupAttackRadius;                                // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckDestroy;                                     // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckDestroyProc;                                 // 0x08D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEffectDestroySkip;                                // 0x08D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEffectDestroySkipOnce;                            // 0x08D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDestroyExplosion;                                 // 0x08D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712D[0x3];                                     // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BrainFieldDropRadius;                              // 0x08D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 BrainFieldSwingRadius;                             // 0x08E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 BrainFieldSwingHalfHeight;                         // 0x08F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        BrainFieldSwingPosOffset;                          // 0x0908(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                BrainFieldSwingPosRandomMin;                       // 0x0918(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BrainFieldSwingPosRandomMax;                       // 0x0924(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldObjRandom;                              // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712E[0x3];                                     // 0x0931(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BrainFieldSwingPosRandom;                          // 0x0934(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BrainFieldSwingRotRandom;                          // 0x0940(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldObj;                                    // 0x094C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldGrab;                                   // 0x094D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldAttackCollision;                        // 0x094E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bResetBrainFieldPos;                               // 0x094F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicObjectBrainFieldAttackType            BrainFieldAttackType;                              // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_712F[0x3];                                     // 0x0951(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BrainFieldAttackLevel;                             // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BrainFieldObjMax;                                  // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BrainFieldIndex;                                   // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BrainFieldAttackIndex;                             // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BrainFieldOffset;                                  // 0x0964(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAppear;                                           // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7130[0x3];                                     // 0x0971(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearTime;                                        // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AppearTimer;                                       // 0x0978(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HandleLinearStiffness;                             // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleAngularDamping;                              // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleAngularStiffness;                            // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleInterpolationSpeed;                          // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleLinearStiffnessFix;                          // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleAngularStiffnessFix;                         // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleInterpolationSpeedFix;                       // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandleInterpolationSpeedBrainField;                // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysCapMass;                                       // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandleGrabPos;                                     // 0x09A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HandleGrabRot;                                     // 0x09B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                HandleTargetPos;                                   // 0x09C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HandleTargetRot;                                   // 0x09CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPhysicInitialized;                                // 0x09D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             PhysicCollision;                                   // 0x09D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPhysicSimulate;                                   // 0x09DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPhysicGravity;                                    // 0x09DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCommonSpline;                                     // 0x09DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSplineHandle;                                     // 0x09DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSplineRotDist;                                    // 0x09DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSplineObj;                                        // 0x09DF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractEnemyProc;                                 // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropDirect;                                 // 0x09E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropDirectCall;                             // 0x09E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7131[0x5];                                     // 0x09E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SplineDistCurve;                                   // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SplinePointList;                                   // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FRotator>                       SplineRotList;                                     // 0x0A00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	ESplineCoordinateSpace                        SplineCoordinateSpace;                             // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7132[0x3];                                     // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SplinePointNum;                                    // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineDistance;                                    // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineRate;                                        // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineDirection;                                   // 0x0A20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplineIndex;                                       // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             SplineTimer;                                       // 0x0A30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCommonAttract;                                    // 0x0A3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7133[0x3];                                     // 0x0A3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttractTimeSwing;                                  // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7134[0x4];                                     // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationName;                                     // 0x0A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                AnimScale;                                         // 0x0A58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateAnimObj;                                    // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAnimNotifyReturn;                                 // 0x0A65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDrop;                                       // 0x0A66(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropWait;                                   // 0x0A67(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropSkipThrow;                              // 0x0A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropAnimation;                              // 0x0A69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackDropAnimVector;                             // 0x0A6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7135[0x1];                                     // 0x0A6B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDropHeightOffset;                            // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDropSpline;                                       // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7136[0x3];                                     // 0x0A71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VecDropSpline;                                     // 0x0A74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleDropSpline;                                   // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   EaseTypeDropSpline;                                // 0x0A84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7137[0x3];                                     // 0x0A85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseRateDropSpline;                                // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             DropDelayTimer;                                    // 0x0A8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DropDelayTime;                                     // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckChildParent;                                 // 0x0A9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7138[0x3];                                     // 0x0A9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       CheckChildObjList;                                 // 0x0AA0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bCheckChildObj;                                    // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckChildCollProfile;                            // 0x0AB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckChildFocus;                                  // 0x0AB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckChildCapture;                                // 0x0AB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCollisionProfileIgnore;                           // 0x0AB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCollisionProfileNoCollision;                      // 0x0AB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCollisionProfileTemp;                             // 0x0AB6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7139[0x1];                                     // 0x0AB7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProfileNamePsyObj;                                 // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileNameIgnore;                                 // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileNameNoCollision;                            // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileNameCurrent;                                // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileNameBackup;                                 // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileNameTemp;                                   // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEffectAttackSkip;                                 // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713A[0x3];                                     // 0x0AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureHeight;                                     // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEffectAttackKeep;                                 // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnpcObject;                                       // 0x0AF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOut;                                          // 0x0AF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutCurve;                                     // 0x0AF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureToPullOut;                                 // 0x0AF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutHandle;                                    // 0x0AF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutCurveRot;                                  // 0x0AF6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713B[0x1];                                     // 0x0AF7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PullOutPosCurve;                                   // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            PullOutAngleCurve;                                 // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           PullOutRotCurve;                                   // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PullOutTime;                                       // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             PullOutTimer;                                      // 0x0B14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PullOutObjDir;                                     // 0x0B20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PullOutOffset;                                     // 0x0B2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PullOutAngle;                                      // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PullOutPosStt;                                     // 0x0B3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PullOutRotStt;                                     // 0x0B48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               PullOutRot;                                        // 0x0B54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SplineTimeRate;                                    // 0x0B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSplineAboveEnemy;                                 // 0x0B64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSplineRotLerp;                                    // 0x0B65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713C[0x2];                                     // 0x0B66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AboveEnemyPosEndOffset;                            // 0x0B68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AboveEnemyAngleOffsetHz;                           // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   EnemyOwner;                                        // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnemyOccupied;                                    // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyTypeEm0900;                                  // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyRandomObj;                                   // 0x0B82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyDirectShot;                                  // 0x0B83(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseEnemyAttackParameter;                          // 0x0B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713D[0x3];                                     // 0x0B85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCCollisionCommonInfo                 EnemyCommonInfo;                                   // 0x0B88(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHCSkillCommonInfo                     EnemySkillInfo;                                    // 0x0BF8(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHandleBackup;                                     // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             HandleBackupCollision;                             // 0x0CE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHandleBackupSimulate;                             // 0x0CEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHandleBackupGravity;                              // 0x0CEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MeshOffset;                                        // 0x0CEC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSplineFollowTarget;                               // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713E[0x3];                                     // 0x0CF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineFollowTargetPos;                             // 0x0CFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyProc;                                         // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyDirectDrop;                                   // 0x0D09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyCombo;                                        // 0x0D0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyDelay;                                        // 0x0D0B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyAppear;                                       // 0x0D0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyAppearProc;                                   // 0x0D0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCopyAttack;                                       // 0x0D0E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713F[0x1];                                     // 0x0D0F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               CopyParentObj;                                     // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopyDelayTime;                                     // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopyAppearTime;                                    // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopyAttackTime;                                    // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             CopyDelayTimer;                                    // 0x0D24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             CopyAppearTimer;                                   // 0x0D30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             CopyAttackTimer;                                   // 0x0D3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CopyIndex;                                         // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7140[0x4];                                     // 0x0D4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicGrabMovementSizeData           GrabMovementSizeData;                              // 0x0D50(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureHandleTargetPos;                            // 0x0E00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackDropTargetLocation;                         // 0x0E0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackThrowTargetLocation;                        // 0x0E0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNewCommon;                                        // 0x0E0E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7141[0x1];                                     // 0x0E0F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CopyParentStartPos;                                // 0x0E10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CopyStartPos;                                      // 0x0E1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CopyThrowDir;                                      // 0x0E28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopySpeedRateMax;                                  // 0x0E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CopySpeedMax;                                      // 0x0E38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackSphereOffset;                                // 0x0E3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackIntercept;                                  // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyIntercept;                                   // 0x0E49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInterceptReserve;                                 // 0x0E4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7142[0x1];                                     // 0x0E4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttackCapsuleOffset;                               // 0x0E4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AttackCapsuleBaseRot;                              // 0x0E58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AttackDropTimeRateDirect;                          // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackDropTimeRateBrain;                           // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PullOutForwardDir;                                 // 0x0E6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DestructibleClass;                                 // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectDestructibleBasic_C*   DestructibleActor;                                 // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestructibleAuto;                                 // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7143[0x3];                                     // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructibleImpulse;                               // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChildPsyObj;                                       // 0x0E90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7144[0x7];                                     // 0x0E91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               ChildPsyObjParentObj;                              // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VibrateRangeZ;                                     // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7145[0x4];                                     // 0x0EA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AttackDropSplineDistance;                          // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackDirectDrop;                                 // 0x0EB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7146[0x7];                                     // 0x0EB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AttackDirectDropMontage;                           // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AttackDirectDropSplineDistanceCurve;               // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AttackDirectDropSpinCurve;                         // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackDirectDropSpinSpeedMax;                      // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackDirectDropOffset;                            // 0x0ED4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AttackDirectDropRot;                               // 0x0EE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                AttackDirectDropAxis;                              // 0x0EEC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPullOutEndPos;                                    // 0x0EF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7147[0x3];                                     // 0x0EF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PullOutPosEnd;                                     // 0x0EFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPullOutEndRot;                                    // 0x0F08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7148[0x3];                                     // 0x0F09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PullOutRotEnd;                                     // 0x0F0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEffectAppear;                                     // 0x0F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEffectAppearReverse;                              // 0x0F19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7149[0x2];                                     // 0x0F1A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectAppearTime;                                  // 0x0F1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             EffectAppearTimer;                                 // 0x0F20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BrainFieldRandomAngleMin;                          // 0x0F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldRandomAngleMax;                          // 0x0F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldRandomDistanceMin;                       // 0x0F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldRandomDistanceMax;                       // 0x0F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldRandomHeightMin;                         // 0x0F3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldRandomHeightMax;                         // 0x0F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldSpawnHeightMin;                          // 0x0F44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldSpawnHeightMax;                          // 0x0F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldDropAttack;                             // 0x0F4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_714A[0x3];                                     // 0x0F4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BrainFieldDropOffset;                              // 0x0F50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldDropCamera;                             // 0x0F5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckTimeDilationApply;                           // 0x0F5D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckTimeDilationAttack;                          // 0x0F5E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckTimeDilationSkip;                            // 0x0F5F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CheckTimeDilationValue;                            // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTimeDilationCapture;                              // 0x0F64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTimeDilationPull;                                 // 0x0F65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_714B[0x2];                                     // 0x0F66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             TimeDilationPullLerpTimer;                         // 0x0F68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TimeDilationPullLerpTime;                          // 0x0F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TimeDilationPullPosStt;                            // 0x0F78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TimeDilationPullPosEnd;                            // 0x0F84(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TimeDilationPullRotStt;                            // 0x0F90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TimeDilationPullRotEnd;                            // 0x0F9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEasingFunc                                   TimeDilationPullEaseType;                          // 0x0FA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714C[0x3];                                     // 0x0FA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeDilationPullEaseBlend;                         // 0x0FAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureMeshPosStt;                                 // 0x0FB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureMeshPosEnd;                                 // 0x0FBC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureMeshRotStt;                                 // 0x0FC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_714D[0x4];                                     // 0x0FD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CaptureMeshRotCurve;                               // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMeshRotCurveTime;                           // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMeshRotCurveSpeed;                          // 0x0FE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMeshRotCurveRate;                           // 0x0FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMeshRotCurveAlpha;                          // 0x0FEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureRateBase;                                   // 0x0FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureRateRange;                                  // 0x0FF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureLimit;                                     // 0x0FF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_714E[0x3];                                     // 0x0FF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureLimitDistance;                              // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureLimitCountMax;                              // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureLimitCount;                                 // 0x1004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBoundsOffset;                                     // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_714F[0x3];                                     // 0x1009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoundsOffset;                                      // 0x100C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class URSParticleSystemComponentBase*> EffectCompList;                                    // 0x1018(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bCaptureSkipEffectRelease;                         // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNewElectricPole;                                  // 0x1029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBackupSimulate;                                   // 0x102A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSimulateDefault;                                  // 0x102B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             BackupPhysicCollision;                             // 0x102C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBackupPhysicSimulate;                             // 0x102D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBackupPhysicGravity;                              // 0x102E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMaterialCaptureStart;                             // 0x102F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FSPsychicCaptureMaterial               MaterialParamNormal;                               // 0x1030(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamFire;                                 // 0x10D0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialParamThunder;                              // 0x1170(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveNormal;                               // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveFire;                                 // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCurveThunder;                              // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPsychicCaptureMaterial               MaterialCaptureStartParam;                         // 0x1228(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveVector*                           MaterialCaptureStartCurve;                         // 0x12C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialCaptureStartTimer;                         // 0x12D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7150[0x4];                                     // 0x12D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_SASKind>                             SasKindList;                                       // 0x12D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bSplineUnqRot;                                     // 0x12E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7151[0x7];                                     // 0x12E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetEffectFocus;                                  // 0x12F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bHitBackGroundDelay;                               // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7152[0x3];                                     // 0x1301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResultBackGround;                               // 0x1304(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CaptureTimeComboAir;                               // 0x138C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPullOutSkipFirstAttack;                           // 0x1390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncAttractSkip;                                 // 0x1391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7153[0x6];                                     // 0x1392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DispatcherGimmickObjectEnd;                        // 0x1398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         BrainFieldDropLookAtPosRate;                       // 0x13A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldDropLookAtUpdate;                       // 0x13AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldDropLookAtOnce;                         // 0x13AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7154[0x2];                                     // 0x13AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BrainFieldDropLookAtPos;                           // 0x13B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDirectSwingCollision;                             // 0x13BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7155[0x3];                                     // 0x13BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectSwingCollisionOffset;                        // 0x13C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicFieldObj;                                  // 0x13C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicFieldExtraObj;                             // 0x13C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicFieldSpawnObj;                             // 0x13C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7156[0x1];                                     // 0x13C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PsychicFieldAttackIndex;                           // 0x13C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7157[0x4];                                     // 0x13CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPsychicObjectSizeParameter            SizeParameter;                                     // 0x13D0(0x0138)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EHCSkillExtraType>                     ExtendExtraType;                                   // 0x1508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimSequence*>                  PsychicFieldAnimList;                              // 0x1518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_7158[0x8];                                     // 0x1528(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ArrangeMeshTransformOld;                           // 0x1530(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SASKind                                     EnemySasKind;                                      // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueAttackCollision;                            // 0x1561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7159[0x2];                                     // 0x1562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureTimeNormalEnemy;                            // 0x1564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeComboEnemy;                             // 0x1568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeComboAirEnemy;                          // 0x156C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PsychicFieldObjNum;                                // 0x1570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EnemyAttackRowName;                                // 0x1574(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseAttackEffectInfo;                              // 0x157C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715A[0x3];                                     // 0x157D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       AttackEffectInfo;                                  // 0x1580(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class APsychicObjectManager_C*                PsyObjMan;                                         // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackThrowAnimation;                             // 0x1590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAnimObjLerped;                                    // 0x1591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715B[0x2];                                     // 0x1592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimObjUpdateTime;                                 // 0x1594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AnimObjUpdateTimer;                                // 0x1598(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AnimObjLerpTime;                                   // 0x15A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AnimObjLerpTimer;                                  // 0x15A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                AnimObjLerpPosStt;                                 // 0x15B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimObjLerpPosEnd;                                 // 0x15C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AnimObjLerpRotStt;                                 // 0x15CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               AnimObjLerpRotEnd;                                 // 0x15D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackJustDodge;                                  // 0x15E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackComboType;                                  // 0x15E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseAttackActorPos;                                // 0x15E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInterceptObject;                                  // 0x15E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 InterceptEnmObj;                                   // 0x15E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimScaleIntercept;                                // 0x15F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttractAnimScaleFix;                               // 0x15FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttractAnimStart;                                 // 0x1608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractAnimFixScale;                              // 0x1609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyDrop;                                        // 0x160A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDestroyExplosionProc;                             // 0x160B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             DestroyExplosionTimer;                             // 0x160C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         DataRevision;                                      // 0x1618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimScaleLerp;                                    // 0x161C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715C[0x3];                                     // 0x161D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             AnimScaleLerpTimer;                                // 0x1620(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AnimScaleLerpTime;                                 // 0x162C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimScaleLerpStt;                                  // 0x1630(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimScaleLerpEnd;                                  // 0x163C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttractSkipEndMontage;                            // 0x1648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715D[0x3];                                     // 0x1649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttractEnemyDistance;                              // 0x164C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackThrowFixAngular;                            // 0x1650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutAttackCheck;                               // 0x1651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bKillZ;                                            // 0x1652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractTargetRot;                                 // 0x1653(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttractDecel;                                     // 0x1654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715E[0x3];                                     // 0x1655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttractDecelSpeedStt;                              // 0x1658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttractDecelVector;                                // 0x165C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractDecelTime;                                  // 0x1668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AttractDecelTimer;                                 // 0x166C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AttractDecelSpeed;                                 // 0x1678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractTimeIntercept;                              // 0x167C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttractTimeInterceptEnm;                           // 0x1680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckHitSideDist;                                  // 0x1684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugNewTick;                                     // 0x1688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugNewDestroy;                                  // 0x1689(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugNewCheckDestroy;                             // 0x168A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715F[0x5];                                     // 0x168B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATriggerEffectManager*                  TrgEffMgr;                                         // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimSequence*>                  PsychicFieldAnimListCh0200;                        // 0x1698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bCheckMeshCompHitBg;                               // 0x16A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bExecMeshCompHitBg;                                // 0x16A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMeshCompHitBg;                                    // 0x16AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutCheckWall;                                 // 0x16AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPullOutSign;                                      // 0x16AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7160[0x3];                                     // 0x16AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullOutCheckWallRange;                             // 0x16B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackDropSplineForce;                            // 0x16B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7161[0x3];                                     // 0x16B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BrainFieldDropLookAtPosEnd;                        // 0x16B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttractBrainFieldThrow;                           // 0x16C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSplineAboveEnemyActorLocation;                    // 0x16C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7162[0x2];                                     // 0x16C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectSwingCollisionEndOffset;                     // 0x16C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBrainFieldSwingLerpEnable;                        // 0x16CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBrainFieldSwingLerp;                              // 0x16CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7163[0x2];                                     // 0x16CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrainFieldSwingLerpTime;                           // 0x16D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldSwingUpdateTime;                         // 0x16D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurveAttractRotBase;                               // 0x16D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurveAttractRotItcEnm;                             // 0x16E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurveAttractRotSocketDir;                          // 0x16E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InterceptEnmNormal;                                // 0x16F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             HomingForceTimer;                                  // 0x16FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HomingFroceTime;                                   // 0x1708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             CopyHomingForceTimer;                              // 0x170C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bKeepSimulate;                                     // 0x1718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7164[0x3];                                     // 0x1719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeepSimulateTime;                                  // 0x171C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             KeepSimulateTimer;                                 // 0x1720(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7165[0x4];                                     // 0x172C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      PhysicsCapsuleComp;                                // 0x1730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventBackup;                                      // 0x1738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             EventBackupCollision;                              // 0x1739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventBackupSimulate;                              // 0x173A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEventBackupGravity;                               // 0x173B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseTempCollisionProfile;                          // 0x173C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7166[0x3];                                     // 0x173D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     SkillInfoBackUp;                                   // 0x1740(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAddAchievementFlag;                               // 0x1830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7167[0x3];                                     // 0x1831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureTimeNormal_em8400;                          // 0x1834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeCombo_em8400;                           // 0x1838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureTimeComboAir_em8400;                        // 0x183C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedNormal_em8400;                           // 0x1840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedCombo_em8400;                            // 0x1844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeedBrainField_em8400;                       // 0x1848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnSetEffectFocus__DelegateSignature(bool FlagIn);
	void DispatcherGimmickObjectEnd__DelegateSignature();
	void ExecuteUbergraph_BP_PsychicObjectComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Initialize();
	void Update();
	void Finalize();
	void IsPsychicObjectActive(bool* Return);
	void SetPsychicObjectActive(bool Flag_in, bool Flag_only);
	void InitializeParameter();
	void IsFocusable(bool* Return);
	void CanCapture(bool* Return);
	void SetPhaseCapture(bool Flag_in, bool Capture_success_in, bool Combo_in, bool Air_in, bool Psychic_field_in);
	void UpdateCapture();
	void SetPsychicObjectCapture(bool Flag_in, class ARsBattleHero_C* Capture_owner_in, bool Capture_success_in, bool Combo_in, bool Air_in, bool Psychic_field_in, bool* Return);
	void DebugDisplay();
	void SetFocus(bool Flag_in, bool Wait_gauge_in);
	void SetEffectFocus(bool Flag_in);
	void SetPsychicObjectAttack(class AActor* Target_actor_in, bool Direct_drop_in, bool Unique_in, bool Combo_in, bool Air_combo_in, bool Enemy_direct_shot_in, bool brain_field_in, int32 Combo_level_in, int32 Combo_index_in, float Attract_time_in, class UAnimSequence* Anim_seq_in, EPsychicObjectBrainFieldAttackType Attack_type_in, bool* Return);
	void SetPhaseLiftUpOld(bool Flag_in);
	void UpdateLiftUp();
	void CanAttack(bool* Return);
	void SetPhaseAttack(bool Flag_in);
	void UpdateAttackThrow();
	void PrevAsync();
	void UpdateAsync();
	void PrevAsyncLiftUp();
	void UpdateAsyncLiftUp();
	void SetLerpStart(bool Actor_pos_in, bool Actor_rot_in, bool Use_swing_arrow_in);
	void ApplyLerpResult(bool Actor_pos_in, bool Actor_rot_in, bool Use_swing_arrow_in);
	void InitializeComponent(class UMeshComponent* Mesh_comp_in, class USceneComponent* Arrow_comp_in, class USphereComponent* Attack_sphere_in, class UCapsuleComponent* Attack_capsule_in, class UCapsuleComponent* Physics_capsule_in);
	void ResetActorPosRot();
	void PrevAsyncAttackThrow();
	void UpdateAsyncAttackThrow();
	void GetCameraTransform(struct FVector* Location, struct FRotator* Rotate, struct FVector* Direction);
	void SetPsyObjPosRot(const struct FVector& Pos_in, const struct FRotator& Rot_in, bool Actor_pos_in, bool Actor_rot_in, bool Use_swing_arrow_in, bool Sweep_in, bool Teleport_in);
	void PostAsyncAttackThrow();
	void UpdateAttackCombo();
	void PrevAsyncAttackCombo();
	void UpdateAsyncAttackCombo();
	void PostAsyncAttackCombo();
	void SetPhaseAttract(bool Flag_in, float Attract_time_in);
	void SetAttackCombo(bool Flag_in);
	void SetAttackCollisionOld(bool Flag_in, bool Throw_in);
	void SetHit(bool Hit_enemy_in, bool Hit_background_in, const struct FHCHitResult& Hit_result_in, const struct FHitResult& Hit_result_bg_in);
	void SetPsychicObjectAttract(class ARsBattleHero_C* Capture_owner_in, float Attract_time_in, bool* Return);
	void CanAttract(bool* Return);
	void UpdateAttract();
	void PrevAsyncAttract();
	void UpdateAsyncAttract();
	void PostAsyncAttract();
	void IsCapturing(bool* Return);
	void CheckPsychicObjectState(EPsychicObjectState State_in, bool* Return);
	void SetPsychicObjectState(EPsychicObjectState State_in);
	void GetPsychicObjectState(EPsychicObjectState* Return);
	void PostAsyncLiftUp();
	void SetAttackThrow(bool Flag_in, float Throw_speed_in, float Homing_speed_in);
	void SetProcedurePhase(EPsychicObjectProcedure Phase_in, bool* Return);
	void GetProcedurePhase(EPsychicObjectProcedure* Return);
	void CheckProcedurePhase(EPsychicObjectProcedure Phase_in, bool* Return);
	void SetPhaseDestroy(bool Flag_in, float Delay_time_in);
	void UpdateDestroy();
	void SetEffectDestroy(bool Flag_in);
	void UpdateEffectDestroy();
	void IsPsychicObjectUnique(bool* Return);
	void GetUniqueMontageType(EPsychicObjectUniqueMontageType* Montage_type);
	void SetWeightGauge(bool Flag_in, bool Capture_success_in, bool Show_button_in);
	void UpdateWeightGauge(int32 Level_in, float Percent_in);
	void UpdateInput();
	void SetAttackCollisionSphereOld(bool Flag_in);
	void SetAttackCollisionParam(bool Flag_in);
	void CanUniqueAttack(bool* Return);
	void SetAttackUnique();
	void PrevAsyncAttackUnique();
	void UpdateAsyncAttackUnique();
	void PostAsyncAttackUnique();
	void SetTimeDilation(bool Flag_in, const class FString& Name_in, float Rate_in);
	void SetLerpLiftUp();
	void SetCaptureLiftUpOld();
	void SetEffectCapture(bool Flag_in);
	void GetHUD(class AHUDMainGame_C** Hud_main);
	void SetAttackThrowAnim(float Throw_speed_in, float Homing_speed_in, bool Enemy_direct_shot_in, class FName Enemy_attack_row_name_in);
	void SetEffectAttackThrow();
	void CheckHitBackGround();
	void PrevAsyncVibrate();
	void UpdateAsyncVibrate();
	void PostAsyncVibrate();
	void ResetMeshPosRot();
	void PrevAsyncCapture();
	void UpdateAsyncCapture();
	void PostAsyncCapture();
	void SetAsyncVibrate(bool Flag_in);
	void SetAsyncLiftUp(bool Flag_in);
	void DetachAttackCombo();
	void GetEffectCaptureParam(E_SASKind* SAS_Kind, bool* Capture, float* Rate, struct FVector* Size, float* RateAura, struct FVector* SizeAura);
	void SetCheckHit(bool Check_floor_in, bool Check_wall_in, bool Check_ceiling_in);
	void SetHandleGrab(bool Flag_in, bool Throw_interpolation_in);
	void UpdateAttractExtendLerp();
	void SetCapture(bool Flag_in, bool Capture_success_in);
	void UpdateThrowVectorHoming();
	void InitCaptureTimer(bool Combo_in, bool bAirIn);
	void UpdateCaptureTimer(bool* Finish);
	void CalcCaptureRate(int32* Level, float* Capture_rate);
	void SetCaptureLevel();
	void PrevAsyncCommon();
	void UpdateAsyncCommon();
	void PostAsyncCommon();
	void SetPsyObjCompTick(bool Flag_in, class FName Name_in);
	void GetAnimation(class UAnimSequence** Anim_sequence);
	void DebugDrawRotArrow(const struct FVector& Pos_in, const struct FRotator& Rot_in, float Len_in, float Size_in, float Time_in);
	void GetCurrentAttackType(int32* Attack_type);
	void SetPhaseInput(bool Flag_in);
	void AddChildObjList(class ABP_PsychicObjectBasic_C* Child_obj_in);
	void RemoveChildObj(class ABP_PsychicObjectBasic_C* Child_obj_in);
	void ResetChildObjList();
	void SetDestroyChild();
	void SetPsyObjSimulatePhysics(ECollisionEnabled Mesh_collision_in, bool Simulate_in, bool Gravity_in);
	void SetHandleTarget(const struct FVector& Pos_in, bool Set_rot_in, const struct FRotator& Rot_in);
	void DebugDisplayState();
	void DebugDisplayAttackSphere();
	void DebugDisplayChild();
	void DebugDisplayAttackCollision();
	void CalcAttackSide(bool* Return);
	void GetWeightGaugePos(struct FVector* Gauge_pos);
	void InitDamageMesh(class UMeshComponent* Damage_comp_in);
	void SetDamageMesh(bool Flag_in);
	void SetEffectAttack(bool Flag_in, E_SASKind Sas_kind_in);
	void SetEffectAura(bool Flag_in, bool Instance_on_in);
	void InitWreckageMesh(class UMeshComponent* Wreckage_mesh_in);
	void SetMeshSimulatePhysics(class UMeshComponent* Mesh_in, ECollisionEnabled Mesh_collision_in, bool Simulate_in, bool Gravity_in);
	void SetEffectCaptureWreckageOld(bool Flag_in);
	void AddCaptureChild(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void RemoveCaptureChild(class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void SetEnemyReaction(int32 Attack_type_in, class AActor* Target_actor_in);
	void GetAttackCollision(class UPrimitiveComponent** Attack_collision);
	void SetWeightGaugeEnable(bool Flag_in, bool Unq_obj_in, bool Check_in);
	void InitPsychicBullet(class ABP_PsychicObjectBasic_C* Parent_obj_in, int32 Index_in, int32 Num_in);
	void SetPsychicBulletParent(class ABP_PsychicObjectBasic_C* Parent_obj_in);
	void CreateHandle();
	void DeleteHandle();
	void CheckChildDestroy(float Delay_time_in);
	void SetPsyObjVisibility(bool Flag_in, bool Keep_effect_attack_in);
	void SetCaptureChild(class ARsBattleHero_C* Capture_owner_in);
	void SetAttackSpline();
	void SetChildObj(class ABP_PsychicObjectBasic_C* Child_obj_in, bool Flag_in);
	void SetPsychicBulletIndex(int32 Num_in, int32 Index_in);
	void CalcCircleArrangment(int32 Sector_num_in, int32 Index_in, float Radius_min_in, float Radius_max_in, float Valid_angle_rate_in, float Height_min_in, float Height_max_in, float* Radius, float* Angle, float* Height);
	void SetPsychicObjectTick(bool Flag_in, bool* Return);
	void SetMeshCompHit(class UPrimitiveComponent* Prim_comp_in, const struct FVector& Normal_in, const struct FHitResult& Hit_result_in);
	void SetAsyncCommon(class FName Ref_name_in, bool Flag_in);
	void SetCommonParameter(const struct FPsychicObjectCommonParameter& Common_param_in);
	void ResetMaterialParameter();
	void SetInstanceValue(int32 Index_in, float Value_in, bool* Return);
	void GetInstanceValue(int32 Index_in, bool* Return, float* Value);
	void SetDataRevision(int32 Revision_in);
	void GetDataRevision(int32* Revision);
	void IncrementDataRevision();
	void Check_Unique_Object(class UBP_UniqueObjectComponentBase_C* Unq_obj_comp_in);
	void ChkPsyObjMan(bool* Return);
	void SearchEnemyAround(class AActor* Target_actor_in, int32 Search_num_in, float Radius_in, float Height_in, TArray<class AActor*>* Search_list);
	void GetTargetAttackPoint(float Safety_height_in, const struct FVector& Player_front_in, const struct FVector& Camera_front_in, struct FVector* Pos);
	void ClearPsychicBulletList(bool Destroy_in);
	void AddPsychicBulletList(class ABP_PsychicObjectBasic_C* bullet_obj_in, int32 Index_in);
	void GetPsychicBulletList(TArray<class ABP_PsychicObjectBasic_C*>* bullet_obj);
	void SetSasKind(bool Flag_in);
	void ResetPsyObjCompTick();
	void SetSeHit(bool Hit_enemy_in, bool Hit_background_in);
	void SetSeLiftUp();
	void SetSeAttack(bool Throw_in, int32 Index_in);
	void DebugPrintString(bool Flag_in, const class FString& Str_in, bool Obj_name_in, bool Draw_in, bool On_player_in, bool Screen_in);
	void DebugPrintError(const class FString& Func_str_in, const class FString& Msg_str_in, bool Screen_in);
	void CheckFocusable();
	void InitPartsObj(class ABP_PsychicObjectBasic_C* Parent_obj_in);
	void SetPartsObj1();
	void SetPartsObj2();
	void SetPartsObj3();
	void ClearPartsObjList(bool Destroy_in);
	void AddPartsObjList(class ABP_PsychicObjectBasic_C* Parts_obj_in);
	void GetPartsObjList(int32 Index_in, class ABP_PsychicObjectBasic_C** Parts_obj);
	void DebugDrawAsyncCommon();
	void SetEffectHit(bool Hit_enemy_in, bool Hit_background_in, const struct FHCHitResult& Hit_result_in, const struct FHitResult& Hit_result_bg_in);
	void SetCheckDestroy(bool Flag_in);
	void UpdateCheckDestroy();
	void ResetDestroyEffectMeshList();
	void AddDestroyEffectMeshList(class UMeshComponent* Mesh_comp_in);
	void SetParameterEffectFade(float Rate_in);
	void SetHitDestroy();
	void SetHitBarrier();
	void InitBrainFieldObjOld(int32 Index_in);
	void SetBrainFieldGrab(bool Flag_in, class ARsBattleHero_C* Hero_in, int32 Max_in, int32 Index_in, const struct FVector& Offset_pos_in);
	void SetAppearOld(bool Flag_in);
	void UpdateBrainField();
	void GetBrainFieldPos(bool Reset_random_in, struct FVector* Pos);
	void SetMeshPosRot(const struct FVector& Pos_in);
	void SetBrainFieldAttackType(EPsychicObjectBrainFieldAttackType Attack_type_in, int32 Level_in);
	void SetCommonSpline(bool Flag_in, class UCurveFloat* Dist_curve_in, float Time_rate_in);
	void PreAsyncSpline();
	void UpdateAsyncSpline();
	void PostAsyncSpline();
	void UpdateCommonSpline();
	void ResetSplinePoint();
	void SetSplinePoint(const struct FVector& Pos_in, bool Update_in);
	void SetAttackDrop(bool Flag_in, bool Drop_arrow_rot_in, float Drop_time_rate_in);
	void CalcAttackDropSpline(bool Force_in);
	void SetAttackSwing(bool Flag_in);
	void SetCommonAttract(bool Flag_in);
	void UpdateCommonAttract();
	void SetAnimNotifyReturn(bool Flag_in);
	void ExecAttackDrop(int32 Drop_level_in, bool Attack_collision_in);
	void GetEnemyTopWeakPoint(struct FVector* Weak_pos);
	void SetBackupAttackParamOld(bool Flag_in, EPsychicObjectBrainFieldAttackType Attack_type_in);
	void AddCheckChildObj(class ABP_PsychicObjectBasic_C* Child_obj_in, bool Coll_profile_in, bool Focus_in, bool Capture_in);
	void SetPsyObjCollisionProfileIgnore(bool Flag_in, bool Skip_check_obj_type_in);
	void GetCameraLookAtPos(struct FVector* Pos);
	void SetPsyObjLocationRotation(bool Location_in, const struct FVector& Pos_in, bool Rotation_in, const struct FRotator& Rot_in, bool Mesh_in, class UMeshComponent* Mesh_comp_in, bool Center_in, bool Swing_center_in);
	void CallUniqueAttackSuccess(EPsychicObjectUniqueMontageIndex Montage_index_in, bool Left_in, bool* Return);
	void SetPsyObjCollisionProfileNoColl(bool Flag_in, bool Skip_check_obj_type_in);
	void ResetPsyObjCollisionProfile();
	void CheckAttackType(bool Direct_drop_in, EPsychicObjectBrainFieldAttackType Attack_type_in, int32 Level_in);
	void SetSkipAttack(bool Flag_in);
	void SetEnpcObject();
	void SetPhasePullOut(bool Flag_in);
	void UpdatePullOut();
	void SetPsychicObjectUniqueType(EPsychicObjectUniqueType Unique_type_in);
	void CheckPsychicObjectUniqueType(EPsychicObjectUniqueType Unique_type_in, bool* Return);
	void SetCaptureVibrate(bool Flag_in, bool Handle_in);
	void SetCaptureVibrateAngle(float Vt_speed_in, float Hz_speed_in, float Angle_range_in);
	void SetPullOut(bool Capture_to_pull_out_in, class UCurveVector* Pos_curve_in, class UCurveFloat* Angle_curve_in, bool Handle_in, class UCurveVector* Rot_curve_in, bool Check_wall_in);
	void UpdatePullOutCurve(bool* End);
	void GetUniqueObjectPlayerMontage(EPsychicObjectUniqueMontageIndex Montage_index_in, bool Left_in, class UAnimMontage** Montage);
	void SetSplinePointEx(const struct FVector& Pos_in, const struct FVector& Tangent_in, const struct FRotator& Rot_in, ESplinePointType Type_in, bool Update_in);
	void DebugDrawSpline(float Time_in);
	void SetSplineAboveEnemy(bool Flag_in, const struct FVector& Dst_pos_offest_in, class UCurveFloat* Dist_curve_in, float Dst_angle_offset_in, bool Actor_location_in);
	void CalcSplineAboveEnemy();
	void SetAttackCollisionNew(bool Flag_in, EPsychicObjectBrainFieldAttackType brain_field_attack_type_in, float Radius_in, bool Use_capsule_in);
	void SetEnemyAttackParameter(bool Flag_in, const struct FHCCollisionCommonInfo& Common_info_in, const struct FHCSkillCommonInfo& Skill_info_in);
	void SetHandleFix();
	void SetHandleSimulatePhysics(bool Flag_in);
	void SetHandlePosRot(const struct FVector& Pos_in, const struct FRotator& Rot_in);
	void SetSplineFollowTarget(bool Flag_in, const struct FVector& Pos_in);
	void InitializeCopyPsychicObject();
	void IsCopyPsychicObject(bool* Return);
	void SetupCopyPsychicObject(class ABP_PsychicObjectBasic_C* Parent_obj_in, const struct FVector& Pos_in, bool Direct_drop_in, bool Combo_in, int32 Combo_level_in, int32 Copy_index_in);
	void SetCopyAppear(bool Flag_in);
	void UpdateCopyAppear();
	void AttackCopyPsychicObject();
	void GetCameraShakeData(class UClass** CameraShakeType, float* CameraShakeScale);
	void SetMeshVisibility(class UMeshComponent* Mesh_in, bool Flag_in);
	void SetParameterCopy(float Rate_in);
	void SetHandleFixAngular();
	void GetAttackParameterIndex(int32* Attack_index);
	void SetHandleGrabLock(bool Flag_in);
	void SetCopyAttackThrow(bool Flag_in);
	void UpdateCopyAttackThrow();
	void GetDeltaSecond(float* Delta_second);
	void SetPsychicObjectAnimation(class UAnimationAsset* Animation_in, bool Loop_in, float Play_rate_in);
	void EndPhaseAttract();
	void InterceptReserve();
	void InterceptAttack(class ARSBattleCharacter_C* Interceprter_in, class ARSBattleCharacter_C* New_target_in);
	void InterceptCancel();
	void AddFocusMesh(class UMeshComponent* Mesh_comp_in);
	void RemoveFocusMesh(class UMeshComponent* Mesh_comp_in);
	void AddCaptureMesh(class UMeshComponent* Mesh_comp_in);
	void RemoveCaptureMesh(class UMeshComponent* Mesh_comp_in);
	void GetMeshComp(class UStaticMesh** Mesh_comp, struct FVector* Scale);
	void GetEnemyCapsuleRadius(float* Radius);
	void SetDestructibleSetting(class UClass* Class_in);
	void SpawnDestructibleActor(const struct FVector& Impulse_dir_in, float Impulse_value_in);
	void DestroyDestructibleActor();
	void SetHitDestructible();
	void RestoreSimulatePhysics();
	void SetPullOutOption(bool Use_end_pos_in, const struct FVector& End_pos_in, bool Use_end_rot_in, const struct FRotator& End_rot_in);
	void SetEffectAppear(bool Flag_in, bool Reverse_in);
	void UpdateEffectAppear();
	void SetBrainFieldObjPosRot(struct FVector* Pos);
	void CheckBrainFieldAttackCollision(bool* Return_);
	void SetBrainFieldAttackCollision(bool Flag_in);
	void CallAttackDirectDrop();
	void UpdateCheckTimeDilation();
	void GetBoundsOffset(struct FVector* Offset);
	void SetCaptureTimeDilation(bool Flag_in, bool Success_in);
	void UpdateCaptureTimeDilation();
	void SetTimeDilationApply(bool Flag_in, bool* Updated);
	void SetTimeDilationPull(bool Flag_in, const struct FVector& Target_pos_in, bool Set_rot_in, const struct FRotator& Rot_in, float Interpolate_speed_in);
	void UpdateTimeDilationPull();
	void SetHandleGrabNew(bool Flag_in, bool Pull_in, bool Set_pos_in, const struct FVector& Pos_in, bool Set_rot_in, const struct FRotator& Rot_in, float Interpolate_speed_in);
	void SetHandleTargetNew(const struct FVector& Pos_in, bool Set_rot_in, const struct FRotator& Rot_in);
	void SetTimeDilationAttack(bool Flag_in);
	class URSParticleSystemComponentBase* SetPsychicObjectEffect(bool Flag_in, class UParticleSystem* Emitter_in, class URSParticleSystemComponentBase* Effect_component_in, bool Attach_in, class USceneComponent* Attach_comp_in, class FName Attach_socket_in, bool Location_in, const struct FTransform& Transform_in);
	void UpdatePsychicObjectEffect();
	void ClearPsychicObjectEffect();
	void IsAcceleratorValid(bool* Return);
	void SetBackUpSimulatePhysics(bool Flag_in, ECollisionEnabled Mesh_collision_in, bool Simulate_in, bool Gravity_in);
	void InitMaterialCaptureStartParam();
	void LoadMaterialCaptureStartCurve(const struct FSPsychicCaptureMaterial& SPsychicCaptureMaterial, class UCurveVector** AsCurve_Vector);
	void GetMaterialCaptureStartParam(E_SASKind Sas_kind_in, struct FSPsychicCaptureMaterial* Material_param);
	void GetMaterialCaptureStartCurve(E_SASKind Sas_kind_in, class UCurveVector** Material_curve);
	void SetMaterialCaptureStart(bool Flag_in);
	void UpdateMaterialCaptureStart();
	void ClearMaterialCaptureStart();
	void SetMIParameterAura(float Rate_in);
	void SetAttackSkillInfo(const struct FHCSkillCommonInfo& Skill_info_in, struct FHCSkillCommonInfo* Skill_info);
	void AddExtraType(TArray<EHCSkillExtraType>& Extra_type_in, EHCSkillExtraType Add_type_in);
	void SetPsychicObjectSound(bool Flag_in, class URSAtomComponentBase* Atom_comp_in, class USoundAtomCue* Sound_atom_in, bool Attach, class USceneComponent* Attach_comp_in, class FName Attach_socket_in, bool Location, const struct FVector& Location_in, class URSAtomComponentBase** Rs_atom_comp);
	void SetMaterialCaptureStartInstance();
	void SetCaptureOwner(class ARsBattleHero_C* Capture_owner_in);
	void SetAnimOwner(bool Flag_in, bool Attach_in, class ABP_PsychicObjectBasic_C* Psy_obj_in, class ARsBattleHero_C* Hero_in, class APsychicAnimObject_C** Anim_owner);
	void GetMeshBoundCentrePos(struct FVector* Pos);
	void GetBrainFieldDropLookAtPos(struct FVector* Pos);
	void SetBrainFieldSetting(EPsychicObjectBrainFieldAttackType brain_field_attack_type_in, int32 Attack_index_in, TArray<struct FVector>& Swing_pos_list_in);
	void SetDirectSwingCollision();
	void SetPsychicFieldSetting(int32 Attack_index_in, int32 Obj_num_in);
	void AddExtendExtraType(EHCSkillExtraType Extra_type_in);
	void SetNoRespawn();
	void SetDestroyComp();
	void IsParent(bool* Return);
	void SetEnemyEffectSas(E_SASKind Sas_kind_in);
	void InitEnemyPsychicObject(class ARSBattleCharacter_C* Enemy_owner_in, E_SASKind Sas_kind_in, bool Drop_type_in, bool Random_obj_in);
	void SetEnemyPsychicObjectActive(bool Active_in, const struct FVector& Obj_pos_in);
	void InitPsychicFieldSpawn();
	void GetEnemyWeakPoint(struct FVector* Weak_pos);
	void SetAttackEffectInfo(const struct FHCHitEffectInfo& Effect_info_in);
	void GetAnimationBrainField(EPsychicObjectBrainFieldAttackType brain_field_attack_type_in, bool* Return, class UAnimSequence** Anim_sequence);
	void GetBrainFieldAttachOffset(int32 Attack_index_in, struct FVector* Offset_pos);
	void SetBrainFieldSwingLerp(bool Flag_in, float Lerp_time_in, float Update_time_in);
	void SetJustDodge(class ARSBattleCharacter_C* Owner_in, class ARSBattleCharacter_C* Target_in);
	void SetIntercept(class ARSBattleCharacter_C* Owner_in, class ARSBattleCharacter_C* Target_in);
	void SetInterceptEnemy(bool Flag_in, class AActor* Enemy_obj_in, class ARSBattleCharacter_C* Owner_in, class ARSBattleCharacter_C* Target_in);
	void InitInterceptObject();
	void SetInterceptObjectActive(bool Flag_in);
	void CallEnemyIntercpetableThrow();
	void GetCaptureOwnerHalfHeight(float* Half_height);
	void SetDestroyExplosion();
	void SetDestroyExplosionProc(bool Flag_in, bool* Return);
	void UpdateDestroyExplosionProc();
	void SetAnimationScaleLerp(float Letp_time_in, const struct FVector& Dst_scale_in);
	void UpdateAnimationScaleLerp();
	void ResetAnimationScaleLerp();
	void SetAnimationScaleIntercept(float Letp_time_in);
	void IsCaptureOwnerMale(bool* Return, bool* Male);
	void SetFellOutOfWorld(const class UDamageType* Dmg_type_in);
	void CheckStillInWorld(float KillZ_in, bool* Return);
	void SetThrowHoming(bool Flag_in);
	void SetAttractDecel(bool Flag_in);
	void UpdateAttractDecel();
	void AddAuraMesh(class UMeshComponent* Mesh_comp_in);
	void RemoveAuraMesh(class UMeshComponent* Mesh_comp_in);
	void SetPsyObjDestroy();
	void GetEnemyAttackThrowTargetPoint(struct FVector* TargetPos);
	void SetFloatObject(bool Flag_in);
	void SetEnemyPsychicObjectThrow(class AActor* Target_actor_in, float Throw_speed_in, float Homing_speed_in);
	void SetAchievementThrowObject(bool Force_in);
	void UpdateAttractBrainField();
	void GetAttackDirection(bool* Return, struct FVector* Direction);
	void GetRespawnRestrictRadius(float* Radius);
	void IsCompTickEnable(bool* Return);
	void UpdateEnemyInterceptRot();
	void DebugDraw();
	void InitSimulateDefault();
	void SetKeepSimulate(bool Flag_in);
	void UpdateKeepSimulate();
	void SetPsychicObjectSimulateControl(bool Flag_in, bool Capture_success_in);
	void SetPsychicObjectSimulateControlAwake();
	void SetEnemyPhysicsCollisionActive(bool FlagIn);
	void EnemyPhysicsCollisionOnHitComponentFunc(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetEventSetting(bool Event_start_in);
	void SetEventBackupPhysic(bool Flag_in);
	void SetDestructibleVisibility(bool FlagIn);
	void SetPsyObjCollisionEnable(ECollisionEnabled Mesh_collision_in);
	void SetPsyObjDistanceDestroy(bool* Return);
	void IsInterceptFail(bool* bFail);
	void SetTenpCollisionProfile(bool Flag_in);
	void GetInterceptThrowParameter(float* Throw_speed, float* Homing_speed);
	void GetEnemyThrowParameter(bool brain_field_in, float* Throw_speed, float* Homing_speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PsychicObjectComponent_C">();
	}
	static class UBP_PsychicObjectComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PsychicObjectComponent_C>();
	}
};
static_assert(alignof(UBP_PsychicObjectComponent_C) == 0x000010, "Wrong alignment on UBP_PsychicObjectComponent_C");
static_assert(sizeof(UBP_PsychicObjectComponent_C) == 0x001850, "Wrong size on UBP_PsychicObjectComponent_C");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UberGraphFrame) == 0x0000D0, "Member 'UBP_PsychicObjectComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicObjectID) == 0x0000D8, "Member 'UBP_PsychicObjectComponent_C::PsychicObjectID' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicObjectUniqueType) == 0x0000D9, "Member 'UBP_PsychicObjectComponent_C::PsychicObjectUniqueType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicObjectSize) == 0x0000DA, "Member 'UBP_PsychicObjectComponent_C::PsychicObjectSize' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsync) == 0x0000DB, "Member 'UBP_PsychicObjectComponent_C::bAsync' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HudMain) == 0x0000E0, "Member 'UBP_PsychicObjectComponent_C::HudMain' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureOwner) == 0x0000E8, "Member 'UBP_PsychicObjectComponent_C::CaptureOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimOwner) == 0x0000F0, "Member 'UBP_PsychicObjectComponent_C::AnimOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TargetActor) == 0x0000F8, "Member 'UBP_PsychicObjectComponent_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TargetActorFix) == 0x000100, "Member 'UBP_PsychicObjectComponent_C::TargetActorFix' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPsychicObjectActive) == 0x000108, "Member 'UBP_PsychicObjectComponent_C::bPsychicObjectActive' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProcedurePhase) == 0x000109, "Member 'UBP_PsychicObjectComponent_C::ProcedurePhase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicObjectState) == 0x00010A, "Member 'UBP_PsychicObjectComponent_C::PsychicObjectState' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyOwner) == 0x00010B, "Member 'UBP_PsychicObjectComponent_C::bEnemyOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bNpcOwner) == 0x00010C, "Member 'UBP_PsychicObjectComponent_C::bNpcOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bMetamophosisOwner) == 0x00010D, "Member 'UBP_PsychicObjectComponent_C::bMetamophosisOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUniqueCommon) == 0x00010E, "Member 'UBP_PsychicObjectComponent_C::bUniqueCommon' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AsyncCommonRefList) == 0x000110, "Member 'UBP_PsychicObjectComponent_C::AsyncCommonRefList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncCommon) == 0x000120, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncCommon' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncCommon) == 0x000121, "Member 'UBP_PsychicObjectComponent_C::bAsyncCommon' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSkipNormalCapture) == 0x000122, "Member 'UBP_PsychicObjectComponent_C::bSkipNormalCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUniqueCapture) == 0x000123, "Member 'UBP_PsychicObjectComponent_C::bUniqueCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDispDamageMesh) == 0x000124, "Member 'UBP_PsychicObjectComponent_C::bDispDamageMesh' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicObjectMass) == 0x000128, "Member 'UBP_PsychicObjectComponent_C::PsychicObjectMass' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCaptureVibrate) == 0x00012C, "Member 'UBP_PsychicObjectComponent_C::bCaptureVibrate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bComboCapture) == 0x00012D, "Member 'UBP_PsychicObjectComponent_C::bComboCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTypeNo) == 0x000130, "Member 'UBP_PsychicObjectComponent_C::CaptureTypeNo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TickNameList) == 0x000138, "Member 'UBP_PsychicObjectComponent_C::TickNameList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUniqueObject) == 0x000148, "Member 'UBP_PsychicObjectComponent_C::bUniqueObject' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bParentObj) == 0x000149, "Member 'UBP_PsychicObjectComponent_C::bParentObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bChildObj) == 0x00014A, "Member 'UBP_PsychicObjectComponent_C::bChildObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseAttackCapsule) == 0x00014B, "Member 'UBP_PsychicObjectComponent_C::bUseAttackCapsule' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bChildDestroy) == 0x00014C, "Member 'UBP_PsychicObjectComponent_C::bChildDestroy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BulletNum) == 0x000150, "Member 'UBP_PsychicObjectComponent_C::BulletNum' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBulletParent) == 0x000154, "Member 'UBP_PsychicObjectComponent_C::bBulletParent' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BulletList) == 0x000158, "Member 'UBP_PsychicObjectComponent_C::BulletList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBulletObj) == 0x000168, "Member 'UBP_PsychicObjectComponent_C::bBulletObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckBulletCollProfile) == 0x000169, "Member 'UBP_PsychicObjectComponent_C::bCheckBulletCollProfile' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BulletParentObj) == 0x000170, "Member 'UBP_PsychicObjectComponent_C::BulletParentObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BulletIndex) == 0x000178, "Member 'UBP_PsychicObjectComponent_C::BulletIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueMontageType) == 0x00017C, "Member 'UBP_PsychicObjectComponent_C::UniqueMontageType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyPsyObj) == 0x00017D, "Member 'UBP_PsychicObjectComponent_C::bCopyPsyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bFloatObject) == 0x00017E, "Member 'UBP_PsychicObjectComponent_C::bFloatObject' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, FloatObjectLinearDamping) == 0x000180, "Member 'UBP_PsychicObjectComponent_C::FloatObjectLinearDamping' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, FloatObjectAngularDamping) == 0x000184, "Member 'UBP_PsychicObjectComponent_C::FloatObjectAngularDamping' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, FloatObjectLinearDampingBackup) == 0x000188, "Member 'UBP_PsychicObjectComponent_C::FloatObjectLinearDampingBackup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, FloatObjectAngularDampingBackup) == 0x00018C, "Member 'UBP_PsychicObjectComponent_C::FloatObjectAngularDampingBackup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bNoRespawnObj) == 0x000190, "Member 'UBP_PsychicObjectComponent_C::bNoRespawnObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ChildObjList) == 0x000198, "Member 'UBP_PsychicObjectComponent_C::ChildObjList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimer) == 0x0001A8, "Member 'UBP_PsychicObjectComponent_C::CaptureTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTime) == 0x0001B4, "Member 'UBP_PsychicObjectComponent_C::CaptureTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeDailtionName) == 0x0001B8, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeDailtionName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureSasKind) == 0x0001C8, "Member 'UBP_PsychicObjectComponent_C::CaptureSasKind' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureRate) == 0x0001CC, "Member 'UBP_PsychicObjectComponent_C::CaptureRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureRateEx) == 0x0001D0, "Member 'UBP_PsychicObjectComponent_C::CaptureRateEx' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CapturePassTime) == 0x0001D4, "Member 'UBP_PsychicObjectComponent_C::CapturePassTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCaptureLevel) == 0x0001D8, "Member 'UBP_PsychicObjectComponent_C::bCaptureLevel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugDisplay) == 0x0001D9, "Member 'UBP_PsychicObjectComponent_C::bDebugDisplay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpTime) == 0x0001DC, "Member 'UBP_PsychicObjectComponent_C::LiftUpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpHeight) == 0x0001E0, "Member 'UBP_PsychicObjectComponent_C::LiftUpHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, Pcm) == 0x0001E8, "Member 'UBP_PsychicObjectComponent_C::Pcm' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bLiftUp) == 0x0001F0, "Member 'UBP_PsychicObjectComponent_C::bLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bLiftUpSe) == 0x0001F1, "Member 'UBP_PsychicObjectComponent_C::bLiftUpSe' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncLiftUp) == 0x0001F2, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncLiftUp) == 0x0001F3, "Member 'UBP_PsychicObjectComponent_C::bAsyncLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpTimer) == 0x0001F4, "Member 'UBP_PsychicObjectComponent_C::LiftUpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpRate) == 0x000200, "Member 'UBP_PsychicObjectComponent_C::LiftUpRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, FocusMeshList) == 0x000208, "Member 'UBP_PsychicObjectComponent_C::FocusMeshList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshList) == 0x000218, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AuraMeshList) == 0x000228, "Member 'UBP_PsychicObjectComponent_C::AuraMeshList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureChildList) == 0x000238, "Member 'UBP_PsychicObjectComponent_C::CaptureChildList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyEffectMeshList) == 0x000248, "Member 'UBP_PsychicObjectComponent_C::DestroyEffectMeshList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCurrentDeltaSecond) == 0x000258, "Member 'UBP_PsychicObjectComponent_C::bCurrentDeltaSecond' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurrentDeltaSecond) == 0x00025C, "Member 'UBP_PsychicObjectComponent_C::CurrentDeltaSecond' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCameraTransform) == 0x000260, "Member 'UBP_PsychicObjectComponent_C::bCameraTransform' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CameraPos) == 0x000264, "Member 'UBP_PsychicObjectComponent_C::CameraPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CameraRot) == 0x000270, "Member 'UBP_PsychicObjectComponent_C::CameraRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CameraDir) == 0x00027C, "Member 'UBP_PsychicObjectComponent_C::CameraDir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InstanceValueList) == 0x000288, "Member 'UBP_PsychicObjectComponent_C::InstanceValueList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkPsyObjPos) == 0x000298, "Member 'UBP_PsychicObjectComponent_C::WorkPsyObjPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkPsyObjRot) == 0x0002A4, "Member 'UBP_PsychicObjectComponent_C::WorkPsyObjRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPosStt) == 0x0002B0, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPosEnd) == 0x0002BC, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPos) == 0x0002C8, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRotStt) == 0x0002D4, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRotEnd) == 0x0002E0, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRot) == 0x0002EC, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkRate) == 0x0002F8, "Member 'UBP_PsychicObjectComponent_C::WorkRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MeshComp) == 0x000300, "Member 'UBP_PsychicObjectComponent_C::MeshComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ArrowComp) == 0x000308, "Member 'UBP_PsychicObjectComponent_C::ArrowComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpPosEaseType) == 0x000310, "Member 'UBP_PsychicObjectComponent_C::LiftUpPosEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpRotEaseType) == 0x000311, "Member 'UBP_PsychicObjectComponent_C::LiftUpRotEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowAccelTime) == 0x000314, "Member 'UBP_PsychicObjectComponent_C::ThrowAccelTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackUnique) == 0x000318, "Member 'UBP_PsychicObjectComponent_C::bAttackUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackCombo) == 0x000319, "Member 'UBP_PsychicObjectComponent_C::bAttackCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackBrainField) == 0x00031A, "Member 'UBP_PsychicObjectComponent_C::bAttackBrainField' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackSwing) == 0x00031B, "Member 'UBP_PsychicObjectComponent_C::bAttackSwing' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSkipAttack) == 0x00031C, "Member 'UBP_PsychicObjectComponent_C::bSkipAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncAttack) == 0x00031D, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncAttack) == 0x00031E, "Member 'UBP_PsychicObjectComponent_C::bAsyncAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackThrow) == 0x00031F, "Member 'UBP_PsychicObjectComponent_C::bAttackThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackSkipAttach) == 0x000320, "Member 'UBP_PsychicObjectComponent_C::bAttackSkipAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowAccelTimer) == 0x000324, "Member 'UBP_PsychicObjectComponent_C::ThrowAccelTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowLimitTimer) == 0x000330, "Member 'UBP_PsychicObjectComponent_C::ThrowLimitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowVector) == 0x00033C, "Member 'UBP_PsychicObjectComponent_C::ThrowVector' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedStt) == 0x000348, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedMax) == 0x00034C, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeed) == 0x000350, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackComboParam) == 0x000354, "Member 'UBP_PsychicObjectComponent_C::bAttackComboParam' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAirCombo) == 0x000355, "Member 'UBP_PsychicObjectComponent_C::bAirCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ComboLevel) == 0x000358, "Member 'UBP_PsychicObjectComponent_C::ComboLevel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ComboIndex) == 0x00035C, "Member 'UBP_PsychicObjectComponent_C::ComboIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedNormal) == 0x000360, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedCombo) == 0x000364, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedUnique) == 0x000368, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedCopy) == 0x00036C, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedCopy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedNormalEnemy) == 0x000370, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedNormalEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedComboEnemy) == 0x000374, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedComboEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedBrnFieldEnemy) == 0x000378, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedBrnFieldEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedPsyFieldEnemy) == 0x00037C, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedPsyFieldEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedEnemyObj) == 0x000380, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedEnemyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedEnemyRate) == 0x000384, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedEnemyRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedIntercept) == 0x000388, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedInterceptEm0100) == 0x00038C, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedInterceptEm0100' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedInterceptEm0200) == 0x000390, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedInterceptEm0200' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedInterceptEm8200) == 0x000394, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedInterceptEm8200' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedInterceptEm8400) == 0x000398, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedInterceptEm8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedEaseType) == 0x00039C, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowLimitTime) == 0x0003A0, "Member 'UBP_PsychicObjectComponent_C::ThrowLimitTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractTime) == 0x0003A4, "Member 'UBP_PsychicObjectComponent_C::AttractTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractEnemy) == 0x0003A8, "Member 'UBP_PsychicObjectComponent_C::bAttractEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractNoAttach) == 0x0003A9, "Member 'UBP_PsychicObjectComponent_C::bAttractNoAttach' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractAttackBlend) == 0x0003AA, "Member 'UBP_PsychicObjectComponent_C::bAttractAttackBlend' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractSwingArrow) == 0x0003AB, "Member 'UBP_PsychicObjectComponent_C::bAttractSwingArrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncAttract) == 0x0003AC, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncAttract' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncAttract) == 0x0003AD, "Member 'UBP_PsychicObjectComponent_C::bAsyncAttract' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractTimer) == 0x0003B0, "Member 'UBP_PsychicObjectComponent_C::AttractTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractPosEaseType) == 0x0003BC, "Member 'UBP_PsychicObjectComponent_C::AttractPosEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractRotEaseType) == 0x0003BD, "Member 'UBP_PsychicObjectComponent_C::AttractRotEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackSphereRadius) == 0x0003C0, "Member 'UBP_PsychicObjectComponent_C::AttackSphereRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackCapsuleRadius) == 0x0003C4, "Member 'UBP_PsychicObjectComponent_C::AttackCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackCapsuleHalfHeight) == 0x0003C8, "Member 'UBP_PsychicObjectComponent_C::AttackCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackComboOffset) == 0x0003CC, "Member 'UBP_PsychicObjectComponent_C::AttackComboOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackLerpTime) == 0x0003D8, "Member 'UBP_PsychicObjectComponent_C::AttackLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackLerpEaseType) == 0x0003DC, "Member 'UBP_PsychicObjectComponent_C::AttackLerpEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SpinSpeedMax) == 0x0003E0, "Member 'UBP_PsychicObjectComponent_C::SpinSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackEndTime) == 0x0003E4, "Member 'UBP_PsychicObjectComponent_C::AttackEndTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueAttackIputTypeOld) == 0x0003E8, "Member 'UBP_PsychicObjectComponent_C::UniqueAttackIputTypeOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueAttackInputButtonOld) == 0x0003F8, "Member 'UBP_PsychicObjectComponent_C::UniqueAttackInputButtonOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueAttackInputSuccessOld) == 0x000408, "Member 'UBP_PsychicObjectComponent_C::UniqueAttackInputSuccessOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InputEndTimeOld) == 0x000418, "Member 'UBP_PsychicObjectComponent_C::InputEndTimeOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InputEndTimerOld) == 0x00041C, "Member 'UBP_PsychicObjectComponent_C::InputEndTimerOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InputWaitTimeOld) == 0x000428, "Member 'UBP_PsychicObjectComponent_C::InputWaitTimeOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueTimeDailtionName) == 0x000430, "Member 'UBP_PsychicObjectComponent_C::UniqueTimeDailtionName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueTimeDilationRateOld) == 0x000440, "Member 'UBP_PsychicObjectComponent_C::UniqueTimeDilationRateOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyEffectTime) == 0x000444, "Member 'UBP_PsychicObjectComponent_C::DestroyEffectTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusID) == 0x000448, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusID' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusSize) == 0x000449, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusSize' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusActive) == 0x00044A, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusActive' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusPhase) == 0x00044B, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusPhase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusState) == 0x00044C, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusState' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusPhysic) == 0x00044D, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusPhysic' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusProfile) == 0x00044E, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusProfile' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusCapture) == 0x00044F, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusLiftUp) == 0x000450, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusAttract) == 0x000451, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusAttract' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispAttackSphere) == 0x000452, "Member 'UBP_PsychicObjectComponent_C::bDbDispAttackSphere' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispChild) == 0x000453, "Member 'UBP_PsychicObjectComponent_C::bDbDispChild' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispAttackCollision) == 0x000454, "Member 'UBP_PsychicObjectComponent_C::bDbDispAttackCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDrawAsyncCommon) == 0x000455, "Member 'UBP_PsychicObjectComponent_C::bDbDrawAsyncCommon' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugDrawTickActor) == 0x000456, "Member 'UBP_PsychicObjectComponent_C::bDebugDrawTickActor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugDrawTickComponent) == 0x000457, "Member 'UBP_PsychicObjectComponent_C::bDebugDrawTickComponent' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugDrawInUse) == 0x000458, "Member 'UBP_PsychicObjectComponent_C::bDebugDrawInUse' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugPrintSimulate) == 0x000459, "Member 'UBP_PsychicObjectComponent_C::bDebugPrintSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugPrintSimulateCheck) == 0x00045A, "Member 'UBP_PsychicObjectComponent_C::bDebugPrintSimulateCheck' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDrawPhysicForce) == 0x00045B, "Member 'UBP_PsychicObjectComponent_C::bDbDrawPhysicForce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbPrintEffect) == 0x00045C, "Member 'UBP_PsychicObjectComponent_C::bDbPrintEffect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbPrintSound) == 0x00045D, "Member 'UBP_PsychicObjectComponent_C::bDbPrintSound' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAbolishMainSimulate) == 0x00045E, "Member 'UBP_PsychicObjectComponent_C::bAbolishMainSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DebugLastAnimationName) == 0x000460, "Member 'UBP_PsychicObjectComponent_C::DebugLastAnimationName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbDispStatusVibrateOld) == 0x000470, "Member 'UBP_PsychicObjectComponent_C::bDbDispStatusVibrateOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbOptionLiftUpOld) == 0x000471, "Member 'UBP_PsychicObjectComponent_C::bDbOptionLiftUpOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyEffectTimer) == 0x000474, "Member 'UBP_PsychicObjectComponent_C::DestroyEffectTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractOffset) == 0x000480, "Member 'UBP_PsychicObjectComponent_C::AttractOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractOffsetEm) == 0x00048C, "Member 'UBP_PsychicObjectComponent_C::AttractOffsetEm' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbOptionKeepAttractOld) == 0x000498, "Member 'UBP_PsychicObjectComponent_C::bDbOptionKeepAttractOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackLerpTimer) == 0x00049C, "Member 'UBP_PsychicObjectComponent_C::AttackLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureType) == 0x0004A8, "Member 'UBP_PsychicObjectComponent_C::CaptureType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLevelMax) == 0x0004AC, "Member 'UBP_PsychicObjectComponent_C::CaptureLevelMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLevel) == 0x0004B0, "Member 'UBP_PsychicObjectComponent_C::CaptureLevel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InputWaitTimerOld) == 0x0004B4, "Member 'UBP_PsychicObjectComponent_C::InputWaitTimerOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BackupComp) == 0x0004C0, "Member 'UBP_PsychicObjectComponent_C::BackupComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WreckageComp) == 0x0004C8, "Member 'UBP_PsychicObjectComponent_C::WreckageComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsyObjOwner) == 0x0004D0, "Member 'UBP_PsychicObjectComponent_C::PsyObjOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackSphere) == 0x0004D8, "Member 'UBP_PsychicObjectComponent_C::AttackSphere' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackCapsule) == 0x0004E0, "Member 'UBP_PsychicObjectComponent_C::AttackCapsule' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackPrimitive) == 0x0004E8, "Member 'UBP_PsychicObjectComponent_C::AttackPrimitive' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysicsHandle) == 0x0004F0, "Member 'UBP_PsychicObjectComponent_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UnqObjComp) == 0x0004F8, "Member 'UBP_PsychicObjectComponent_C::UnqObjComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineComp) == 0x000500, "Member 'UBP_PsychicObjectComponent_C::SplineComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueAttackCount) == 0x000508, "Member 'UBP_PsychicObjectComponent_C::UniqueAttackCount' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, UniqueAttackMax) == 0x00050C, "Member 'UBP_PsychicObjectComponent_C::UniqueAttackMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncAttackUnique) == 0x000510, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncAttackUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncAttackUnique) == 0x000511, "Member 'UBP_PsychicObjectComponent_C::bAsyncAttackUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUniqueAttackInputSign) == 0x000512, "Member 'UBP_PsychicObjectComponent_C::bUniqueAttackInputSign' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bWeightGauge) == 0x000513, "Member 'UBP_PsychicObjectComponent_C::bWeightGauge' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackEnd) == 0x000514, "Member 'UBP_PsychicObjectComponent_C::bAttackEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackEndTimer) == 0x000518, "Member 'UBP_PsychicObjectComponent_C::AttackEndTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackSpin) == 0x000524, "Member 'UBP_PsychicObjectComponent_C::bAttackSpin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, RotLerpTimer) == 0x000528, "Member 'UBP_PsychicObjectComponent_C::RotLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, RotLerpTime) == 0x000534, "Member 'UBP_PsychicObjectComponent_C::RotLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackThrowSkipActor) == 0x000538, "Member 'UBP_PsychicObjectComponent_C::bAttackThrowSkipActor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckHitFloor) == 0x000539, "Member 'UBP_PsychicObjectComponent_C::bCheckHitFloor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckHitWall) == 0x00053A, "Member 'UBP_PsychicObjectComponent_C::bCheckHitWall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckHitCeiling) == 0x00053B, "Member 'UBP_PsychicObjectComponent_C::bCheckHitCeiling' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHitFloor) == 0x00053C, "Member 'UBP_PsychicObjectComponent_C::bHitFloor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHitCelling) == 0x00053D, "Member 'UBP_PsychicObjectComponent_C::bHitCelling' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHitWall) == 0x00053E, "Member 'UBP_PsychicObjectComponent_C::bHitWall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSkipCheckWall) == 0x00053F, "Member 'UBP_PsychicObjectComponent_C::bSkipCheckWall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckHitAttackEnd) == 0x000540, "Member 'UBP_PsychicObjectComponent_C::bCheckHitAttackEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackPosPrev) == 0x000544, "Member 'UBP_PsychicObjectComponent_C::AttackPosPrev' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackPosNow) == 0x000550, "Member 'UBP_PsychicObjectComponent_C::AttackPosNow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeNormal) == 0x00055C, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeCombo) == 0x000560, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CapturePosCurve) == 0x000568, "Member 'UBP_PsychicObjectComponent_C::CapturePosCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureHeightCurve) == 0x000570, "Member 'UBP_PsychicObjectComponent_C::CaptureHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureRotCurve) == 0x000578, "Member 'UBP_PsychicObjectComponent_C::CaptureRotCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bVibrate) == 0x000580, "Member 'UBP_PsychicObjectComponent_C::bVibrate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bVibrateProc) == 0x000581, "Member 'UBP_PsychicObjectComponent_C::bVibrateProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bVibrateHandle) == 0x000582, "Member 'UBP_PsychicObjectComponent_C::bVibrateHandle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bVibrateAngle) == 0x000583, "Member 'UBP_PsychicObjectComponent_C::bVibrateAngle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bRequestAsyncVibrate) == 0x000584, "Member 'UBP_PsychicObjectComponent_C::bRequestAsyncVibrate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncVibrate) == 0x000585, "Member 'UBP_PsychicObjectComponent_C::bAsyncVibrate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateTimer) == 0x000588, "Member 'UBP_PsychicObjectComponent_C::VibrateTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateTime) == 0x000594, "Member 'UBP_PsychicObjectComponent_C::VibrateTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateSignType) == 0x000598, "Member 'UBP_PsychicObjectComponent_C::VibrateSignType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateStartTime) == 0x00059C, "Member 'UBP_PsychicObjectComponent_C::VibrateStartTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateEndTime) == 0x0005A0, "Member 'UBP_PsychicObjectComponent_C::VibrateEndTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateRangeMin) == 0x0005A4, "Member 'UBP_PsychicObjectComponent_C::VibrateRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateRangeMax) == 0x0005A8, "Member 'UBP_PsychicObjectComponent_C::VibrateRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateSpeedRate) == 0x0005AC, "Member 'UBP_PsychicObjectComponent_C::VibrateSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateRate) == 0x0005B0, "Member 'UBP_PsychicObjectComponent_C::VibrateRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpStartTime) == 0x0005B4, "Member 'UBP_PsychicObjectComponent_C::LiftUpStartTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpEndTime) == 0x0005B8, "Member 'UBP_PsychicObjectComponent_C::LiftUpEndTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpRangeMin) == 0x0005BC, "Member 'UBP_PsychicObjectComponent_C::LiftUpRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpRangeMax) == 0x0005C0, "Member 'UBP_PsychicObjectComponent_C::LiftUpRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibratePosOffset) == 0x0005C4, "Member 'UBP_PsychicObjectComponent_C::VibratePosOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, LiftUpOffset) == 0x0005D0, "Member 'UBP_PsychicObjectComponent_C::LiftUpOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSkipHoming) == 0x0005DC, "Member 'UBP_PsychicObjectComponent_C::bSkipHoming' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedNormal) == 0x0005E0, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedCombo) == 0x0005E4, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedUnique) == 0x0005E8, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedUnique' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedCopy) == 0x0005EC, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedCopy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedNormalEnemy) == 0x0005F0, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedNormalEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedComboEnemy) == 0x0005F4, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedComboEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedBrnFieldEnemy) == 0x0005F8, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedBrnFieldEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedNormal_em8400) == 0x0005FC, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedNormal_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedCombo_em8400) == 0x000600, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedCombo_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedBrnField_em8400) == 0x000604, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedBrnField_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedEnemyObj) == 0x000608, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedEnemyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedEnemyRate) == 0x00060C, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedEnemyRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedIntercept) == 0x000610, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedInterceptEm0100) == 0x000614, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedInterceptEm0100' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedInterceptEm0200) == 0x000618, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedInterceptEm0200' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedInterceptEm8200) == 0x00061C, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedInterceptEm8200' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeedInterceptEm8400) == 0x000620, "Member 'UBP_PsychicObjectComponent_C::HomingSpeedInterceptEm8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingSpeed) == 0x000624, "Member 'UBP_PsychicObjectComponent_C::HomingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleSpeedVt) == 0x000628, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleSpeedVt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleSpeedHz) == 0x00062C, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleSpeedHz' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleRange) == 0x000630, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleVt) == 0x000634, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleVt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleHz) == 0x000638, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleHz' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleRate) == 0x00063C, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleOffsetStt) == 0x000640, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleOffsetStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleOffsetEnd) == 0x00064C, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleOffsetEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAngleOffsetEx) == 0x000658, "Member 'UBP_PsychicObjectComponent_C::VibrateAngleOffsetEx' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAxisVt) == 0x000664, "Member 'UBP_PsychicObjectComponent_C::VibrateAxisVt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAxisHz) == 0x000670, "Member 'UBP_PsychicObjectComponent_C::VibrateAxisHz' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateAxisEnd) == 0x00067C, "Member 'UBP_PsychicObjectComponent_C::VibrateAxisEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WeightGaugeButtonType) == 0x000688, "Member 'UBP_PsychicObjectComponent_C::WeightGaugeButtonType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLevelTime) == 0x000690, "Member 'UBP_PsychicObjectComponent_C::CaptureLevelTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbAttractAttackPl) == 0x0006A0, "Member 'UBP_PsychicObjectComponent_C::bDbAttractAttackPl' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDbUniqueAnim) == 0x0006A1, "Member 'UBP_PsychicObjectComponent_C::bDbUniqueAnim' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CheckHitTimer) == 0x0006A4, "Member 'UBP_PsychicObjectComponent_C::CheckHitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CheckHitTime) == 0x0006B0, "Member 'UBP_PsychicObjectComponent_C::CheckHitTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleGrab) == 0x0006B4, "Member 'UBP_PsychicObjectComponent_C::bHandleGrab' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleGrabLock) == 0x0006B5, "Member 'UBP_PsychicObjectComponent_C::bHandleGrabLock' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleGrabRot) == 0x0006B6, "Member 'UBP_PsychicObjectComponent_C::bHandleGrabRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseHandleGrabCenter) == 0x0006B7, "Member 'UBP_PsychicObjectComponent_C::bUseHandleGrabCenter' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleLinearDamping) == 0x0006B8, "Member 'UBP_PsychicObjectComponent_C::HandleLinearDamping' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bExtendLerp) == 0x0006BC, "Member 'UBP_PsychicObjectComponent_C::bExtendLerp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bExtendLerpPos) == 0x0006BD, "Member 'UBP_PsychicObjectComponent_C::bExtendLerpPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpPosCalc) == 0x0006C0, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpPosCalc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpPosAnim) == 0x0006CC, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpPosAnim' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpPosTgt) == 0x0006D8, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpPosTgt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpTimer) == 0x0006E4, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpTime) == 0x0006F0, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendLerpRate) == 0x0006F4, "Member 'UBP_PsychicObjectComponent_C::ExtendLerpRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bTestPhysCaptureProc) == 0x0006F8, "Member 'UBP_PsychicObjectComponent_C::bTestPhysCaptureProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapturePos) == 0x0006FC, "Member 'UBP_PsychicObjectComponent_C::PhysCapturePos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpTimer) == 0x000708, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowTimer) == 0x000714, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPhysCapLiftUp) == 0x000720, "Member 'UBP_PsychicObjectComponent_C::bPhysCapLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCaptureRandAngle) == 0x000724, "Member 'UBP_PsychicObjectComponent_C::PhysCaptureRandAngle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCaptureRandAngleZ) == 0x000728, "Member 'UBP_PsychicObjectComponent_C::PhysCaptureRandAngleZ' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCaptureRandAxisZ) == 0x00072C, "Member 'UBP_PsychicObjectComponent_C::PhysCaptureRandAxisZ' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForce) == 0x000738, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForceBase) == 0x00073C, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForceBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForceMin) == 0x000740, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForceMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForceMax) == 0x000744, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForceMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForceTime) == 0x000748, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForceTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapLiftUpForceEase) == 0x00074C, "Member 'UBP_PsychicObjectComponent_C::PhysCapLiftUpForceEase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForce) == 0x000750, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForceBase) == 0x000754, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForceBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForceMin) == 0x000758, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForceMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForceMax) == 0x00075C, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForceMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForceTime) == 0x000760, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForceTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapThrowForceEase) == 0x000764, "Member 'UBP_PsychicObjectComponent_C::PhysCapThrowForceEase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjPos) == 0x000768, "Member 'UBP_PsychicObjectComponent_C::AnimObjPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjRot) == 0x000774, "Member 'UBP_PsychicObjectComponent_C::AnimObjRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackTypeList) == 0x000780, "Member 'UBP_PsychicObjectComponent_C::AttackTypeList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackTypeIndex) == 0x000790, "Member 'UBP_PsychicObjectComponent_C::AttackTypeIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractAttackRate) == 0x000794, "Member 'UBP_PsychicObjectComponent_C::AttractAttackRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractAttackStart) == 0x000798, "Member 'UBP_PsychicObjectComponent_C::bAttractAttackStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractSkipAttack) == 0x000799, "Member 'UBP_PsychicObjectComponent_C::bAttractSkipAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCallAttractSuccess) == 0x00079A, "Member 'UBP_PsychicObjectComponent_C::bCallAttractSuccess' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPosStt_0) == 0x00079C, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPosStt_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPosEnd_0) == 0x0007A8, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPosEnd_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpPos_0) == 0x0007B4, "Member 'UBP_PsychicObjectComponent_C::WorkLerpPos_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRotStt_0) == 0x0007C0, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRotStt_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRotEnd_0) == 0x0007CC, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRotEnd_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, WorkLerpRot_0) == 0x0007D8, "Member 'UBP_PsychicObjectComponent_C::WorkLerpRot_0' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurveAttractPos) == 0x0007E8, "Member 'UBP_PsychicObjectComponent_C::CurveAttractPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurveAttractRot) == 0x0007F0, "Member 'UBP_PsychicObjectComponent_C::CurveAttractRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EffectAttack) == 0x0007F8, "Member 'UBP_PsychicObjectComponent_C::EffectAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EffectWreckage) == 0x000800, "Member 'UBP_PsychicObjectComponent_C::EffectWreckage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDestroyDelay) == 0x000808, "Member 'UBP_PsychicObjectComponent_C::bDestroyDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyDelayTimer) == 0x00080C, "Member 'UBP_PsychicObjectComponent_C::DestroyDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyDelayTime) == 0x000818, "Member 'UBP_PsychicObjectComponent_C::DestroyDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyDelayTimeRateCopy) == 0x00081C, "Member 'UBP_PsychicObjectComponent_C::DestroyDelayTimeRateCopy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyDelayTimeEnemy) == 0x000820, "Member 'UBP_PsychicObjectComponent_C::DestroyDelayTimeEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDestroyEffect) == 0x000824, "Member 'UBP_PsychicObjectComponent_C::bDestroyEffect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EmitterAttackDirectDrop) == 0x000828, "Member 'UBP_PsychicObjectComponent_C::EmitterAttackDirectDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ParticleChildCapture) == 0x000830, "Member 'UBP_PsychicObjectComponent_C::ParticleChildCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectAttack) == 0x000840, "Member 'UBP_PsychicObjectComponent_C::bEffectAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SoundData) == 0x000848, "Member 'UBP_PsychicObjectComponent_C::SoundData' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUpdateFocusPos) == 0x000890, "Member 'UBP_PsychicObjectComponent_C::bUpdateFocusPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackComboAnimSeq) == 0x000898, "Member 'UBP_PsychicObjectComponent_C::AttackComboAnimSeq' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PartsParent) == 0x0008A0, "Member 'UBP_PsychicObjectComponent_C::PartsParent' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PartsObjList) == 0x0008A8, "Member 'UBP_PsychicObjectComponent_C::PartsObjList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPartsObj) == 0x0008B8, "Member 'UBP_PsychicObjectComponent_C::bPartsObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PartsParentObj) == 0x0008C0, "Member 'UBP_PsychicObjectComponent_C::PartsParentObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBackupAttackParam) == 0x0008C8, "Member 'UBP_PsychicObjectComponent_C::bBackupAttackParam' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BackupAttackSize) == 0x0008C9, "Member 'UBP_PsychicObjectComponent_C::BackupAttackSize' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BackupAttackType) == 0x0008CA, "Member 'UBP_PsychicObjectComponent_C::BackupAttackType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BackupAttackRadius) == 0x0008CC, "Member 'UBP_PsychicObjectComponent_C::BackupAttackRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckDestroy) == 0x0008D0, "Member 'UBP_PsychicObjectComponent_C::bCheckDestroy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckDestroyProc) == 0x0008D1, "Member 'UBP_PsychicObjectComponent_C::bCheckDestroyProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectDestroySkip) == 0x0008D2, "Member 'UBP_PsychicObjectComponent_C::bEffectDestroySkip' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectDestroySkipOnce) == 0x0008D3, "Member 'UBP_PsychicObjectComponent_C::bEffectDestroySkipOnce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDestroyExplosion) == 0x0008D4, "Member 'UBP_PsychicObjectComponent_C::bDestroyExplosion' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldDropRadius) == 0x0008D8, "Member 'UBP_PsychicObjectComponent_C::BrainFieldDropRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingRadius) == 0x0008E8, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingRadius' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingHalfHeight) == 0x0008F8, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingHalfHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingPosOffset) == 0x000908, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingPosOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingPosRandomMin) == 0x000918, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingPosRandomMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingPosRandomMax) == 0x000924, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingPosRandomMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldObjRandom) == 0x000930, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldObjRandom' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingPosRandom) == 0x000934, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingPosRandom' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingRotRandom) == 0x000940, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingRotRandom' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldObj) == 0x00094C, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldGrab) == 0x00094D, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldGrab' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldAttackCollision) == 0x00094E, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldAttackCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bResetBrainFieldPos) == 0x00094F, "Member 'UBP_PsychicObjectComponent_C::bResetBrainFieldPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldAttackType) == 0x000950, "Member 'UBP_PsychicObjectComponent_C::BrainFieldAttackType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldAttackLevel) == 0x000954, "Member 'UBP_PsychicObjectComponent_C::BrainFieldAttackLevel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldObjMax) == 0x000958, "Member 'UBP_PsychicObjectComponent_C::BrainFieldObjMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldIndex) == 0x00095C, "Member 'UBP_PsychicObjectComponent_C::BrainFieldIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldAttackIndex) == 0x000960, "Member 'UBP_PsychicObjectComponent_C::BrainFieldAttackIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldOffset) == 0x000964, "Member 'UBP_PsychicObjectComponent_C::BrainFieldOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAppear) == 0x000970, "Member 'UBP_PsychicObjectComponent_C::bAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AppearTime) == 0x000974, "Member 'UBP_PsychicObjectComponent_C::AppearTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AppearTimer) == 0x000978, "Member 'UBP_PsychicObjectComponent_C::AppearTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleLinearStiffness) == 0x000984, "Member 'UBP_PsychicObjectComponent_C::HandleLinearStiffness' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleAngularDamping) == 0x000988, "Member 'UBP_PsychicObjectComponent_C::HandleAngularDamping' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleAngularStiffness) == 0x00098C, "Member 'UBP_PsychicObjectComponent_C::HandleAngularStiffness' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleInterpolationSpeed) == 0x000990, "Member 'UBP_PsychicObjectComponent_C::HandleInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleLinearStiffnessFix) == 0x000994, "Member 'UBP_PsychicObjectComponent_C::HandleLinearStiffnessFix' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleAngularStiffnessFix) == 0x000998, "Member 'UBP_PsychicObjectComponent_C::HandleAngularStiffnessFix' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleInterpolationSpeedFix) == 0x00099C, "Member 'UBP_PsychicObjectComponent_C::HandleInterpolationSpeedFix' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleInterpolationSpeedBrainField) == 0x0009A0, "Member 'UBP_PsychicObjectComponent_C::HandleInterpolationSpeedBrainField' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysCapMass) == 0x0009A4, "Member 'UBP_PsychicObjectComponent_C::PhysCapMass' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleGrabPos) == 0x0009A8, "Member 'UBP_PsychicObjectComponent_C::HandleGrabPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleGrabRot) == 0x0009B4, "Member 'UBP_PsychicObjectComponent_C::HandleGrabRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleTargetPos) == 0x0009C0, "Member 'UBP_PsychicObjectComponent_C::HandleTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleTargetRot) == 0x0009CC, "Member 'UBP_PsychicObjectComponent_C::HandleTargetRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPhysicInitialized) == 0x0009D8, "Member 'UBP_PsychicObjectComponent_C::bPhysicInitialized' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysicCollision) == 0x0009D9, "Member 'UBP_PsychicObjectComponent_C::PhysicCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPhysicSimulate) == 0x0009DA, "Member 'UBP_PsychicObjectComponent_C::bPhysicSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPhysicGravity) == 0x0009DB, "Member 'UBP_PsychicObjectComponent_C::bPhysicGravity' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCommonSpline) == 0x0009DC, "Member 'UBP_PsychicObjectComponent_C::bCommonSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineHandle) == 0x0009DD, "Member 'UBP_PsychicObjectComponent_C::bSplineHandle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineRotDist) == 0x0009DE, "Member 'UBP_PsychicObjectComponent_C::bSplineRotDist' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineObj) == 0x0009DF, "Member 'UBP_PsychicObjectComponent_C::bSplineObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractEnemyProc) == 0x0009E0, "Member 'UBP_PsychicObjectComponent_C::bAttractEnemyProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropDirect) == 0x0009E1, "Member 'UBP_PsychicObjectComponent_C::bAttackDropDirect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropDirectCall) == 0x0009E2, "Member 'UBP_PsychicObjectComponent_C::bAttackDropDirectCall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineDistCurve) == 0x0009E8, "Member 'UBP_PsychicObjectComponent_C::SplineDistCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplinePointList) == 0x0009F0, "Member 'UBP_PsychicObjectComponent_C::SplinePointList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineRotList) == 0x000A00, "Member 'UBP_PsychicObjectComponent_C::SplineRotList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineCoordinateSpace) == 0x000A10, "Member 'UBP_PsychicObjectComponent_C::SplineCoordinateSpace' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplinePointNum) == 0x000A14, "Member 'UBP_PsychicObjectComponent_C::SplinePointNum' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineDistance) == 0x000A18, "Member 'UBP_PsychicObjectComponent_C::SplineDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineRate) == 0x000A1C, "Member 'UBP_PsychicObjectComponent_C::SplineRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineDirection) == 0x000A20, "Member 'UBP_PsychicObjectComponent_C::SplineDirection' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineIndex) == 0x000A2C, "Member 'UBP_PsychicObjectComponent_C::SplineIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineTimer) == 0x000A30, "Member 'UBP_PsychicObjectComponent_C::SplineTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCommonAttract) == 0x000A3C, "Member 'UBP_PsychicObjectComponent_C::bCommonAttract' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractTimeSwing) == 0x000A40, "Member 'UBP_PsychicObjectComponent_C::AttractTimeSwing' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimationName) == 0x000A48, "Member 'UBP_PsychicObjectComponent_C::AnimationName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScale) == 0x000A58, "Member 'UBP_PsychicObjectComponent_C::AnimScale' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUpdateAnimObj) == 0x000A64, "Member 'UBP_PsychicObjectComponent_C::bUpdateAnimObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAnimNotifyReturn) == 0x000A65, "Member 'UBP_PsychicObjectComponent_C::bAnimNotifyReturn' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDrop) == 0x000A66, "Member 'UBP_PsychicObjectComponent_C::bAttackDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropWait) == 0x000A67, "Member 'UBP_PsychicObjectComponent_C::bAttackDropWait' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropSkipThrow) == 0x000A68, "Member 'UBP_PsychicObjectComponent_C::bAttackDropSkipThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropAnimation) == 0x000A69, "Member 'UBP_PsychicObjectComponent_C::bAttackDropAnimation' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropAnimVector) == 0x000A6A, "Member 'UBP_PsychicObjectComponent_C::bAttackDropAnimVector' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDropHeightOffset) == 0x000A6C, "Member 'UBP_PsychicObjectComponent_C::AttackDropHeightOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDropSpline) == 0x000A70, "Member 'UBP_PsychicObjectComponent_C::bDropSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VecDropSpline) == 0x000A74, "Member 'UBP_PsychicObjectComponent_C::VecDropSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AngleDropSpline) == 0x000A80, "Member 'UBP_PsychicObjectComponent_C::AngleDropSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EaseTypeDropSpline) == 0x000A84, "Member 'UBP_PsychicObjectComponent_C::EaseTypeDropSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EaseRateDropSpline) == 0x000A88, "Member 'UBP_PsychicObjectComponent_C::EaseRateDropSpline' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DropDelayTimer) == 0x000A8C, "Member 'UBP_PsychicObjectComponent_C::DropDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DropDelayTime) == 0x000A98, "Member 'UBP_PsychicObjectComponent_C::DropDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckChildParent) == 0x000A9C, "Member 'UBP_PsychicObjectComponent_C::bCheckChildParent' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CheckChildObjList) == 0x000AA0, "Member 'UBP_PsychicObjectComponent_C::CheckChildObjList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckChildObj) == 0x000AB0, "Member 'UBP_PsychicObjectComponent_C::bCheckChildObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckChildCollProfile) == 0x000AB1, "Member 'UBP_PsychicObjectComponent_C::bCheckChildCollProfile' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckChildFocus) == 0x000AB2, "Member 'UBP_PsychicObjectComponent_C::bCheckChildFocus' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckChildCapture) == 0x000AB3, "Member 'UBP_PsychicObjectComponent_C::bCheckChildCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCollisionProfileIgnore) == 0x000AB4, "Member 'UBP_PsychicObjectComponent_C::bCollisionProfileIgnore' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCollisionProfileNoCollision) == 0x000AB5, "Member 'UBP_PsychicObjectComponent_C::bCollisionProfileNoCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCollisionProfileTemp) == 0x000AB6, "Member 'UBP_PsychicObjectComponent_C::bCollisionProfileTemp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNamePsyObj) == 0x000AB8, "Member 'UBP_PsychicObjectComponent_C::ProfileNamePsyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNameIgnore) == 0x000AC0, "Member 'UBP_PsychicObjectComponent_C::ProfileNameIgnore' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNameNoCollision) == 0x000AC8, "Member 'UBP_PsychicObjectComponent_C::ProfileNameNoCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNameCurrent) == 0x000AD0, "Member 'UBP_PsychicObjectComponent_C::ProfileNameCurrent' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNameBackup) == 0x000AD8, "Member 'UBP_PsychicObjectComponent_C::ProfileNameBackup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ProfileNameTemp) == 0x000AE0, "Member 'UBP_PsychicObjectComponent_C::ProfileNameTemp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectAttackSkip) == 0x000AE8, "Member 'UBP_PsychicObjectComponent_C::bEffectAttackSkip' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureHeight) == 0x000AEC, "Member 'UBP_PsychicObjectComponent_C::CaptureHeight' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectAttackKeep) == 0x000AF0, "Member 'UBP_PsychicObjectComponent_C::bEffectAttackKeep' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnpcObject) == 0x000AF1, "Member 'UBP_PsychicObjectComponent_C::bEnpcObject' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOut) == 0x000AF2, "Member 'UBP_PsychicObjectComponent_C::bPullOut' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutCurve) == 0x000AF3, "Member 'UBP_PsychicObjectComponent_C::bPullOutCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCaptureToPullOut) == 0x000AF4, "Member 'UBP_PsychicObjectComponent_C::bCaptureToPullOut' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutHandle) == 0x000AF5, "Member 'UBP_PsychicObjectComponent_C::bPullOutHandle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutCurveRot) == 0x000AF6, "Member 'UBP_PsychicObjectComponent_C::bPullOutCurveRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutPosCurve) == 0x000AF8, "Member 'UBP_PsychicObjectComponent_C::PullOutPosCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutAngleCurve) == 0x000B00, "Member 'UBP_PsychicObjectComponent_C::PullOutAngleCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutRotCurve) == 0x000B08, "Member 'UBP_PsychicObjectComponent_C::PullOutRotCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutTime) == 0x000B10, "Member 'UBP_PsychicObjectComponent_C::PullOutTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutTimer) == 0x000B14, "Member 'UBP_PsychicObjectComponent_C::PullOutTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutObjDir) == 0x000B20, "Member 'UBP_PsychicObjectComponent_C::PullOutObjDir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutOffset) == 0x000B2C, "Member 'UBP_PsychicObjectComponent_C::PullOutOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutAngle) == 0x000B38, "Member 'UBP_PsychicObjectComponent_C::PullOutAngle' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutPosStt) == 0x000B3C, "Member 'UBP_PsychicObjectComponent_C::PullOutPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutRotStt) == 0x000B48, "Member 'UBP_PsychicObjectComponent_C::PullOutRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutRot) == 0x000B54, "Member 'UBP_PsychicObjectComponent_C::PullOutRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineTimeRate) == 0x000B60, "Member 'UBP_PsychicObjectComponent_C::SplineTimeRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineAboveEnemy) == 0x000B64, "Member 'UBP_PsychicObjectComponent_C::bSplineAboveEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineRotLerp) == 0x000B65, "Member 'UBP_PsychicObjectComponent_C::bSplineRotLerp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AboveEnemyPosEndOffset) == 0x000B68, "Member 'UBP_PsychicObjectComponent_C::AboveEnemyPosEndOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AboveEnemyAngleOffsetHz) == 0x000B74, "Member 'UBP_PsychicObjectComponent_C::AboveEnemyAngleOffsetHz' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EnemyOwner) == 0x000B78, "Member 'UBP_PsychicObjectComponent_C::EnemyOwner' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyOccupied) == 0x000B80, "Member 'UBP_PsychicObjectComponent_C::bEnemyOccupied' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyTypeEm0900) == 0x000B81, "Member 'UBP_PsychicObjectComponent_C::bEnemyTypeEm0900' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyRandomObj) == 0x000B82, "Member 'UBP_PsychicObjectComponent_C::bEnemyRandomObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyDirectShot) == 0x000B83, "Member 'UBP_PsychicObjectComponent_C::bEnemyDirectShot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseEnemyAttackParameter) == 0x000B84, "Member 'UBP_PsychicObjectComponent_C::bUseEnemyAttackParameter' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EnemyCommonInfo) == 0x000B88, "Member 'UBP_PsychicObjectComponent_C::EnemyCommonInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EnemySkillInfo) == 0x000BF8, "Member 'UBP_PsychicObjectComponent_C::EnemySkillInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleBackup) == 0x000CE8, "Member 'UBP_PsychicObjectComponent_C::bHandleBackup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HandleBackupCollision) == 0x000CE9, "Member 'UBP_PsychicObjectComponent_C::HandleBackupCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleBackupSimulate) == 0x000CEA, "Member 'UBP_PsychicObjectComponent_C::bHandleBackupSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHandleBackupGravity) == 0x000CEB, "Member 'UBP_PsychicObjectComponent_C::bHandleBackupGravity' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MeshOffset) == 0x000CEC, "Member 'UBP_PsychicObjectComponent_C::MeshOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineFollowTarget) == 0x000CF8, "Member 'UBP_PsychicObjectComponent_C::bSplineFollowTarget' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SplineFollowTargetPos) == 0x000CFC, "Member 'UBP_PsychicObjectComponent_C::SplineFollowTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyProc) == 0x000D08, "Member 'UBP_PsychicObjectComponent_C::bCopyProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyDirectDrop) == 0x000D09, "Member 'UBP_PsychicObjectComponent_C::bCopyDirectDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyCombo) == 0x000D0A, "Member 'UBP_PsychicObjectComponent_C::bCopyCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyDelay) == 0x000D0B, "Member 'UBP_PsychicObjectComponent_C::bCopyDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyAppear) == 0x000D0C, "Member 'UBP_PsychicObjectComponent_C::bCopyAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyAppearProc) == 0x000D0D, "Member 'UBP_PsychicObjectComponent_C::bCopyAppearProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCopyAttack) == 0x000D0E, "Member 'UBP_PsychicObjectComponent_C::bCopyAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyParentObj) == 0x000D10, "Member 'UBP_PsychicObjectComponent_C::CopyParentObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyDelayTime) == 0x000D18, "Member 'UBP_PsychicObjectComponent_C::CopyDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyAppearTime) == 0x000D1C, "Member 'UBP_PsychicObjectComponent_C::CopyAppearTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyAttackTime) == 0x000D20, "Member 'UBP_PsychicObjectComponent_C::CopyAttackTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyDelayTimer) == 0x000D24, "Member 'UBP_PsychicObjectComponent_C::CopyDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyAppearTimer) == 0x000D30, "Member 'UBP_PsychicObjectComponent_C::CopyAppearTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyAttackTimer) == 0x000D3C, "Member 'UBP_PsychicObjectComponent_C::CopyAttackTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyIndex) == 0x000D48, "Member 'UBP_PsychicObjectComponent_C::CopyIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, GrabMovementSizeData) == 0x000D50, "Member 'UBP_PsychicObjectComponent_C::GrabMovementSizeData' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureHandleTargetPos) == 0x000E00, "Member 'UBP_PsychicObjectComponent_C::CaptureHandleTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropTargetLocation) == 0x000E0C, "Member 'UBP_PsychicObjectComponent_C::bAttackDropTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackThrowTargetLocation) == 0x000E0D, "Member 'UBP_PsychicObjectComponent_C::bAttackThrowTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bNewCommon) == 0x000E0E, "Member 'UBP_PsychicObjectComponent_C::bNewCommon' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyParentStartPos) == 0x000E10, "Member 'UBP_PsychicObjectComponent_C::CopyParentStartPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyStartPos) == 0x000E1C, "Member 'UBP_PsychicObjectComponent_C::CopyStartPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyThrowDir) == 0x000E28, "Member 'UBP_PsychicObjectComponent_C::CopyThrowDir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopySpeedRateMax) == 0x000E34, "Member 'UBP_PsychicObjectComponent_C::CopySpeedRateMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopySpeedMax) == 0x000E38, "Member 'UBP_PsychicObjectComponent_C::CopySpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackSphereOffset) == 0x000E3C, "Member 'UBP_PsychicObjectComponent_C::AttackSphereOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackIntercept) == 0x000E48, "Member 'UBP_PsychicObjectComponent_C::bAttackIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyIntercept) == 0x000E49, "Member 'UBP_PsychicObjectComponent_C::bEnemyIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bInterceptReserve) == 0x000E4A, "Member 'UBP_PsychicObjectComponent_C::bInterceptReserve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackCapsuleOffset) == 0x000E4C, "Member 'UBP_PsychicObjectComponent_C::AttackCapsuleOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackCapsuleBaseRot) == 0x000E58, "Member 'UBP_PsychicObjectComponent_C::AttackCapsuleBaseRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDropTimeRateDirect) == 0x000E64, "Member 'UBP_PsychicObjectComponent_C::AttackDropTimeRateDirect' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDropTimeRateBrain) == 0x000E68, "Member 'UBP_PsychicObjectComponent_C::AttackDropTimeRateBrain' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutForwardDir) == 0x000E6C, "Member 'UBP_PsychicObjectComponent_C::PullOutForwardDir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestructibleClass) == 0x000E78, "Member 'UBP_PsychicObjectComponent_C::DestructibleClass' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestructibleActor) == 0x000E80, "Member 'UBP_PsychicObjectComponent_C::DestructibleActor' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDestructibleAuto) == 0x000E88, "Member 'UBP_PsychicObjectComponent_C::bDestructibleAuto' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestructibleImpulse) == 0x000E8C, "Member 'UBP_PsychicObjectComponent_C::DestructibleImpulse' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ChildPsyObj) == 0x000E90, "Member 'UBP_PsychicObjectComponent_C::ChildPsyObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ChildPsyObjParentObj) == 0x000E98, "Member 'UBP_PsychicObjectComponent_C::ChildPsyObjParentObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, VibrateRangeZ) == 0x000EA0, "Member 'UBP_PsychicObjectComponent_C::VibrateRangeZ' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDropSplineDistance) == 0x000EA8, "Member 'UBP_PsychicObjectComponent_C::AttackDropSplineDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDirectDrop) == 0x000EB0, "Member 'UBP_PsychicObjectComponent_C::bAttackDirectDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropMontage) == 0x000EB8, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropSplineDistanceCurve) == 0x000EC0, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropSplineDistanceCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropSpinCurve) == 0x000EC8, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropSpinCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropSpinSpeedMax) == 0x000ED0, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropSpinSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropOffset) == 0x000ED4, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropRot) == 0x000EE0, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackDirectDropAxis) == 0x000EEC, "Member 'UBP_PsychicObjectComponent_C::AttackDirectDropAxis' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutEndPos) == 0x000EF8, "Member 'UBP_PsychicObjectComponent_C::bPullOutEndPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutPosEnd) == 0x000EFC, "Member 'UBP_PsychicObjectComponent_C::PullOutPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutEndRot) == 0x000F08, "Member 'UBP_PsychicObjectComponent_C::bPullOutEndRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutRotEnd) == 0x000F0C, "Member 'UBP_PsychicObjectComponent_C::PullOutRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectAppear) == 0x000F18, "Member 'UBP_PsychicObjectComponent_C::bEffectAppear' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEffectAppearReverse) == 0x000F19, "Member 'UBP_PsychicObjectComponent_C::bEffectAppearReverse' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EffectAppearTime) == 0x000F1C, "Member 'UBP_PsychicObjectComponent_C::EffectAppearTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EffectAppearTimer) == 0x000F20, "Member 'UBP_PsychicObjectComponent_C::EffectAppearTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomAngleMin) == 0x000F2C, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomAngleMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomAngleMax) == 0x000F30, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomAngleMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomDistanceMin) == 0x000F34, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomDistanceMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomDistanceMax) == 0x000F38, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomDistanceMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomHeightMin) == 0x000F3C, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomHeightMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldRandomHeightMax) == 0x000F40, "Member 'UBP_PsychicObjectComponent_C::BrainFieldRandomHeightMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSpawnHeightMin) == 0x000F44, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSpawnHeightMin' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSpawnHeightMax) == 0x000F48, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSpawnHeightMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldDropAttack) == 0x000F4C, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldDropAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldDropOffset) == 0x000F50, "Member 'UBP_PsychicObjectComponent_C::BrainFieldDropOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldDropCamera) == 0x000F5C, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldDropCamera' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckTimeDilationApply) == 0x000F5D, "Member 'UBP_PsychicObjectComponent_C::bCheckTimeDilationApply' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckTimeDilationAttack) == 0x000F5E, "Member 'UBP_PsychicObjectComponent_C::bCheckTimeDilationAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckTimeDilationSkip) == 0x000F5F, "Member 'UBP_PsychicObjectComponent_C::bCheckTimeDilationSkip' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CheckTimeDilationValue) == 0x000F60, "Member 'UBP_PsychicObjectComponent_C::CheckTimeDilationValue' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bTimeDilationCapture) == 0x000F64, "Member 'UBP_PsychicObjectComponent_C::bTimeDilationCapture' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bTimeDilationPull) == 0x000F65, "Member 'UBP_PsychicObjectComponent_C::bTimeDilationPull' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullLerpTimer) == 0x000F68, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullLerpTime) == 0x000F74, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullPosStt) == 0x000F78, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullPosEnd) == 0x000F84, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullRotStt) == 0x000F90, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullRotEnd) == 0x000F9C, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullEaseType) == 0x000FA8, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullEaseType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TimeDilationPullEaseBlend) == 0x000FAC, "Member 'UBP_PsychicObjectComponent_C::TimeDilationPullEaseBlend' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshPosStt) == 0x000FB0, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshPosEnd) == 0x000FBC, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotStt) == 0x000FC8, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotCurve) == 0x000FD8, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotCurveTime) == 0x000FE0, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotCurveTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotCurveSpeed) == 0x000FE4, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotCurveSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotCurveRate) == 0x000FE8, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotCurveRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureMeshRotCurveAlpha) == 0x000FEC, "Member 'UBP_PsychicObjectComponent_C::CaptureMeshRotCurveAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureRateBase) == 0x000FF0, "Member 'UBP_PsychicObjectComponent_C::CaptureRateBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureRateRange) == 0x000FF4, "Member 'UBP_PsychicObjectComponent_C::CaptureRateRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCaptureLimit) == 0x000FF8, "Member 'UBP_PsychicObjectComponent_C::bCaptureLimit' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLimitDistance) == 0x000FFC, "Member 'UBP_PsychicObjectComponent_C::CaptureLimitDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLimitCountMax) == 0x001000, "Member 'UBP_PsychicObjectComponent_C::CaptureLimitCountMax' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureLimitCount) == 0x001004, "Member 'UBP_PsychicObjectComponent_C::CaptureLimitCount' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBoundsOffset) == 0x001008, "Member 'UBP_PsychicObjectComponent_C::bBoundsOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BoundsOffset) == 0x00100C, "Member 'UBP_PsychicObjectComponent_C::BoundsOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EffectCompList) == 0x001018, "Member 'UBP_PsychicObjectComponent_C::EffectCompList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCaptureSkipEffectRelease) == 0x001028, "Member 'UBP_PsychicObjectComponent_C::bCaptureSkipEffectRelease' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bNewElectricPole) == 0x001029, "Member 'UBP_PsychicObjectComponent_C::bNewElectricPole' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBackupSimulate) == 0x00102A, "Member 'UBP_PsychicObjectComponent_C::bBackupSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSimulateDefault) == 0x00102B, "Member 'UBP_PsychicObjectComponent_C::bSimulateDefault' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BackupPhysicCollision) == 0x00102C, "Member 'UBP_PsychicObjectComponent_C::BackupPhysicCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBackupPhysicSimulate) == 0x00102D, "Member 'UBP_PsychicObjectComponent_C::bBackupPhysicSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBackupPhysicGravity) == 0x00102E, "Member 'UBP_PsychicObjectComponent_C::bBackupPhysicGravity' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bMaterialCaptureStart) == 0x00102F, "Member 'UBP_PsychicObjectComponent_C::bMaterialCaptureStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialParamNormal) == 0x001030, "Member 'UBP_PsychicObjectComponent_C::MaterialParamNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialParamFire) == 0x0010D0, "Member 'UBP_PsychicObjectComponent_C::MaterialParamFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialParamThunder) == 0x001170, "Member 'UBP_PsychicObjectComponent_C::MaterialParamThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCurveNormal) == 0x001210, "Member 'UBP_PsychicObjectComponent_C::MaterialCurveNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCurveFire) == 0x001218, "Member 'UBP_PsychicObjectComponent_C::MaterialCurveFire' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCurveThunder) == 0x001220, "Member 'UBP_PsychicObjectComponent_C::MaterialCurveThunder' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCaptureStartParam) == 0x001228, "Member 'UBP_PsychicObjectComponent_C::MaterialCaptureStartParam' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCaptureStartCurve) == 0x0012C8, "Member 'UBP_PsychicObjectComponent_C::MaterialCaptureStartCurve' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, MaterialCaptureStartTimer) == 0x0012D0, "Member 'UBP_PsychicObjectComponent_C::MaterialCaptureStartTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SasKindList) == 0x0012D8, "Member 'UBP_PsychicObjectComponent_C::SasKindList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineUnqRot) == 0x0012E8, "Member 'UBP_PsychicObjectComponent_C::bSplineUnqRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, OnSetEffectFocus) == 0x0012F0, "Member 'UBP_PsychicObjectComponent_C::OnSetEffectFocus' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bHitBackGroundDelay) == 0x001300, "Member 'UBP_PsychicObjectComponent_C::bHitBackGroundDelay' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HitResultBackGround) == 0x001304, "Member 'UBP_PsychicObjectComponent_C::HitResultBackGround' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeComboAir) == 0x00138C, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeComboAir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutSkipFirstAttack) == 0x001390, "Member 'UBP_PsychicObjectComponent_C::bPullOutSkipFirstAttack' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAsyncAttractSkip) == 0x001391, "Member 'UBP_PsychicObjectComponent_C::bAsyncAttractSkip' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DispatcherGimmickObjectEnd) == 0x001398, "Member 'UBP_PsychicObjectComponent_C::DispatcherGimmickObjectEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldDropLookAtPosRate) == 0x0013A8, "Member 'UBP_PsychicObjectComponent_C::BrainFieldDropLookAtPosRate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldDropLookAtUpdate) == 0x0013AC, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldDropLookAtUpdate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldDropLookAtOnce) == 0x0013AD, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldDropLookAtOnce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldDropLookAtPos) == 0x0013B0, "Member 'UBP_PsychicObjectComponent_C::BrainFieldDropLookAtPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDirectSwingCollision) == 0x0013BC, "Member 'UBP_PsychicObjectComponent_C::bDirectSwingCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DirectSwingCollisionOffset) == 0x0013C0, "Member 'UBP_PsychicObjectComponent_C::DirectSwingCollisionOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPsychicFieldObj) == 0x0013C4, "Member 'UBP_PsychicObjectComponent_C::bPsychicFieldObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPsychicFieldExtraObj) == 0x0013C5, "Member 'UBP_PsychicObjectComponent_C::bPsychicFieldExtraObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPsychicFieldSpawnObj) == 0x0013C6, "Member 'UBP_PsychicObjectComponent_C::bPsychicFieldSpawnObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicFieldAttackIndex) == 0x0013C8, "Member 'UBP_PsychicObjectComponent_C::PsychicFieldAttackIndex' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SizeParameter) == 0x0013D0, "Member 'UBP_PsychicObjectComponent_C::SizeParameter' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ExtendExtraType) == 0x001508, "Member 'UBP_PsychicObjectComponent_C::ExtendExtraType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicFieldAnimList) == 0x001518, "Member 'UBP_PsychicObjectComponent_C::PsychicFieldAnimList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ArrangeMeshTransformOld) == 0x001530, "Member 'UBP_PsychicObjectComponent_C::ArrangeMeshTransformOld' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EnemySasKind) == 0x001560, "Member 'UBP_PsychicObjectComponent_C::EnemySasKind' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUniqueAttackCollision) == 0x001561, "Member 'UBP_PsychicObjectComponent_C::bUniqueAttackCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeNormalEnemy) == 0x001564, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeNormalEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeComboEnemy) == 0x001568, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeComboEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeComboAirEnemy) == 0x00156C, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeComboAirEnemy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicFieldObjNum) == 0x001570, "Member 'UBP_PsychicObjectComponent_C::PsychicFieldObjNum' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EnemyAttackRowName) == 0x001574, "Member 'UBP_PsychicObjectComponent_C::EnemyAttackRowName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseAttackEffectInfo) == 0x00157C, "Member 'UBP_PsychicObjectComponent_C::bUseAttackEffectInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttackEffectInfo) == 0x001580, "Member 'UBP_PsychicObjectComponent_C::AttackEffectInfo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsyObjMan) == 0x001588, "Member 'UBP_PsychicObjectComponent_C::PsyObjMan' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackThrowAnimation) == 0x001590, "Member 'UBP_PsychicObjectComponent_C::bAttackThrowAnimation' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAnimObjLerped) == 0x001591, "Member 'UBP_PsychicObjectComponent_C::bAnimObjLerped' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjUpdateTime) == 0x001594, "Member 'UBP_PsychicObjectComponent_C::AnimObjUpdateTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjUpdateTimer) == 0x001598, "Member 'UBP_PsychicObjectComponent_C::AnimObjUpdateTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpTime) == 0x0015A4, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpTimer) == 0x0015A8, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpPosStt) == 0x0015B4, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpPosStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpPosEnd) == 0x0015C0, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpRotStt) == 0x0015CC, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpRotStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimObjLerpRotEnd) == 0x0015D8, "Member 'UBP_PsychicObjectComponent_C::AnimObjLerpRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackJustDodge) == 0x0015E4, "Member 'UBP_PsychicObjectComponent_C::bAttackJustDodge' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackComboType) == 0x0015E5, "Member 'UBP_PsychicObjectComponent_C::bAttackComboType' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseAttackActorPos) == 0x0015E6, "Member 'UBP_PsychicObjectComponent_C::bUseAttackActorPos' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bInterceptObject) == 0x0015E7, "Member 'UBP_PsychicObjectComponent_C::bInterceptObject' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InterceptEnmObj) == 0x0015E8, "Member 'UBP_PsychicObjectComponent_C::InterceptEnmObj' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScaleIntercept) == 0x0015F0, "Member 'UBP_PsychicObjectComponent_C::AnimScaleIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractAnimScaleFix) == 0x0015FC, "Member 'UBP_PsychicObjectComponent_C::AttractAnimScaleFix' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractAnimStart) == 0x001608, "Member 'UBP_PsychicObjectComponent_C::bAttractAnimStart' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractAnimFixScale) == 0x001609, "Member 'UBP_PsychicObjectComponent_C::bAttractAnimFixScale' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEnemyDrop) == 0x00160A, "Member 'UBP_PsychicObjectComponent_C::bEnemyDrop' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDestroyExplosionProc) == 0x00160B, "Member 'UBP_PsychicObjectComponent_C::bDestroyExplosionProc' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DestroyExplosionTimer) == 0x00160C, "Member 'UBP_PsychicObjectComponent_C::DestroyExplosionTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DataRevision) == 0x001618, "Member 'UBP_PsychicObjectComponent_C::DataRevision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAnimScaleLerp) == 0x00161C, "Member 'UBP_PsychicObjectComponent_C::bAnimScaleLerp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScaleLerpTimer) == 0x001620, "Member 'UBP_PsychicObjectComponent_C::AnimScaleLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScaleLerpTime) == 0x00162C, "Member 'UBP_PsychicObjectComponent_C::AnimScaleLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScaleLerpStt) == 0x001630, "Member 'UBP_PsychicObjectComponent_C::AnimScaleLerpStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AnimScaleLerpEnd) == 0x00163C, "Member 'UBP_PsychicObjectComponent_C::AnimScaleLerpEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractSkipEndMontage) == 0x001648, "Member 'UBP_PsychicObjectComponent_C::bAttractSkipEndMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractEnemyDistance) == 0x00164C, "Member 'UBP_PsychicObjectComponent_C::AttractEnemyDistance' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackThrowFixAngular) == 0x001650, "Member 'UBP_PsychicObjectComponent_C::bAttackThrowFixAngular' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutAttackCheck) == 0x001651, "Member 'UBP_PsychicObjectComponent_C::bPullOutAttackCheck' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bKillZ) == 0x001652, "Member 'UBP_PsychicObjectComponent_C::bKillZ' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractTargetRot) == 0x001653, "Member 'UBP_PsychicObjectComponent_C::bAttractTargetRot' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractDecel) == 0x001654, "Member 'UBP_PsychicObjectComponent_C::bAttractDecel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractDecelSpeedStt) == 0x001658, "Member 'UBP_PsychicObjectComponent_C::AttractDecelSpeedStt' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractDecelVector) == 0x00165C, "Member 'UBP_PsychicObjectComponent_C::AttractDecelVector' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractDecelTime) == 0x001668, "Member 'UBP_PsychicObjectComponent_C::AttractDecelTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractDecelTimer) == 0x00166C, "Member 'UBP_PsychicObjectComponent_C::AttractDecelTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractDecelSpeed) == 0x001678, "Member 'UBP_PsychicObjectComponent_C::AttractDecelSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractTimeIntercept) == 0x00167C, "Member 'UBP_PsychicObjectComponent_C::AttractTimeIntercept' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, AttractTimeInterceptEnm) == 0x001680, "Member 'UBP_PsychicObjectComponent_C::AttractTimeInterceptEnm' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CheckHitSideDist) == 0x001684, "Member 'UBP_PsychicObjectComponent_C::CheckHitSideDist' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugNewTick) == 0x001688, "Member 'UBP_PsychicObjectComponent_C::bDebugNewTick' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugNewDestroy) == 0x001689, "Member 'UBP_PsychicObjectComponent_C::bDebugNewDestroy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bDebugNewCheckDestroy) == 0x00168A, "Member 'UBP_PsychicObjectComponent_C::bDebugNewCheckDestroy' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, TrgEffMgr) == 0x001690, "Member 'UBP_PsychicObjectComponent_C::TrgEffMgr' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PsychicFieldAnimListCh0200) == 0x001698, "Member 'UBP_PsychicObjectComponent_C::PsychicFieldAnimListCh0200' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bCheckMeshCompHitBg) == 0x0016A8, "Member 'UBP_PsychicObjectComponent_C::bCheckMeshCompHitBg' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bExecMeshCompHitBg) == 0x0016A9, "Member 'UBP_PsychicObjectComponent_C::bExecMeshCompHitBg' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bMeshCompHitBg) == 0x0016AA, "Member 'UBP_PsychicObjectComponent_C::bMeshCompHitBg' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutCheckWall) == 0x0016AB, "Member 'UBP_PsychicObjectComponent_C::bPullOutCheckWall' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bPullOutSign) == 0x0016AC, "Member 'UBP_PsychicObjectComponent_C::bPullOutSign' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PullOutCheckWallRange) == 0x0016B0, "Member 'UBP_PsychicObjectComponent_C::PullOutCheckWallRange' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttackDropSplineForce) == 0x0016B4, "Member 'UBP_PsychicObjectComponent_C::bAttackDropSplineForce' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldDropLookAtPosEnd) == 0x0016B8, "Member 'UBP_PsychicObjectComponent_C::BrainFieldDropLookAtPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAttractBrainFieldThrow) == 0x0016C4, "Member 'UBP_PsychicObjectComponent_C::bAttractBrainFieldThrow' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bSplineAboveEnemyActorLocation) == 0x0016C5, "Member 'UBP_PsychicObjectComponent_C::bSplineAboveEnemyActorLocation' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, DirectSwingCollisionEndOffset) == 0x0016C8, "Member 'UBP_PsychicObjectComponent_C::DirectSwingCollisionEndOffset' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldSwingLerpEnable) == 0x0016CC, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldSwingLerpEnable' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bBrainFieldSwingLerp) == 0x0016CD, "Member 'UBP_PsychicObjectComponent_C::bBrainFieldSwingLerp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingLerpTime) == 0x0016D0, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, BrainFieldSwingUpdateTime) == 0x0016D4, "Member 'UBP_PsychicObjectComponent_C::BrainFieldSwingUpdateTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurveAttractRotBase) == 0x0016D8, "Member 'UBP_PsychicObjectComponent_C::CurveAttractRotBase' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurveAttractRotItcEnm) == 0x0016E0, "Member 'UBP_PsychicObjectComponent_C::CurveAttractRotItcEnm' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CurveAttractRotSocketDir) == 0x0016E8, "Member 'UBP_PsychicObjectComponent_C::CurveAttractRotSocketDir' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, InterceptEnmNormal) == 0x0016F0, "Member 'UBP_PsychicObjectComponent_C::InterceptEnmNormal' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingForceTimer) == 0x0016FC, "Member 'UBP_PsychicObjectComponent_C::HomingForceTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, HomingFroceTime) == 0x001708, "Member 'UBP_PsychicObjectComponent_C::HomingFroceTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CopyHomingForceTimer) == 0x00170C, "Member 'UBP_PsychicObjectComponent_C::CopyHomingForceTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bKeepSimulate) == 0x001718, "Member 'UBP_PsychicObjectComponent_C::bKeepSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, KeepSimulateTime) == 0x00171C, "Member 'UBP_PsychicObjectComponent_C::KeepSimulateTime' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, KeepSimulateTimer) == 0x001720, "Member 'UBP_PsychicObjectComponent_C::KeepSimulateTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, PhysicsCapsuleComp) == 0x001730, "Member 'UBP_PsychicObjectComponent_C::PhysicsCapsuleComp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEventBackup) == 0x001738, "Member 'UBP_PsychicObjectComponent_C::bEventBackup' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, EventBackupCollision) == 0x001739, "Member 'UBP_PsychicObjectComponent_C::EventBackupCollision' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEventBackupSimulate) == 0x00173A, "Member 'UBP_PsychicObjectComponent_C::bEventBackupSimulate' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bEventBackupGravity) == 0x00173B, "Member 'UBP_PsychicObjectComponent_C::bEventBackupGravity' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bUseTempCollisionProfile) == 0x00173C, "Member 'UBP_PsychicObjectComponent_C::bUseTempCollisionProfile' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, SkillInfoBackUp) == 0x001740, "Member 'UBP_PsychicObjectComponent_C::SkillInfoBackUp' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, bAddAchievementFlag) == 0x001830, "Member 'UBP_PsychicObjectComponent_C::bAddAchievementFlag' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeNormal_em8400) == 0x001834, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeNormal_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeCombo_em8400) == 0x001838, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeCombo_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, CaptureTimeComboAir_em8400) == 0x00183C, "Member 'UBP_PsychicObjectComponent_C::CaptureTimeComboAir_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedNormal_em8400) == 0x001840, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedNormal_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedCombo_em8400) == 0x001844, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedCombo_em8400' has a wrong offset!");
static_assert(offsetof(UBP_PsychicObjectComponent_C, ThrowSpeedBrainField_em8400) == 0x001848, "Member 'UBP_PsychicObjectComponent_C::ThrowSpeedBrainField_em8400' has a wrong offset!");

}

