#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RenderScarManage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RenderScarManage.BPC_RenderScarManage_C
// 0x0148 (0x0208 - 0x00C0)
class UBPC_RenderScarManage_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_ScarSceneCapture_C*                 SceneCapture;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RenderMaterial;                                    // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     RenderBaseMaterial;                                // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DrawDebugArea;                                     // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3886[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ScarSeconds;                                       // 0x0110(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveVector*                           CurveRate;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveIntensity;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        ColorMask;                                         // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         NowMaskNo;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_3887[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Active;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 TargetMesh;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class FName>                           NameScarTextureMask;                               // 0x0168(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class FName>                           NameScarRate;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class FName>                           NameScarIntensity;                                 // 0x0188(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	class UScarParam*                             Param;                                             // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  UseUpdate;                                         // 0x01A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          SettingEvent;                                      // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasCache;                                          // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3888[0x2];                                     // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachePriority;                                     // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CacheRenderMesh;                                   // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CacheBaseMesh;                                     // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CacheRadiusSideScale;                              // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CacheFrontScale;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CacheThicknessScale;                               // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheLocation;                                     // 0x01D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheMatrixForward;                                // 0x01E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheMatrixRight;                                  // 0x01EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheMatrixUpper;                                  // 0x01F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDamageEffectType                            CacheDamageEffectType;                             // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPC_RenderScarManage(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Initialize();
	void GetMeshRenderMaterial(class UMaterialInterface** Material);
	void AddScarMatrix(class UMeshComponent* RenderMesh, class UMeshComponent* BaseMesh, float RadiusSideScale, float RadiusFrontScale, float ThicknessScale, const struct FVector& Location, const struct FVector& MatrixForward, const struct FVector& MatrixRight, const struct FVector& MatrixUpper, EHDamageEffectType DamageEffectType, bool UsePriority, int32 Priority, int32* Handle);
	void PrivatePostCapture();
	void PrivateDebugDraw(float RadiusSide, float RadiusFront, float Thickness, const struct FVector& Location, const struct FVector& MatrixForward, const struct FVector& MatrixRight, const struct FVector& MatrixUpper);
	void PrivateUpdate(float DeltaSeconds);
	void PrivateUpdateTime(float DeltaSeconds, int32 Param_Index, float* CalcTime, bool* Finish);
	void PrivateSetMeshScarRate(class UMeshComponent* Mesh, int32 Param_Index, const struct FVector& Rate);
	void PrivateSetMeshScarTexture(class UMeshComponent* Mesh, int32 Param_Index, bool UseScarTexture, TArray<class UMaterialInterface*>& IgnoreMaterial);
	void PrivateSetMeshScarIntensity(class UMeshComponent* Mesh, int32 Param_Index, const struct FVector& Intensity);
	void SetupScarColor(class UMeshComponent* Mesh, int32 SkillAttribute);
	void AddScarMatrixByIndex(class UMeshComponent* RenderMesh, class UMeshComponent* BaseMesh, float RadiusSideScale, float RadiusFrontScale, float ThicknessScale, const struct FVector& Location, const struct FVector& MatrixForward, const struct FVector& MatrixRight, const struct FVector& MatrixUpper, EHDamageEffectType DamageEffectType, int32 Param_Index);
	void SetForceRate(int32 Param_Index, float Rate);
	void SetForceUseUpdate(int32 Param_Index, bool Use);
	void PrivateSetupRenderTarget(bool ForceSetup);
	void PrivateSetRenderTargetTexture(class UTextureRenderTarget2D* Target);
	void PrivateResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget);
	void PrivateAddCache(class UMeshComponent* RenderMesh, class UMeshComponent* BaseMesh, float RadiusSideScale, float RadiusFrontScale, float ThicknessScale, const struct FVector& Location, const struct FVector& MatrixForward, const struct FVector& MatrixRight, const struct FVector& MatrixUpper, EHDamageEffectType DamageEffectType);
	void PrivateUpdateCache(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RenderScarManage_C">();
	}
	static class UBPC_RenderScarManage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RenderScarManage_C>();
	}
};
static_assert(alignof(UBPC_RenderScarManage_C) == 0x000008, "Wrong alignment on UBPC_RenderScarManage_C");
static_assert(sizeof(UBPC_RenderScarManage_C) == 0x000208, "Wrong size on UBPC_RenderScarManage_C");
static_assert(offsetof(UBPC_RenderScarManage_C, UberGraphFrame) == 0x0000C0, "Member 'UBPC_RenderScarManage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, SceneCapture) == 0x0000C8, "Member 'UBPC_RenderScarManage_C::SceneCapture' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, RenderTarget) == 0x0000D0, "Member 'UBPC_RenderScarManage_C::RenderTarget' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, RenderMaterial) == 0x0000D8, "Member 'UBPC_RenderScarManage_C::RenderMaterial' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, RenderBaseMaterial) == 0x000100, "Member 'UBPC_RenderScarManage_C::RenderBaseMaterial' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, Initialized) == 0x000108, "Member 'UBPC_RenderScarManage_C::Initialized' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, DrawDebugArea) == 0x000109, "Member 'UBPC_RenderScarManage_C::DrawDebugArea' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, ScarSeconds) == 0x000110, "Member 'UBPC_RenderScarManage_C::ScarSeconds' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CurveRate) == 0x000120, "Member 'UBPC_RenderScarManage_C::CurveRate' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CurveIntensity) == 0x000128, "Member 'UBPC_RenderScarManage_C::CurveIntensity' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, ColorMask) == 0x000130, "Member 'UBPC_RenderScarManage_C::ColorMask' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, NowMaskNo) == 0x000140, "Member 'UBPC_RenderScarManage_C::NowMaskNo' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, Active) == 0x000148, "Member 'UBPC_RenderScarManage_C::Active' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, TargetMesh) == 0x000158, "Member 'UBPC_RenderScarManage_C::TargetMesh' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, NameScarTextureMask) == 0x000168, "Member 'UBPC_RenderScarManage_C::NameScarTextureMask' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, NameScarRate) == 0x000178, "Member 'UBPC_RenderScarManage_C::NameScarRate' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, NameScarIntensity) == 0x000188, "Member 'UBPC_RenderScarManage_C::NameScarIntensity' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, Param) == 0x000198, "Member 'UBPC_RenderScarManage_C::Param' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, UseUpdate) == 0x0001A0, "Member 'UBPC_RenderScarManage_C::UseUpdate' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, SettingEvent) == 0x0001B0, "Member 'UBPC_RenderScarManage_C::SettingEvent' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, HasCache) == 0x0001B1, "Member 'UBPC_RenderScarManage_C::HasCache' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CachePriority) == 0x0001B4, "Member 'UBPC_RenderScarManage_C::CachePriority' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheRenderMesh) == 0x0001B8, "Member 'UBPC_RenderScarManage_C::CacheRenderMesh' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheBaseMesh) == 0x0001C0, "Member 'UBPC_RenderScarManage_C::CacheBaseMesh' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheRadiusSideScale) == 0x0001C8, "Member 'UBPC_RenderScarManage_C::CacheRadiusSideScale' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheFrontScale) == 0x0001CC, "Member 'UBPC_RenderScarManage_C::CacheFrontScale' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheThicknessScale) == 0x0001D0, "Member 'UBPC_RenderScarManage_C::CacheThicknessScale' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheLocation) == 0x0001D4, "Member 'UBPC_RenderScarManage_C::CacheLocation' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheMatrixForward) == 0x0001E0, "Member 'UBPC_RenderScarManage_C::CacheMatrixForward' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheMatrixRight) == 0x0001EC, "Member 'UBPC_RenderScarManage_C::CacheMatrixRight' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheMatrixUpper) == 0x0001F8, "Member 'UBPC_RenderScarManage_C::CacheMatrixUpper' has a wrong offset!");
static_assert(offsetof(UBPC_RenderScarManage_C, CacheDamageEffectType) == 0x000204, "Member 'UBPC_RenderScarManage_C::CacheDamageEffectType' has a wrong offset!");

}

