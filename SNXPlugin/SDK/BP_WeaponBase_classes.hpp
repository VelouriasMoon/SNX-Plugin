#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeaponBase.BP_WeaponBase_C
// 0x01E0 (0x0410 - 0x0230)
class ABP_WeaponBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EWeaponThrowType                              ThrowType;                                         // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_823A[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowTargetPoint;                                  // 0x0244(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ThrowTargetActor;                                  // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_823B[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        StoreParentComponent;                              // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StoreParentSocketName;                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrow;                                            // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_823C[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowStartPoint;                                   // 0x0274(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               ThrowRotator;                                      // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         WeaponLength;                                      // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowHit;                                         // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrowReturn;                                      // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_823D[0x2];                                     // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             ReturnTimer;                                       // 0x029C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        BattleEffect;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         BattleEffectHandle;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BattleEffectParameter;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowDir;                                          // 0x02C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_823E[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ClaimantMaterialColor_PsychicEmission;             // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   MaterialColor_PsychicEmission;                     // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           ClaimantMaterialAlpha_PsychicEmission;             // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 MaterialAlpha_PsychicEmission;                     // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   BattleEffectAttachPoint;                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBattleEmissionEnable;                             // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBattleEmission;                                   // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBattleEmissionOn;                                 // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_823F[0x1];                                     // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleEmissionLerpTime;                            // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BattleEmissionRate;                                // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8240[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       WeaponMaterialInstanceArray;                       // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequence*                          AnimSeqNeutralLoop;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimSeqBattleLoop;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimSeqToBattle;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimSeqToNeutral;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMainWeapon;                                       // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8241[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_SASKind, struct FLinearColor>          SASColorMap;                                       // 0x0360(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_SASKind                                     EmissiveColorSASKind;                              // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8242[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DriveLevel;                                        // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DriveIntensity;                                    // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DriveColor;                                        // 0x03BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSwordIntensity;                             // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           TickClaimantList;                                  // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   ThrowWeaponClaimantName;                           // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponEmissionClaimantName;                        // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DispatchThrowHit;                                  // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         WeaponItemID;                                      // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         CheckHeightLength;                                 // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologramFlag;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableYuitoStringFlag;                           // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void DispatchThrowHit__DelegateSignature(const struct FVector& HitLocation);
	void ExecuteUbergraph_BP_WeaponBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void TakeBackOwner(float Time);
	void ThrowToPoint(float Speed, const struct FVector& TargetPoint);
	void ThrowToTarget(float Speed, class AActor* TargetActor, float CheckHeightOnGround);
	void ThrowUpdate(float DeltaTime);
	void ThrowStart(EWeaponThrowType Param_ThrowType, float CheckHeightOnGround);
	void Attach(class ARSBattlePlayer_C* Param_Owner, class USceneComponent* Component, class FName SocketName);
	void ThrowEnd(bool bAttach);
	void TakeBackUpdate(float DeltaTime);
	void SetBattleEffect(bool bON);
	void SetWeaponVisibility(bool bVisible);
	void Initialize(bool* bDummy);
	void SetMaterialColor_PsychicEmission(float R, float G, float B, class FName ClaimantName);
	void SetMaterialAlpha_PsychicEmission(float Alpha, class FName ClaimantName);
	void ResetMaterialColor_PsychicEmission(class FName ClaimantName);
	void ResetMaterialAlpha_PsychicEmission(class FName ClaimantName);
	void SetWeaponMaterialScalarParameter(class FName ParamName, float Value, bool bExtraMaterial, bool* bDummy);
	void SetLoopAnim(bool bBattle);
	void SetTransAnim(bool bBattle);
	void SetBattleEmission(bool Force_in, bool Flag_in, float Lerp_time_in);
	void UpdateBattleEmission();
	void SetWeaponMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value, bool bExtraMaterial, bool* bDummy);
	void SetWeaponMaterialVectorParameter(class FName ParameterName, const struct FLinearColor& Color, bool bExtraMaterial, bool* bDummy);
	void SetWeaponMaterialVectorArrayParameter(TArray<class FName>& ParameterName, TArray<struct FLinearColor>& Color, bool bExtraMaterial, bool* bDummy);
	void SetMaterial_Emissive(float Emissive);
	void SetMaterial_EmissiveColor(const struct FLinearColor& Color);
	void SetMaterial_EmissiveColorType(E_SASKind SasKind);
	void ResetMaterial_EmissiveColorType(E_SASKind SasKind);
	void SetWeaponTickEnabled(bool bEnabled, class FName ClaimantName);
	void GetExtraMaterialInstanceArray(TArray<class UMaterialInstanceDynamic*>* MaterialInstance);
	void GetExtraMesh(TArray<class USkeletalMeshComponent*>* ExtraMesh);
	void ResetMaterialInstanceArray();
	void LoadMesh(int32 InWeaponID, bool ResetMaterial);
	void SetHologramFlag();
	void DoLoadMeshAfter(bool bDisableStringWeapon, bool* bDummy);
	void DoAttachAfter(bool bDisableStringWeapon, bool* bDummy);
	void GetProxyRequestedPlayer(class ARSBattlePlayer_C** Player);
	void GetProxyMesh(class UMeshComponent** Mesh);
	void CheckExecuteAnimNotifyCharacterKind(ECharaExecuteNotifyKind Kind, bool* bExecute);

	void GetThrowPoint(struct FVector* Point) const;
	void GetAttachTransform(struct FTransform* Transform) const;
	void IsThrowHit(bool* bHit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponBase_C">();
	}
	static class ABP_WeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeaponBase_C>();
	}
};
static_assert(alignof(ABP_WeaponBase_C) == 0x000008, "Wrong alignment on ABP_WeaponBase_C");
static_assert(sizeof(ABP_WeaponBase_C) == 0x000410, "Wrong size on ABP_WeaponBase_C");
static_assert(offsetof(ABP_WeaponBase_C, UberGraphFrame) == 0x000230, "Member 'ABP_WeaponBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, SkeletalMesh) == 0x000238, "Member 'ABP_WeaponBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowType) == 0x000240, "Member 'ABP_WeaponBase_C::ThrowType' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowTargetPoint) == 0x000244, "Member 'ABP_WeaponBase_C::ThrowTargetPoint' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowTargetActor) == 0x000250, "Member 'ABP_WeaponBase_C::ThrowTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowSpeed) == 0x000258, "Member 'ABP_WeaponBase_C::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, StoreParentComponent) == 0x000260, "Member 'ABP_WeaponBase_C::StoreParentComponent' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, StoreParentSocketName) == 0x000268, "Member 'ABP_WeaponBase_C::StoreParentSocketName' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bThrow) == 0x000270, "Member 'ABP_WeaponBase_C::bThrow' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowStartPoint) == 0x000274, "Member 'ABP_WeaponBase_C::ThrowStartPoint' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, OwnerPlayer) == 0x000280, "Member 'ABP_WeaponBase_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowRotator) == 0x000288, "Member 'ABP_WeaponBase_C::ThrowRotator' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, WeaponLength) == 0x000294, "Member 'ABP_WeaponBase_C::WeaponLength' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bThrowHit) == 0x000298, "Member 'ABP_WeaponBase_C::bThrowHit' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bThrowReturn) == 0x000299, "Member 'ABP_WeaponBase_C::bThrowReturn' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ReturnTimer) == 0x00029C, "Member 'ABP_WeaponBase_C::ReturnTimer' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEffect) == 0x0002A8, "Member 'ABP_WeaponBase_C::BattleEffect' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEffectHandle) == 0x0002B0, "Member 'ABP_WeaponBase_C::BattleEffectHandle' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEffectParameter) == 0x0002B8, "Member 'ABP_WeaponBase_C::BattleEffectParameter' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowDir) == 0x0002C0, "Member 'ABP_WeaponBase_C::ThrowDir' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ClaimantMaterialColor_PsychicEmission) == 0x0002D0, "Member 'ABP_WeaponBase_C::ClaimantMaterialColor_PsychicEmission' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, MaterialColor_PsychicEmission) == 0x0002E0, "Member 'ABP_WeaponBase_C::MaterialColor_PsychicEmission' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ClaimantMaterialAlpha_PsychicEmission) == 0x0002F0, "Member 'ABP_WeaponBase_C::ClaimantMaterialAlpha_PsychicEmission' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, MaterialAlpha_PsychicEmission) == 0x000300, "Member 'ABP_WeaponBase_C::MaterialAlpha_PsychicEmission' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEffectAttachPoint) == 0x000310, "Member 'ABP_WeaponBase_C::BattleEffectAttachPoint' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bBattleEmissionEnable) == 0x000318, "Member 'ABP_WeaponBase_C::bBattleEmissionEnable' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bBattleEmission) == 0x000319, "Member 'ABP_WeaponBase_C::bBattleEmission' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bBattleEmissionOn) == 0x00031A, "Member 'ABP_WeaponBase_C::bBattleEmissionOn' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEmissionLerpTime) == 0x00031C, "Member 'ABP_WeaponBase_C::BattleEmissionLerpTime' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, BattleEmissionRate) == 0x000320, "Member 'ABP_WeaponBase_C::BattleEmissionRate' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, WeaponMaterialInstanceArray) == 0x000328, "Member 'ABP_WeaponBase_C::WeaponMaterialInstanceArray' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, AnimSeqNeutralLoop) == 0x000338, "Member 'ABP_WeaponBase_C::AnimSeqNeutralLoop' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, AnimSeqBattleLoop) == 0x000340, "Member 'ABP_WeaponBase_C::AnimSeqBattleLoop' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, AnimSeqToBattle) == 0x000348, "Member 'ABP_WeaponBase_C::AnimSeqToBattle' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, AnimSeqToNeutral) == 0x000350, "Member 'ABP_WeaponBase_C::AnimSeqToNeutral' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bMainWeapon) == 0x000358, "Member 'ABP_WeaponBase_C::bMainWeapon' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, SASColorMap) == 0x000360, "Member 'ABP_WeaponBase_C::SASColorMap' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, EmissiveColorSASKind) == 0x0003B0, "Member 'ABP_WeaponBase_C::EmissiveColorSASKind' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, DriveLevel) == 0x0003B4, "Member 'ABP_WeaponBase_C::DriveLevel' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, DriveIntensity) == 0x0003B8, "Member 'ABP_WeaponBase_C::DriveIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, DriveColor) == 0x0003BC, "Member 'ABP_WeaponBase_C::DriveColor' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, DefaultSwordIntensity) == 0x0003CC, "Member 'ABP_WeaponBase_C::DefaultSwordIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, TickClaimantList) == 0x0003D0, "Member 'ABP_WeaponBase_C::TickClaimantList' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, ThrowWeaponClaimantName) == 0x0003E0, "Member 'ABP_WeaponBase_C::ThrowWeaponClaimantName' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, WeaponEmissionClaimantName) == 0x0003E8, "Member 'ABP_WeaponBase_C::WeaponEmissionClaimantName' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, DispatchThrowHit) == 0x0003F0, "Member 'ABP_WeaponBase_C::DispatchThrowHit' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, WeaponItemID) == 0x000400, "Member 'ABP_WeaponBase_C::WeaponItemID' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, CheckHeightLength) == 0x000404, "Member 'ABP_WeaponBase_C::CheckHeightLength' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bHologramFlag) == 0x000408, "Member 'ABP_WeaponBase_C::bHologramFlag' has a wrong offset!");
static_assert(offsetof(ABP_WeaponBase_C, bDisableYuitoStringFlag) == 0x000409, "Member 'ABP_WeaponBase_C::bDisableYuitoStringFlag' has a wrong offset!");

}

