#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SASManager

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "FSASCommand_structs.hpp"


namespace SDK::Params
{

// Function BPI_SASManager.BPI_SASManager_C.Start
// 0x0038 (0x0038 - 0x0000)
struct BPI_SASManager_C_Start final
{
public:
	struct FFSASCommand                           Parameter;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_Start) == 0x000008, "Wrong alignment on BPI_SASManager_C_Start");
static_assert(sizeof(BPI_SASManager_C_Start) == 0x000038, "Wrong size on BPI_SASManager_C_Start");
static_assert(offsetof(BPI_SASManager_C_Start, Parameter) == 0x000000, "Member 'BPI_SASManager_C_Start::Parameter' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_Start, Success) == 0x000030, "Member 'BPI_SASManager_C_Start::Success' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.RegisterActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_SASManager_C_RegisterActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_RegisterActor) == 0x000008, "Wrong alignment on BPI_SASManager_C_RegisterActor");
static_assert(sizeof(BPI_SASManager_C_RegisterActor) == 0x000010, "Wrong size on BPI_SASManager_C_RegisterActor");
static_assert(offsetof(BPI_SASManager_C_RegisterActor, Actor) == 0x000000, "Member 'BPI_SASManager_C_RegisterActor::Actor' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_RegisterActor, Success) == 0x000008, "Member 'BPI_SASManager_C_RegisterActor::Success' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.UnregisterActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_SASManager_C_UnregisterActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_UnregisterActor) == 0x000008, "Wrong alignment on BPI_SASManager_C_UnregisterActor");
static_assert(sizeof(BPI_SASManager_C_UnregisterActor) == 0x000010, "Wrong size on BPI_SASManager_C_UnregisterActor");
static_assert(offsetof(BPI_SASManager_C_UnregisterActor, Actor) == 0x000000, "Member 'BPI_SASManager_C_UnregisterActor::Actor' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_UnregisterActor, Success) == 0x000008, "Member 'BPI_SASManager_C_UnregisterActor::Success' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.CancelSAS
// 0x0003 (0x0003 - 0x0000)
struct BPI_SASManager_C_CancelSAS final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelSASCost;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_CancelSAS) == 0x000001, "Wrong alignment on BPI_SASManager_C_CancelSAS");
static_assert(sizeof(BPI_SASManager_C_CancelSAS) == 0x000003, "Wrong size on BPI_SASManager_C_CancelSAS");
static_assert(offsetof(BPI_SASManager_C_CancelSAS, SAS_Kind) == 0x000000, "Member 'BPI_SASManager_C_CancelSAS::SAS_Kind' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_CancelSAS, bCancelSASCost) == 0x000001, "Member 'BPI_SASManager_C_CancelSAS::bCancelSASCost' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_CancelSAS, Success) == 0x000002, "Member 'BPI_SASManager_C_CancelSAS::Success' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.EndSAS
// 0x0038 (0x0038 - 0x0000)
struct BPI_SASManager_C_EndSAS final
{
public:
	struct FFSASCommand                           Parameter;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_EndSAS) == 0x000008, "Wrong alignment on BPI_SASManager_C_EndSAS");
static_assert(sizeof(BPI_SASManager_C_EndSAS) == 0x000038, "Wrong size on BPI_SASManager_C_EndSAS");
static_assert(offsetof(BPI_SASManager_C_EndSAS, Parameter) == 0x000000, "Member 'BPI_SASManager_C_EndSAS::Parameter' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_EndSAS, Success) == 0x000030, "Member 'BPI_SASManager_C_EndSAS::Success' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.GetCurrentCutinSASType
// 0x0001 (0x0001 - 0x0000)
struct BPI_SASManager_C_GetCurrentCutinSASType final
{
public:
	E_SASKind                                     SASType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SASManager_C_GetCurrentCutinSASType) == 0x000001, "Wrong alignment on BPI_SASManager_C_GetCurrentCutinSASType");
static_assert(sizeof(BPI_SASManager_C_GetCurrentCutinSASType) == 0x000001, "Wrong size on BPI_SASManager_C_GetCurrentCutinSASType");
static_assert(offsetof(BPI_SASManager_C_GetCurrentCutinSASType, SASType) == 0x000000, "Member 'BPI_SASManager_C_GetCurrentCutinSASType::SASType' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.IsReserved
// 0x0002 (0x0002 - 0x0000)
struct BPI_SASManager_C_IsReserved final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reserved;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_IsReserved) == 0x000001, "Wrong alignment on BPI_SASManager_C_IsReserved");
static_assert(sizeof(BPI_SASManager_C_IsReserved) == 0x000002, "Wrong size on BPI_SASManager_C_IsReserved");
static_assert(offsetof(BPI_SASManager_C_IsReserved, SAS_Kind) == 0x000000, "Member 'BPI_SASManager_C_IsReserved::SAS_Kind' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_IsReserved, Reserved) == 0x000001, "Member 'BPI_SASManager_C_IsReserved::Reserved' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.IsAnyReserved
// 0x0001 (0x0001 - 0x0000)
struct BPI_SASManager_C_IsAnyReserved final
{
public:
	bool                                          Reserved;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_IsAnyReserved) == 0x000001, "Wrong alignment on BPI_SASManager_C_IsAnyReserved");
static_assert(sizeof(BPI_SASManager_C_IsAnyReserved) == 0x000001, "Wrong size on BPI_SASManager_C_IsAnyReserved");
static_assert(offsetof(BPI_SASManager_C_IsAnyReserved, Reserved) == 0x000000, "Member 'BPI_SASManager_C_IsAnyReserved::Reserved' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.IsCutInReserved
// 0x0002 (0x0002 - 0x0000)
struct BPI_SASManager_C_IsCutInReserved final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reserved;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_IsCutInReserved) == 0x000001, "Wrong alignment on BPI_SASManager_C_IsCutInReserved");
static_assert(sizeof(BPI_SASManager_C_IsCutInReserved) == 0x000002, "Wrong size on BPI_SASManager_C_IsCutInReserved");
static_assert(offsetof(BPI_SASManager_C_IsCutInReserved, SasKind) == 0x000000, "Member 'BPI_SASManager_C_IsCutInReserved::SasKind' has a wrong offset!");
static_assert(offsetof(BPI_SASManager_C_IsCutInReserved, Reserved) == 0x000001, "Member 'BPI_SASManager_C_IsCutInReserved::Reserved' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.IsAnyCutInReserved
// 0x0001 (0x0001 - 0x0000)
struct BPI_SASManager_C_IsAnyCutInReserved final
{
public:
	bool                                          Reserved;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_SASManager_C_IsAnyCutInReserved) == 0x000001, "Wrong alignment on BPI_SASManager_C_IsAnyCutInReserved");
static_assert(sizeof(BPI_SASManager_C_IsAnyCutInReserved) == 0x000001, "Wrong size on BPI_SASManager_C_IsAnyCutInReserved");
static_assert(offsetof(BPI_SASManager_C_IsAnyCutInReserved, Reserved) == 0x000000, "Member 'BPI_SASManager_C_IsAnyCutInReserved::Reserved' has a wrong offset!");

// Function BPI_SASManager.BPI_SASManager_C.GetSASExtendTimeRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_SASManager_C_GetSASExtendTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SASManager_C_GetSASExtendTimeRate) == 0x000004, "Wrong alignment on BPI_SASManager_C_GetSASExtendTimeRate");
static_assert(sizeof(BPI_SASManager_C_GetSASExtendTimeRate) == 0x000004, "Wrong size on BPI_SASManager_C_GetSASExtendTimeRate");
static_assert(offsetof(BPI_SASManager_C_GetSASExtendTimeRate, Rate) == 0x000000, "Member 'BPI_SASManager_C_GetSASExtendTimeRate::Rate' has a wrong offset!");

}

