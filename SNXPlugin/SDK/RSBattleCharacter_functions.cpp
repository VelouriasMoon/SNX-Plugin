#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSBattleCharacter

#include "Basic.hpp"

#include "RSBattleCharacter_classes.hpp"
#include "RSBattleCharacter_parameters.hpp"


namespace SDK
{

// Function RSBattleCharacter.RSBattleCharacter_C.ExecuteUbergraph_RSBattleCharacter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ExecuteUbergraph_RSBattleCharacter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ExecuteUbergraph_RSBattleCharacter");

	Params::RSBattleCharacter_C_ExecuteUbergraph_RSBattleCharacter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnBrainCrashStart(bool bBeginActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashStart");

	Params::RSBattleCharacter_C_OnBrainCrashStart Parms{};

	Parms.bBeginActor = bBeginActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RegisterEffectInterface
// (Event, Public, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::RegisterEffectInterface(class URSParticleSystemComponentBase* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RegisterEffectInterface");

	Params::RSBattleCharacter_C_RegisterEffectInterface Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RegisterInterruptTelepoEffectInterface
// (Event, Public, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::RegisterInterruptTelepoEffectInterface(class URSParticleSystemComponentBase* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RegisterInterruptTelepoEffectInterface");

	Params::RSBattleCharacter_C_RegisterInterruptTelepoEffectInterface Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNoCrashChanceEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoCrashChanceEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetNoCrashChanceEvent(bool NoCrashChanceEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNoCrashChanceEvent");

	Params::RSBattleCharacter_C_SetNoCrashChanceEvent Parms{};

	Parms.NoCrashChanceEvent = NoCrashChanceEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNoDeadEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoDeadEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetNoDeadEvent(bool NoDeadEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNoDeadEvent");

	Params::RSBattleCharacter_C_SetNoDeadEvent Parms{};

	Parms.NoDeadEvent = NoDeadEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndNoDeadNoCrashChanceEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::EndNoDeadNoCrashChanceEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndNoDeadNoCrashChanceEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnBindUnaffectedCameraAttention
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnBindUnaffectedCameraAttention()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnBindUnaffectedCameraAttention");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindUnaffectedCameraAttention
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindUnaffectedCameraAttention()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindUnaffectedCameraAttention");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnBindUnaffectedTimeDilationTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnBindUnaffectedTimeDilationTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnBindUnaffectedTimeDilationTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindUnaffectedTimeDilationTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindUnaffectedTimeDilationTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindUnaffectedTimeDilationTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldCloseEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BrainFieldCloseEnd(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldCloseEnd");

	Params::RSBattleCharacter_C_BrainFieldCloseEnd Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldCloseStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BrainFieldCloseStart(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldCloseStart");

	Params::RSBattleCharacter_C_BrainFieldCloseStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_3_HitResultDelegate__DelegateSignature Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.AreaChangeFadeOut
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::AreaChangeFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AreaChangeFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DisEnableNoDeadTutorial
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::DisEnableNoDeadTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DisEnableNoDeadTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EHCBadState                             bad_state                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature(EHCBadState bad_state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOffDelegate__DelegateSignature Parms{};

	Parms.bad_state = bad_state;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EHCBadState                             bad_state                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature(EHCBadState bad_state, class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_6_BadStateOnDelegate__DelegateSignature Parms{};

	Parms.bad_state = bad_state;
	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceiveEndPlay");

	Params::RSBattleCharacter_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnbindHitSlowDispatcher
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnbindHitSlowDispatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnbindHitSlowDispatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnHitSlow
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnHitSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnHitSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindHitSlowDispatcher
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindHitSlowDispatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindHitSlowDispatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature(const struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_DamageHitDelegate__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           Finisher                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature(class AActor* Finisher)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_2_NotifyFinishActor__DelegateSignature Parms{};

	Parms.Finisher = Finisher;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveUniqueInputEnd
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::ReceiveUniqueInputEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceiveUniqueInputEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ARSBattleCharacter_C::BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharacterOverlapCapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   Current_hp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   base_hp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature(int32 Current_hp, int32 base_hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_HpDelegate__DelegateSignature Parms{};

	Parms.Current_hp = Current_hp;
	Parms.base_hp = base_hp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature(const struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_0_DamageResponceDelegate__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_SimpleMulticastDelegateBP__DelegateSignature
// (BlueprintEvent)

void ARSBattleCharacter_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_SimpleMulticastDelegateBP__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_SimpleMulticastDelegateBP__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature(const struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__DamageResponse_K2Node_ComponentBoundEvent_4_DamageResponceDelegate__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_291_HitResultDelegate__DelegateSignature Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceiveTick");

	Params::RSBattleCharacter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ARSBattleCharacter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetGhostActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetGhostActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetGhostActive");

	Params::RSBattleCharacter_C_SetGhostActive Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnGhostOneShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AliveTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnGhostOneShot(float AliveTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnGhostOneShot");

	Params::RSBattleCharacter_C_OnGhostOneShot Parms{};

	Parms.AliveTime = AliveTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnbindBadStateCableDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnbindBadStateCableDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnbindBadStateCableDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindBadStateCableDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindBadStateCableDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindBadStateCableDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     PlayerEndMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnBrainCrashEnd(bool bBeginActor, class UAnimMontage* PlayerEndMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashEnd");

	Params::RSBattleCharacter_C_OnBrainCrashEnd Parms{};

	Parms.bBeginActor = bBeginActor;
	Parms.PlayerEndMontage = PlayerEndMontage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnbindBadStateFlameDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnbindBadStateFlameDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnbindBadStateFlameDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindBadStateFlameDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindBadStateFlameDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindBadStateFlameDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetInvalidDamageInterface
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInvalidDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetInvalidDamageInterface(bool bInvalidDamage, class FName ClaimantName, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetInvalidDamageInterface");

	Params::RSBattleCharacter_C_SetInvalidDamageInterface Parms{};

	Parms.bInvalidDamage = bInvalidDamage;
	Parms.ClaimantName = ClaimantName;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageBefore
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IgnoreAutoSasMetal                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::ProcDamageBefore(bool IgnoreAutoSasMetal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ProcDamageBefore");

	Params::RSBattleCharacter_C_ProcDamageBefore Parms{};

	Parms.IgnoreAutoSasMetal = IgnoreAutoSasMetal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageActorHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ARSBattleCharacter_C::ProcDamageActorHit(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ProcDamageActorHit");

	Params::RSBattleCharacter_C_ProcDamageActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ProcDamageAfter
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FHCHitResult>             Result                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattleCharacter_C::ProcDamageAfter(const TArray<struct FHCHitResult>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ProcDamageAfter");

	Params::RSBattleCharacter_C_ProcDamageAfter Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CrashDamage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePointKind                        Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCritical                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWeakhit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsStealthCritical                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBrainCrash                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature(const struct FVector& Location, int32 Damage, float CrashDamage, EDamagePointKind Kind, bool IsCritical, bool IsWeakhit, bool IsStealthCritical, bool IsBrainCrash, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_6_DamagePopupDelegate__DelegateSignature Parms{};

	Parms.Location = std::move(Location);
	Parms.Damage = Damage;
	Parms.CrashDamage = CrashDamage;
	Parms.Kind = Kind;
	Parms.IsCritical = IsCritical;
	Parms.IsWeakhit = IsWeakhit;
	Parms.IsStealthCritical = IsStealthCritical;
	Parms.IsBrainCrash = IsBrainCrash;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature(const struct FHCHitResult& HitResult, int32 Damage, bool IsDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_5_StartDamageAnimDelegate__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;
	Parms.IsDamage = IsDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature");

	Params::RSBattleCharacter_C_BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_294_HitResultDelegate__DelegateSignature Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnbindDelayCrashVision Effect
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::UnbindDelayCrashVision_Effect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnbindDelayCrashVision Effect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BindDelayCrashVisionEffect
// (BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BindDelayCrashVisionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BindDelayCrashVisionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCounter
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCounterWait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Wait_on_in                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetCounterWait(bool Wait_on_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCounterWait");

	Params::RSBattleCharacter_C_SetCounterWait Parms{};

	Parms.Wait_on_in = Wait_on_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStausMetalMode
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::IsBadStausMetalMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStausMetalMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashTargetFloating
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnBrainCrashTargetFloating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashTargetFloating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashStartUserMotion
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnBrainCrashStartUserMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashStartUserMotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashDead
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnBrainCrashDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBrainCrashDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnBrainCrashDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBrainCrashDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOverrideStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BrainFieldOverrideStart(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldOverrideStart");

	Params::RSBattleCharacter_C_BrainFieldOverrideStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldMoveNormalField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BrainFieldMoveNormalField(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldMoveNormalField");

	Params::RSBattleCharacter_C_BrainFieldMoveNormalField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldMoveBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BrainFieldMoveBrainField(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldMoveBrainField");

	Params::RSBattleCharacter_C_BrainFieldMoveBrainField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOpenEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BrainFieldOpenEnd(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldOpenEnd");

	Params::RSBattleCharacter_C_BrainFieldOpenEnd Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainFieldOpenStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BrainFieldOpenStart(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainFieldOpenStart");

	Params::RSBattleCharacter_C_BrainFieldOpenStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhostOneShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AliveTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnBonusGhostOneShot(float AliveTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBonusGhostOneShot");

	Params::RSBattleCharacter_C_OnBonusGhostOneShot Parms{};

	Parms.AliveTime = AliveTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhostFromDT
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBonusGhostType                         Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnBonusGhostFromDT(EBonusGhostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBonusGhostFromDT");

	Params::RSBattleCharacter_C_OnBonusGhostFromDT Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBonusGhost
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnBonusGhost(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBonusGhost");

	Params::RSBattleCharacter_C_OnBonusGhost Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventPhysicsIdling
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   IdlingSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IdleRestoreDelay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::EventPhysicsIdling(float IdlingSec, float IdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventPhysicsIdling");

	Params::RSBattleCharacter_C_EventPhysicsIdling Parms{};

	Parms.IdlingSec = IdlingSec;
	Parms.IdleRestoreDelay = IdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DebugMovementModePrint
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::DebugMovementModePrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DebugMovementModePrint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnDead(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnDead");

	Params::RSBattleCharacter_C_OnDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnDeadCoreBattleChara
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnDeadCoreBattleChara()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnDeadCoreBattleChara");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnAttackActorHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnAttackActorHit(const struct FHCHitResult& HitResult, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnAttackActorHit");

	Params::RSBattleCharacter_C_OnAttackActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnDamageActorHit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnDamageActorHit(struct FHCHitResult& HitResult, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnDamageActorHit");

	Params::RSBattleCharacter_C_OnDamageActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsExecGuard
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsExec                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsExecGuard(bool* IsExec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsExecGuard");

	Params::RSBattleCharacter_C_IsExecGuard Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsExec != nullptr)
		*IsExec = Parms.IsExec;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInDamage
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ARSBattleCharacter_C::ShakeCameraInDamage(struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ShakeCameraInDamage");

	Params::RSBattleCharacter_C_ShakeCameraInDamage Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBulletAimTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBulletAimTarget(class AActor** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBulletAimTarget");

	Params::RSBattleCharacter_C_GetBulletAimTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StartDamageAnimFunc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// int32                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StartDamageAnimFunc(const struct FHCHitResult& HitResult, int32 DamageValue, bool IsDown, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StartDamageAnimFunc");

	Params::RSBattleCharacter_C_StartDamageAnimFunc Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageValue = DamageValue;
	Parms.IsDown = IsDown;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnDamaging
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnDamaging(const struct FHCHitResult& HitResult, float DamageValue, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnDamaging");

	Params::RSBattleCharacter_C_OnDamaging Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageValue = DamageValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.Revive
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::Revive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "Revive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnRevive
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnRevive(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnRevive");

	Params::RSBattleCharacter_C_OnRevive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBattling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattling                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetBattling(bool bBattling, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBattling");

	Params::RSBattleCharacter_C_SetBattling Parms{};

	Parms.bBattling = bBattling;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCharactersParameter             Param                                                  (Parm, OutParm, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCharactersParameterTable(struct FCharactersParameter* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharactersParameterTable");

	Params::RSBattleCharacter_C_GetCharactersParameterTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = std::move(Parms.Param);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetCharactersParameterAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCharactersParameterAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHitNearCharacter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actor                                                  (Parm, OutParm, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHitNearCharacter(float Length, TArray<class AActor*>* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHitNearCharacter");

	Params::RSBattleCharacter_C_GetHitNearCharacter Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = std::move(Parms.Actor);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DamageAfter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHCHitResult>             Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattleCharacter_C::DamageAfter(TArray<struct FHCHitResult>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DamageAfter");

	Params::RSBattleCharacter_C_DamageAfter Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);

	Result = std::move(Parms.Result);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHateParamTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHateParamData                   Return                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHateParamTable(struct FHateParamData* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHateParamTable");

	Params::RSBattleCharacter_C_GetHateParamTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetHateParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetHateParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetHateParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.PreTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::PreTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "PreTick");

	Params::RSBattleCharacter_C_PreTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.MainTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::MainTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "MainTick");

	Params::RSBattleCharacter_C_MainTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.PostTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::PostTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "PostTick");

	Params::RSBattleCharacter_C_PostTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetRootMotionMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERootMotionMode                         Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetRootMotionMode(ERootMotionMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetRootMotionMode");

	Params::RSBattleCharacter_C_SetRootMotionMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.AddRandomLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::AddRandomLocation(const struct FVector& Vector, struct FVector* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AddRandomLocation");

	Params::RSBattleCharacter_C_AddRandomLocation Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetInvalidDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInvalid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetInvalidDamage(bool bInvalid, int32 Param, class FName ClaimantName, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetInvalidDamage");

	Params::RSBattleCharacter_C_SetInvalidDamage Parms{};

	Parms.bInvalid = bInvalid;
	Parms.Param = Param;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.isSuperArmor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuperArmor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsSuperArmor(bool* bSuperArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "isSuperArmor");

	Params::RSBattleCharacter_C_IsSuperArmor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuperArmor != nullptr)
		*bSuperArmor = Parms.bSuperArmor;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetSuperArmor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuperArmor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetSuperArmor(bool bSuperArmor, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetSuperArmor");

	Params::RSBattleCharacter_C_SetSuperArmor Parms{};

	Parms.bSuperArmor = bSuperArmor;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.FrameDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Sec                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::FrameDamage(float Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "FrameDamage");

	Params::RSBattleCharacter_C_FrameDamage Parms{};

	Parms.Sec = Sec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             bad                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BadStateEffectOn(EHCBadState bad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOn");

	Params::RSBattleCharacter_C_BadStateEffectOn Parms{};

	Parms.bad = bad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             bad                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BadStateEffectOff(EHCBadState bad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOff");

	Params::RSBattleCharacter_C_BadStateEffectOff Parms{};

	Parms.bad = bad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectAllOff
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BadStateEffectAllOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectAllOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.AddCurrentAttackAttribute
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackAttribute                        Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::AddCurrentAttackAttribute(EAttackAttribute Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AddCurrentAttackAttribute");

	Params::RSBattleCharacter_C_AddCurrentAttackAttribute Parms{};

	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ClearCurrentAttackAttribute
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::ClearCurrentAttackAttribute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ClearCurrentAttackAttribute");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainAndBadStatusParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BrainCrashTimer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BrainCrashMissScale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetBrainAndBadStatusParam(float BrainCrashTimer, float BrainCrashMissScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBrainAndBadStatusParam");

	Params::RSBattleCharacter_C_SetBrainAndBadStatusParam Parms{};

	Parms.BrainCrashTimer = BrainCrashTimer;
	Parms.BrainCrashMissScale = BrainCrashMissScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffFlame
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffFlame(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffFlame");

	Params::RSBattleCharacter_C_BadStateEffectOffFlame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffElec
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffElec(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffElec");

	Params::RSBattleCharacter_C_BadStateEffectOffElec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnFlame
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnFlame(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnFlame");

	Params::RSBattleCharacter_C_BadStateEffectOnFlame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnElec
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnElec(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnElec");

	Params::RSBattleCharacter_C_BadStateEffectOnElec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnFlooded
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnFlooded(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnFlooded");

	Params::RSBattleCharacter_C_BadStateEffectOnFlooded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnOil
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnOil(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnOil");

	Params::RSBattleCharacter_C_BadStateEffectOnOil Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnConfusion
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnConfusion(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnConfusion");

	Params::RSBattleCharacter_C_BadStateEffectOnConfusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffFlooded
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffFlooded(bool bNoMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffFlooded");

	Params::RSBattleCharacter_C_BadStateEffectOffFlooded Parms{};

	Parms.bNoMaterial = bNoMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffOil
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffOil(bool bNoMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffOil");

	Params::RSBattleCharacter_C_BadStateEffectOffOil Parms{};

	Parms.bNoMaterial = bNoMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffConfusion
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffConfusion(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffConfusion");

	Params::RSBattleCharacter_C_BadStateEffectOffConfusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateBadStateEffect
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::UpdateBadStateEffect(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateBadStateEffect");

	Params::RSBattleCharacter_C_UpdateBadStateEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetFootIKEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetFootIKEnable(bool Enable, float BlendTime, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetFootIKEnable");

	Params::RSBattleCharacter_C_SetFootIKEnable Parms{};

	Parms.Enable = Enable;
	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.PrevCheckOnAttackActorHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::PrevCheckOnAttackActorHit(const struct FHCHitResult& HitResult, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "PrevCheckOnAttackActorHit");

	Params::RSBattleCharacter_C_PrevCheckOnAttackActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnAttackWeakHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnAttackWeakHit(const struct FHCHitResult& HitResult, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnAttackWeakHit");

	Params::RSBattleCharacter_C_OnAttackWeakHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.AreaChangeStart
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::AreaChangeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AreaChangeStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.AreaStart
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::AreaStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AreaStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.AreaChangeFadeOut Internal
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::AreaChangeFadeOut_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AreaChangeFadeOut Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateMaterialVisibility
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ChangeVisibility                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewVisibility                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::UpdateMaterialVisibility(bool* ChangeVisibility, bool* NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateMaterialVisibility");

	Params::RSBattleCharacter_C_UpdateMaterialVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeVisibility != nullptr)
		*ChangeVisibility = Parms.ChangeVisibility;

	if (NewVisibility != nullptr)
		*NewVisibility = Parms.NewVisibility;
}


// Function RSBattleCharacter.RSBattleCharacter_C.InitializeMaterialVisibility
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::InitializeMaterialVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "InitializeMaterialVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetForceMaterialOutlineVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetForceMaterialOutlineVisibility(bool ForceEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetForceMaterialOutlineVisibility");

	Params::RSBattleCharacter_C_SetForceMaterialOutlineVisibility Parms{};

	Parms.ForceEnabled = ForceEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.InitializeShadow
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::InitializeShadow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "InitializeShadow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetForceMeshShadow
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceMeshShadow                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetForceMeshShadow(bool ForceMeshShadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetForceMeshShadow");

	Params::RSBattleCharacter_C_SetForceMeshShadow Parms{};

	Parms.ForceMeshShadow = ForceMeshShadow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharactersParameterTable        ParamTable                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void ARSBattleCharacter_C::SetCharactersParameterData(const struct FCharactersParameterTable& ParamTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCharactersParameterData");

	Params::RSBattleCharacter_C_SetCharactersParameterData Parms{};

	Parms.ParamTable = std::move(ParamTable);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.InitializeMaterial
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::InitializeMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "InitializeMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DamageAfterCommon
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::DamageAfterCommon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DamageAfterCommon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DebugDisplayStatus
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::DebugDisplayStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DebugDisplayStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsStealthEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsStealthEnable(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsStealthEnable");

	Params::RSBattleCharacter_C_IsStealthEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnCharacterAssetLoad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnCharacterAssetLoad(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnCharacterAssetLoad");

	Params::RSBattleCharacter_C_OnCharacterAssetLoad Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEyesCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEyes                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEyesCheck(const struct FVector& StartLocation, const struct FVector& TargetLocation, bool* IsEyes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEyesCheck");

	Params::RSBattleCharacter_C_IsEyesCheck Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IsEyes != nullptr)
		*IsEyes = Parms.IsEyes;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DirectAttack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseFixDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   FixDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkillName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackerOwner                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreInvalid                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHCHitEffectInfo                 Effect_Info                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    UseHitPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoDamageDisplay                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotifyAttackActorHit                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DirectAttack(bool UseFixDamage, int32 FixDamage, class UDataTable* DataTable, class FName SkillName, class AActor* Attacker, class AActor* AttackerOwner, bool IgnoreInvalid, const struct FHCHitEffectInfo& Effect_Info, bool UseHitPosition, const struct FVector& HitPosition, bool NoDamageDisplay, bool bNotifyAttackActorHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DirectAttack");

	Params::RSBattleCharacter_C_DirectAttack Parms{};

	Parms.UseFixDamage = UseFixDamage;
	Parms.FixDamage = FixDamage;
	Parms.DataTable = DataTable;
	Parms.SkillName = SkillName;
	Parms.Attacker = Attacker;
	Parms.AttackerOwner = AttackerOwner;
	Parms.IgnoreInvalid = IgnoreInvalid;
	Parms.Effect_Info = std::move(Effect_Info);
	Parms.UseHitPosition = UseHitPosition;
	Parms.HitPosition = std::move(HitPosition);
	Parms.NoDamageDisplay = NoDamageDisplay;
	Parms.bNotifyAttackActorHit = bNotifyAttackActorHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainCrashLock
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::BrainCrashLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainCrashLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetAnimNotifyCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ConditionNo                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::GetAnimNotifyCondition(int32 ConditionNo, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetAnimNotifyCondition");

	Params::RSBattleCharacter_C_GetAnimNotifyCondition Parms{};

	Parms.ConditionNo = ConditionNo;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsNotDamageMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bNotDamageMotion                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsNotDamageMotion(bool* Param_bNotDamageMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsNotDamageMotion");

	Params::RSBattleCharacter_C_IsNotDamageMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bNotDamageMotion != nullptr)
		*Param_bNotDamageMotion = Parms.Param_bNotDamageMotion;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNotDamageMotion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bNotDamageMotion                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetNotDamageMotion(bool Param_bNotDamageMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNotDamageMotion");

	Params::RSBattleCharacter_C_SetNotDamageMotion Parms{};

	Parms.Param_bNotDamageMotion = Param_bNotDamageMotion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBulletDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          FireLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          FireForwardVector                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxAngle_XY                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxAngle_Z                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BulletDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBulletDirection(const struct FVector& FireLocation, const struct FVector& TargetLocation, const struct FVector& FireForwardVector, float MaxAngle_XY, float MaxAngle_Z, struct FVector* BulletDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBulletDirection");

	Params::RSBattleCharacter_C_GetBulletDirection Parms{};

	Parms.FireLocation = std::move(FireLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.FireForwardVector = std::move(FireForwardVector);
	Parms.MaxAngle_XY = MaxAngle_XY;
	Parms.MaxAngle_Z = MaxAngle_Z;

	UObject::ProcessEvent(Func, &Parms);

	if (BulletDirection != nullptr)
		*BulletDirection = std::move(Parms.BulletDirection);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceivedNotifyAnimEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Received                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::ReceivedNotifyAnimEnd(bool* Received)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceivedNotifyAnimEnd");

	Params::RSBattleCharacter_C_ReceivedNotifyAnimEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Received != nullptr)
		*Received = Parms.Received;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNotifyAnimEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetNotifyAnimEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNotifyAnimEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetDelayDeath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetDelayDeath(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetDelayDeath");

	Params::RSBattleCharacter_C_SetDelayDeath Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckDelayDeath
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::CheckDelayDeath(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckDelayDeath");

	Params::RSBattleCharacter_C_CheckDelayDeath Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RequestHitStop
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHCHitResult>             HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattleCharacter_C::RequestHitStop(TArray<struct FHCHitResult>& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RequestHitStop");

	Params::RSBattleCharacter_C_RequestHitStop Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReceiveDamageScar
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::ReceiveDamageScar(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReceiveDamageScar");

	Params::RSBattleCharacter_C_ReceiveDamageScar Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckHateCalc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CheckHateCalc(const struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckHateCalc");

	Params::RSBattleCharacter_C_CheckHateCalc Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayShakeCamera
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bCanPlay                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsPlayShakeCamera(struct FHCHitResult& HitResult, bool* bCanPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPlayShakeCamera");

	Params::RSBattleCharacter_C_IsPlayShakeCamera Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (bCanPlay != nullptr)
		*bCanPlay = Parms.bCanPlay;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShakeLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ShakeCameraInRange(class UClass* ShakeClass, float Scale, const struct FVector& ShakeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ShakeCameraInRange");

	Params::RSBattleCharacter_C_ShakeCameraInRange Parms{};

	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;
	Parms.ShakeLocation = std::move(ShakeLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SelectShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShakeLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnClass                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnScale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SelectShake(class UClass* ShakeClass, float Scale, const struct FVector& ShakeLocation, class UClass** ReturnClass, float* ReturnScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SelectShake");

	Params::RSBattleCharacter_C_SelectShake Parms{};

	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;
	Parms.ShakeLocation = std::move(ShakeLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnClass != nullptr)
		*ReturnClass = Parms.ReturnClass;

	if (ReturnScale != nullptr)
		*ReturnScale = Parms.ReturnScale;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DamageBefore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IgnoreAutoSasMetal                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DamageBefore(bool IgnoreAutoSasMetal, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DamageBefore");

	Params::RSBattleCharacter_C_DamageBefore Parms{};

	Parms.IgnoreAutoSasMetal = IgnoreAutoSasMetal;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoEventStart");

	Params::RSBattleCharacter_C_DoEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoEventEnd");

	Params::RSBattleCharacter_C_DoEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoStaticEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoStaticEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoStaticEventStart");

	Params::RSBattleCharacter_C_DoStaticEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoStaticEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoStaticEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoStaticEventEnd");

	Params::RSBattleCharacter_C_DoStaticEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoDynamicEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoDynamicEventStart");

	Params::RSBattleCharacter_C_DoDynamicEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoDynamicEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoDynamicEventEnd");

	Params::RSBattleCharacter_C_DoDynamicEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoTalkEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoTalkEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoTalkEventStart");

	Params::RSBattleCharacter_C_DoTalkEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoTalkEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoTalkEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoTalkEventEnd");

	Params::RSBattleCharacter_C_DoTalkEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoBattleSequencerStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSetEnemyEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoBattleSequencerStart(bool bSetEnemyEvent, bool bDriveSequence, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoBattleSequencerStart");

	Params::RSBattleCharacter_C_DoBattleSequencerStart Parms{};

	Parms.bSetEnemyEvent = bSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoBattleSequencerEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSetEnemyEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoBattleSequencerEnd(bool bSetEnemyEvent, bool bDriveSequence, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoBattleSequencerEnd");

	Params::RSBattleCharacter_C_DoBattleSequencerEnd Parms{};

	Parms.bSetEnemyEvent = bSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.LoadCameraDitherData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::LoadCameraDitherData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "LoadCameraDitherData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckCameraDitherApply
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HalfHeight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         WorldRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Apply                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CheckCameraDitherApply(const struct FVector& WorldLocation, float HalfHeight, const struct FRotator& WorldRotation, bool* Apply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckCameraDitherApply");

	Params::RSBattleCharacter_C_CheckCameraDitherApply Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.HalfHeight = HalfHeight;
	Parms.WorldRotation = std::move(WorldRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Apply != nullptr)
		*Apply = Parms.Apply;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetHiddenCharacterAttachment
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetHiddenCharacterAttachment(bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetHiddenCharacterAttachment");

	Params::RSBattleCharacter_C_SetHiddenCharacterAttachment Parms{};

	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetupCelLookMaterialNonPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetupCelLookMaterialNonPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetupCelLookMaterialNonPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.FinalizeCelLookMaterial
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::FinalizeCelLookMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "FinalizeCelLookMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayVibrationController
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bCanPlay                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsPlayVibrationController(struct FHCHitResult& HitResult, bool* bCanPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPlayVibrationController");

	Params::RSBattleCharacter_C_IsPlayVibrationController Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (bCanPlay != nullptr)
		*bCanPlay = Parms.bCanPlay;
}


// Function RSBattleCharacter.RSBattleCharacter_C.VibrationControllerInDamage
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ARSBattleCharacter_C::VibrationControllerInDamage(struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "VibrationControllerInDamage");

	Params::RSBattleCharacter_C_VibrationControllerInDamage Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetActorAllTickEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetActorAllTickEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetActorAllTickEnabled");

	Params::RSBattleCharacter_C_SetActorAllTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoHPEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewHP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PrevHP                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoHPEvent(int32 NewHP, int32 PrevHP, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoHPEvent");

	Params::RSBattleCharacter_C_DoHPEvent Parms{};

	Parms.NewHP = NewHP;
	Parms.PrevHP = PrevHP;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateIconOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBadStateAddParticleData         Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystemComponent*         Handle                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::BadStateIconOn(const struct FBadStateAddParticleData& Data, class UParticleSystemComponent** Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateIconOn");

	Params::RSBattleCharacter_C_BadStateIconOn Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateIconOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateIconOff(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateIconOff");

	Params::RSBattleCharacter_C_BadStateIconOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.RegisterCameraDitherParticleHandle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::RegisterCameraDitherParticleHandle(class URSParticleSystemComponentBase* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RegisterCameraDitherParticleHandle");

	Params::RSBattleCharacter_C_RegisterCameraDitherParticleHandle Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UnregisterCameraDitherParticleHandle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::UnregisterCameraDitherParticleHandle(class URSParticleSystemComponentBase* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UnregisterCameraDitherParticleHandle");

	Params::RSBattleCharacter_C_UnregisterCameraDitherParticleHandle Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCameraDitherToParticle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeitherValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetCameraDitherToParticle(float DeitherValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCameraDitherToParticle");

	Params::RSBattleCharacter_C_SetCameraDitherToParticle Parms{};

	Parms.DeitherValue = DeitherValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      ActorCurveIn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bChangeFov                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TargetFov                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      FovCurveIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnableOffsetAngleVt                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OffsetAngleVtIn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnableOffsetDist                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OffsetDistIn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CameraAttentionStart(class UCurveFloat* ActorCurveIn, bool bChangeFov, float TargetFov, class UCurveFloat* FovCurveIn, bool bEnableOffsetAngleVt, float OffsetAngleVtIn, bool bEnableOffsetDist, float OffsetDistIn, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CameraAttentionStart");

	Params::RSBattleCharacter_C_CameraAttentionStart Parms{};

	Parms.ActorCurveIn = ActorCurveIn;
	Parms.bChangeFov = bChangeFov;
	Parms.TargetFov = TargetFov;
	Parms.FovCurveIn = FovCurveIn;
	Parms.bEnableOffsetAngleVt = bEnableOffsetAngleVt;
	Parms.OffsetAngleVtIn = OffsetAngleVtIn;
	Parms.bEnableOffsetDist = bEnableOffsetDist;
	Parms.OffsetDistIn = OffsetDistIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      ActorCurveOut                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      FovCurveOut                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CameraAttentionEnd(class UCurveFloat* ActorCurveOut, class UCurveFloat* FovCurveOut, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CameraAttentionEnd");

	Params::RSBattleCharacter_C_CameraAttentionEnd Parms{};

	Parms.ActorCurveOut = ActorCurveOut;
	Parms.FovCurveOut = FovCurveOut;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CallDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CallDead(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CallDead");

	Params::RSBattleCharacter_C_CallDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMeshFitGroundCheckLocationArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Location                                               (Parm, OutParm, HasGetValueTypeHash)
// float                                   CheckHeight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetMeshFitGroundCheckLocationArray(TArray<struct FVector>* Location, float* CheckHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMeshFitGroundCheckLocationArray");

	Params::RSBattleCharacter_C_GetMeshFitGroundCheckLocationArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CheckHeight != nullptr)
		*CheckHeight = Parms.CheckHeight;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckExecuteNotifyKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharaExecuteNotifyKind                 ExecuteKind                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExecute                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CheckExecuteNotifyKind(class AActor* Param_Owner, ECharaExecuteNotifyKind ExecuteKind, bool* IsExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckExecuteNotifyKind");

	Params::RSBattleCharacter_C_CheckExecuteNotifyKind Parms{};

	Parms.Param_Owner = Param_Owner;
	Parms.ExecuteKind = ExecuteKind;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExecute != nullptr)
		*IsExecute = Parms.IsExecute;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalculateBrainCrashDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CalculateBrainCrashDamage(int32* Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalculateBrainCrashDamage");

	Params::RSBattleCharacter_C_CalculateBrainCrashDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Damage != nullptr)
		*Damage = Parms.Damage;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsLastBrainCrash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLast                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsLastBrainCrash(bool* IsLast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsLastBrainCrash");

	Params::RSBattleCharacter_C_IsLastBrainCrash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLast != nullptr)
		*IsLast = Parms.IsLast;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableCharacterTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEnableCharacterTick(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableCharacterTick");

	Params::RSBattleCharacter_C_IsEnableCharacterTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnSetStealthMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStealth                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnSetStealthMode(bool bStealth, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnSetStealthMode");

	Params::RSBattleCharacter_C_OnSetStealthMode Parms{};

	Parms.bStealth = bStealth;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DebugSetCharaParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DebugParamName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::DebugSetCharaParam(class FName DebugParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DebugSetCharaParam");

	Params::RSBattleCharacter_C_DebugSetCharaParam Parms{};

	Parms.DebugParamName = DebugParamName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckBadStatusTips
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CheckBadStatusTips(EHCBadState BadStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckBadStatusTips");

	Params::RSBattleCharacter_C_CheckBadStatusTips Parms{};

	Parms.BadStatus = BadStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CameraAttentionStart_LookAtPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      ActorCurveIn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bChangeFov                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TargetFov                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      FovCurveIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnableOffsetAngleVt                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OffsetAngleVtIn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnableOffsetDist                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OffsetDistIn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookAtPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CameraAttentionStart_LookAtPos(class UCurveFloat* ActorCurveIn, bool bChangeFov, float TargetFov, class UCurveFloat* FovCurveIn, bool bEnableOffsetAngleVt, float OffsetAngleVtIn, bool bEnableOffsetDist, float OffsetDistIn, const struct FVector& LookAtPos, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CameraAttentionStart_LookAtPos");

	Params::RSBattleCharacter_C_CameraAttentionStart_LookAtPos Parms{};

	Parms.ActorCurveIn = ActorCurveIn;
	Parms.bChangeFov = bChangeFov;
	Parms.TargetFov = TargetFov;
	Parms.FovCurveIn = FovCurveIn;
	Parms.bEnableOffsetAngleVt = bEnableOffsetAngleVt;
	Parms.OffsetAngleVtIn = OffsetAngleVtIn;
	Parms.bEnableOffsetDist = bEnableOffsetDist;
	Parms.OffsetDistIn = OffsetDistIn;
	Parms.LookAtPos = std::move(LookAtPos);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBodyMaterialScalarParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetBodyMaterialScalarParameter(class FName ParameterName, float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBodyMaterialScalarParameter");

	Params::RSBattleCharacter_C_SetBodyMaterialScalarParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckReceiveStealthCritical
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CheckReceiveStealthCritical(const struct FHCHitResult& HitResult, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckReceiveStealthCritical");

	Params::RSBattleCharacter_C_CheckReceiveStealthCritical Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DoDynamicEventBeforeBindCharacter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DoDynamicEventBeforeBindCharacter(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DoDynamicEventBeforeBindCharacter");

	Params::RSBattleCharacter_C_DoDynamicEventBeforeBindCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetupMaterialOutlineIndex
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetupMaterialOutlineIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetupMaterialOutlineIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ResetSelfHateFromEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::ResetSelfHateFromEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ResetSelfHateFromEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBossHpDisp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDisp                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBossHpDisp(bool* IsDisp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBossHpDisp");

	Params::RSBattleCharacter_C_IsBossHpDisp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDisp != nullptr)
		*IsDisp = Parms.IsDisp;
}


// Function RSBattleCharacter.RSBattleCharacter_C.InitializeDifficulty
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::InitializeDifficulty(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "InitializeDifficulty");

	Params::RSBattleCharacter_C_InitializeDifficulty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcDirectDamageValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkillName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackerOwner                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CalcDirectDamageValue(class UDataTable* DataTable, class FName SkillName, class AActor* Attacker, class AActor* AttackerOwner, int32* DamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcDirectDamageValue");

	Params::RSBattleCharacter_C_CalcDirectDamageValue Parms{};

	Parms.DataTable = DataTable;
	Parms.SkillName = SkillName;
	Parms.Attacker = Attacker;
	Parms.AttackerOwner = AttackerOwner;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageValue != nullptr)
		*DamageValue = Parms.DamageValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetLookAtTargetLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetLookAtTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetLookAtTargetLocation");

	Params::RSBattleCharacter_C_GetLookAtTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetAutoAimTargetLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetAutoAimTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetAutoAimTargetLocation");

	Params::RSBattleCharacter_C_GetAutoAimTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCharactersParameterName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetCharactersParameterName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCharactersParameterName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetAssumptionData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bondsIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPlayerID                               bondsPlayerID_In                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               bondsTargetID_In                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Retrun_enable                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   OutAssumptionLv                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutRelativeLv                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OutIsFreeLv                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::GetAssumptionData(bool bondsIn, EPlayerID bondsPlayerID_In, EPlayerID bondsTargetID_In, bool* Retrun_enable, int32* OutAssumptionLv, bool* OutRelativeLv, bool* OutIsFreeLv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetAssumptionData");

	Params::RSBattleCharacter_C_GetAssumptionData Parms{};

	Parms.bondsIn = bondsIn;
	Parms.bondsPlayerID_In = bondsPlayerID_In;
	Parms.bondsTargetID_In = bondsTargetID_In;

	UObject::ProcessEvent(Func, &Parms);

	if (Retrun_enable != nullptr)
		*Retrun_enable = Parms.Retrun_enable;

	if (OutAssumptionLv != nullptr)
		*OutAssumptionLv = Parms.OutAssumptionLv;

	if (OutRelativeLv != nullptr)
		*OutRelativeLv = Parms.OutRelativeLv;

	if (OutIsFreeLv != nullptr)
		*OutIsFreeLv = Parms.OutIsFreeLv;
}


// Function RSBattleCharacter.RSBattleCharacter_C.AddScarFromHitDamageInfoInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitDamageInfo                   HitDamageInfo                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::AddScarFromHitDamageInfoInterface(class AActor* Actor, const struct FHitDamageInfo& HitDamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AddScarFromHitDamageInfoInterface");

	Params::RSBattleCharacter_C_AddScarFromHitDamageInfoInterface Parms{};

	Parms.Actor = Actor;
	Parms.HitDamageInfo = std::move(HitDamageInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSlashEffectInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsEnableSlashEffectInterface(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableSlashEffectInterface");

	Params::RSBattleCharacter_C_IsEnableSlashEffectInterface Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsHitWeakChangeDefaultEffectInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsHitWeakChangeDefaultEffectInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsHitWeakChangeDefaultEffectInterface");

	Params::RSBattleCharacter_C_IsHitWeakChangeDefaultEffectInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableAtomCuePlayInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDisableAtomCuePlayInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDisableAtomCuePlayInterface");

	Params::RSBattleCharacter_C_IsDisableAtomCuePlayInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnDamageArmorBreak
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnDamageArmorBreak(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnDamageArmorBreak");

	Params::RSBattleCharacter_C_OnDamageArmorBreak Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EnableSetCanTick
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::EnableSetCanTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EnableSetCanTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DisenableSetCanTick
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::DisenableSetCanTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DisenableSetCanTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterWaitInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsCounterWaitInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCounterWaitInterface");

	Params::RSBattleCharacter_C_IsCounterWaitInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCounterInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetCounterInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCounterInterface");

	Params::RSBattleCharacter_C_SetCounterInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsSuperArmorInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsSuperArmorInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsSuperArmorInterface");

	Params::RSBattleCharacter_C_IsSuperArmorInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetDamageReactionDirInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetDamageReactionDirInterface(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetDamageReactionDirInterface");

	Params::RSBattleCharacter_C_GetDamageReactionDirInterface Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainCrashMissAccumulationScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBoss                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetBrainCrashMissAccumulationScale(bool IsBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBrainCrashMissAccumulationScale");

	Params::RSBattleCharacter_C_SetBrainCrashMissAccumulationScale Parms{};

	Parms.IsBoss = IsBoss;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNoCollisionAndStopAiFade
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoColAndStopAi                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetNoCollisionAndStopAiFade(bool bNoColAndStopAi, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNoCollisionAndStopAiFade");

	Params::RSBattleCharacter_C_SetNoCollisionAndStopAiFade Parms{};

	Parms.bNoColAndStopAi = bNoColAndStopAi;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ShakeCameraInDamageInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::ShakeCameraInDamageInterface(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ShakeCameraInDamageInterface");

	Params::RSBattleCharacter_C_ShakeCameraInDamageInterface Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.VibrationControllerInDamageInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::VibrationControllerInDamageInterface(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "VibrationControllerInDamageInterface");

	Params::RSBattleCharacter_C_VibrationControllerInDamageInterface Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBattleDamage3D
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHUDMainGame_C*                   HUD                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position3D                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCritical                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSasCritical                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBrainCrashCritical                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHeal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWeak                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARSBattleCharacter_C*             CrushTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CrushBonus                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetBattleDamage3D(class AHUDMainGame_C* HUD, int32 Damage, const struct FVector& Position3D, bool Param_IsPlayer, bool IsCritical, bool IsSasCritical, bool IsBrainCrashCritical, bool IsHeal, bool IsWeak, bool IsNoDamage, class ARSBattleCharacter_C* CrushTarget, int32 CrushBonus, const struct FVector2D& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBattleDamage3D");

	Params::RSBattleCharacter_C_SetBattleDamage3D Parms{};

	Parms.HUD = HUD;
	Parms.Damage = Damage;
	Parms.Position3D = std::move(Position3D);
	Parms.Param_IsPlayer = Param_IsPlayer;
	Parms.IsCritical = IsCritical;
	Parms.IsSasCritical = IsSasCritical;
	Parms.IsBrainCrashCritical = IsBrainCrashCritical;
	Parms.IsHeal = IsHeal;
	Parms.IsWeak = IsWeak;
	Parms.IsNoDamage = IsNoDamage;
	Parms.CrushTarget = CrushTarget;
	Parms.CrushBonus = CrushBonus;
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.DamagePopupCore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCrashDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePointKind                        InKind                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsCritical                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsWeakhit                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsStealthCritical                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsBrainCrash                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::DamagePopupCore(const struct FVector& InLocation, int32 InDamage, float InCrashDamage, EDamagePointKind InKind, bool InIsCritical, bool InIsWeakhit, bool InIsStealthCritical, bool InIsBrainCrash, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DamagePopupCore");

	Params::RSBattleCharacter_C_DamagePopupCore Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InDamage = InDamage;
	Parms.InCrashDamage = InCrashDamage;
	Parms.InKind = InKind;
	Parms.InIsCritical = InIsCritical;
	Parms.InIsWeakhit = InIsWeakhit;
	Parms.InIsStealthCritical = InIsStealthCritical;
	Parms.InIsBrainCrash = InIsBrainCrash;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnEndDamageCalcArray
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnEndDamageCalcArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnEndDamageCalcArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetDirectAttackWpPrimitive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              OutPrimitive                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetDirectAttackWpPrimitive(class UPrimitiveComponent** OutPrimitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetDirectAttackWpPrimitive");

	Params::RSBattleCharacter_C_GetDirectAttackWpPrimitive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutPrimitive != nullptr)
		*OutPrimitive = Parms.OutPrimitive;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopBehaviorTree
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickDisable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::StopBehaviorTree(bool bTickDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopBehaviorTree");

	Params::RSBattleCharacter_C_StopBehaviorTree Parms{};

	Parms.bTickDisable = bTickDisable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.RestartBehaviorTree
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickEnable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::RestartBehaviorTree(bool bTickEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RestartBehaviorTree");

	Params::RSBattleCharacter_C_RestartBehaviorTree Parms{};

	Parms.bTickEnable = bTickEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBehaviorTreeTickEnable
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetBehaviorTreeTickEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBehaviorTreeTickEnable");

	Params::RSBattleCharacter_C_SetBehaviorTreeTickEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopBehaviorTreeCore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickDisable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StopBehaviorTreeCore(bool bTickDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopBehaviorTreeCore");

	Params::RSBattleCharacter_C_StopBehaviorTreeCore Parms{};

	Parms.bTickDisable = bTickDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RestartBehaviorTreeCore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickEnable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::RestartBehaviorTreeCore(bool bTickEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RestartBehaviorTreeCore");

	Params::RSBattleCharacter_C_RestartBehaviorTreeCore Parms{};

	Parms.bTickEnable = bTickEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ModifyParameterTable_Attack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewAttack                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ModifyParameterTable_Attack(float Scale, int32* NewAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ModifyParameterTable_Attack");

	Params::RSBattleCharacter_C_ModifyParameterTable_Attack Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (NewAttack != nullptr)
		*NewAttack = Parms.NewAttack;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetDisableMeshFitGround
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetDisableMeshFitGround(bool bDisable, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetDisableMeshFitGround");

	Params::RSBattleCharacter_C_SetDisableMeshFitGround Parms{};

	Parms.bDisable = bDisable;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.Start Unaffected Time Dilation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeDilation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DilationTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimNotifyTimeDilationMode             DilationMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::Start_Unaffected_Time_Dilation(float TimeDilation, float DilationTime, EAnimNotifyTimeDilationMode DilationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "Start Unaffected Time Dilation");

	Params::RSBattleCharacter_C_Start_Unaffected_Time_Dilation Parms{};

	Parms.TimeDilation = TimeDilation;
	Parms.DilationTime = DilationTime;
	Parms.DilationMode = DilationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateUnaffectedTimeDilation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::UpdateUnaffectedTimeDilation(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateUnaffectedTimeDilation");

	Params::RSBattleCharacter_C_UpdateUnaffectedTimeDilation Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.StartUnaffectedCameraAttention
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      ActorCurveOut                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      FovCurveOut                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttentionTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStart                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StartUnaffectedCameraAttention(class UCurveFloat* ActorCurveOut, class UCurveFloat* FovCurveOut, float AttentionTime, bool* IsStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StartUnaffectedCameraAttention");

	Params::RSBattleCharacter_C_StartUnaffectedCameraAttention Parms{};

	Parms.ActorCurveOut = ActorCurveOut;
	Parms.FovCurveOut = FovCurveOut;
	Parms.AttentionTime = AttentionTime;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStart != nullptr)
		*IsStart = Parms.IsStart;
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateUnaffectedCameraAttention
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::UpdateUnaffectedCameraAttention(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateUnaffectedCameraAttention");

	Params::RSBattleCharacter_C_UpdateUnaffectedCameraAttention Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnHitDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnHitDamage(const struct FHCHitResult& Result, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnHitDamage");

	Params::RSBattleCharacter_C_OnHitDamage Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopUnaffectedTimeDilation
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::StopUnaffectedTimeDilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopUnaffectedTimeDilation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopUnaffectedCameraAttention
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::StopUnaffectedCameraAttention()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopUnaffectedCameraAttention");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetGroupID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewGroupID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetGroupID(int32 NewGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetGroupID");

	Params::RSBattleCharacter_C_SetGroupID Parms{};

	Parms.NewGroupID = NewGroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcMeshFitGroundVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          UpVector                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CalcMeshFitGroundVector(struct FVector* UpVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcMeshFitGroundVector");

	Params::RSBattleCharacter_C_CalcMeshFitGroundVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpVector != nullptr)
		*UpVector = std::move(Parms.UpVector);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableMeshFitGround
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bDisable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsDisableMeshFitGround(bool* bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDisableMeshFitGround");

	Params::RSBattleCharacter_C_IsDisableMeshFitGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisable != nullptr)
		*bDisable = Parms.bDisable;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SufferDamageBeforeInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SufferDamageBeforeInterface(const struct FHCHitResult& HitResult, int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SufferDamageBeforeInterface");

	Params::RSBattleCharacter_C_SufferDamageBeforeInterface Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetSpawnLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetSpawnLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetSpawnLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusOilCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBadStatusOilCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusOilCPP");

	Params::RSBattleCharacter_C_IsBadStatusOilCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFloodedCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBadStatusFloodedCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusFloodedCPP");

	Params::RSBattleCharacter_C_IsBadStatusFloodedCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFlameCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBadStatusFlameCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusFlameCPP");

	Params::RSBattleCharacter_C_IsBadStatusFlameCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusElectricCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBadStatusElectricCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusElectricCPP");

	Params::RSBattleCharacter_C_IsBadStatusElectricCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusConfusionCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBadStatusConfusionCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusConfusionCPP");

	Params::RSBattleCharacter_C_IsBadStatusConfusionCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetDeadBeforeHitResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (Parm, OutParm, ContainsInstancedReference)

void ARSBattleCharacter_C::GetDeadBeforeHitResult(struct FHCHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetDeadBeforeHitResult");

	Params::RSBattleCharacter_C_GetDeadBeforeHitResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetDeadBeforeHitResultByDirectAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattleCharacter_C::SetDeadBeforeHitResultByDirectAttack(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetDeadBeforeHitResultByDirectAttack");

	Params::RSBattleCharacter_C_SetDeadBeforeHitResultByDirectAttack Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RareSpawnToEnemyHpRate
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::RareSpawnToEnemyHpRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RareSpawnToEnemyHpRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetRareSpawnEnemyHpRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HpRate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           RareSpawnEnemy                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetRareSpawnEnemyHpRate(float HpRate, class AActor* RareSpawnEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetRareSpawnEnemyHpRate");

	Params::RSBattleCharacter_C_SetRareSpawnEnemyHpRate Parms{};

	Parms.HpRate = HpRate;
	Parms.RareSpawnEnemy = RareSpawnEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSpawnByConditionEnemyHpRate
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSpawnOK                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEnableSpawnByConditionEnemyHpRate(bool* IsSpawnOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableSpawnByConditionEnemyHpRate");

	Params::RSBattleCharacter_C_IsEnableSpawnByConditionEnemyHpRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSpawnOK != nullptr)
		*IsSpawnOK = Parms.IsSpawnOK;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetRareSpawnEnemyHpRateCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HpRate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           RareSpawnEnemy                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetRareSpawnEnemyHpRateCPP(float HpRate, class AActor* RareSpawnEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetRareSpawnEnemyHpRateCPP");

	Params::RSBattleCharacter_C_SetRareSpawnEnemyHpRateCPP Parms{};

	Parms.HpRate = HpRate;
	Parms.RareSpawnEnemy = RareSpawnEnemy;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.RareEnemySelfDestroy
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::RareEnemySelfDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RareEnemySelfDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetActorTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InTags                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ARSBattleCharacter_C::SetActorTags(TArray<class FName>& InTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetActorTags");

	Params::RSBattleCharacter_C_SetActorTags Parms{};

	Parms.InTags = std::move(InTags);

	UObject::ProcessEvent(Func, &Parms);

	InTags = std::move(Parms.InTags);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnCompleteEventManagerEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnCompleteEventManagerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnCompleteEventManagerEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.TickCrashVisionEffect
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Dummy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::TickCrashVisionEffect(float Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "TickCrashVisionEffect");

	Params::RSBattleCharacter_C_TickCrashVisionEffect Parms{};

	Parms.Dummy = Dummy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReservationCrashCutSceneRareSpawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::ReservationCrashCutSceneRareSpawn(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReservationCrashCutSceneRareSpawn");

	Params::RSBattleCharacter_C_ReservationCrashCutSceneRareSpawn Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CableDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Sec                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::CableDamage(float Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CableDamage");

	Params::RSBattleCharacter_C_CableDamage Parms{};

	Parms.Sec = Sec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnSimulatorStartDirectionOpen
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnSimulatorStartDirectionOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnSimulatorStartDirectionOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnSimulatorStartDirectionClose
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MoveDelaySec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::OnSimulatorStartDirectionClose(float MoveDelaySec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnSimulatorStartDirectionClose");

	Params::RSBattleCharacter_C_OnSimulatorStartDirectionClose Parms{};

	Parms.MoveDelaySec = MoveDelaySec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStateCableDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CableDamage                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStateCableDamage(bool* CableDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStateCableDamage");

	Params::RSBattleCharacter_C_IsBadStateCableDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CableDamage != nullptr)
		*CableDamage = Parms.CableDamage;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOffCable
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOffCable(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOffCable");

	Params::RSBattleCharacter_C_BadStateEffectOffCable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectOnCable
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectOnCable(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectOnCable");

	Params::RSBattleCharacter_C_BadStateEffectOnCable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetBrainCrashBossHpGage
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::SetBrainCrashBossHpGage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetBrainCrashBossHpGage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ResetBrainCrashBossHpGage
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::ResetBrainCrashBossHpGage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ResetBrainCrashBossHpGage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReserveBrainCrashDamageScorePopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::ReserveBrainCrashDamageScorePopup(int32 Damage, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReserveBrainCrashDamageScorePopup");

	Params::RSBattleCharacter_C_ReserveBrainCrashDamageScorePopup Parms{};

	Parms.Damage = Damage;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnSimulatorCancelMission
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattleCharacter_C::OnSimulatorCancelMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnSimulatorCancelMission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetTargetCursorLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetTargetCursorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetTargetCursorLocation");

	Params::RSBattleCharacter_C_GetTargetCursorLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPsychicObjectShieldActive
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsPsychicObjectShieldActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPsychicObjectShieldActive");

	Params::RSBattleCharacter_C_IsPsychicObjectShieldActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPsychicObjectShield
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattleCharacter_C::GetPsychicObjectShield()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPsychicObjectShield");

	Params::RSBattleCharacter_C_GetPsychicObjectShield Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCapsuleRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCapsuleRadius(float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCapsuleRadius");

	Params::RSBattleCharacter_C_GetCapsuleRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetFlightAltitude
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FlightAltitude                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetFlightAltitude(float* FlightAltitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetFlightAltitude");

	Params::RSBattleCharacter_C_GetFlightAltitude Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlightAltitude != nullptr)
		*FlightAltitude = Parms.FlightAltitude;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHeadLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHeadLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHeadLocation");

	Params::RSBattleCharacter_C_GetHeadLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsFlying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsFlying                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsFlying(bool* Param_IsFlying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsFlying");

	Params::RSBattleCharacter_C_IsFlying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsFlying != nullptr)
		*Param_IsFlying = Parms.Param_IsFlying;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndMoveBackward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::EndMoveBackward(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndMoveBackward");

	Params::RSBattleCharacter_C_EndMoveBackward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BeginMoveBackward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BeginMoveBackward(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BeginMoveBackward");

	Params::RSBattleCharacter_C_BeginMoveBackward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.RestoreMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::RestoreMaxSpeed(class FName ClaimantName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RestoreMaxSpeed");

	Params::RSBattleCharacter_C_RestoreMaxSpeed Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ScaleMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::ScaleMaxSpeed(float Scale, class FName ClaimantName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ScaleMaxSpeed");

	Params::RSBattleCharacter_C_ScaleMaxSpeed Parms{};

	Parms.Scale = Scale;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsAbleMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAble                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsAbleMove(bool* IsAble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsAbleMove");

	Params::RSBattleCharacter_C_IsAbleMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAble != nullptr)
		*IsAble = Parms.IsAble;
}


// Function RSBattleCharacter.RSBattleCharacter_C.AddSpringArm
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::AddSpringArm(class USpringArmComponent** SpringArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "AddSpringArm");

	Params::RSBattleCharacter_C_AddSpringArm Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpringArm != nullptr)
		*SpringArm = Parms.SpringArm;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DestroySpringArm
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DestroySpringArm(class USpringArmComponent* SpringArm, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DestroySpringArm");

	Params::RSBattleCharacter_C_DestroySpringArm Parms{};

	Parms.SpringArm = SpringArm;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCapsuleHalfHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HalfHeight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCapsuleHalfHeight(float* HalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCapsuleHalfHeight");

	Params::RSBattleCharacter_C_GetCapsuleHalfHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HalfHeight != nullptr)
		*HalfHeight = Parms.HalfHeight;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetHp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetHp(int32 HP, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetHp");

	Params::RSBattleCharacter_C_SetHp Parms{};

	Parms.HP = HP;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusAny
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusAny(bool* bBadStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusAny");

	Params::RSBattleCharacter_C_IsBadStatusAny Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCharacterVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisibility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetCharacterVisibility(bool bVisibility, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCharacterVisibility");

	Params::RSBattleCharacter_C_SetCharacterVisibility Parms{};

	Parms.bVisibility = bVisibility;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterSuccess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsCounterSuccess(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCounterSuccess");

	Params::RSBattleCharacter_C_IsCounterSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StartVisionFog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StartVisionFog(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StartVisionFog");

	Params::RSBattleCharacter_C_StartVisionFog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetActorStartPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetActorStartPoint(struct FVector* StartLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetActorStartPoint");

	Params::RSBattleCharacter_C_GetActorStartPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartLocation != nullptr)
		*StartLocation = std::move(Parms.StartLocation);
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetNotifyAttackData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFNotifyAttackData               Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetNotifyAttackData(const struct FFNotifyAttackData& Data, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetNotifyAttackData");

	Params::RSBattleCharacter_C_SetNotifyAttackData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetLockOnTargetInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetLockOnTargetInterface(class AActor** TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetLockOnTargetInterface");

	Params::RSBattleCharacter_C_GetLockOnTargetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Accelerating                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::GetAccelerating(bool* Accelerating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetAccelerating");

	Params::RSBattleCharacter_C_GetAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Accelerating != nullptr)
		*Accelerating = Parms.Accelerating;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Accelerating                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dammy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetAccelerating(bool Accelerating, bool* Dammy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetAccelerating");

	Params::RSBattleCharacter_C_SetAccelerating Parms{};

	Parms.Accelerating = Accelerating;

	UObject::ProcessEvent(Func, &Parms);

	if (Dammy != nullptr)
		*Dammy = Parms.Dammy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.MeshFitGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AngleLimit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEndFit                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::MeshFitGround(float InterpSpeed, float AngleLimit, bool bEndFit, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "MeshFitGround");

	Params::RSBattleCharacter_C_MeshFitGround Parms{};

	Parms.InterpSpeed = InterpSpeed;
	Parms.AngleLimit = AngleLimit;
	Parms.bEndFit = bEndFit;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMeshFitGroundCheckLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckHeight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetMeshFitGroundCheckLocation(struct FVector* Location, float* CheckHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMeshFitGroundCheckLocation");

	Params::RSBattleCharacter_C_GetMeshFitGroundCheckLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CheckHeight != nullptr)
		*CheckHeight = Parms.CheckHeight;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CancelMeshFitGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CancelMeshFitGround(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CancelMeshFitGround");

	Params::RSBattleCharacter_C_CancelMeshFitGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StartSASChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dammy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StartSASChance(float Time, bool* Dammy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StartSASChance");

	Params::RSBattleCharacter_C_StartSASChance Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Dammy != nullptr)
		*Dammy = Parms.Dammy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndSASChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dammy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::EndSASChance(bool* Dammy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndSASChance");

	Params::RSBattleCharacter_C_EndSASChance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dammy != nullptr)
		*Dammy = Parms.Dammy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetHitStopInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCRestictedHitStopType                 HitStopType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCritical                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetHitStopInterface(EHCRestictedHitStopType HitStopType, bool bCritical, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetHitStopInterface");

	Params::RSBattleCharacter_C_SetHitStopInterface Parms{};

	Parms.HitStopType = HitStopType;
	Parms.bCritical = bCritical;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateCameraDither
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_UseDither                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CameraDither                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::UpdateCameraDither(float DeltaSeconds, bool Param_UseDither, float* CameraDither)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateCameraDither");

	Params::RSBattleCharacter_C_UpdateCameraDither Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Param_UseDither = Param_UseDither;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraDither != nullptr)
		*CameraDither = Parms.CameraDither;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetCameraDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SetDitherValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetCameraDither(float SetDitherValue, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetCameraDither");

	Params::RSBattleCharacter_C_SetCameraDither Parms{};

	Parms.SetDitherValue = SetDitherValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetUseCameraDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUse                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetUseCameraDither(bool bUse, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetUseCameraDither");

	Params::RSBattleCharacter_C_SetUseCameraDither Parms{};

	Parms.bUse = bUse;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCounterWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWait                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsCounterWait(bool* bWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCounterWait");

	Params::RSBattleCharacter_C_IsCounterWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bWait != nullptr)
		*bWait = Parms.bWait;
}


// Function RSBattleCharacter.RSBattleCharacter_C.RequestDie
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::RequestDie(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RequestDie");

	Params::RSBattleCharacter_C_RequestDie Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndVisionFog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::EndVisionFog(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndVisionFog");

	Params::RSBattleCharacter_C_EndVisionFog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EnableReactionCoefficient
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNormalAttack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPsychicAttack                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReactionSRate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReactionLRate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DownRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CrashRate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAcceptAll                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::EnableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, float ReactionSRate, float ReactionLRate, float DownRate, float CrashRate, bool bAcceptAll, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EnableReactionCoefficient");

	Params::RSBattleCharacter_C_EnableReactionCoefficient Parms{};

	Parms.bNormalAttack = bNormalAttack;
	Parms.bPsychicAttack = bPsychicAttack;
	Parms.ReactionSRate = ReactionSRate;
	Parms.ReactionLRate = ReactionLRate;
	Parms.DownRate = DownRate;
	Parms.CrashRate = CrashRate;
	Parms.bAcceptAll = bAcceptAll;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DisableReactionCoefficient
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNormalAttack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPsychicAttack                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::DisableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DisableReactionCoefficient");

	Params::RSBattleCharacter_C_DisableReactionCoefficient Parms{};

	Parms.bNormalAttack = bNormalAttack;
	Parms.bPsychicAttack = bPsychicAttack;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SpawnSequencerEffectInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Template                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FName                             AttachName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SpawnSequencerEffectInterface(class FName ClaimantName, class UParticleSystem* Template, const struct FTransform& Transform, class FName AttachName, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SpawnSequencerEffectInterface");

	Params::RSBattleCharacter_C_SpawnSequencerEffectInterface Parms{};

	Parms.ClaimantName = ClaimantName;
	Parms.Template = Template;
	Parms.Transform = std::move(Transform);
	Parms.AttachName = AttachName;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndSequencerEffectInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::EndSequencerEffectInterface(class FName ClaimantName, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndSequencerEffectInterface");

	Params::RSBattleCharacter_C_EndSequencerEffectInterface Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.UpdateSequencerEffectInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::UpdateSequencerEffectInterface(float DeltaSec, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "UpdateSequencerEffectInterface");

	Params::RSBattleCharacter_C_UpdateSequencerEffectInterface Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInScreen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InScreen                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsInScreen(bool* InScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInScreen");

	Params::RSBattleCharacter_C_IsInScreen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InScreen != nullptr)
		*InScreen = Parms.InScreen;
}


// Function RSBattleCharacter.RSBattleCharacter_C.Get Event Bind Mesh Component
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMeshComponent*>     MeshComponent                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattleCharacter_C::Get_Event_Bind_Mesh_Component(TArray<class UStaticMeshComponent*>* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "Get Event Bind Mesh Component");

	Params::RSBattleCharacter_C_Get_Event_Bind_Mesh_Component Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComponent != nullptr)
		*MeshComponent = std::move(Parms.MeshComponent);
}


// Function RSBattleCharacter.RSBattleCharacter_C.RegisterBrainFieldNormalTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InNormalTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::RegisterBrainFieldNormalTransform(const struct FTransform& InNormalTransform, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "RegisterBrainFieldNormalTransform");

	Params::RSBattleCharacter_C_RegisterBrainFieldNormalTransform Parms{};

	Parms.InNormalTransform = std::move(InNormalTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckNoDamagePopUpFromAttacker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoPopUp                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CheckNoDamagePopUpFromAttacker(bool* bNoPopUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckNoDamagePopUpFromAttacker");

	Params::RSBattleCharacter_C_CheckNoDamagePopUpFromAttacker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNoPopUp != nullptr)
		*bNoPopUp = Parms.bNoPopUp;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetGroupIDInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_GroupID                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_SubGroupID                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetGroupIDInterface(bool* bSuccess, int32* Param_GroupID, int32* Param_SubGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetGroupIDInterface");

	Params::RSBattleCharacter_C_GetGroupIDInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Param_GroupID != nullptr)
		*Param_GroupID = Parms.Param_GroupID;

	if (Param_SubGroupID != nullptr)
		*Param_SubGroupID = Parms.Param_SubGroupID;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopMovementImmediately
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::StopMovementImmediately(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopMovementImmediately");

	Params::RSBattleCharacter_C_StopMovementImmediately Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPsychicObjectThrowParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Apply                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Directshot_throw_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Directshot_homing_speed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Combo_throw_speed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Combo_homing_speed                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   brainfield_throw_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   brainfield_homing_speed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intercept_throw_speed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intercept_homing_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetPsychicObjectThrowParameter(bool* Apply, float* Directshot_throw_speed, float* Directshot_homing_speed, float* Combo_throw_speed, float* Combo_homing_speed, float* brainfield_throw_speed, float* brainfield_homing_speed, float* Intercept_throw_speed, float* Intercept_homing_speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPsychicObjectThrowParameter");

	Params::RSBattleCharacter_C_GetPsychicObjectThrowParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Apply != nullptr)
		*Apply = Parms.Apply;

	if (Directshot_throw_speed != nullptr)
		*Directshot_throw_speed = Parms.Directshot_throw_speed;

	if (Directshot_homing_speed != nullptr)
		*Directshot_homing_speed = Parms.Directshot_homing_speed;

	if (Combo_throw_speed != nullptr)
		*Combo_throw_speed = Parms.Combo_throw_speed;

	if (Combo_homing_speed != nullptr)
		*Combo_homing_speed = Parms.Combo_homing_speed;

	if (brainfield_throw_speed != nullptr)
		*brainfield_throw_speed = Parms.brainfield_throw_speed;

	if (brainfield_homing_speed != nullptr)
		*brainfield_homing_speed = Parms.brainfield_homing_speed;

	if (Intercept_throw_speed != nullptr)
		*Intercept_throw_speed = Parms.Intercept_throw_speed;

	if (Intercept_homing_speed != nullptr)
		*Intercept_homing_speed = Parms.Intercept_homing_speed;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterSkillTableWithReplace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       OrgTable                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkillName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCSkillCommonInfo               SkillCommonInfo                                        (Parm, OutParm)

void ARSBattleCharacter_C::GetCharacterSkillTableWithReplace(class UDataTable*& OrgTable, class FName SkillName, struct FHCSkillCommonInfo* SkillCommonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharacterSkillTableWithReplace");

	Params::RSBattleCharacter_C_GetCharacterSkillTableWithReplace Parms{};

	Parms.OrgTable = OrgTable;
	Parms.SkillName = SkillName;

	UObject::ProcessEvent(Func, &Parms);

	OrgTable = Parms.OrgTable;

	if (SkillCommonInfo != nullptr)
		*SkillCommonInfo = std::move(Parms.SkillCommonInfo);
}


// Function RSBattleCharacter.RSBattleCharacter_C.ReserveCrashVisionShockWave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EffectDelayTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::ReserveCrashVisionShockWave(float EffectDelayTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ReserveCrashVisionShockWave");

	Params::RSBattleCharacter_C_ReserveCrashVisionShockWave Parms{};

	Parms.EffectDelayTime = EffectDelayTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetIgnoreVisionSimulatorScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnore                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::SetIgnoreVisionSimulatorScore(bool bIgnore, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetIgnoreVisionSimulatorScore");

	Params::RSBattleCharacter_C_SetIgnoreVisionSimulatorScore Parms{};

	Parms.bIgnore = bIgnore;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBrainCrashDamageLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBrainCrashDamageLocation(struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBrainCrashDamageLocation");

	Params::RSBattleCharacter_C_GetBrainCrashDamageLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetLandingTemplate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Template                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetLandingTemplate(EPhysicalSurface SurfaceType, class UParticleSystem** Template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetLandingTemplate");

	Params::RSBattleCharacter_C_GetLandingTemplate Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (Template != nullptr)
		*Template = Parms.Template;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetFootStepTemplate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Template                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetFootStepTemplate(EPhysicalSurface SurfaceType, class UParticleSystem** Template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetFootStepTemplate");

	Params::RSBattleCharacter_C_GetFootStepTemplate Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (Template != nullptr)
		*Template = Parms.Template;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnBeginConnectEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  ParticleSystem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEffectConnectPoint                     SourceConnectPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SourceSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEffectConnectPoint                     TargetConnectPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    PlaySound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnBeginConnectEffect(class UParticleSystem* ParticleSystem, class FName ObjectName, EEffectConnectPoint SourceConnectPoint, class FName SourceSocketName, EEffectConnectPoint TargetConnectPoint, class FName TargetSocketName, class USoundAtomCue* PlaySound, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnBeginConnectEffect");

	Params::RSBattleCharacter_C_OnBeginConnectEffect Parms{};

	Parms.ParticleSystem = ParticleSystem;
	Parms.ObjectName = ObjectName;
	Parms.SourceConnectPoint = SourceConnectPoint;
	Parms.SourceSocketName = SourceSocketName;
	Parms.TargetConnectPoint = TargetConnectPoint;
	Parms.TargetSocketName = TargetSocketName;
	Parms.PlaySound = PlaySound;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OnEndConnectEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::OnEndConnectEffect(class FName ObjectName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OnEndConnectEffect");

	Params::RSBattleCharacter_C_OnEndConnectEffect Parms{};

	Parms.ObjectName = ObjectName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.TalkEventStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::TalkEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "TalkEventStart");

	Params::RSBattleCharacter_C_TalkEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.TalkEventEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::TalkEventEnd(bool IsRestoreTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "TalkEventEnd");

	Params::RSBattleCharacter_C_TalkEventEnd Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StaticEventStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::StaticEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StaticEventStart");

	Params::RSBattleCharacter_C_StaticEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StaticEventEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::StaticEventEnd(bool IsRestoreTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StaticEventEnd");

	Params::RSBattleCharacter_C_StaticEventEnd Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventStart");

	Params::RSBattleCharacter_C_EventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventEnd");

	Params::RSBattleCharacter_C_EventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::DynamicEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DynamicEventStart");

	Params::RSBattleCharacter_C_DynamicEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::DynamicEventEnd(bool IsRestoreTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DynamicEventEnd");

	Params::RSBattleCharacter_C_DynamicEventEnd Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetHoodVisible
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetHoodVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetHoodVisible");

	Params::RSBattleCharacter_C_SetHoodVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.StopEventAnimMontage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::StopEventAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "StopEventAnimMontage");

	Params::RSBattleCharacter_C_StopEventAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.PlayEventAnimMontage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Section                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::PlayEventAnimMontage(class UAnimMontage* AnimMontage, class FName Section, float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "PlayEventAnimMontage");

	Params::RSBattleCharacter_C_PlayEventAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.Section = Section;
	Parms.InPlayRate = InPlayRate;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEndEventAnimMontage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsEndEventAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEndEventAnimMontage");

	Params::RSBattleCharacter_C_IsEndEventAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetEventVisible
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetEventVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetEventVisible");

	Params::RSBattleCharacter_C_SetEventVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetShadowOffsetTexture
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetShadowOffsetTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetShadowOffsetTexture");

	Params::RSBattleCharacter_C_SetShadowOffsetTexture Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetShadowOffsetMapID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMaterialShadowOffsetID                 ShadowOffsetID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetShadowOffsetMapID(EMaterialShadowOffsetID ShadowOffsetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetShadowOffsetMapID");

	Params::RSBattleCharacter_C_SetShadowOffsetMapID Parms{};

	Parms.ShadowOffsetID = ShadowOffsetID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ResetShadowOffset
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::ResetShadowOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ResetShadowOffset");

	Params::RSBattleCharacter_C_ResetShadowOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BattleSequencerStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSetEnemyEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::BattleSequencerStart(bool IsSetEnemyEvent, bool bDriveSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BattleSequencerStart");

	Params::RSBattleCharacter_C_BattleSequencerStart Parms{};

	Parms.IsSetEnemyEvent = IsSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BattleSequencerEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSetEnemyEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::BattleSequencerEnd(bool IsRestoreTransform, bool IsSetEnemyEvent, bool bDriveSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BattleSequencerEnd");

	Params::RSBattleCharacter_C_BattleSequencerEnd Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;
	Parms.IsSetEnemyEvent = IsSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.DynamicEventBeforeBindCharacter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::DynamicEventBeforeBindCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "DynamicEventBeforeBindCharacter");

	Params::RSBattleCharacter_C_DynamicEventBeforeBindCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventInputRestrictNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Restrict                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EventInputRestrictNative(bool Restrict)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventInputRestrictNative");

	Params::RSBattleCharacter_C_EventInputRestrictNative Parms{};

	Parms.Restrict = Restrict;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventManagerStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EventManagerStart(bool EnableTick, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventManagerStart");

	Params::RSBattleCharacter_C_EventManagerStart Parms{};

	Parms.EnableTick = EnableTick;
	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EventManagerEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EventManagerEnd");

	Params::RSBattleCharacter_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterTableInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharactersParameterTable        ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FCharactersParameterTable ARSBattleCharacter_C::GetCharactersParameterTableInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharactersParameterTableInterface");

	Params::RSBattleCharacter_C_GetCharactersParameterTableInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefPhysicsDefence                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefObjDefence                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlameDefence                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectricPhysics                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CalcDefence(float& RefPhysicsDefence, float& RefObjDefence, float& RefFlameDefence, float& RefElectricPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcDefence");

	Params::RSBattleCharacter_C_CalcDefence Parms{};

	Parms.RefPhysicsDefence = RefPhysicsDefence;
	Parms.RefObjDefence = RefObjDefence;
	Parms.RefFlameDefence = RefFlameDefence;
	Parms.RefElectricPhysics = RefElectricPhysics;

	UObject::ProcessEvent(Func, &Parms);

	RefPhysicsDefence = Parms.RefPhysicsDefence;
	RefObjDefence = Parms.RefObjDefence;
	RefFlameDefence = Parms.RefFlameDefence;
	RefElectricPhysics = Parms.RefElectricPhysics;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcDamageByDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefPhysicsDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefObjDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlameDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectricDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCriticalDamageRate                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CalcDamageByDefence(float& RefPhysicsDamage, float& RefObjDamage, float& RefFlameDamage, float& RefElectricDamage, float& RefCriticalDamageRate, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcDamageByDefence");

	Params::RSBattleCharacter_C_CalcDamageByDefence Parms{};

	Parms.RefPhysicsDamage = RefPhysicsDamage;
	Parms.RefObjDamage = RefObjDamage;
	Parms.RefFlameDamage = RefFlameDamage;
	Parms.RefElectricDamage = RefElectricDamage;
	Parms.RefCriticalDamageRate = RefCriticalDamageRate;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	RefPhysicsDamage = Parms.RefPhysicsDamage;
	RefObjDamage = Parms.RefObjDamage;
	RefFlameDamage = Parms.RefFlameDamage;
	RefElectricDamage = Parms.RefElectricDamage;
	RefCriticalDamageRate = Parms.RefCriticalDamageRate;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcDamageByAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefPhysicsDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefObjDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlameDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectricDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCriticalDamageRate                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CalcDamageByAttack(float& RefPhysicsDamage, float& RefObjDamage, float& RefFlameDamage, float& RefElectricDamage, float& RefCriticalDamageRate, class AActor* DefenseActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcDamageByAttack");

	Params::RSBattleCharacter_C_CalcDamageByAttack Parms{};

	Parms.RefPhysicsDamage = RefPhysicsDamage;
	Parms.RefObjDamage = RefObjDamage;
	Parms.RefFlameDamage = RefFlameDamage;
	Parms.RefElectricDamage = RefElectricDamage;
	Parms.RefCriticalDamageRate = RefCriticalDamageRate;
	Parms.DefenseActor = DefenseActor;

	UObject::ProcessEvent(Func, &Parms);

	RefPhysicsDamage = Parms.RefPhysicsDamage;
	RefObjDamage = Parms.RefObjDamage;
	RefFlameDamage = Parms.RefFlameDamage;
	RefElectricDamage = Parms.RefElectricDamage;
	RefCriticalDamageRate = Parms.RefCriticalDamageRate;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcCritical
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Critical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAssassinAttack                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::CalcCritical(float Critical, class AActor* DefenseActor, bool bAssassinAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcCritical");

	Params::RSBattleCharacter_C_CalcCritical Parms{};

	Parms.Critical = Critical;
	Parms.DefenseActor = DefenseActor;
	Parms.bAssassinAttack = bAssassinAttack;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcAccumulationByDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefWince                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefKnockback                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefDown                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefLaunch                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlame                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectric                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlooded                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefOil                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefConfusion                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashCapCheckRate                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CalcAccumulationByDefence(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcAccumulationByDefence");

	Params::RSBattleCharacter_C_CalcAccumulationByDefence Parms{};

	Parms.RefWince = RefWince;
	Parms.RefKnockback = RefKnockback;
	Parms.RefDown = RefDown;
	Parms.RefLaunch = RefLaunch;
	Parms.RefFlame = RefFlame;
	Parms.RefElectric = RefElectric;
	Parms.RefFlooded = RefFlooded;
	Parms.RefOil = RefOil;
	Parms.RefConfusion = RefConfusion;
	Parms.RefCrashScale = RefCrashScale;
	Parms.RefCrashCapCheckRate = RefCrashCapCheckRate;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	RefWince = Parms.RefWince;
	RefKnockback = Parms.RefKnockback;
	RefDown = Parms.RefDown;
	RefLaunch = Parms.RefLaunch;
	RefFlame = Parms.RefFlame;
	RefElectric = Parms.RefElectric;
	RefFlooded = Parms.RefFlooded;
	RefOil = Parms.RefOil;
	RefConfusion = Parms.RefConfusion;
	RefCrashScale = Parms.RefCrashScale;
	RefCrashCapCheckRate = Parms.RefCrashCapCheckRate;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcAccumulationByAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefWince                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefKnockback                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefDown                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefLaunch                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlame                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectric                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlooded                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefOil                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefConfusion                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashCapCheckRate                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EHCSkillAttackType                      AttackType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCopyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHCSkillCommonInfo               SkillInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CalcAccumulationByAttack(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* DefenseActor, EHCSkillAttackType AttackType, bool bCopyActor, const struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcAccumulationByAttack");

	Params::RSBattleCharacter_C_CalcAccumulationByAttack Parms{};

	Parms.RefWince = RefWince;
	Parms.RefKnockback = RefKnockback;
	Parms.RefDown = RefDown;
	Parms.RefLaunch = RefLaunch;
	Parms.RefFlame = RefFlame;
	Parms.RefElectric = RefElectric;
	Parms.RefFlooded = RefFlooded;
	Parms.RefOil = RefOil;
	Parms.RefConfusion = RefConfusion;
	Parms.RefCrashScale = RefCrashScale;
	Parms.RefCrashCapCheckRate = RefCrashCapCheckRate;
	Parms.DefenseActor = DefenseActor;
	Parms.AttackType = AttackType;
	Parms.bCopyActor = bCopyActor;
	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	RefWince = Parms.RefWince;
	RefKnockback = Parms.RefKnockback;
	RefDown = Parms.RefDown;
	RefLaunch = Parms.RefLaunch;
	RefFlame = Parms.RefFlame;
	RefElectric = Parms.RefElectric;
	RefFlooded = Parms.RefFlooded;
	RefOil = Parms.RefOil;
	RefConfusion = Parms.RefConfusion;
	RefCrashScale = Parms.RefCrashScale;
	RefCrashCapCheckRate = Parms.RefCrashCapCheckRate;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcFinalDamageByDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::CalcFinalDamageByDefence(float Damage, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcFinalDamageByDefence");

	Params::RSBattleCharacter_C_CalcFinalDamageByDefence Parms{};

	Parms.Damage = Damage;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CalcFinalDamageByAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCSkillCommonInfo               SkillInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::CalcFinalDamageByAttack(float Damage, class AActor* DefenseActor, const struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CalcFinalDamageByAttack");

	Params::RSBattleCharacter_C_CalcFinalDamageByAttack Parms{};

	Parms.Damage = Damage;
	Parms.DefenseActor = DefenseActor;
	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.OverwriteAttackCollisionInfo
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCCollisionCommonInfo           RefCommonInfo                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FHCSkillCommonInfo               RefSkill                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::OverwriteAttackCollisionInfo(struct FHCCollisionCommonInfo& RefCommonInfo, struct FHCSkillCommonInfo& RefSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "OverwriteAttackCollisionInfo");

	Params::RSBattleCharacter_C_OverwriteAttackCollisionInfo Parms{};

	Parms.RefCommonInfo = std::move(RefCommonInfo);
	Parms.RefSkill = std::move(RefSkill);

	UObject::ProcessEvent(Func, &Parms);

	RefCommonInfo = std::move(Parms.RefCommonInfo);
	RefSkill = std::move(Parms.RefSkill);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPsychicFieldDamageRateToBoss
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsPsychicFieldDamageRateToBoss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPsychicFieldDamageRateToBoss");

	Params::RSBattleCharacter_C_IsPsychicFieldDamageRateToBoss Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxDamageRateLimit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::GetMaxDamageRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMaxDamageRateLimit");

	Params::RSBattleCharacter_C_GetMaxDamageRateLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxCrashScaleLimit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::GetMaxCrashScaleLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMaxCrashScaleLimit");

	Params::RSBattleCharacter_C_GetMaxCrashScaleLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreCritical
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsIgnoreCritical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsIgnoreCritical");

	Params::RSBattleCharacter_C_IsIgnoreCritical Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreHitCheck
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PPrimitive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsIgnoreHitCheck(class UPrimitiveComponent* PPrimitive, const struct FVector& HitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsIgnoreHitCheck");

	Params::RSBattleCharacter_C_IsIgnoreHitCheck Parms{};

	Parms.PPrimitive = PPrimitive;
	Parms.HitPosition = std::move(HitPosition);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCheckFriendlyFire
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsCheckFriendlyFire(class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCheckFriendlyFire");

	Params::RSBattleCharacter_C_IsCheckFriendlyFire Parms{};

	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsObstacleHitCheck
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PPrimitive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           PAttacker                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsObstacleHitCheck(class UPrimitiveComponent* PPrimitive, class AActor* PAttacker, const struct FVector& EndPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsObstacleHitCheck");

	Params::RSBattleCharacter_C_IsObstacleHitCheck Parms{};

	Parms.PPrimitive = PPrimitive;
	Parms.PAttacker = PAttacker;
	Parms.EndPosition = std::move(EndPosition);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsIgnoreAccelerator
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCSkillExtraType                       Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsIgnoreAccelerator(EHCSkillExtraType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsIgnoreAccelerator");

	Params::RSBattleCharacter_C_IsIgnoreAccelerator Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsObstacleHitCheckToActor
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PTarget                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsObstacleHitCheckToActor(class AActor* PTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsObstacleHitCheckToActor");

	Params::RSBattleCharacter_C_IsObstacleHitCheckToActor Parms{};

	Parms.PTarget = PTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHitCheckIgnoredActor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattleCharacter_C::GetHitCheckIgnoredActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHitCheckIgnoredActor");

	Params::RSBattleCharacter_C_GetHitCheckIgnoredActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BrainCrashUnlock
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::BrainCrashUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BrainCrashUnlock");

	Params::RSBattleCharacter_C_BrainCrashUnlock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakNumber
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ARSBattleCharacter_C::GetWeakNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetWeakNumber");

	Params::RSBattleCharacter_C_GetWeakNumber Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetEmphasisCrashGauge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEmphasisCrashGauge                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetEmphasisCrashGauge(bool bEmphasisCrashGauge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetEmphasisCrashGauge");

	Params::RSBattleCharacter_C_SetEmphasisCrashGauge Parms{};

	Parms.bEmphasisCrashGauge = bEmphasisCrashGauge;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsStartDamageAnimAdditional
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsStartDamageAnimAdditional(const struct FHCHitResult& HitResult, int32 Damage, bool IsDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsStartDamageAnimAdditional");

	Params::RSBattleCharacter_C_IsStartDamageAnimAdditional Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Damage = Damage;
	Parms.IsDown = IsDown;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCameraLookAtPos
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetCameraLookAtPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCameraLookAtPos");

	Params::RSBattleCharacter_C_GetCameraLookAtPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraViewTarget
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraViewTarget(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraViewTarget");

	Params::RSBattleCharacter_C_SetPlayerCameraViewTarget Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rot                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraRotation(const struct FRotator& Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraRotation");

	Params::RSBattleCharacter_C_SetPlayerCameraRotation Parms{};

	Parms.Rot = std::move(Rot);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCameraMode                       Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraMode(EPlayerCameraMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraMode");

	Params::RSBattleCharacter_C_SetPlayerCameraMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraLocation(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraLocation");

	Params::RSBattleCharacter_C_SetPlayerCameraLocation Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraFieldOfView
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraFieldOfView(float FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraFieldOfView");

	Params::RSBattleCharacter_C_SetPlayerCameraFieldOfView Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPlayerCameraDirection
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPlayerCameraDirection(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPlayerCameraDirection");

	Params::RSBattleCharacter_C_SetPlayerCameraDirection Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ARSBattleCharacter_C::GetPlayerCameraRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPlayerCameraRotation");

	Params::RSBattleCharacter_C_GetPlayerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCameraMode                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerCameraMode ARSBattleCharacter_C::GetPlayerCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPlayerCameraMode");

	Params::RSBattleCharacter_C_GetPlayerCameraMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetPlayerCameraLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPlayerCameraLocation");

	Params::RSBattleCharacter_C_GetPlayerCameraLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraFieldOfView
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattleCharacter_C::GetPlayerCameraFieldOfView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPlayerCameraFieldOfView");

	Params::RSBattleCharacter_C_GetPlayerCameraFieldOfView Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPlayerCameraDirection
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetPlayerCameraDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPlayerCameraDirection");

	Params::RSBattleCharacter_C_GetPlayerCameraDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetRemoteActorRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ARSBattleCharacter_C::GetRemoteActorRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetRemoteActorRotation");

	Params::RSBattleCharacter_C_GetRemoteActorRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetRemoteActorLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetRemoteActorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetRemoteActorLocation");

	Params::RSBattleCharacter_C_GetRemoteActorLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetFlyingInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetFlyingInterface(const class FName& ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetFlyingInterface");

	Params::RSBattleCharacter_C_SetFlyingInterface Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ClearFlyingInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::ClearFlyingInterface(const class FName& ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ClearFlyingInterface");

	Params::RSBattleCharacter_C_ClearFlyingInterface Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.ClearFlyingForceInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::ClearFlyingForceInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "ClearFlyingForceInterface");

	Params::RSBattleCharacter_C_ClearFlyingForceInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckExecuteAnimNotifyCharacterKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharaExecuteNotifyKind                 Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExecute                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CheckExecuteAnimNotifyCharacterKind(ECharaExecuteNotifyKind Kind, bool* bExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckExecuteAnimNotifyCharacterKind");

	Params::RSBattleCharacter_C_CheckExecuteAnimNotifyCharacterKind Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bExecute != nullptr)
		*bExecute = Parms.bExecute;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInvincibleCrashVisionDamage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsInvincibleCrashVisionDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInvincibleCrashVisionDamage");

	Params::RSBattleCharacter_C_IsInvincibleCrashVisionDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableCrashVision
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDisableCrashVision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDisableCrashVision");

	Params::RSBattleCharacter_C_IsDisableCrashVision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetInvincibleCrashVisionDamage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetInvincibleCrashVisionDamage(bool bInvincible, const class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetInvincibleCrashVisionDamage");

	Params::RSBattleCharacter_C_SetInvincibleCrashVisionDamage Parms{};

	Parms.bInvincible = bInvincible;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetDisableCrashVision
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetDisableCrashVision(bool bDisable, const class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetDisableCrashVision");

	Params::RSBattleCharacter_C_SetDisableCrashVision Parms{};

	Parms.bDisable = bDisable;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.SetPhotoModeDither
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::SetPhotoModeDither(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "SetPhotoModeDither");

	Params::RSBattleCharacter_C_SetPhotoModeDither Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.EndPhotoMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::EndPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "EndPhotoMode");

	Params::RSBattleCharacter_C_EndPhotoMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BeginPhotoMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::BeginPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BeginPhotoMode");

	Params::RSBattleCharacter_C_BeginPhotoMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeSkeletalMesh
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USkeletalMeshComponent* ARSBattleCharacter_C::GetPhotoModeSkeletalMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPhotoModeSkeletalMesh");

	Params::RSBattleCharacter_C_GetPhotoModeSkeletalMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeDitherDataName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ARSBattleCharacter_C::GetPhotoModeDitherDataName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPhotoModeDitherDataName");

	Params::RSBattleCharacter_C_GetPhotoModeDitherDataName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPhotoModeManualOverlap
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsPhotoModeManualOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPhotoModeManualOverlap");

	Params::RSBattleCharacter_C_IsPhotoModeManualOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetPhotoModeManualOverlapCapsule
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UCapsuleComponent* ARSBattleCharacter_C::GetPhotoModeManualOverlapCapsule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetPhotoModeManualOverlapCapsule");

	Params::RSBattleCharacter_C_GetPhotoModeManualOverlapCapsule Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.PhotoModeTick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::PhotoModeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "PhotoModeTick");

	Params::RSBattleCharacter_C_PhotoModeTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBattling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bBatting                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBattling(bool* bBatting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBattling");

	Params::RSBattleCharacter_C_IsBattling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBatting != nullptr)
		*bBatting = Parms.bBatting;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCurrentAttackAttribute
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EAttackAttribute                        Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsCurrentAttackAttribute(EAttackAttribute Attribute, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCurrentAttackAttribute");

	Params::RSBattleCharacter_C_IsCurrentAttackAttribute Parms{};

	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetRootLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          RootLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetRootLocation(struct FVector* RootLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetRootLocation");

	Params::RSBattleCharacter_C_GetRootLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RootLocation != nullptr)
		*RootLocation = std::move(Parms.RootLocation);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsArmor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              Prim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsArmor(class UPrimitiveComponent* Prim, bool* Return) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsArmor");

	Params::RSBattleCharacter_C_IsArmor Parms{};

	Parms.Prim = Prim;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          GroundLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetGroundLocation(struct FVector* GroundLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetGroundLocation");

	Params::RSBattleCharacter_C_GetGroundLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GroundLocation != nullptr)
		*GroundLocation = std::move(Parms.GroundLocation);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInvalidDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    InvalidDamage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsInvalidDamage(bool* InvalidDamage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInvalidDamage");

	Params::RSBattleCharacter_C_IsInvalidDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InvalidDamage != nullptr)
		*InvalidDamage = Parms.InvalidDamage;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharactersParameterComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UCharactersParameterComponent*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UCharactersParameterComponent* ARSBattleCharacter_C::GetCharactersParameterComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharactersParameterComponent");

	Params::RSBattleCharacter_C_GetCharactersParameterComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxSpeedScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetMaxSpeedScale(float* Scale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMaxSpeedScale");

	Params::RSBattleCharacter_C_GetMaxSpeedScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetDamageReactionDir
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector                          ReactionDir                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetDamageReactionDir(struct FHCHitResult& HitResult, struct FVector* ReactionDir) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetDamageReactionDir");

	Params::RSBattleCharacter_C_GetDamageReactionDir Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (ReactionDir != nullptr)
		*ReactionDir = std::move(Parms.ReactionDir);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundLocationSimple
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetGroundLocationSimple(bool bIncludeObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetGroundLocationSimple");

	Params::RSBattleCharacter_C_GetGroundLocationSimple Parms{};

	Parms.bIncludeObject = bIncludeObject;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashSuccess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBrainCrashSuccess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBrainCrashSuccess");

	Params::RSBattleCharacter_C_IsBrainCrashSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashAccess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBrainCrashAccess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBrainCrashAccess");

	Params::RSBattleCharacter_C_IsBrainCrashAccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBodyMeshes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class USkeletalMeshComponent*>   Meshes                                                 (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBodyMeshes(TArray<class USkeletalMeshComponent*>* Meshes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBodyMeshes");

	Params::RSBattleCharacter_C_GetBodyMeshes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Meshes != nullptr)
		*Meshes = std::move(Parms.Meshes);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterMovementLocationSimple
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetCharacterMovementLocationSimple() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharacterMovementLocationSimple");

	Params::RSBattleCharacter_C_GetCharacterMovementLocationSimple Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetGroundInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bFind                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ARSBattleCharacter_C::GetGroundInfo(bool* bFind, struct FHitResult* HitResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetGroundInfo");

	Params::RSBattleCharacter_C_GetGroundInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFind != nullptr)
		*bFind = Parms.bFind;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterMovementGroundInfoSimple
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::GetCharacterMovementGroundInfoSimple(struct FHitResult* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharacterMovementGroundInfoSimple");

	Params::RSBattleCharacter_C_GetCharacterMovementGroundInfoSimple Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInBeginPlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    InBegin                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsInBeginPlay(bool* InBegin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInBeginPlay");

	Params::RSBattleCharacter_C_IsInBeginPlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InBegin != nullptr)
		*InBegin = Parms.InBegin;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBadStateIconParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EHCBadState                             BadType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBadStateAddParticleData         ParamData                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBadStateIconParam(EHCBadState BadType, struct FBadStateAddParticleData* ParamData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBadStateIconParam");

	Params::RSBattleCharacter_C_GetBadStateIconParam Parms{};

	Parms.BadType = BadType;

	UObject::ProcessEvent(Func, &Parms);

	if (ParamData != nullptr)
		*ParamData = std::move(Parms.ParamData);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetBadStateIconCameraOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetBadStateIconCameraOffset(float* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetBadStateIconCameraOffset");

	Params::RSBattleCharacter_C_GetBadStateIconCameraOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsAttackerTargetSelf
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsAttackerTargetSelf(const struct FHCHitResult& HitResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsAttackerTargetSelf");

	Params::RSBattleCharacter_C_IsAttackerTargetSelf Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCameraDitherTableRowName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             RowName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCameraDitherTableRowName(class FName* RowName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCameraDitherTableRowName");

	Params::RSBattleCharacter_C_GetCameraDitherTableRowName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RowName != nullptr)
		*RowName = Parms.RowName;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharaKind
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ARSBattleCharacter_C::GetCharaKind() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharaKind");

	Params::RSBattleCharacter_C_GetCharaKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.BadStateEffectDispSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bInDisp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::BadStateEffectDispSwitch(bool bInDisp, bool* bSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "BadStateEffectDispSwitch");

	Params::RSBattleCharacter_C_BadStateEffectDispSwitch Parms{};

	Parms.bInDisp = bInDisp;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPsychicObjComboOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDeadPsychicObjComboOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDeadPsychicObjComboOnly");

	Params::RSBattleCharacter_C_IsDeadPsychicObjComboOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadChaseAttackOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDeadChaseAttackOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDeadChaseAttackOnly");

	Params::RSBattleCharacter_C_IsDeadChaseAttackOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCrashMaxWithGuts
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsCrashMaxWithGuts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCrashMaxWithGuts");

	Params::RSBattleCharacter_C_IsCrashMaxWithGuts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadLaunchAttackOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDeadLaunchAttackOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDeadLaunchAttackOnly");

	Params::RSBattleCharacter_C_IsDeadLaunchAttackOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPsychicObjOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDeadPsychicObjOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDeadPsychicObjOnly");

	Params::RSBattleCharacter_C_IsDeadPsychicObjOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDeadPhysicsAttackOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDeadPhysicsAttackOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDeadPhysicsAttackOnly");

	Params::RSBattleCharacter_C_IsDeadPhysicsAttackOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsNoDeadTutorial
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsNoDeadTutorial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsNoDeadTutorial");

	Params::RSBattleCharacter_C_IsNoDeadTutorial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableReactionCoefficientInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   OutReactionSRate                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutReactionLRate                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutDownRate                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutCrashRate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutAcceptAll                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsEnableReactionCoefficientInterface(float* OutReactionSRate, float* OutReactionLRate, float* OutDownRate, float* OutCrashRate, bool* OutAcceptAll) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableReactionCoefficientInterface");

	Params::RSBattleCharacter_C_IsEnableReactionCoefficientInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutReactionSRate != nullptr)
		*OutReactionSRate = Parms.OutReactionSRate;

	if (OutReactionLRate != nullptr)
		*OutReactionLRate = Parms.OutReactionLRate;

	if (OutDownRate != nullptr)
		*OutDownRate = Parms.OutDownRate;

	if (OutCrashRate != nullptr)
		*OutCrashRate = Parms.OutCrashRate;

	if (OutAcceptAll != nullptr)
		*OutAcceptAll = Parms.OutAcceptAll;

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CanSetTick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CanSetTick(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CanSetTick");

	Params::RSBattleCharacter_C_CanSetTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsAttractSelfInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsAttractSelfInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsAttractSelfInterface");

	Params::RSBattleCharacter_C_IsAttractSelfInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetGroupID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ARSBattleCharacter_C::GetGroupID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetGroupID");

	Params::RSBattleCharacter_C_GetGroupID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetRootMotionMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   Mode                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetRootMotionMode(uint8* Mode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetRootMotionMode");

	Params::RSBattleCharacter_C_GetRootMotionMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mode != nullptr)
		*Mode = Parms.Mode;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetPointInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          AttackerPos                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattleCharacter_C::GetWeakTargetPointInterface(const struct FVector& AttackerPos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetWeakTargetPointInterface");

	Params::RSBattleCharacter_C_GetWeakTargetPointInterface Parms{};

	Parms.AttackerPos = std::move(AttackerPos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsNoDeadEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsNoDeadEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsNoDeadEvent");

	Params::RSBattleCharacter_C_IsNoDeadEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsNoCrashChanceEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsNoCrashChanceEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsNoCrashChanceEvent");

	Params::RSBattleCharacter_C_IsNoCrashChanceEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsRareSpawnEnemy
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsRareSpawnEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsRareSpawnEnemy");

	Params::RSBattleCharacter_C_IsRareSpawnEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CheckRareSpawnHpRateCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::CheckRareSpawnHpRateCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CheckRareSpawnHpRateCPP");

	Params::RSBattleCharacter_C_CheckRareSpawnHpRateCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.CanSetTickDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CanSetTickDistance(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CanSetTickDistance");

	Params::RSBattleCharacter_C_CanSetTickDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsSimulatorStartDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsSimulatorStartDirection(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsSimulatorStartDirection");

	Params::RSBattleCharacter_C_IsSimulatorStartDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsNotApplyPhotoModeMeshProfile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bNotApply                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsNotApplyPhotoModeMeshProfile(bool* bNotApply) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsNotApplyPhotoModeMeshProfile");

	Params::RSBattleCharacter_C_IsNotApplyPhotoModeMeshProfile Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNotApply != nullptr)
		*bNotApply = Parms.bNotApply;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsControlPlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsControlPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsControlPlayer");

	Params::RSBattleCharacter_C_IsControlPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBerserkCharacter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsBerserkCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBerserkCharacter");

	Params::RSBattleCharacter_C_IsBerserkCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetIsBattleMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsBattleMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::GetIsBattleMode(bool* IsBattleMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetIsBattleMode");

	Params::RSBattleCharacter_C_GetIsBattleMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattleMode != nullptr)
		*IsBattleMode = Parms.IsBattleMode;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsCurrentAttackAttributeAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EAttackAttribute                        Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsCurrentAttackAttributeAI(EAttackAttribute Attribute, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsCurrentAttackAttributeAI");

	Params::RSBattleCharacter_C_IsCurrentAttackAttributeAI Parms{};

	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bDead                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsDead(bool* bDead) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDead");

	Params::RSBattleCharacter_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDead != nullptr)
		*bDead = Parms.bDead;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusConfusion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusConfusion(bool* bBadStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusConfusion");

	Params::RSBattleCharacter_C_IsBadStatusConfusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusOil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusOil(bool* bBadStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusOil");

	Params::RSBattleCharacter_C_IsBadStatusOil Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFlooded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusFlooded(bool* bBadStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusFlooded");

	Params::RSBattleCharacter_C_IsBadStatusFlooded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusElectric
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusElectric(bool* bBadStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusElectric");

	Params::RSBattleCharacter_C_IsBadStatusElectric Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBadStatusFrame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBadStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBadStatusFrame(bool* bBadStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBadStatusFrame");

	Params::RSBattleCharacter_C_IsBadStatusFrame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBadStatus != nullptr)
		*bBadStatus = Parms.bBadStatus;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetMaxHp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   MaxHp                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetMaxHp(int32* MaxHp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetMaxHp");

	Params::RSBattleCharacter_C_GetMaxHp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxHp != nullptr)
		*MaxHp = Parms.MaxHp;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   HP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHp(int32* HP) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHp");

	Params::RSBattleCharacter_C_GetHp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HP != nullptr)
		*HP = Parms.HP;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHPPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHPPercent(float* Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHPPercent");

	Params::RSBattleCharacter_C_GetHPPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}


// Function RSBattleCharacter.RSBattleCharacter_C.isForceCritical
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsForceCritical(bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "isForceCritical");

	Params::RSBattleCharacter_C_IsForceCritical Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// ETeamKind                               Param_Team                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetTeam(ETeamKind* Param_Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetTeam");

	Params::RSBattleCharacter_C_GetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Team != nullptr)
		*Param_Team = Parms.Param_Team;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bPlayer                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsPlayer(bool* bPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsPlayer");

	Params::RSBattleCharacter_C_IsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPlayer != nullptr)
		*bPlayer = Parms.bPlayer;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnemy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEnemy(bool* bEnemy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnemy");

	Params::RSBattleCharacter_C_IsEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnemy != nullptr)
		*bEnemy = Parms.bEnemy;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsMetalMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bMetal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsMetalMode(bool* bMetal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsMetalMode");

	Params::RSBattleCharacter_C_IsMetalMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMetal != nullptr)
		*bMetal = Parms.bMetal;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          AttackerPos                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetWeakTargetPoint(const struct FVector& AttackerPos, struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetWeakTargetPoint");

	Params::RSBattleCharacter_C_GetWeakTargetPoint Parms{};

	Parms.AttackerPos = std::move(AttackerPos);

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetTopTargetPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetTopTargetPoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetTopTargetPoint");

	Params::RSBattleCharacter_C_GetTopTargetPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakUIPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetWeakUIPoint(int32 Param_Index, struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetWeakUIPoint");

	Params::RSBattleCharacter_C_GetWeakUIPoint Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetWeakTargetComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  WeakComponent                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetWeakTargetComponent(class USceneComponent** WeakComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetWeakTargetComponent");

	Params::RSBattleCharacter_C_GetWeakTargetComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeakComponent != nullptr)
		*WeakComponent = Parms.WeakComponent;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetNotifyAttackData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FFNotifyAttackData               Data                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetNotifyAttackData(struct FFNotifyAttackData* Data) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetNotifyAttackData");

	Params::RSBattleCharacter_C_GetNotifyAttackData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function RSBattleCharacter.RSBattleCharacter_C.CanTakeBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    CanTake                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::CanTakeBrainField(bool* CanTake) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "CanTakeBrainField");

	Params::RSBattleCharacter_C_CanTakeBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanTake != nullptr)
		*CanTake = Parms.CanTake;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsHitWeak_ChangeDefaultEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ChangeDefault                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsHitWeak_ChangeDefaultEffect(bool* ChangeDefault) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsHitWeak_ChangeDefaultEffect");

	Params::RSBattleCharacter_C_IsHitWeak_ChangeDefaultEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDefault != nullptr)
		*ChangeDefault = Parms.ChangeDefault;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableSlashEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEnableSlashEffect(struct FHCHitResult& HitResult, bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableSlashEffect");

	Params::RSBattleCharacter_C_IsEnableSlashEffect Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsBrainCrashAccessInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bAccess                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsBrainCrashAccessInterface(bool* bAccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsBrainCrashAccessInterface");

	Params::RSBattleCharacter_C_IsBrainCrashAccessInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAccess != nullptr)
		*bAccess = Parms.bAccess;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetAutoAimRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetAutoAimRate(float* Rate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetAutoAimRate");

	Params::RSBattleCharacter_C_GetAutoAimRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterLV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   LV                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCharacterLV(int32* LV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharacterLV");

	Params::RSBattleCharacter_C_GetCharacterLV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LV != nullptr)
		*LV = Parms.LV;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEnableReactionCoefficient
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReactionSRate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReactionLRate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DownRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CrashRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAcceptAll                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsEnableReactionCoefficient(bool* bEnable, float* ReactionSRate, float* ReactionLRate, float* DownRate, float* CrashRate, bool* bAcceptAll) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEnableReactionCoefficient");

	Params::RSBattleCharacter_C_IsEnableReactionCoefficient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;

	if (ReactionSRate != nullptr)
		*ReactionSRate = Parms.ReactionSRate;

	if (ReactionLRate != nullptr)
		*ReactionLRate = Parms.ReactionLRate;

	if (DownRate != nullptr)
		*DownRate = Parms.DownRate;

	if (CrashRate != nullptr)
		*CrashRate = Parms.CrashRate;

	if (bAcceptAll != nullptr)
		*bAcceptAll = Parms.bAcceptAll;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsAttackerMainPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bMainPlayer                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsAttackerMainPlayer(bool* bMainPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsAttackerMainPlayer");

	Params::RSBattleCharacter_C_IsAttackerMainPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMainPlayer != nullptr)
		*bMainPlayer = Parms.bMainPlayer;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCharacterReplaceSkillTable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UDataTable*                       Original                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       SkillTable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCharacterReplaceSkillTable(class UDataTable* Original, class UDataTable** SkillTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCharacterReplaceSkillTable");

	Params::RSBattleCharacter_C_GetCharacterReplaceSkillTable Parms{};

	Parms.Original = Original;

	UObject::ProcessEvent(Func, &Parms);

	if (SkillTable != nullptr)
		*SkillTable = Parms.SkillTable;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsOnGround
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsOnGround(bool bIncludeObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsOnGround");

	Params::RSBattleCharacter_C_IsOnGround Parms{};

	Parms.bIncludeObject = bIncludeObject;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsDisableDamageHit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsDisableDamageHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsDisableDamageHit");

	Params::RSBattleCharacter_C_IsDisableDamageHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInvisibleHPGauge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInvisible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsInvisibleHPGauge(bool* bInvisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInvisibleHPGauge");

	Params::RSBattleCharacter_C_IsInvisibleHPGauge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInvisible != nullptr)
		*bInvisible = Parms.bInvisible;
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetTargetCursorPoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetTargetCursorPoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetTargetCursorPoint");

	Params::RSBattleCharacter_C_GetTargetCursorPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetHpGaugePoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetHpGaugePoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetHpGaugePoint");

	Params::RSBattleCharacter_C_GetHpGaugePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.GetCrashChanceCursorPoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattleCharacter_C::GetCrashChanceCursorPoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "GetCrashChanceCursorPoint");

	Params::RSBattleCharacter_C_GetCrashChanceCursorPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsSpawnWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bSpawnWait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsSpawnWait(bool* bSpawnWait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsSpawnWait");

	Params::RSBattleCharacter_C_IsSpawnWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSpawnWait != nullptr)
		*bSpawnWait = Parms.bSpawnWait;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsInvisibleMiniMap
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsInvisibleMiniMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsInvisibleMiniMap");

	Params::RSBattleCharacter_C_IsInvisibleMiniMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsHpGaugeAlwaysMax
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bAlwaysMax                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattleCharacter_C::IsHpGaugeAlwaysMax(bool* bAlwaysMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsHpGaugeAlwaysMax");

	Params::RSBattleCharacter_C_IsHpGaugeAlwaysMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAlwaysMax != nullptr)
		*bAlwaysMax = Parms.bAlwaysMax;
}


// Function RSBattleCharacter.RSBattleCharacter_C.IsEmphasisCrashGauge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattleCharacter_C::IsEmphasisCrashGauge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattleCharacter_C", "IsEmphasisCrashGauge");

	Params::RSBattleCharacter_C_IsEmphasisCrashGauge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

