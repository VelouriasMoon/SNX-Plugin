#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MakeEventActorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FEventInitSettingData_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MakeEventActorBase.BP_MakeEventActorBase_C
// 0x0068 (0x0478 - 0x0410)
class ABP_MakeEventActorBase_C : public AMakeEventActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CallLoadMessageEvent;                              // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CallUnloadMessageEvent;                            // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AMainEventLatentActor*                  SubEventLatenter;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPause;                                           // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A54[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DilationName;                                      // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         HighSpeedDilationTime;                             // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEventInitSettingData                 EventSettingData;                                  // 0x0464(0x0006)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBrainTalkBP;                                     // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A55[0x1];                                     // 0x046B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventUnControlMgrFlags;                            // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualPrestremTextures;                            // 0x0470(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetupPrestreamTextures;                            // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void CallLoadMessageEvent__DelegateSignature();
	void CallUnloadMessageEvent__DelegateSignature();
	void ExecuteUbergraph_BP_MakeEventActorBase(int32 EntryPoint);
	void SubEvent(class AMainEventLatentActor* Latenter);
	void StartEvent();
	void ReceiveBeginPlay();
	void OnStartGameEventNative();
	void SeamlessStartEvent();
	void SettingCaptureNewStatic(int32 CaptureActorIndex, int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaBodyAnimationSectionName, class FName CharaFaceAnimationSectionName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequnece, float CaptureSequnecePositon, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsSeamlessInGameCapture, bool IsUseSaveTexture, bool IsHiddenPlFrameEffect, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, EEventCaptureRenderType RenderType, float ToneMapCounterValue);
	void ComandStartBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimNamePath, const class FString& MessageLabel, float MessageDelayTime, int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaBodyAnimationSectionName, class FName CharaFaceAnimationSectionName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class FName TextureRowName, class UAnimMontage* AddAnimMontage, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EndHighSpeedMode();
	void StartHighSpeedMode();
	void AfterSettingEvent(class AMainEventLatentActor* Latenter);
	void InitBPEvent(class AMainEventLatentActor* Latenter);
	void StartSpecialBoadAnimation(int32 SpecialCaptureActorIndex, int32 BoardMeshIndex, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName AttachPointName, const class FString& SpecialNodeAnimNamePath, class FName BeforeStaticAttachJointName, bool IsResetAttach);
	void CommandStartGeneralBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, TSoftObjectPtr<class UCurveFloat> BoardAnimPlayRateCurve, const class FString& MessageLabel, float MessageDelayTime, int32 BoardMeshIndex, class FName CapturePresetName, class FName CharaBodyAnimationSectionName, class FName CharaFaceAnimationSectionName, class FName LightPresetName, int32 AttachBoardIndex, class ULevelSequence* CaptureSequnece, float CaptureSequnecePositon, class FName TextureRowName, class UAnimMontage* AddAnimMontage, bool IsUsePPMMoveBlur, const struct FVector2D& PPMMoveBlurVector, TSoftObjectPtr<class UCurveFloat> PPMMoveBlurCurve, bool IsUseSaveTexture);
	void BPEventEnd();
	void EventUnloadMessage();
	void EventLoadMessage();
	void UserConstructionScript();
	void CloseSystemMessage();
	void OpenSystemMessage(const class FString& MessageLabel);
	void OnStartGameEvent();
	void OpenGeneralSystemMessage(const class FString& MessageID, ETextType TextType);
	void SetOwnerActorToAjitoMember(const class FString& CharaID, bool* Return);
	bool IsSeamlessStart();
	void SetupEventPrestreamTextures(bool* UsePrestream);
	void OnStartGameAjitoStayEventBP(class FName ForCharaID, class FName DTRowName);
	void IsAjitoTVEvent(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MakeEventActorBase_C">();
	}
	static class ABP_MakeEventActorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MakeEventActorBase_C>();
	}
};
static_assert(alignof(ABP_MakeEventActorBase_C) == 0x000008, "Wrong alignment on ABP_MakeEventActorBase_C");
static_assert(sizeof(ABP_MakeEventActorBase_C) == 0x000478, "Wrong size on ABP_MakeEventActorBase_C");
static_assert(offsetof(ABP_MakeEventActorBase_C, UberGraphFrame) == 0x000410, "Member 'ABP_MakeEventActorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, DefaultSceneRoot) == 0x000418, "Member 'ABP_MakeEventActorBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, CallLoadMessageEvent) == 0x000420, "Member 'ABP_MakeEventActorBase_C::CallLoadMessageEvent' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, CallUnloadMessageEvent) == 0x000430, "Member 'ABP_MakeEventActorBase_C::CallUnloadMessageEvent' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, SubEventLatenter) == 0x000440, "Member 'ABP_MakeEventActorBase_C::SubEventLatenter' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, IsPause) == 0x000448, "Member 'ABP_MakeEventActorBase_C::IsPause' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, DilationName) == 0x000450, "Member 'ABP_MakeEventActorBase_C::DilationName' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, HighSpeedDilationTime) == 0x000460, "Member 'ABP_MakeEventActorBase_C::HighSpeedDilationTime' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, EventSettingData) == 0x000464, "Member 'ABP_MakeEventActorBase_C::EventSettingData' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, IsBrainTalkBP) == 0x00046A, "Member 'ABP_MakeEventActorBase_C::IsBrainTalkBP' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, EventUnControlMgrFlags) == 0x00046C, "Member 'ABP_MakeEventActorBase_C::EventUnControlMgrFlags' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, ManualPrestremTextures) == 0x000470, "Member 'ABP_MakeEventActorBase_C::ManualPrestremTextures' has a wrong offset!");
static_assert(offsetof(ABP_MakeEventActorBase_C, SetupPrestreamTextures) == 0x000471, "Member 'ABP_MakeEventActorBase_C::SetupPrestreamTextures' has a wrong offset!");

}

