#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackEmitter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FAttackEmitterInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "EAttackEmitterMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AttackEmitter.BP_AttackEmitter_C
// 0x0070 (0x0130 - 0x00C0)
class UBP_AttackEmitter_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 AttackActorClass;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFAttackEmitterInfo>            AttackInfoArray;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Interval;                                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackIndex;                                       // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             Timer;                                             // 0x00EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnable;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_820C[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttackPos;                                         // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackDir;                                         // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_820D[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetArray;                                       // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackEmitterMode                            AttackMode;                                        // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AttackEmitter(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Start(class UClass* Param_Class, TArray<struct FFAttackEmitterInfo>& AttackInfo, float Param_Interval, EAttackEmitterMode Mode);
	void Update();
	void SetAttack(int32 Param_Index);
	void End();
	void SetAttackSearchEnemy(int32 Attack_index_in);
	void SetAttackLockonTarget(int32 Param_Index);
	void SetAttackCrashVisionShockWave(int32 Param_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AttackEmitter_C">();
	}
	static class UBP_AttackEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AttackEmitter_C>();
	}
};
static_assert(alignof(UBP_AttackEmitter_C) == 0x000008, "Wrong alignment on UBP_AttackEmitter_C");
static_assert(sizeof(UBP_AttackEmitter_C) == 0x000130, "Wrong size on UBP_AttackEmitter_C");
static_assert(offsetof(UBP_AttackEmitter_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_AttackEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackActorClass) == 0x0000C8, "Member 'UBP_AttackEmitter_C::AttackActorClass' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackInfoArray) == 0x0000D0, "Member 'UBP_AttackEmitter_C::AttackInfoArray' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, Interval) == 0x0000E0, "Member 'UBP_AttackEmitter_C::Interval' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, Num) == 0x0000E4, "Member 'UBP_AttackEmitter_C::Num' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackIndex) == 0x0000E8, "Member 'UBP_AttackEmitter_C::AttackIndex' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, Timer) == 0x0000EC, "Member 'UBP_AttackEmitter_C::Timer' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, bEnable) == 0x0000F8, "Member 'UBP_AttackEmitter_C::bEnable' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackPos) == 0x0000FC, "Member 'UBP_AttackEmitter_C::AttackPos' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackDir) == 0x000108, "Member 'UBP_AttackEmitter_C::AttackDir' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, TargetArray) == 0x000118, "Member 'UBP_AttackEmitter_C::TargetArray' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, TargetIndex) == 0x000128, "Member 'UBP_AttackEmitter_C::TargetIndex' has a wrong offset!");
static_assert(offsetof(UBP_AttackEmitter_C, AttackMode) == 0x00012C, "Member 'UBP_AttackEmitter_C::AttackMode' has a wrong offset!");

}

