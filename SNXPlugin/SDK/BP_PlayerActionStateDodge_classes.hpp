#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateDodge

#include "Basic.hpp"

#include "EPlayerDodgeType_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_PlayerActionStateCommonBase_classes.hpp"
#include "EPlayerTurnBackTransitionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerActionStateDodge.BP_PlayerActionStateDodge_C
// 0x0050 (0x0138 - 0x00E8)
class UBP_PlayerActionStateDodge_C final : public UBP_PlayerActionStateCommonBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerActionStateDodge_C;        // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bTransitionSprint;                                 // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93CB[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DodgeDir;                                          // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRotate;                                           // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerDodgeType                              DodgeType;                                         // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93CC[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0104(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlyingDodge;                                      // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerAnimDir                                DodgeAnimDir;                                      // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDodgeDiagonally;                                  // 0x010E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93CD[0x1];                                     // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             JustDodgeCheckTimer;                               // 0x0110(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerDodgeType                              DodgeAnimType;                                     // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93CE[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             InvalidDamageTimer;                                // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PARAM_DodgeInvincibleTime;                         // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceBackStep;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerActionStateDodge(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RotateToTarget();
	void CheckDodgeEnd(bool* bEnd);
	int32 Enter(int32 Param);
	int32 Update();
	bool Transition();
	int32 Exit(int32 NextStateIndex);
	void IsDodgeDiagonally(bool* bEnable);
	void IsCheckTurnBack(bool* bTurnBack);
	void SetInvalidDamage(bool bInvalid);
	void SetSuperArmor(bool bEnable);
	void IsRotateToTarget(const struct FVector& InInputDir, const struct FVector& InTargetDir, const struct FVector& InForwardDir, bool* Param_bRotate);

	void CheckSprint(bool* bSprint) const;
	void CalcDodgeAnimDir(const struct FVector& InDodgeDir, const struct FVector& InForwardDir, EPlayerAnimDir* AnimDir, struct FRotator* Rotate) const;
	void CheckTurnBack(bool* bTurnBack) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerActionStateDodge_C">();
	}
	static class UBP_PlayerActionStateDodge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerActionStateDodge_C>();
	}
};
static_assert(alignof(UBP_PlayerActionStateDodge_C) == 0x000008, "Wrong alignment on UBP_PlayerActionStateDodge_C");
static_assert(sizeof(UBP_PlayerActionStateDodge_C) == 0x000138, "Wrong size on UBP_PlayerActionStateDodge_C");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, UberGraphFrame_BP_PlayerActionStateDodge_C) == 0x0000E8, "Member 'UBP_PlayerActionStateDodge_C::UberGraphFrame_BP_PlayerActionStateDodge_C' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, bTransitionSprint) == 0x0000F0, "Member 'UBP_PlayerActionStateDodge_C::bTransitionSprint' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, DodgeDir) == 0x0000F4, "Member 'UBP_PlayerActionStateDodge_C::DodgeDir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, bRotate) == 0x000100, "Member 'UBP_PlayerActionStateDodge_C::bRotate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, DodgeType) == 0x000101, "Member 'UBP_PlayerActionStateDodge_C::DodgeType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, ClaimantName) == 0x000104, "Member 'UBP_PlayerActionStateDodge_C::ClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, bFlyingDodge) == 0x00010C, "Member 'UBP_PlayerActionStateDodge_C::bFlyingDodge' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, DodgeAnimDir) == 0x00010D, "Member 'UBP_PlayerActionStateDodge_C::DodgeAnimDir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, bDodgeDiagonally) == 0x00010E, "Member 'UBP_PlayerActionStateDodge_C::bDodgeDiagonally' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, JustDodgeCheckTimer) == 0x000110, "Member 'UBP_PlayerActionStateDodge_C::JustDodgeCheckTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, DodgeAnimType) == 0x00011C, "Member 'UBP_PlayerActionStateDodge_C::DodgeAnimType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, InvalidDamageTimer) == 0x000120, "Member 'UBP_PlayerActionStateDodge_C::InvalidDamageTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, PARAM_DodgeInvincibleTime) == 0x00012C, "Member 'UBP_PlayerActionStateDodge_C::PARAM_DodgeInvincibleTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerActionStateDodge_C, bForceBackStep) == 0x000130, "Member 'UBP_PlayerActionStateDodge_C::bForceBackStep' has a wrong offset!");

}

