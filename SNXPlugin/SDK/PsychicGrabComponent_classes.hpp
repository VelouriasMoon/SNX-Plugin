#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PsychicGrabComponent

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PsychicGrabButtonType_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PsychicObjectAttackType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PsychicGrabComponent.PsychicGrabComponent_C
// 0x0468 (0x0528 - 0x00C0)
class UPsychicGrabComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APsychicObjectManager_C*                PsyObjManager;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        GrabOwner;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SearchList;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       GrabList;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  EmptyGrabList;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SearchUniqueList;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       UniqueList;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  EmptyUniqueList;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       BrainList;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  EmptyBrainList;                                    // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SourceList;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SourceCount;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F99[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EmptySourceList;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       ReleaseList;                                       // 0x0180(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ReleaseCount;                                      // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9A[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PsychicObjectBasic_C*>       RequestObjList;                                    // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 RequestIndexList;                                  // 0x01A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       ButtonList;                                        // 0x01B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 GrabObjCountList;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 GrabObjCountWorkList;                              // 0x01D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         GrabObjCountUnique;                                // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9B[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        BrainPosList;                                      // 0x01F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 BrainZoneList;                                     // 0x0200(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         DeltaPsychic;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaRate;                                         // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPsychicCaptrue;                                   // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEasingFunc                                   EasingScanAlpha;                                   // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   EasingScanPercent;                                 // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9C[0x1];                                     // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureFieldOffsetZ;                               // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshScaleTime;                                     // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshScaleRate;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CaptureMaterial;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabGaugeAdd;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrabGaugeTimer;                                    // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  bButtonShowList;                                   // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  bButtonEnableList;                                 // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  bActionPressed;                                    // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  bShowList;                                         // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPsychicCombo;                                     // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9D[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotMax;                                           // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StackMax;                                          // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabMax;                                           // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabSkillMax;                                      // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExtraMax;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SourceMax;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueMax;                                         // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueSkillMax;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BrainMax;                                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabObjMax;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabSlotMax;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GrabExMax;                                         // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PageNo;                                            // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDbDispSphere;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispSearchLine;                                 // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispGrabLine;                                   // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispUniqueLine;                                 // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispBrainLine;                                  // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReload;                                           // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicEx;                                        // 0x02BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShieldOn;                                         // 0x02BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	PsychicObjectAttackType::EPsychicObjectAttackType ActionType;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicGrabButtonType                        ActionButton;                                      // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9E[0x2];                                     // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionCombo;                                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowStartRotSpeed;                          // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowStartInitAngle;                         // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowAllLerpTime;                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowAllDelayTime;                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowAllRadiusRandom;                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowAllRotSpeed;                            // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackThrowAllCost;                                // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9F[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AttackThrowAllIndexList;                           // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 AttackThrowAllAngleList;                           // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        AttackThrowAllOffsetList;                          // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBrainField;                                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA0[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrainFieldDistanceBase;                            // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldDistanceRange;                           // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldDistanceGap;                             // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldHeightMin;                               // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldHeightMax;                               // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 BrainIndexList;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BrainFloatTime;                                    // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatTimeRandom;                              // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatHeight;                                  // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFloatHeightRandom;                            // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonChargeTime;                                  // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7FA1[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  bButtonOn;                                         // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 buttonTimer;                                       // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 buttonNotice;                                      // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 BrainAttackObjNum;                                 // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 BrainAttackWaitTime;                               // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniqueSpawn;                                      // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispAttachObj;                                  // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbDispCopyObj;                                    // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsychicGague;                                     // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         PsychicGauge;                                      // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdatePsyActionPress;                              // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionShow;                               // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionEnable;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionCount;                              // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDodgeCheck;                                       // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA2[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DodgeCount;                                        // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               ActionPsyObj;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<E_SASKind>                             SasKind;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PsychicObjectBasic_C*>       SasCopyList;                                       // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bSasCopyUpdate;                                    // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA3[0x7];                                     // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdatePsyActionPress2;                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionShow2;                              // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionEnable2;                            // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePsyActionCount2;                             // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ButtonCountNormal;                                 // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonCountUnique;                                 // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ButtonShowNormal;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ButtonShowUnique;                                  // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ButtonEnableNormal;                                // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ButtonEnableUnique;                                // 0x0473(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNewAttach;                                        // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCameraRot;                                        // 0x0475(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA4[0x2];                                     // 0x0476(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CameraRot;                                         // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CameraRotHrz;                                      // 0x0484(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstance*                      CaptureMaxMaterial;                                // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueRadiusBase;                                 // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueRadiusSkill;                                // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueRadius;                                     // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkillReloadTimeRate;                               // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               LiftUpThrowObj;                                    // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CaptureFieldMaxScalar;                             // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   CaptureFieldMaxVector;                             // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 CaptureFieldBaseScalar;                            // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   CaptureFieldBaseVector;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 CaptureFieldScalarIndex;                           // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 CaptureFieldVectorIndex;                           // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CaptrueMaxRate;                                    // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueAnimationTime;                              // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueAnimationSpeedBase;                         // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueAnimationSpeedMax;                          // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptrueMaxInterpolateScale;                        // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdatePsyActionPress__DelegateSignature(EPsychicGrabButtonType button_type, bool Press, bool Psychic_combo, int32 Obj_count);
	void UpdatePsyActionShow__DelegateSignature(EPsychicGrabButtonType button_type, bool Show, int32 Obj_count);
	void UpdatePsyActionEnable__DelegateSignature(EPsychicGrabButtonType button_type, bool Enable, int32 Obj_count);
	void UpdatePsyActionCount__DelegateSignature(EPsychicGrabButtonType button_type, int32 Obj_count);
	void UpdatePsyActionPress2__DelegateSignature(bool Unique, bool Press, bool Psychic_combo, int32 Obj_count);
	void UpdatePsyActionShow2__DelegateSignature(bool Unique, bool Show, int32 Obj_count);
	void UpdatePsyActionEnable2__DelegateSignature(bool Unique, bool Enable, int32 Obj_count);
	void UpdatePsyActionCount2__DelegateSignature(bool Unique, int32 Obj_count);
	void ExecuteUbergraph_PsychicGrabComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Initialize(class USphereComponent* Collision);
	void Update();
	void UpdateGrabList();
	void DebugDisplay();
	void ThrowAll();
	void AddSearchListOld(class AActor* Actor_in);
	void UpdateSearchList();
	void GetGrabObjByIndex(int32 Param_Index, bool* Valid, class ABP_PsychicObjectBasic_C** GrabObj);
	void GetAttachPosByIndex(int32 Table_index, class FName Socket_name, bool Is_float_pos, bool* Valid, struct FVector* Pos);
	void DebugDisplaySearch();
	void InputPsychicCaptrue(bool bActive, bool* Return);
	void GetTargetActor(class AActor** TargetActor);
	void UpdateCaptureField();
	void AddGrabList(class AActor* Grab_obj_in, int32 Grab_index_in, bool* Return);
	void CheckSlotStack(int32 SlotNo, int32 StackNo, bool* Return, class ABP_PsychicObjectBasic_C** PsyObj, int32* GrabIndex);
	void ConvSlotToAttackType(int32 Slot_no_in, bool bReverse, PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in, PsychicObjectAttackType::EPsychicObjectAttackType* Attack_type_out, int32* Slot_no_out);
	void ConvSlotStackToGrabIndex(int32 Slot, int32 Stack, int32* GrabIndex);
	void ConvGrabIndexToSlotStack(int32 GrabIndex, int32* Slot, int32* Stack);
	void AnyEmptyGrabSlot(bool* Return);
	void ConvButtonTypeToAttackType(EPsychicGrabButtonType button_type_in, PsychicObjectAttackType::EPsychicObjectAttackType AttackType_in, PsychicObjectAttackType::EPsychicObjectAttackType* Attack_type_out, EPsychicGrabButtonType* button_type_out);
	void InputPsychicAction(EPsychicGrabButtonType button_type_in, bool Psychic_combo_in, bool Psychic_ex_in, bool* Valid);
	void GetPsychicDeltaSecond(bool bPsychicSpeed, bool bGetRate, float* Delta_second, float* Rate);
	void UpdateReload();
	void AddAttachList(bool Flag_in, class AActor* Psy_obj_in, int32 Index_in, float Speed_rate, const struct FVector& Pos_rate, const struct FVector& Rot_rate, bool bResetPos, bool bForceAttach);
	void RequestPsychicCombo(EPsychicGrabButtonType button_type_in, class ABP_PsychicObjectBasic_C* Psy_obj_in, bool* Return);
	void UpdateGrabObjCount();
	void GetGrabObjCount(EPsychicGrabButtonType button_type, int32* Count);
	void RemoveGrabList(class AActor* Psy_obj, bool Reload_check);
	void ConvButtonTypeToGrabIndex(EPsychicGrabButtonType button_type, bool* bSuccess, int32* Grab_index);
	void CanPsychicAction(EPsychicGrabButtonType button_type, bool Param_bPsychicCombo, bool bRequestCombo, bool* bFlag);
	void GetActionCombo(bool* bCombo, int32* Count);
	void GetGrabObjTotal(int32* Total);
	void SetActionCombo(int32 Count, bool bPress, int32 Param_Index);
	void IsActorInRange(class AActor* Actor, float RangeSq, bool* IsInCaptureField);
	void CanGrabButtonShow(EPsychicGrabButtonType button_type, bool* Show);
	void CanGrabButtonUse(EPsychicGrabButtonType button_type, bool* Use);
	void SetButtonList(int32 Param_Index, class ABP_PsychicObjectBasic_C* Psychic_object);
	void ReloadGrabList(class ABP_PsychicObjectBasic_C* Psychic_object, int32 Grab_index, bool bCombo);
	void GetGrabObjByButton(EPsychicGrabButtonType button_type, class ABP_PsychicObjectBasic_C** Psychic_object);
	void GetAnimationLength(EPsychicGrabButtonType button_type, float* Length);
	void GetGrabButtonWorldPos(EPsychicGrabButtonType button_type, bool* Return, struct FVector* World_pos);
	void GetGrabButtonScreenPos(EPsychicGrabButtonType button_type, bool* Return, struct FVector2D* Screen_pos);
	void IsGrabButtonPress(EPsychicGrabButtonType button_type, bool* Press);
	void CallPsychicActionSE(EPsychicGrabButtonType button_type, class AActor* Psychic_object);
	void CallPsychicFieldCloseSE();
	void ResetButtonList();
	void ShuffleThrowAllIndex();
	void GetThrowAllData(int32 Param_Index, int32* Throw_all_index, float* Throw_all_angle, struct FVector* Throw_all_offset);
	void UpdateBrainField(bool* Return);
	void AddBrainList(class ABP_PsychicObjectBasic_C* brain_obj_in, int32 brain_index_in, bool* Return);
	void GetBrainObjByIndex(int32 brain_index_in, bool* Return);
	void UpdateReleaseList();
	void SortBrainList();
	void AddGrabListFromBrain(class ABP_PsychicObjectBasic_C* Grab_obj_in, int32 Grab_index_in, bool* Return);
	void GetNearestObj(PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in, bool Check_unique_in, bool Check_Fade_in, bool bFromBrain_in, bool* Flag, int32* Param_Index, class ABP_PsychicObjectBasic_C** Psy_obj);
	void SetRequest(class ABP_PsychicObjectBasic_C* Psy_obj_in, int32 Request_index_in, bool bFromBrainList);
	void AddReleaseList(class AActor* Actor_in);
	void RequestGrabObj();
	void RequestUniqueObj();
	void RequestBrainObj();
	void UpdateRequestList();
	void ConvUnionIndex(int32 Grab_index_in, int32 Unique_index_in, int32 brain_index_in, int32 Union_index_in, int32* Union_index_out, int32* Grab_index_out, int32* Unique_index_out, int32* brain_index_out);
	void CheckUnionIndex(int32 Union_index_in, bool* Grab_index_out, bool* Unique_index_out, bool* brain_index_out);
	void AddUniqueList(class AActor* Unique_obj_in, int32 Unique_index_in, bool* Return);
	void GetUniqueObjByIndex(int32 Unique_index_in, bool* Return, class ABP_PsychicObjectBasic_C** Psy_obj);
	void GetAnyUniqueObj(bool* Return, class ABP_PsychicObjectBasic_C** Psy_obj);
	void SetPsychicButtonOn(EPsychicGrabButtonType button_type_in, bool Flag_in, bool Is_Unique);
	void UpdatePsychicButton();
	void IsPsychicButtonUnique(EPsychicGrabButtonType button_type_in, bool* Return);
	void IsPsychicButtonNormal(EPsychicGrabButtonType button_type_in, bool* Return);
	void DebugTogglePsychicGrabDisplayOld();
	void DebugRespawnPsychicObjectAllOld();
	void IsPsychicActionExec(EPsychicGrabButtonType button_type_in, bool* Return);
	void AddAttachSwingList(bool Flag_in, class AActor* Psy_obj_in, int32 Index_in);
	void DebugTogglePsyObjLine(bool Search_in, bool Grab_in, bool Unique_in, bool brain_in);
	void DebugDisplayPsyObjLine();
	void GetNormalGrabObjCount(int32* Return_objCount);
	void GetThrowAllCost(float* Throw_all_cost);
	void UpdatePsychicSecond();
	void SetBrainFieldAction(PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in);
	void SetFixListWithCount(TArray<class UObject*>& List_in, int32& Count_in, bool Flag_in, class ABP_PsychicObjectBasic_C* Psy_obj_in, int32 Index_in, int32* Index_out);
	void PrintErrorString(const class FString& Str_in);
	void DebugDisplayAttachObj();
	void SetBrainPos(int32 brain_index_in, struct FVector* brain_pos_out);
	void GetBrainPos(int32 Pos_index_in, struct FVector* brain_pos_out);
	void SetPsychicGauge(int32 Psychic_gauge_in);
	void DebugDrawBrainFieldObj();
	void ConvSlotToButtonType(int32 Slot_in, EPsychicGrabButtonType* button_type_out);
	void SetAttachObjEnable(bool brain_field, int32 Index_in, bool Enable_in, bool Update_pos);
	void UpdateAttachObj();
	void UpdateBrainGrabOld();
	void GetCameraRotation(struct FRotator* Cam_rot_out);
	void PrintPsychicObjectInfo();
	void SetPsyObjTeleport(bool Flag_in, float Time_in);
	void StartAreaChange(TArray<struct FPsychicObjectAreaChangeData>& Area_change_list_in);
	void RestoreAreaChange(TArray<struct FPsychicObjectAreaChangeData>& Area_change_list_in);
	void DisposePsychicObject();
	void SetActionPsyObj(class ABP_PsychicObjectBasic_C*& Psy_obj_in, EPsychicGrabButtonType Action_button_in, class ABP_PsychicObjectBasic_C** Psy_obj);
	void GetActionPsyObj(class ABP_PsychicObjectBasic_C** Psy_obj);
	void FindActionPsyObj(EPsychicGrabButtonType button_type_in, class ABP_PsychicObjectBasic_C** Psy_obj);
	void IsAllAttackEnable(bool* Return);
	void SetSasKind(bool Flag_in, E_SASKind Sas_kind_in);
	void GetSasKind(int32 Idx_in, E_SASKind* Return);
	void GetSasKindList(TArray<E_SASKind>* Return);
	void SetPsyObjStealth(bool Flag_in, float Time_in);
	void GetAttackAction(PsychicObjectAttackType::EPsychicObjectAttackType* Return);
	void SetAttachObjSize(int32 Attach_index_in, class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void SetSasCopy(bool Flag_in);
	void AddSasCopy(class ABP_PsychicObjectBasic_C*& Src_psy_obj_in);
	void GetSasCopyObj(class ABP_PsychicObjectBasic_C*& Src_psy_obj_in, class ABP_PsychicObjectBasic_C** Copy_obj);
	void SetPsychicAction(class ABP_PsychicObjectBasic_C*& Psy_obj_in, class AActor*& Target_in, PsychicObjectAttackType::EPsychicObjectAttackType& Attack_type_in, bool& Psychic_combo_in, bool& Psychic_ex_in, bool* Return);
	void DebugDisplayCopyObj();
	void SetSasCopyAppear(class ABP_PsychicObjectBasic_C*& Psy_obj_in);
	void IsAnyEmptyUnique(bool* Return);
	void IsPsychicObjectShieldActive(bool* Return);
	void SetPsychicOBjectShieldActive(bool Shield_on_in);
	void GetPsychicObjectShield(class ABP_PsychicObjectBasic_C** Psy_obj);
	void IsGrabIndexAttack(int32 Grab_index_in, bool* Return);
	void DebugDisplayEaseGraph();
	void AddAttachListEx(bool Flag_in, int32 Grab_idx_in, class AActor* Psy_obj_in, float Speed_rate_in, const struct FVector& Pos_rate_in, const struct FVector& Rot_rate_in, bool brain_swing_in);
	void SetAttachObjEnableEx();
	void SetAttachObjSizeEx();
	void SetSkillGrabSlot(EPlayerID Player_id_in, float Skill_param_in);
	void GetSkillGrabSlot(bool With_skill, int32* Slot_num);
	void SetSkillUniqueSlot(EPlayerID Player_id_in, float Skill_param_in);
	void GetSkillUniqueSlot(bool With_skill, int32* Slot_num);
	void SetSkillCaptrueRadius(EPlayerID Player_id_in, float Skill_param_in);
	void GetSkillCaptrueRadius(float* Radius);
	void SetSkillReloadTime(EPlayerID Player_id_in, float Skill_param_in);
	void SetLiftUpThrow(EPsychicGrabButtonType button_type_in, class ABP_PsychicObjectBasic_C* Psy_obj_in);
	void PrivateInitializeCaptureFieldMaterial();
	void PrivateUpdateCaptureFieldMaterial();
	void DebugPrintAbolishString(const class FString& Str_in);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PsychicGrabComponent_C">();
	}
	static class UPsychicGrabComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPsychicGrabComponent_C>();
	}
};
static_assert(alignof(UPsychicGrabComponent_C) == 0x000008, "Wrong alignment on UPsychicGrabComponent_C");
static_assert(sizeof(UPsychicGrabComponent_C) == 0x000528, "Wrong size on UPsychicGrabComponent_C");
static_assert(offsetof(UPsychicGrabComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UPsychicGrabComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, PsyObjManager) == 0x0000C8, "Member 'UPsychicGrabComponent_C::PsyObjManager' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabOwner) == 0x0000D0, "Member 'UPsychicGrabComponent_C::GrabOwner' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SearchList) == 0x0000D8, "Member 'UPsychicGrabComponent_C::SearchList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabList) == 0x0000E8, "Member 'UPsychicGrabComponent_C::GrabList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EmptyGrabList) == 0x0000F8, "Member 'UPsychicGrabComponent_C::EmptyGrabList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SearchUniqueList) == 0x000108, "Member 'UPsychicGrabComponent_C::SearchUniqueList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UniqueList) == 0x000118, "Member 'UPsychicGrabComponent_C::UniqueList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EmptyUniqueList) == 0x000128, "Member 'UPsychicGrabComponent_C::EmptyUniqueList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainList) == 0x000138, "Member 'UPsychicGrabComponent_C::BrainList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EmptyBrainList) == 0x000148, "Member 'UPsychicGrabComponent_C::EmptyBrainList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SourceList) == 0x000158, "Member 'UPsychicGrabComponent_C::SourceList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SourceCount) == 0x000168, "Member 'UPsychicGrabComponent_C::SourceCount' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EmptySourceList) == 0x000170, "Member 'UPsychicGrabComponent_C::EmptySourceList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ReleaseList) == 0x000180, "Member 'UPsychicGrabComponent_C::ReleaseList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ReleaseCount) == 0x000190, "Member 'UPsychicGrabComponent_C::ReleaseCount' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, RequestObjList) == 0x000198, "Member 'UPsychicGrabComponent_C::RequestObjList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, RequestIndexList) == 0x0001A8, "Member 'UPsychicGrabComponent_C::RequestIndexList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonList) == 0x0001B8, "Member 'UPsychicGrabComponent_C::ButtonList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabObjCountList) == 0x0001C8, "Member 'UPsychicGrabComponent_C::GrabObjCountList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabObjCountWorkList) == 0x0001D8, "Member 'UPsychicGrabComponent_C::GrabObjCountWorkList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabObjCountUnique) == 0x0001E8, "Member 'UPsychicGrabComponent_C::GrabObjCountUnique' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainPosList) == 0x0001F0, "Member 'UPsychicGrabComponent_C::BrainPosList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainZoneList) == 0x000200, "Member 'UPsychicGrabComponent_C::BrainZoneList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, DeltaPsychic) == 0x000210, "Member 'UPsychicGrabComponent_C::DeltaPsychic' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, DeltaRate) == 0x000214, "Member 'UPsychicGrabComponent_C::DeltaRate' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bPsychicCaptrue) == 0x000218, "Member 'UPsychicGrabComponent_C::bPsychicCaptrue' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EasingScanAlpha) == 0x000219, "Member 'UPsychicGrabComponent_C::EasingScanAlpha' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, EasingScanPercent) == 0x00021A, "Member 'UPsychicGrabComponent_C::EasingScanPercent' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldOffsetZ) == 0x00021C, "Member 'UPsychicGrabComponent_C::CaptureFieldOffsetZ' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, MeshScaleTime) == 0x000220, "Member 'UPsychicGrabComponent_C::MeshScaleTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, MeshScaleRate) == 0x000224, "Member 'UPsychicGrabComponent_C::MeshScaleRate' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, Mid) == 0x000228, "Member 'UPsychicGrabComponent_C::Mid' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureMaterial) == 0x000230, "Member 'UPsychicGrabComponent_C::CaptureMaterial' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabGaugeAdd) == 0x000238, "Member 'UPsychicGrabComponent_C::GrabGaugeAdd' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabGaugeTimer) == 0x00023C, "Member 'UPsychicGrabComponent_C::GrabGaugeTimer' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bButtonShowList) == 0x000240, "Member 'UPsychicGrabComponent_C::bButtonShowList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bButtonEnableList) == 0x000250, "Member 'UPsychicGrabComponent_C::bButtonEnableList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bActionPressed) == 0x000260, "Member 'UPsychicGrabComponent_C::bActionPressed' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bShowList) == 0x000270, "Member 'UPsychicGrabComponent_C::bShowList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bPsychicCombo) == 0x000280, "Member 'UPsychicGrabComponent_C::bPsychicCombo' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SlotMax) == 0x000284, "Member 'UPsychicGrabComponent_C::SlotMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, StackMax) == 0x000288, "Member 'UPsychicGrabComponent_C::StackMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabMax) == 0x00028C, "Member 'UPsychicGrabComponent_C::GrabMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabSkillMax) == 0x000290, "Member 'UPsychicGrabComponent_C::GrabSkillMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ExtraMax) == 0x000294, "Member 'UPsychicGrabComponent_C::ExtraMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SourceMax) == 0x000298, "Member 'UPsychicGrabComponent_C::SourceMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UniqueMax) == 0x00029C, "Member 'UPsychicGrabComponent_C::UniqueMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UniqueSkillMax) == 0x0002A0, "Member 'UPsychicGrabComponent_C::UniqueSkillMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainMax) == 0x0002A4, "Member 'UPsychicGrabComponent_C::BrainMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabObjMax) == 0x0002A8, "Member 'UPsychicGrabComponent_C::GrabObjMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabSlotMax) == 0x0002AC, "Member 'UPsychicGrabComponent_C::GrabSlotMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, GrabExMax) == 0x0002B0, "Member 'UPsychicGrabComponent_C::GrabExMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, PageNo) == 0x0002B4, "Member 'UPsychicGrabComponent_C::PageNo' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispSphere) == 0x0002B8, "Member 'UPsychicGrabComponent_C::bDbDispSphere' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispSearchLine) == 0x0002B9, "Member 'UPsychicGrabComponent_C::bDbDispSearchLine' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispGrabLine) == 0x0002BA, "Member 'UPsychicGrabComponent_C::bDbDispGrabLine' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispUniqueLine) == 0x0002BB, "Member 'UPsychicGrabComponent_C::bDbDispUniqueLine' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispBrainLine) == 0x0002BC, "Member 'UPsychicGrabComponent_C::bDbDispBrainLine' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bReload) == 0x0002BD, "Member 'UPsychicGrabComponent_C::bReload' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bPsychicEx) == 0x0002BE, "Member 'UPsychicGrabComponent_C::bPsychicEx' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bShieldOn) == 0x0002BF, "Member 'UPsychicGrabComponent_C::bShieldOn' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ActionType) == 0x0002C0, "Member 'UPsychicGrabComponent_C::ActionType' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ActionButton) == 0x0002C1, "Member 'UPsychicGrabComponent_C::ActionButton' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ActionCombo) == 0x0002C4, "Member 'UPsychicGrabComponent_C::ActionCombo' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowStartRotSpeed) == 0x0002C8, "Member 'UPsychicGrabComponent_C::AttackThrowStartRotSpeed' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowStartInitAngle) == 0x0002CC, "Member 'UPsychicGrabComponent_C::AttackThrowStartInitAngle' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllLerpTime) == 0x0002D0, "Member 'UPsychicGrabComponent_C::AttackThrowAllLerpTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllDelayTime) == 0x0002D4, "Member 'UPsychicGrabComponent_C::AttackThrowAllDelayTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllRadiusRandom) == 0x0002D8, "Member 'UPsychicGrabComponent_C::AttackThrowAllRadiusRandom' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllRotSpeed) == 0x0002DC, "Member 'UPsychicGrabComponent_C::AttackThrowAllRotSpeed' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllCost) == 0x0002E0, "Member 'UPsychicGrabComponent_C::AttackThrowAllCost' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllIndexList) == 0x0002E8, "Member 'UPsychicGrabComponent_C::AttackThrowAllIndexList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllAngleList) == 0x0002F8, "Member 'UPsychicGrabComponent_C::AttackThrowAllAngleList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, AttackThrowAllOffsetList) == 0x000308, "Member 'UPsychicGrabComponent_C::AttackThrowAllOffsetList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bBrainField) == 0x000318, "Member 'UPsychicGrabComponent_C::bBrainField' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFieldDistanceBase) == 0x00031C, "Member 'UPsychicGrabComponent_C::BrainFieldDistanceBase' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFieldDistanceRange) == 0x000320, "Member 'UPsychicGrabComponent_C::BrainFieldDistanceRange' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFieldDistanceGap) == 0x000324, "Member 'UPsychicGrabComponent_C::BrainFieldDistanceGap' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFieldHeightMin) == 0x000328, "Member 'UPsychicGrabComponent_C::BrainFieldHeightMin' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFieldHeightMax) == 0x00032C, "Member 'UPsychicGrabComponent_C::BrainFieldHeightMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainIndexList) == 0x000330, "Member 'UPsychicGrabComponent_C::BrainIndexList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFloatTime) == 0x000340, "Member 'UPsychicGrabComponent_C::BrainFloatTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFloatTimeRandom) == 0x000344, "Member 'UPsychicGrabComponent_C::BrainFloatTimeRandom' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFloatHeight) == 0x000348, "Member 'UPsychicGrabComponent_C::BrainFloatHeight' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainFloatHeightRandom) == 0x00034C, "Member 'UPsychicGrabComponent_C::BrainFloatHeightRandom' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonChargeTime) == 0x000350, "Member 'UPsychicGrabComponent_C::ButtonChargeTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bButtonOn) == 0x000358, "Member 'UPsychicGrabComponent_C::bButtonOn' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, buttonTimer) == 0x000368, "Member 'UPsychicGrabComponent_C::buttonTimer' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, buttonNotice) == 0x000378, "Member 'UPsychicGrabComponent_C::buttonNotice' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainAttackObjNum) == 0x000388, "Member 'UPsychicGrabComponent_C::BrainAttackObjNum' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, BrainAttackWaitTime) == 0x000398, "Member 'UPsychicGrabComponent_C::BrainAttackWaitTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bUniqueSpawn) == 0x0003A8, "Member 'UPsychicGrabComponent_C::bUniqueSpawn' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispAttachObj) == 0x0003A9, "Member 'UPsychicGrabComponent_C::bDbDispAttachObj' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDbDispCopyObj) == 0x0003AA, "Member 'UPsychicGrabComponent_C::bDbDispCopyObj' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bPsychicGague) == 0x0003AB, "Member 'UPsychicGrabComponent_C::bPsychicGague' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, PsychicGauge) == 0x0003AC, "Member 'UPsychicGrabComponent_C::PsychicGauge' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionPress) == 0x0003B0, "Member 'UPsychicGrabComponent_C::UpdatePsyActionPress' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionShow) == 0x0003C0, "Member 'UPsychicGrabComponent_C::UpdatePsyActionShow' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionEnable) == 0x0003D0, "Member 'UPsychicGrabComponent_C::UpdatePsyActionEnable' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionCount) == 0x0003E0, "Member 'UPsychicGrabComponent_C::UpdatePsyActionCount' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bDodgeCheck) == 0x0003F0, "Member 'UPsychicGrabComponent_C::bDodgeCheck' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, DodgeCount) == 0x0003F4, "Member 'UPsychicGrabComponent_C::DodgeCount' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ActionPsyObj) == 0x0003F8, "Member 'UPsychicGrabComponent_C::ActionPsyObj' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SasKind) == 0x000400, "Member 'UPsychicGrabComponent_C::SasKind' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SasCopyList) == 0x000410, "Member 'UPsychicGrabComponent_C::SasCopyList' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bSasCopyUpdate) == 0x000420, "Member 'UPsychicGrabComponent_C::bSasCopyUpdate' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionPress2) == 0x000428, "Member 'UPsychicGrabComponent_C::UpdatePsyActionPress2' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionShow2) == 0x000438, "Member 'UPsychicGrabComponent_C::UpdatePsyActionShow2' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionEnable2) == 0x000448, "Member 'UPsychicGrabComponent_C::UpdatePsyActionEnable2' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, UpdatePsyActionCount2) == 0x000458, "Member 'UPsychicGrabComponent_C::UpdatePsyActionCount2' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonCountNormal) == 0x000468, "Member 'UPsychicGrabComponent_C::ButtonCountNormal' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonCountUnique) == 0x00046C, "Member 'UPsychicGrabComponent_C::ButtonCountUnique' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonShowNormal) == 0x000470, "Member 'UPsychicGrabComponent_C::ButtonShowNormal' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonShowUnique) == 0x000471, "Member 'UPsychicGrabComponent_C::ButtonShowUnique' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonEnableNormal) == 0x000472, "Member 'UPsychicGrabComponent_C::ButtonEnableNormal' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, ButtonEnableUnique) == 0x000473, "Member 'UPsychicGrabComponent_C::ButtonEnableUnique' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bNewAttach) == 0x000474, "Member 'UPsychicGrabComponent_C::bNewAttach' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, bCameraRot) == 0x000475, "Member 'UPsychicGrabComponent_C::bCameraRot' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CameraRot) == 0x000478, "Member 'UPsychicGrabComponent_C::CameraRot' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CameraRotHrz) == 0x000484, "Member 'UPsychicGrabComponent_C::CameraRotHrz' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureMaxMaterial) == 0x000490, "Member 'UPsychicGrabComponent_C::CaptureMaxMaterial' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueRadiusBase) == 0x000498, "Member 'UPsychicGrabComponent_C::CaptrueRadiusBase' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueRadiusSkill) == 0x00049C, "Member 'UPsychicGrabComponent_C::CaptrueRadiusSkill' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueRadius) == 0x0004A0, "Member 'UPsychicGrabComponent_C::CaptrueRadius' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, SkillReloadTimeRate) == 0x0004A4, "Member 'UPsychicGrabComponent_C::SkillReloadTimeRate' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, LiftUpThrowObj) == 0x0004A8, "Member 'UPsychicGrabComponent_C::LiftUpThrowObj' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldMaxScalar) == 0x0004B0, "Member 'UPsychicGrabComponent_C::CaptureFieldMaxScalar' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldMaxVector) == 0x0004C0, "Member 'UPsychicGrabComponent_C::CaptureFieldMaxVector' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldBaseScalar) == 0x0004D0, "Member 'UPsychicGrabComponent_C::CaptureFieldBaseScalar' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldBaseVector) == 0x0004E0, "Member 'UPsychicGrabComponent_C::CaptureFieldBaseVector' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldScalarIndex) == 0x0004F0, "Member 'UPsychicGrabComponent_C::CaptureFieldScalarIndex' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptureFieldVectorIndex) == 0x000500, "Member 'UPsychicGrabComponent_C::CaptureFieldVectorIndex' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueMaxRate) == 0x000510, "Member 'UPsychicGrabComponent_C::CaptrueMaxRate' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueAnimationTime) == 0x000514, "Member 'UPsychicGrabComponent_C::CaptrueAnimationTime' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueAnimationSpeedBase) == 0x000518, "Member 'UPsychicGrabComponent_C::CaptrueAnimationSpeedBase' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueAnimationSpeedMax) == 0x00051C, "Member 'UPsychicGrabComponent_C::CaptrueAnimationSpeedMax' has a wrong offset!");
static_assert(offsetof(UPsychicGrabComponent_C, CaptrueMaxInterpolateScale) == 0x000520, "Member 'UPsychicGrabComponent_C::CaptrueMaxInterpolateScale' has a wrong offset!");

}

