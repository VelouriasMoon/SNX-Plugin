#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerHardenComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.ExecuteUbergraph_BP_PlayerHardenComponent
// 0x000C (0x000C - 0x0000)
struct BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414F[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent");
static_assert(sizeof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent) == 0x00000C, "Wrong size on BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent");
static_assert(offsetof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_PlayerHardenComponent_C_ExecuteUbergraph_BP_PlayerHardenComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHardenComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerHardenComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerHardenComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerHardenComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerHardenComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.Initialize
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerHardenComponent_C_Initialize final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4150[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_Initialize) == 0x000008, "Wrong alignment on BP_PlayerHardenComponent_C_Initialize");
static_assert(sizeof(BP_PlayerHardenComponent_C_Initialize) == 0x000030, "Wrong size on BP_PlayerHardenComponent_C_Initialize");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_PlayerHardenComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000008, "Member 'BP_PlayerHardenComponent_C_Initialize::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_PlayerHardenComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, CallFunc_GetOwner_ReturnValue_1) == 0x000018, "Member 'BP_PlayerHardenComponent_C_Initialize::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, K2Node_DynamicCast_AsRSBattle_Player) == 0x000020, "Member 'BP_PlayerHardenComponent_C_Initialize::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_Initialize, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_PlayerHardenComponent_C_Initialize::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SetHarden
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerHardenComponent_C_SetHarden final
{
public:
	bool                                          Harden_on_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4151[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Harden_time_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LImmediateEnd;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LPrevFlag;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4152[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4153[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_GetEnpcComp_self_CastInput;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4154[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4155[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SetHarden) == 0x000008, "Wrong alignment on BP_PlayerHardenComponent_C_SetHarden");
static_assert(sizeof(BP_PlayerHardenComponent_C_SetHarden) == 0x000060, "Wrong size on BP_PlayerHardenComponent_C_SetHarden");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, Harden_on_in) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SetHarden::Harden_on_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, Harden_time_in) == 0x000004, "Member 'BP_PlayerHardenComponent_C_SetHarden::Harden_time_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, LImmediateEnd) == 0x000008, "Member 'BP_PlayerHardenComponent_C_SetHarden::LImmediateEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, LPrevFlag) == 0x000009, "Member 'BP_PlayerHardenComponent_C_SetHarden::LPrevFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00000A, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsEnable_ReturnValue) == 0x00000B, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, Temp_float_Variable) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_SetHarden::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000014, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_GetTimeRange_MinTime) == 0x000024, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_GetTimeRange_MaxTime) == 0x000028, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, Temp_float_Variable_1) == 0x00002C, "Member 'BP_PlayerHardenComponent_C_SetHarden::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_GetEnpcComp_self_CastInput) == 0x000030, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_GetEnpcComp_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_GetEnpcComp_ReturnComp) == 0x000040, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsValid_ReturnValue_3) == 0x000048, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_GetDebuggingManager_Manager) == 0x000050, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsValid_ReturnValue_4) == 0x000058, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, CallFunc_IsEnable_ReturnValue_1) == 0x000059, "Member 'BP_PlayerHardenComponent_C_SetHarden::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, Temp_bool_Variable) == 0x00005A, "Member 'BP_PlayerHardenComponent_C_SetHarden::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHarden, K2Node_Select_Default) == 0x00005C, "Member 'BP_PlayerHardenComponent_C_SetHarden::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.IsHarden
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerHardenComponent_C_IsHarden final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_IsHarden) == 0x000001, "Wrong alignment on BP_PlayerHardenComponent_C_IsHarden");
static_assert(sizeof(BP_PlayerHardenComponent_C_IsHarden) == 0x000001, "Wrong size on BP_PlayerHardenComponent_C_IsHarden");
static_assert(offsetof(BP_PlayerHardenComponent_C_IsHarden, Return) == 0x000000, "Member 'BP_PlayerHardenComponent_C_IsHarden::Return' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.GetHardenDamageCutRate
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerHardenComponent_C_GetHardenDamageCutRate final
{
public:
	float                                         Damage_cut_rate;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_GetHardenDamageCutRate) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_GetHardenDamageCutRate");
static_assert(sizeof(BP_PlayerHardenComponent_C_GetHardenDamageCutRate) == 0x000008, "Wrong size on BP_PlayerHardenComponent_C_GetHardenDamageCutRate");
static_assert(offsetof(BP_PlayerHardenComponent_C_GetHardenDamageCutRate, Damage_cut_rate) == 0x000000, "Member 'BP_PlayerHardenComponent_C_GetHardenDamageCutRate::Damage_cut_rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_GetHardenDamageCutRate, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerHardenComponent_C_GetHardenDamageCutRate::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SetSasHarden
// 0x001C (0x001C - 0x0000)
struct BP_PlayerHardenComponent_C_SetSasHarden final
{
public:
	bool                                          Harden_on_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4156[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LLerpTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbRestriction;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SetSasHarden) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_SetSasHarden");
static_assert(sizeof(BP_PlayerHardenComponent_C_SetSasHarden) == 0x00001C, "Wrong size on BP_PlayerHardenComponent_C_SetSasHarden");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, Harden_on_in) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::Harden_on_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, LLerpTime) == 0x000004, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::LLerpTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, LbRestriction) == 0x000008, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::LbRestriction' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsPlayerStatus_Result) == 0x000009, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsPlayerStatus_Result_1) == 0x00000A, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsEnableSASEffect_bEnable) == 0x00000B, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsEnableSASEffect_Param0) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsEnableSASEffect_Param1) == 0x000010, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsEnableSASEffect_Param2) == 0x000014, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetSasHarden, CallFunc_IsEnableSASEffect_Param3) == 0x000018, "Member 'BP_PlayerHardenComponent_C_SetSasHarden::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.isGuardBadStatus
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerHardenComponent_C_IsGuardBadStatus final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_IsGuardBadStatus) == 0x000001, "Wrong alignment on BP_PlayerHardenComponent_C_IsGuardBadStatus");
static_assert(sizeof(BP_PlayerHardenComponent_C_IsGuardBadStatus) == 0x000001, "Wrong size on BP_PlayerHardenComponent_C_IsGuardBadStatus");
static_assert(offsetof(BP_PlayerHardenComponent_C_IsGuardBadStatus, Return) == 0x000000, "Member 'BP_PlayerHardenComponent_C_IsGuardBadStatus::Return' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.CheckAutoHarden
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerHardenComponent_C_CheckAutoHarden final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_BattleMemberCh0400;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_metalEquipped;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4157[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4158[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4159[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415A[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_CheckAutoHarden) == 0x000008, "Wrong alignment on BP_PlayerHardenComponent_C_CheckAutoHarden");
static_assert(sizeof(BP_PlayerHardenComponent_C_CheckAutoHarden) == 0x000048, "Wrong size on BP_PlayerHardenComponent_C_CheckAutoHarden");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, Return) == 0x000000, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, L_BattleMemberCh0400) == 0x000001, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::L_BattleMemberCh0400' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, L_metalEquipped) == 0x000002, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::L_metalEquipped' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, Temp_float_Variable) == 0x000010, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000014, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000015, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x000016, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000017, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, Temp_bool_Variable) == 0x000018, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnableSASEffect_bEnable) == 0x000019, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnableSASEffect_Param0) == 0x00001C, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnableSASEffect_Param1) == 0x000020, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnableSASEffect_Param2) == 0x000024, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnableSASEffect_Param3) == 0x000028, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, K2Node_Select_Default) == 0x000030, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_FTrunc_ReturnValue) == 0x000038, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsControlAI_bAI) == 0x00003C, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_IsEnable_ReturnValue) == 0x00003D, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_RandomInteger_ReturnValue) == 0x000040, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_CheckAutoHarden, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerHardenComponent_C_CheckAutoHarden::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.DebugDisplayState
// 0x0100 (0x0100 - 0x0000)
struct BP_PlayerHardenComponent_C_DebugDisplayState final
{
public:
	class FString                                 L_str;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415B[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRate_ReturnValue_1;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_1;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_2;               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415D[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_DebugDisplayState) == 0x000008, "Wrong alignment on BP_PlayerHardenComponent_C_DebugDisplayState");
static_assert(sizeof(BP_PlayerHardenComponent_C_DebugDisplayState) == 0x000100, "Wrong size on BP_PlayerHardenComponent_C_DebugDisplayState");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, L_str) == 0x000000, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::L_str' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_IsEnable_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_IsEnable_ReturnValue_1) == 0x000011, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_GetRate_ReturnValue) == 0x000014, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_GetRate_ReturnValue_1) == 0x000018, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_GetRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Conv_FloatToString_ReturnValue) == 0x000020, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000030, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_SelectString_ReturnValue) == 0x000040, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_1) == 0x000050, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_2) == 0x000060, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Conv_BoolToString_ReturnValue) == 0x000070, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue) == 0x000080, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000C0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000D0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000E0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F0, "Member 'BP_PlayerHardenComponent_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SetHardenFist
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerHardenComponent_C_SetHardenFist final
{
public:
	bool                                          Fist_on_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SetHardenFist) == 0x000001, "Wrong alignment on BP_PlayerHardenComponent_C_SetHardenFist");
static_assert(sizeof(BP_PlayerHardenComponent_C_SetHardenFist) == 0x000002, "Wrong size on BP_PlayerHardenComponent_C_SetHardenFist");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHardenFist, Fist_on_in) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SetHardenFist::Fist_on_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetHardenFist, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PlayerHardenComponent_C_SetHardenFist::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.UpdateHardenBody
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerHardenComponent_C_UpdateHardenBody final
{
public:
	float                                         L_timeRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415E[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_UpdateHardenBody) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_UpdateHardenBody");
static_assert(sizeof(BP_PlayerHardenComponent_C_UpdateHardenBody) == 0x000014, "Wrong size on BP_PlayerHardenComponent_C_UpdateHardenBody");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, L_timeRate) == 0x000000, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::L_timeRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, CallFunc_IsOver_ReturnValue) == 0x000005, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, CallFunc_GetFloatValue_ReturnValue) == 0x000008, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, CallFunc_GetRate_ReturnValue) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenBody, CallFunc_Lerp_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_UpdateHardenBody::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.UpdateHardenFist
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerHardenComponent_C_UpdateHardenFist final
{
public:
	float                                         L_rate;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415F[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_UpdateHardenFist) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_UpdateHardenFist");
static_assert(sizeof(BP_PlayerHardenComponent_C_UpdateHardenFist) == 0x000014, "Wrong size on BP_PlayerHardenComponent_C_UpdateHardenFist");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenFist, L_rate) == 0x000000, "Member 'BP_PlayerHardenComponent_C_UpdateHardenFist::L_rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenFist, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerHardenComponent_C_UpdateHardenFist::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenFist, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_PlayerHardenComponent_C_UpdateHardenFist::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenFist, CallFunc_IsOver_ReturnValue) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_UpdateHardenFist::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenFist, CallFunc_GetRate_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_UpdateHardenFist::CallFunc_GetRate_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.UpdateHardenDamage
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerHardenComponent_C_UpdateHardenDamage final
{
public:
	float                                         L_deltaSecond;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4160[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4161[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_UpdateHardenDamage) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_UpdateHardenDamage");
static_assert(sizeof(BP_PlayerHardenComponent_C_UpdateHardenDamage) == 0x000028, "Wrong size on BP_PlayerHardenComponent_C_UpdateHardenDamage");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, L_deltaSecond) == 0x000000, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::L_deltaSecond' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000005, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateHardenDamage, CallFunc_FMin_ReturnValue) == 0x000024, "Member 'BP_PlayerHardenComponent_C_UpdateHardenDamage::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.UpdateAutoHarden
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHardenComponent_C_UpdateAutoHarden final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_UpdateAutoHarden) == 0x000001, "Wrong alignment on BP_PlayerHardenComponent_C_UpdateAutoHarden");
static_assert(sizeof(BP_PlayerHardenComponent_C_UpdateAutoHarden) == 0x000004, "Wrong size on BP_PlayerHardenComponent_C_UpdateAutoHarden");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateAutoHarden, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'BP_PlayerHardenComponent_C_UpdateAutoHarden::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateAutoHarden, CallFunc_IsEnable_ReturnValue) == 0x000001, "Member 'BP_PlayerHardenComponent_C_UpdateAutoHarden::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateAutoHarden, CallFunc_IsEnable_ReturnValue_1) == 0x000002, "Member 'BP_PlayerHardenComponent_C_UpdateAutoHarden::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_UpdateAutoHarden, CallFunc_IsOver_ReturnValue_1) == 0x000003, "Member 'BP_PlayerHardenComponent_C_UpdateAutoHarden::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SetTickRef
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerHardenComponent_C_SetTickRef final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4162[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Ref_name_in;                                       // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4163[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4164[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SetTickRef) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_SetTickRef");
static_assert(sizeof(BP_PlayerHardenComponent_C_SetTickRef) == 0x000028, "Wrong size on BP_PlayerHardenComponent_C_SetTickRef");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, Flag_in) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SetTickRef::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, Ref_name_in) == 0x000004, "Member 'BP_PlayerHardenComponent_C_SetTickRef::Ref_name_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Array_RemoveItem_ReturnValue) == 0x000011, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Array_Length_ReturnValue_1) == 0x000018, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Array_Find_ReturnValue) == 0x000020, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetTickRef, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerHardenComponent_C_SetTickRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.DebugDisplayTickRef
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerHardenComponent_C_DebugDisplayTickRef final
{
public:
	class FString                                 L_str;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4165[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4166[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_DebugDisplayTickRef) == 0x000008, "Wrong alignment on BP_PlayerHardenComponent_C_DebugDisplayTickRef");
static_assert(sizeof(BP_PlayerHardenComponent_C_DebugDisplayTickRef) == 0x000070, "Wrong size on BP_PlayerHardenComponent_C_DebugDisplayTickRef");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, L_str) == 0x000000, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::L_str' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Conv_NameToString_ReturnValue) == 0x000028, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_DebugDisplayTickRef, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BP_PlayerHardenComponent_C_DebugDisplayTickRef::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SubRemainTime
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerHardenComponent_C_SubRemainTime final
{
public:
	float                                         SubTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SubRemainTime) == 0x000004, "Wrong alignment on BP_PlayerHardenComponent_C_SubRemainTime");
static_assert(sizeof(BP_PlayerHardenComponent_C_SubRemainTime) == 0x000004, "Wrong size on BP_PlayerHardenComponent_C_SubRemainTime");
static_assert(offsetof(BP_PlayerHardenComponent_C_SubRemainTime, SubTime) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SubRemainTime::SubTime' has a wrong offset!");

// Function BP_PlayerHardenComponent.BP_PlayerHardenComponent_C.SetDamageEffectType
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerHardenComponent_C_SetDamageEffectType final
{
public:
	bool                                          bHarden;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDamageEffectType                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDamageEffectType                            Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDamageEffectType                            K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerHardenComponent_C_SetDamageEffectType) == 0x000001, "Wrong alignment on BP_PlayerHardenComponent_C_SetDamageEffectType");
static_assert(sizeof(BP_PlayerHardenComponent_C_SetDamageEffectType) == 0x000005, "Wrong size on BP_PlayerHardenComponent_C_SetDamageEffectType");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetDamageEffectType, bHarden) == 0x000000, "Member 'BP_PlayerHardenComponent_C_SetDamageEffectType::bHarden' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetDamageEffectType, Temp_bool_Variable) == 0x000001, "Member 'BP_PlayerHardenComponent_C_SetDamageEffectType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetDamageEffectType, Temp_byte_Variable) == 0x000002, "Member 'BP_PlayerHardenComponent_C_SetDamageEffectType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetDamageEffectType, Temp_byte_Variable_1) == 0x000003, "Member 'BP_PlayerHardenComponent_C_SetDamageEffectType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerHardenComponent_C_SetDamageEffectType, K2Node_Select_Default) == 0x000004, "Member 'BP_PlayerHardenComponent_C_SetDamageEffectType::K2Node_Select_Default' has a wrong offset!");

}

