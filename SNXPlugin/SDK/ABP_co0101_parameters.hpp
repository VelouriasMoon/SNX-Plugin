#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_co0101

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ESASCodeAnimType_structs.hpp"


namespace SDK::Params
{

// Function ABP_co0101.ABP_co0101_C.ExecuteUbergraph_ABP_co0101
// 0x03D8 (0x03D8 - 0x0000)
struct ABP_co0101_C_ExecuteUbergraph_ABP_co0101 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83EF[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_3;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F0[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_5;                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_6;                            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_7;                            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_8;                            // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_9;                            // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_4;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F1[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_10;                           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_11;                           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_13;                           // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_14;                           // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_5;                              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F2[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_15;                           // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_6;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F3[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_16;                           // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_17;                           // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_19;                           // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_20;                           // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_7;                              // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F4[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_21;                           // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_22;                           // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_23;                           // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_24;                           // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_25;                           // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_8;                              // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F5[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_26;                           // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_27;                           // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_28;                           // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_29;                           // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_30;                           // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_9;                              // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F6[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_31;                           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_32;                           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_33;                           // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_34;                           // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_35;                           // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_10;                             // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F7[0x3];                                     // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_36;                           // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_37;                           // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_38;                           // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_39;                           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_40;                           // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_11;                             // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F8[0x3];                                     // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_41;                           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_42;                           // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_43;                           // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_44;                           // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_45;                           // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_12;                             // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83F9[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_46;                           // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83FA[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_47;                           // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83FB[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_struct_Variable_48;                           // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_4;                           // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_5;                           // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_6;                           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_8;                           // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_9;                           // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_13;                             // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83FC[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_10;                          // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_11;                          // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x036D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83FD[0x2];                                     // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_49;                           // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83FE[0x4];                                     // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x038D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x038E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83FF[0x1];                                     // 0x038F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_50;                           // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue_2;                     // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_2;                   // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_3;                     // 0x039E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_3;                   // 0x039F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_struct_Variable_51;                           // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_12;                          // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_13;                          // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndOverrideGravity_ReturnValue;           // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8400[0x3];                                     // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101) == 0x000008, "Wrong alignment on ABP_co0101_C_ExecuteUbergraph_ABP_co0101");
static_assert(sizeof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101) == 0x0003D8, "Wrong size on ABP_co0101_C_ExecuteUbergraph_ABP_co0101");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, EntryPoint) == 0x000000, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable) == 0x000004, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_1) == 0x000005, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_2) == 0x000006, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable) == 0x000008, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_2) == 0x000020, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_3) == 0x00002C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_4) == 0x000038, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_3) == 0x000044, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_5) == 0x000048, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_6) == 0x000054, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_7) == 0x000060, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_8) == 0x00006C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_9) == 0x000078, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_4) == 0x000084, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_10) == 0x000088, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_11) == 0x000094, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_12) == 0x0000A0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_13) == 0x0000AC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_14) == 0x0000B8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_5) == 0x0000C4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_15) == 0x0000C8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_6) == 0x0000D4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_16) == 0x0000D8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_17) == 0x0000E4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_18) == 0x0000F0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_19) == 0x0000FC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_20) == 0x000108, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_7) == 0x000114, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_21) == 0x000118, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_22) == 0x000124, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_23) == 0x000130, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_24) == 0x00013C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_25) == 0x000148, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_8) == 0x000154, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_26) == 0x000158, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_27) == 0x000164, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_28) == 0x000170, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_29) == 0x00017C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_30) == 0x000188, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_30' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_9) == 0x000194, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_31) == 0x000198, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_31' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_32) == 0x0001A4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_32' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_33) == 0x0001B0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_33' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_34) == 0x0001BC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_34' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_35) == 0x0001C8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_35' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_10) == 0x0001D4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_36) == 0x0001D8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_36' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_37) == 0x0001E4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_37' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_38) == 0x0001F0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_38' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_39) == 0x0001FC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_39' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_40) == 0x000208, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_40' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_11) == 0x000214, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_41) == 0x000218, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_41' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_42) == 0x000224, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_42' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_43) == 0x000230, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_43' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_44) == 0x00023C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_44' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_45) == 0x000248, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_45' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_12) == 0x000254, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_46) == 0x000258, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_46' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000264, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_47) == 0x000268, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_47' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default) == 0x000278, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000280, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Roll) == 0x00028C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Pitch) == 0x000290, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Yaw) == 0x000294, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_MakeRotator_ReturnValue) == 0x000298, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_48) == 0x0002A4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_48' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_1) == 0x0002B0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_Ease_ReturnValue) == 0x0002B8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_2) == 0x0002BC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_3) == 0x0002C8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_4) == 0x0002D4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_5) == 0x0002E0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_6) == 0x0002EC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_7) == 0x0002F8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_8) == 0x000304, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_9) == 0x000310, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_byte_Variable_13) == 0x00031C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_10) == 0x000320, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_11) == 0x00032C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Event_DeltaTimeX) == 0x000338, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x00033C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Roll_1) == 0x000348, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Pitch_1) == 0x00034C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_BreakRotator_Yaw_1) == 0x000350, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_MakeRotator_ReturnValue_1) == 0x000354, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000360, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsOver_ReturnValue) == 0x00036C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsEnable_ReturnValue) == 0x00036D, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_49) == 0x000370, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_49' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_GetOwningActor_ReturnValue) == 0x000380, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_GetRate_ReturnValue) == 0x000388, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00038C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsOver_ReturnValue_1) == 0x00038D, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsEnable_ReturnValue_1) == 0x00038E, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_50) == 0x000390, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_50' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsOver_ReturnValue_2) == 0x00039C, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsOver_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsEnable_ReturnValue_2) == 0x00039D, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsEnable_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsOver_ReturnValue_3) == 0x00039E, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsOver_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_IsEnable_ReturnValue_3) == 0x00039F, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_IsEnable_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, Temp_struct_Variable_51) == 0x0003A0, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::Temp_struct_Variable_51' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_12) == 0x0003AC, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, K2Node_Select_Default_13) == 0x0003B8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::K2Node_Select_Default_13' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_EndOverrideGravity_ReturnValue) == 0x0003C4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_EndOverrideGravity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x0003C8, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_ExecuteUbergraph_ABP_co0101, CallFunc_FMax_ReturnValue) == 0x0003D4, "Member 'ABP_co0101_C_ExecuteUbergraph_ABP_co0101::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_co0101_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_co0101_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_co0101_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_co0101_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_co0101_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_co0101_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.StartSAS
// 0x0018 (0x0018 - 0x0000)
struct ABP_co0101_C_StartSAS final
{
public:
	bool                                          bRestart;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESASCodeAnimType                              AnimType;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoCutin;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8401[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_StartSAS) == 0x000004, "Wrong alignment on ABP_co0101_C_StartSAS");
static_assert(sizeof(ABP_co0101_C_StartSAS) == 0x000018, "Wrong size on ABP_co0101_C_StartSAS");
static_assert(offsetof(ABP_co0101_C_StartSAS, bRestart) == 0x000000, "Member 'ABP_co0101_C_StartSAS::bRestart' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, AnimType) == 0x000001, "Member 'ABP_co0101_C_StartSAS::AnimType' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, bNoCutin) == 0x000002, "Member 'ABP_co0101_C_StartSAS::bNoCutin' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, Temp_bool_Variable) == 0x000003, "Member 'ABP_co0101_C_StartSAS::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, Temp_float_Variable) == 0x000004, "Member 'ABP_co0101_C_StartSAS::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, Temp_float_Variable_1) == 0x000008, "Member 'ABP_co0101_C_StartSAS::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'ABP_co0101_C_StartSAS::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, K2Node_Select_Default) == 0x000010, "Member 'ABP_co0101_C_StartSAS::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_StartSAS, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_co0101_C_StartSAS::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.SetOwnerCableActor
// 0x0008 (0x0008 - 0x0000)
struct ABP_co0101_C_SetOwnerCableActor final
{
public:
	class ABP_CableBase_C*                        OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_SetOwnerCableActor) == 0x000008, "Wrong alignment on ABP_co0101_C_SetOwnerCableActor");
static_assert(sizeof(ABP_co0101_C_SetOwnerCableActor) == 0x000008, "Wrong size on ABP_co0101_C_SetOwnerCableActor");
static_assert(offsetof(ABP_co0101_C_SetOwnerCableActor, OwnerActor) == 0x000000, "Member 'ABP_co0101_C_SetOwnerCableActor::OwnerActor' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.BeginOverrideGravity
// 0x03A4 (0x03A4 - 0x0000)
struct ABP_co0101_C_BeginOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8402[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8403[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8404[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_2;                            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_5;                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_6;                            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8405[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_7;                            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_8;                            // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_9;                            // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_10;                           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_11;                           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_2;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8406[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_13;                           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_14;                           // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_15;                           // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_16;                           // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_3;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8407[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_17;                           // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_4;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8408[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_19;                           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_20;                           // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_21;                           // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_22;                           // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_5;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8409[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_23;                           // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_6;                              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840A[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_24;                           // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_25;                           // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_26;                           // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_27;                           // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_28;                           // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_7;                              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840B[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_29;                           // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_30;                           // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_31;                           // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_32;                           // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_33;                           // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_8;                              // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840C[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_34;                           // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_35;                           // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_36;                           // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_37;                           // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_38;                           // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_9;                              // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840D[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_39;                           // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_40;                           // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_41;                           // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_42;                           // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_43;                           // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_10;                             // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840E[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_44;                           // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_45;                           // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_46;                           // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_47;                           // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_48;                           // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_4;                           // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_5;                           // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_6;                           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_11;                             // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_840F[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_8;                           // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0314(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8410[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_struct_Variable_49;                           // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8411[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_9;                           // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_50;                           // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_51;                           // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_10;                          // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8412[0x3];                                     // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_11;                          // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_BeginOverrideGravity) == 0x000004, "Wrong alignment on ABP_co0101_C_BeginOverrideGravity");
static_assert(sizeof(ABP_co0101_C_BeginOverrideGravity) == 0x0003A4, "Wrong size on ABP_co0101_C_BeginOverrideGravity");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Type) == 0x000000, "Member 'ABP_co0101_C_BeginOverrideGravity::Type' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, ReturnValue) == 0x000001, "Member 'ABP_co0101_C_BeginOverrideGravity::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable) == 0x000004, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable) == 0x000020, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_2) == 0x000024, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_3) == 0x000030, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_4) == 0x00003C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_5) == 0x000048, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_6) == 0x000054, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_1) == 0x000060, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_7) == 0x000064, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_8) == 0x000070, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_9) == 0x00007C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_10) == 0x000088, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_11) == 0x000094, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_2) == 0x0000A0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_12) == 0x0000A4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_13) == 0x0000B0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_14) == 0x0000BC, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_15) == 0x0000C8, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_16) == 0x0000D4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_3) == 0x0000E0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_17) == 0x0000E4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_4) == 0x0000F0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_18) == 0x0000F4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_19) == 0x000100, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_20) == 0x00010C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_21) == 0x000118, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_22) == 0x000124, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_5) == 0x000130, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_23) == 0x000134, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_6) == 0x000140, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_24) == 0x000144, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_25) == 0x000150, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_26) == 0x00015C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_27) == 0x000168, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_28) == 0x000174, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_7) == 0x000180, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_29) == 0x000184, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_30) == 0x000190, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_30' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_31) == 0x00019C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_31' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_32) == 0x0001A8, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_32' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_33) == 0x0001B4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_33' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_8) == 0x0001C0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_34) == 0x0001C4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_34' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_35) == 0x0001D0, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_35' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_36) == 0x0001DC, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_36' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_37) == 0x0001E8, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_37' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_38) == 0x0001F4, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_38' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_9) == 0x000200, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_39) == 0x000204, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_39' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_40) == 0x000210, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_40' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_41) == 0x00021C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_41' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_42) == 0x000228, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_42' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_43) == 0x000234, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_43' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_10) == 0x000240, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_44) == 0x000244, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_44' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_45) == 0x000250, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_45' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_46) == 0x00025C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_46' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_47) == 0x000268, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_47' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_48) == 0x000274, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_48' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default) == 0x000280, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_1) == 0x00028C, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_2) == 0x000298, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_3) == 0x0002A4, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0002B0, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_4) == 0x0002BC, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Roll) == 0x0002C8, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Pitch) == 0x0002CC, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Yaw) == 0x0002D0, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_MakeRotator_ReturnValue) == 0x0002D4, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_5) == 0x0002E0, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_6) == 0x0002EC, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_7) == 0x0002F8, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_byte_Variable_11) == 0x000304, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_8) == 0x000308, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000314, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Roll_1) == 0x000320, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Pitch_1) == 0x000324, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_BreakRotator_Yaw_1) == 0x000328, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00032C, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_MakeRotator_ReturnValue_1) == 0x000330, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_49) == 0x00033C, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_49' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000348, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_9) == 0x00034C, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000358, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_50) == 0x000364, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_50' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, Temp_struct_Variable_51) == 0x000370, "Member 'ABP_co0101_C_BeginOverrideGravity::Temp_struct_Variable_51' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_10) == 0x00037C, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_IsEnable_ReturnValue) == 0x000388, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, K2Node_Select_Default_11) == 0x00038C, "Member 'ABP_co0101_C_BeginOverrideGravity::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_BeginOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000398, "Member 'ABP_co0101_C_BeginOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.EndOverrideGravity
// 0x03A4 (0x03A4 - 0x0000)
struct ABP_co0101_C_EndOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8413[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESASCodeAnimType                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8414[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_5;                            // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8415[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_6;                            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_7;                            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_8;                            // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_9;                            // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_10;                           // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_2;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8416[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_11;                           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_13;                           // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_14;                           // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_15;                           // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_3;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8417[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_16;                           // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_4;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8418[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_17;                           // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_19;                           // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_20;                           // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_21;                           // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_5;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8419[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_22;                           // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_6;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841A[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_23;                           // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_24;                           // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_25;                           // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_26;                           // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_27;                           // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_7;                              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841B[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_28;                           // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_29;                           // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_30;                           // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_31;                           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_32;                           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_8;                              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841C[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_33;                           // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_34;                           // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_35;                           // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_36;                           // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_37;                           // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_9;                              // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841D[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_38;                           // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_39;                           // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_40;                           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_41;                           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_42;                           // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_10;                             // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841E[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_43;                           // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_44;                           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_45;                           // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_46;                           // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_47;                           // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_4;                           // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_5;                           // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_6;                           // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable_11;                             // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841F[0x3];                                     // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_8;                           // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8420[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_struct_Variable_48;                           // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8421[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_9;                           // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_49;                           // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8422[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_50;                           // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8423[0x3];                                     // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_51;                           // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_10;                          // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_11;                          // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_EndOverrideGravity) == 0x000004, "Wrong alignment on ABP_co0101_C_EndOverrideGravity");
static_assert(sizeof(ABP_co0101_C_EndOverrideGravity) == 0x0003A4, "Wrong size on ABP_co0101_C_EndOverrideGravity");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Type) == 0x000000, "Member 'ABP_co0101_C_EndOverrideGravity::Type' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, ReturnValue) == 0x000001, "Member 'ABP_co0101_C_EndOverrideGravity::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable) == 0x000004, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable) == 0x000011, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_2) == 0x000020, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_3) == 0x00002C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_4) == 0x000038, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_5) == 0x000044, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_1) == 0x000050, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_6) == 0x000054, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_7) == 0x000060, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_8) == 0x00006C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_9) == 0x000078, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_10) == 0x000084, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_2) == 0x000090, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_11) == 0x000094, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_12) == 0x0000A0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_13) == 0x0000AC, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_14) == 0x0000B8, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_15) == 0x0000C4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_3) == 0x0000D0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_16) == 0x0000D4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_4) == 0x0000E0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_17) == 0x0000E4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_18) == 0x0000F0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_19) == 0x0000FC, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_20) == 0x000108, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_21) == 0x000114, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_5) == 0x000120, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_22) == 0x000124, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_6) == 0x000130, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_23) == 0x000134, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_24) == 0x000140, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_25) == 0x00014C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_26) == 0x000158, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_27) == 0x000164, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_7) == 0x000170, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_28) == 0x000174, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_29) == 0x000180, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_30) == 0x00018C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_30' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_31) == 0x000198, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_31' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_32) == 0x0001A4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_32' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_8) == 0x0001B0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_33) == 0x0001B4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_33' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_34) == 0x0001C0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_34' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_35) == 0x0001CC, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_35' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_36) == 0x0001D8, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_36' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_37) == 0x0001E4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_37' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_9) == 0x0001F0, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_38) == 0x0001F4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_38' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_39) == 0x000200, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_39' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_40) == 0x00020C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_40' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_41) == 0x000218, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_41' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_42) == 0x000224, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_42' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_10) == 0x000230, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_43) == 0x000234, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_43' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_44) == 0x000240, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_44' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_45) == 0x00024C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_45' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_46) == 0x000258, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_46' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_47) == 0x000264, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_47' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default) == 0x000270, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_1) == 0x00027C, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_2) == 0x000288, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_3) == 0x000294, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0002A0, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_4) == 0x0002AC, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Roll) == 0x0002B8, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Pitch) == 0x0002BC, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Yaw) == 0x0002C0, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_MakeRotator_ReturnValue) == 0x0002C4, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_5) == 0x0002D0, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_6) == 0x0002DC, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_7) == 0x0002E8, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_byte_Variable_11) == 0x0002F4, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_8) == 0x0002F8, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000304, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Roll_1) == 0x000310, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Pitch_1) == 0x000314, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_BreakRotator_Yaw_1) == 0x000318, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00031C, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_MakeRotator_ReturnValue_1) == 0x000320, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_48) == 0x00032C, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_48' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000338, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_9) == 0x00033C, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000348, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_49) == 0x000354, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_49' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000360, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_50) == 0x000364, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_50' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000370, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, Temp_struct_Variable_51) == 0x000374, "Member 'ABP_co0101_C_EndOverrideGravity::Temp_struct_Variable_51' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_10) == 0x000380, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, K2Node_Select_Default_11) == 0x00038C, "Member 'ABP_co0101_C_EndOverrideGravity::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_EndOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000398, "Member 'ABP_co0101_C_EndOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.StartBrainField
// 0x0001 (0x0001 - 0x0000)
struct ABP_co0101_C_StartBrainField final
{
public:
	ESASCodeAnimType                              Param_SASAnimType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_StartBrainField) == 0x000001, "Wrong alignment on ABP_co0101_C_StartBrainField");
static_assert(sizeof(ABP_co0101_C_StartBrainField) == 0x000001, "Wrong size on ABP_co0101_C_StartBrainField");
static_assert(offsetof(ABP_co0101_C_StartBrainField, Param_SASAnimType) == 0x000000, "Member 'ABP_co0101_C_StartBrainField::Param_SASAnimType' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.GetSASStartAnimSequence
// 0x0020 (0x0020 - 0x0000)
struct ABP_co0101_C_GetSASStartAnimSequence final
{
public:
	ESASCodeAnimType                              AnimType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8424[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimSequence;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCodeAnimType                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8425[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_GetSASStartAnimSequence) == 0x000008, "Wrong alignment on ABP_co0101_C_GetSASStartAnimSequence");
static_assert(sizeof(ABP_co0101_C_GetSASStartAnimSequence) == 0x000020, "Wrong size on ABP_co0101_C_GetSASStartAnimSequence");
static_assert(offsetof(ABP_co0101_C_GetSASStartAnimSequence, AnimType) == 0x000000, "Member 'ABP_co0101_C_GetSASStartAnimSequence::AnimType' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_GetSASStartAnimSequence, AnimSequence) == 0x000008, "Member 'ABP_co0101_C_GetSASStartAnimSequence::AnimSequence' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_GetSASStartAnimSequence, Temp_byte_Variable) == 0x000010, "Member 'ABP_co0101_C_GetSASStartAnimSequence::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_GetSASStartAnimSequence, K2Node_Select_Default) == 0x000018, "Member 'ABP_co0101_C_GetSASStartAnimSequence::K2Node_Select_Default' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.CheckAbnormalCable
// 0x0044 (0x0044 - 0x0000)
struct ABP_co0101_C_CheckAbnormalCable final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8426[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8427[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8428[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0101_C_CheckAbnormalCable) == 0x000004, "Wrong alignment on ABP_co0101_C_CheckAbnormalCable");
static_assert(sizeof(ABP_co0101_C_CheckAbnormalCable) == 0x000044, "Wrong size on ABP_co0101_C_CheckAbnormalCable");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, Temp_bool_Variable) == 0x000000, "Member 'ABP_co0101_C_CheckAbnormalCable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, Temp_float_Variable) == 0x000004, "Member 'ABP_co0101_C_CheckAbnormalCable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, Temp_float_Variable_1) == 0x000008, "Member 'ABP_co0101_C_CheckAbnormalCable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_GetSocketLocation_ReturnValue) == 0x000014, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000020, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_VSizeSquared_ReturnValue) == 0x000038, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_co0101_C_CheckAbnormalCable::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0101_C_CheckAbnormalCable, K2Node_Select_Default) == 0x000040, "Member 'ABP_co0101_C_CheckAbnormalCable::K2Node_Select_Default' has a wrong offset!");

// Function ABP_co0101.ABP_co0101_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_co0101_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_co0101_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_co0101_C_AnimGraph");
static_assert(sizeof(ABP_co0101_C_AnimGraph) == 0x000010, "Wrong size on ABP_co0101_C_AnimGraph");
static_assert(offsetof(ABP_co0101_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_co0101_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

}

