#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_co0100

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EBrainCodeType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function ABP_co0100.ABP_co0100_C.ExecuteUbergraph_ABP_co0100
// 0x0270 (0x0270 - 0x0000)
struct ABP_co0100_C_ExecuteUbergraph_ABP_co0100 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5400[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5401[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_3;                            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_5;                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_2;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5402[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_6;                            // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_7;                            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_8;                            // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_3;                              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5403[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_9;                            // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_10;                           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_11;                           // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_4;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5404[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_13;                           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_5;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5405[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_14;                           // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_15;                           // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_16;                           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_6;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5406[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_17;                           // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_19;                           // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_7;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5407[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_20;                           // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_21;                           // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_22;                           // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_8;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5408[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_23;                           // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_24;                           // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_25;                           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_26;                           // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5409[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_540A[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_4;                           // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_5;                           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_9;                              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_540B[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_6;                           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_27;                           // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_540C[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_8;                           // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_9;                           // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndOverrideGravity_ReturnValue;           // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x026E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x026F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100) == 0x000008, "Wrong alignment on ABP_co0100_C_ExecuteUbergraph_ABP_co0100");
static_assert(sizeof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100) == 0x000270, "Wrong size on ABP_co0100_C_ExecuteUbergraph_ABP_co0100");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, EntryPoint) == 0x000000, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable) == 0x000004, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable) == 0x000010, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_2) == 0x000020, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_1) == 0x00002C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_3) == 0x000030, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_4) == 0x00003C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_5) == 0x000048, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_2) == 0x000054, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_6) == 0x000058, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_7) == 0x000064, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_8) == 0x000070, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_3) == 0x00007C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_9) == 0x000080, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_10) == 0x00008C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_11) == 0x000098, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_4) == 0x0000A4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_12) == 0x0000A8, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_13) == 0x0000B4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_5) == 0x0000C0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_14) == 0x0000C4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_15) == 0x0000D0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_16) == 0x0000DC, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_6) == 0x0000E8, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_17) == 0x0000EC, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_18) == 0x0000F8, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_19) == 0x000104, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_7) == 0x000110, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_20) == 0x000114, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_21) == 0x000120, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_22) == 0x00012C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_8) == 0x000138, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_23) == 0x00013C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_24) == 0x000148, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_25) == 0x000154, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_26) == 0x000160, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00016C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default) == 0x000170, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_1) == 0x00017C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_2) == 0x000188, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000194, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Event_DeltaTimeX) == 0x000198, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00019C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Roll) == 0x0001A8, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Pitch) == 0x0001AC, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Yaw) == 0x0001B0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_MakeRotator_ReturnValue) == 0x0001B4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x0001C0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Roll_1) == 0x0001CC, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Pitch_1) == 0x0001D0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_BreakRotator_Yaw_1) == 0x0001D4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_3) == 0x0001D8, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_MakeRotator_ReturnValue_1) == 0x0001E4, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_4) == 0x0001F0, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_5) == 0x0001FC, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_byte_Variable_9) == 0x000208, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_6) == 0x00020C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_7) == 0x000218, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000224, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_GetOwningActor_ReturnValue) == 0x000230, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, Temp_struct_Variable_27) == 0x000238, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_IsOver_ReturnValue) == 0x000244, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_8) == 0x000248, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, K2Node_Select_Default_9) == 0x000254, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000260, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_IsEnable_ReturnValue) == 0x00026C, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_EndOverrideGravity_ReturnValue) == 0x00026D, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_EndOverrideGravity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_IsOver_ReturnValue_1) == 0x00026E, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_ExecuteUbergraph_ABP_co0100, CallFunc_IsEnable_ReturnValue_1) == 0x00026F, "Member 'ABP_co0100_C_ExecuteUbergraph_ABP_co0100::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");

// Function ABP_co0100.ABP_co0100_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_co0100_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0100_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_co0100_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_co0100_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_co0100_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_co0100_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_co0100_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_co0100.ABP_co0100_C.BeginOverrideGravity
// 0x0258 (0x0258 - 0x0000)
struct ABP_co0100_C_BeginOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EBrainCodeType                                Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_540D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_3;                            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_2;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_540E[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_5;                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_6;                            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_7;                            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_3;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_540F[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_8;                            // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_9;                            // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_4;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5410[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_10;                           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_11;                           // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_5;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5411[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_13;                           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_14;                           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_15;                           // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_6;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5412[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_16;                           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_17;                           // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_7;                              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5413[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_19;                           // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_20;                           // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_21;                           // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_8;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5414[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_22;                           // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_23;                           // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_24;                           // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_9;                              // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5415[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_3;                           // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5416[0x2];                                     // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_25;                           // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_4;                           // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_26;                           // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_5;                           // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_6;                           // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_27;                           // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_8;                           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_9;                           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5417[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0100_C_BeginOverrideGravity) == 0x000004, "Wrong alignment on ABP_co0100_C_BeginOverrideGravity");
static_assert(sizeof(ABP_co0100_C_BeginOverrideGravity) == 0x000258, "Wrong size on ABP_co0100_C_BeginOverrideGravity");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Type) == 0x000000, "Member 'ABP_co0100_C_BeginOverrideGravity::Type' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, ReturnValue) == 0x000001, "Member 'ABP_co0100_C_BeginOverrideGravity::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable) == 0x000002, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable) == 0x000004, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_1) == 0x000010, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_2) == 0x00001C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_1) == 0x000028, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_3) == 0x00002C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_4) == 0x000038, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_2) == 0x000044, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_5) == 0x000048, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_6) == 0x000054, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_7) == 0x000060, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_3) == 0x00006C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_8) == 0x000070, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_9) == 0x00007C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_4) == 0x000088, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_10) == 0x00008C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_11) == 0x000098, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_12) == 0x0000A4, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_5) == 0x0000B0, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_13) == 0x0000B4, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_14) == 0x0000C0, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_15) == 0x0000CC, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_6) == 0x0000D8, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_16) == 0x0000DC, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_17) == 0x0000E8, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_18) == 0x0000F4, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_7) == 0x000100, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_19) == 0x000104, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_20) == 0x000110, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_21) == 0x00011C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_8) == 0x000128, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_22) == 0x00012C, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_23) == 0x000138, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_24) == 0x000144, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000150, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Roll) == 0x00015C, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Pitch) == 0x000160, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Yaw) == 0x000164, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default) == 0x000168, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_MakeRotator_ReturnValue) == 0x000174, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_1) == 0x000180, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_2) == 0x00018C, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_byte_Variable_9) == 0x000198, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_3) == 0x00019C, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001A8, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0001A9, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_25) == 0x0001AC, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_4) == 0x0001B8, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001C4, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_26) == 0x0001D0, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_5) == 0x0001DC, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_6) == 0x0001E8, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, Temp_struct_Variable_27) == 0x0001F4, "Member 'ABP_co0100_C_BeginOverrideGravity::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_7) == 0x000200, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_8) == 0x00020C, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, K2Node_Select_Default_9) == 0x000218, "Member 'ABP_co0100_C_BeginOverrideGravity::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000224, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Roll_1) == 0x000230, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Pitch_1) == 0x000234, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_BreakRotator_Yaw_1) == 0x000238, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_MakeRotator_ReturnValue_1) == 0x00023C, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_IsEnable_ReturnValue) == 0x000248, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_BeginOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x00024C, "Member 'ABP_co0100_C_BeginOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function ABP_co0100.ABP_co0100_C.EndOverrideGravity
// 0x0260 (0x0260 - 0x0000)
struct ABP_co0100_C_EndOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5418[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5419[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_3;                            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541B[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_5;                            // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_6;                            // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_7;                            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           Temp_byte_Variable_2;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541C[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_8;                            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_9;                            // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_3;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541D[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_10;                           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_11;                           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_12;                           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_4;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541E[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_13;                           // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_14;                           // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_15;                           // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_5;                              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541F[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_16;                           // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_17;                           // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_18;                           // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_6;                              // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5420[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_19;                           // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_20;                           // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_21;                           // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_7;                              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5421[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_22;                           // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_23;                           // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_24;                           // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_8;                              // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5422[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_3;                           // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Temp_byte_Variable_9;                              // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x01AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5423[0x1];                                     // 0x01AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_4;                           // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_5;                           // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_6;                           // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_7;                           // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_25;                           // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5424[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_26;                           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5425[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_27;                           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_8;                           // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_9;                           // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0100_C_EndOverrideGravity) == 0x000004, "Wrong alignment on ABP_co0100_C_EndOverrideGravity");
static_assert(sizeof(ABP_co0100_C_EndOverrideGravity) == 0x000260, "Wrong size on ABP_co0100_C_EndOverrideGravity");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Type) == 0x000000, "Member 'ABP_co0100_C_EndOverrideGravity::Type' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, ReturnValue) == 0x000001, "Member 'ABP_co0100_C_EndOverrideGravity::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable) == 0x000004, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_2) == 0x000020, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable) == 0x00002C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_3) == 0x000030, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_4) == 0x00003C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_1) == 0x000048, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_5) == 0x00004C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_6) == 0x000058, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_7) == 0x000064, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_2) == 0x000070, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_8) == 0x000074, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_9) == 0x000080, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_3) == 0x00008C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_10) == 0x000090, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_11) == 0x00009C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_12) == 0x0000A8, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_4) == 0x0000B4, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_13) == 0x0000B8, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_14) == 0x0000C4, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_15) == 0x0000D0, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_5) == 0x0000DC, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_16) == 0x0000E0, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_17) == 0x0000EC, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_18) == 0x0000F8, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_6) == 0x000104, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_19) == 0x000108, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_20) == 0x000114, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_21) == 0x000120, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_7) == 0x00012C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_22) == 0x000130, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_23) == 0x00013C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_24) == 0x000148, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000154, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Roll) == 0x000160, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Pitch) == 0x000164, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Yaw) == 0x000168, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default) == 0x00016C, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_MakeRotator_ReturnValue) == 0x000178, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_1) == 0x000184, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_2) == 0x000190, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_8) == 0x00019C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_3) == 0x0001A0, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_byte_Variable_9) == 0x0001AC, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001AD, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0001AE, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_4) == 0x0001B0, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001BC, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_5) == 0x0001C8, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_6) == 0x0001D4, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_7) == 0x0001E0, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_25) == 0x0001EC, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001F8, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_26) == 0x0001FC, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000208, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, Temp_struct_Variable_27) == 0x00020C, "Member 'ABP_co0100_C_EndOverrideGravity::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000218, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Roll_1) == 0x000224, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Pitch_1) == 0x000228, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_BreakRotator_Yaw_1) == 0x00022C, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_8) == 0x000230, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_MakeRotator_ReturnValue_1) == 0x00023C, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, K2Node_Select_Default_9) == 0x000248, "Member 'ABP_co0100_C_EndOverrideGravity::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_EndOverrideGravity, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000254, "Member 'ABP_co0100_C_EndOverrideGravity::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function ABP_co0100.ABP_co0100_C.SetOwnerCableActor
// 0x0010 (0x0010 - 0x0000)
struct ABP_co0100_C_SetOwnerCableActor final
{
public:
	class ABP_CableBase_C*                        Param_CableActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainCodeType                                Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_co0100_C_SetOwnerCableActor) == 0x000008, "Wrong alignment on ABP_co0100_C_SetOwnerCableActor");
static_assert(sizeof(ABP_co0100_C_SetOwnerCableActor) == 0x000010, "Wrong size on ABP_co0100_C_SetOwnerCableActor");
static_assert(offsetof(ABP_co0100_C_SetOwnerCableActor, Param_CableActor) == 0x000000, "Member 'ABP_co0100_C_SetOwnerCableActor::Param_CableActor' has a wrong offset!");
static_assert(offsetof(ABP_co0100_C_SetOwnerCableActor, Type) == 0x000008, "Member 'ABP_co0100_C_SetOwnerCableActor::Type' has a wrong offset!");

// Function ABP_co0100.ABP_co0100_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_co0100_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_co0100_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_co0100_C_AnimGraph");
static_assert(sizeof(ABP_co0100_C_AnimGraph) == 0x000010, "Wrong size on ABP_co0100_C_AnimGraph");
static_assert(offsetof(ABP_co0100_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_co0100_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

}

