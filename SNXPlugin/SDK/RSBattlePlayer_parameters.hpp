#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSBattlePlayer

#include "Basic.hpp"

#include "EBattlePhase_em8210_structs.hpp"
#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "EBattleVoice_em8200_structs.hpp"
#include "PsychicGrabButtonType_structs.hpp"
#include "FPlayerBattleParticleData_structs.hpp"
#include "Enum_BattleType_em8000_structs.hpp"
#include "FRegisterShotData_structs.hpp"
#include "EPlayerAIBattleThinkParam_structs.hpp"
#include "EBulletType_structs.hpp"
#include "EDeadFactor_structs.hpp"
#include "ST_em8220_CableInfo_structs.hpp"
#include "ECharaDeadType_structs.hpp"
#include "Enum_BattleType_em8010_structs.hpp"
#include "EPlayerAnimMontage_structs.hpp"
#include "ST_em_ChangeTimeDilation_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "ETelepoMoveType_em8200_structs.hpp"
#include "EBattleBonusAddType_structs.hpp"
#include "FSASCommand_structs.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"
#include "DE_em_ChangeTimeDilation_structs.hpp"
#include "Enum_EnemyAiType_structs.hpp"
#include "FSASTelepoParam_structs.hpp"
#include "EPlayerComboPattern_structs.hpp"
#include "Enum_EnemySound_structs.hpp"
#include "EPlayerUseItemSpeed_structs.hpp"
#include "EPlayerAIMoveMode_structs.hpp"
#include "F_AssultVisionRequestPool_structs.hpp"
#include "EPlayerMaterialManageType_structs.hpp"
#include "FPlayerBattleVoiceFacialAnimType_structs.hpp"
#include "FPlayerAIBattleThinkTransitionData_structs.hpp"
#include "EParamAfterEventAction_structs.hpp"
#include "Enum_EnemySpawnState_structs.hpp"
#include "BadStateAddParticleData_structs.hpp"
#include "EEnpcMetamorphosisiFinishType_structs.hpp"
#include "EPlayerBattleVoiceType_structs.hpp"
#include "EPlayerFacialAnim_structs.hpp"
#include "F_SASParam_structs.hpp"
#include "FCombinationVisionData_structs.hpp"
#include "E_SceneType_structs.hpp"
#include "EPlayerCapsuleSize_structs.hpp"
#include "CharactersParameter_structs.hpp"
#include "EBonusGhostType_structs.hpp"
#include "EPlayerReviveKind_structs.hpp"
#include "AttackCollisionInfoBP_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "FSASElectricParam_structs.hpp"
#include "FSASFireParam_structs.hpp"
#include "FSASSeeThroughParam_structs.hpp"
#include "FSASMetalParam_structs.hpp"
#include "FSASStealthParam_structs.hpp"
#include "FSASCopyParam_structs.hpp"
#include "FSASPsychicParam_structs.hpp"


namespace SDK::Params
{

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjShow__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature final
{
public:
	EPsychicGrabButtonType                        Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShow;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_78FE[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature, Button) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature::Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature, bShow) == 0x000001, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature::bShow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature, Count) == 0x000004, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature::Count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjEnable__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature final
{
public:
	EPsychicGrabButtonType                        Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature) == 0x000002, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature, Button) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature::Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature, bEnable) == 0x000001, "Member 'RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjUse__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature final
{
public:
	EPsychicGrabButtonType                        Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature, Button) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature::Button' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjCount__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature final
{
public:
	EPsychicGrabButtonType                        Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78FF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature, Button) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature::Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature, Count) == 0x000004, "Member 'RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature::Count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjShow2__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature final
{
public:
	bool                                          Unique;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Show;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7900[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Obj_count;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature, Unique) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature::Unique' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature, Show) == 0x000001, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature::Show' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature, Obj_count) == 0x000004, "Member 'RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature::Obj_count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjEnable2__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature final
{
public:
	bool                                          Unique;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature) == 0x000002, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature, Unique) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature::Unique' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature, Enable) == 0x000001, "Member 'RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature::Enable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjUse2__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature final
{
public:
	bool                                          Unique;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature, Unique) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature::Unique' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjCount2__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature final
{
public:
	bool                                          Unique;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7901[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature, Unique) == 0x000000, "Member 'RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature::Unique' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature, Count) == 0x000004, "Member 'RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature::Count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchMontageBlendingOut__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature, Montage) == 0x000000, "Member 'RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature, bInterrupted) == 0x000008, "Member 'RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature::bInterrupted' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoDodgeBegin__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature, Player) == 0x000000, "Member 'RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature::Player' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoDodgeEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature, Player) == 0x000000, "Member 'RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature::Player' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchChangeWalkRunStateKind__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature final
{
public:
	EPlayerWalkRunStateKind                       Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature, Kind) == 0x000000, "Member 'RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature::Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchMontageEnded__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature, Montage) == 0x000000, "Member 'RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature, bInterrupted) == 0x000008, "Member 'RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature::bInterrupted' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchAttackActorHit__DelegateSignature
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature) == 0x0001C0, "Wrong size on RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature::HitResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchTimerPause__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DispatchTimerPause__DelegateSignature final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DispatchTimerPause__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DispatchTimerPause__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchTimerPause__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_DispatchTimerPause__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchTimerPause__DelegateSignature, bPause) == 0x000000, "Member 'RSBattlePlayer_C_DispatchTimerPause__DelegateSignature::bPause' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DispatchTalkTurn__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature final
{
public:
	float                                         LookAtAngle;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature) == 0x000004, "Wrong size on RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature, LookAtAngle) == 0x000000, "Member 'RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature::LookAtAngle' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ExecuteUbergraph_RSBattlePlayer
// 0x1070 (0x1070 - 0x0000)
struct RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_9;            // 0x0094(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_10;           // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_11;           // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_12;           // 0x00C4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_13;           // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_14;           // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_15;           // 0x00F4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_16;           // 0x0104(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_17;           // 0x0114(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_18;           // 0x0124(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_19;           // 0x0134(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_20;           // 0x0144(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_21;           // 0x0154(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_22;           // 0x0164(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_23;           // 0x0174(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_24;           // 0x0184(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7902[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_25;           // 0x0198(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_26;           // 0x01A8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_27;           // 0x01B8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EBrainFieldEndType EndType)>   K2Node_CreateDelegate_OutputDelegate_28;           // 0x01C8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_29;           // 0x01D8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7903[0x2];                                     // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_30;           // 0x01EC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7904[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_31;           // 0x0200(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_32;           // 0x0214(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x0225(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x0226(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x0227(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable;                                // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7905[0x2];                                     // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleVoiceType                        Temp_byte_Variable_1;                              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7906[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_33;           // 0x023C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7907[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_6;               // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_6;                     // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_2;                              // 0x025E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_7;               // 0x025F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_34;           // 0x026C(0x0010)(ZeroConstructor, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_3;                              // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7908[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleVoiceType                        Temp_byte_Variable_4;                              // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_7;                     // 0x028D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_8;               // 0x028E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_8;                     // 0x028F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_5;                              // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_9;                     // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_9;               // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   Temp_byte_Variable_6;                              // 0x0293(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_10;                    // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_10;              // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_7;                              // 0x0296(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleVoiceType                        Temp_byte_Variable_8;                              // 0x0297(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_11;                    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_11;              // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_12;                    // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_12;              // 0x029B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_9;                              // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7909[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ToTargetLenge;                        // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ForceDisp;                            // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_790A[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_discoverPos;                          // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewParam;                             // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewParam1;                            // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewParam2;                            // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_IndexIn;                              // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      K2Node_Event_Parameter_1;                          // 0x02C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_17;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram_1;                          // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_790B[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      K2Node_Event_Parameter;                            // 0x02DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_16;                             // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_8;                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram;                            // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFSASElectricParam                     K2Node_Event_param_15;                             // 0x02F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_790C[0x2];                                     // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_15;                             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_14;                             // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_790D[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_14;                             // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_7;                         // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_13;                             // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_790E[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_13;                             // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_12;                             // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_790F[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_12;                             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_6;                         // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_11;                             // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7910[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_11;                             // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_10;                             // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7911[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_10;                             // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_5;                         // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_9;                              // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7912[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_9;                              // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_8;                              // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7913[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_8;                              // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_4;                         // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_7;                              // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7914[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_7;                              // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_6;                              // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7915[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_6;                              // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_3;                         // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_5;                              // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7916[0x3];                                     // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_5;                              // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_4;                              // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7917[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_4;                              // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_2;                         // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_3;                              // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7918[0x3];                                     // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_3;                              // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_2;                              // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7919[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_2;                              // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_1;                         // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASPsychicParam                      K2Node_Event_param_1;                              // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_791A[0x3];                                     // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_1;                              // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASPsychicParam                      K2Node_Event_param;                                // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_791B[0x7];                                     // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner;                                // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime;                           // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_flag_in;                              // 0x03F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bON;                                  // 0x03F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_791C[0x2];                                     // 0x03F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ClaimantName_1;                       // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_13;              // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_791D[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_35;           // 0x0404(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_36;           // 0x0414(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_791E[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_14;              // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_KillEnemyBC_ReturnValue;      // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_791F[0x6];                                     // 0x0432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_1;   // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue;     // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7920[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_2;   // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_Hp30p_ReturnValue;            // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7921[0x6];                                     // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_3;   // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_KillByEn_ReturnValue;         // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   K2Node_CustomEvent_BadStatus;                      // 0x0462(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_13;                    // 0x0463(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        K2Node_Select_Default;                             // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0465(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7922[0x2];                                     // 0x0466(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_4;   // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_CustomEvent_TargetPlayer;                   // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7923[0x5];                                     // 0x0473(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_5;   // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_CustomEvent_RevivePlayer;                   // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_Recovery_ReturnValue;         // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7924[0x6];                                     // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_6;   // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_Revival_ReturnValue;          // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_2;                        // 0x0492(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0493(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7925[0x4];                                     // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_7;   // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DriveActive_ReturnValue;      // 0x04A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x04A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainTalkAble_bTalk;                    // 0x04A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_37;           // 0x04A4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_3;             // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7926[0x3];                                     // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_8;   // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_BFActivate_ReturnValue;       // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpen_bOpen;                     // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_3;                        // 0x04C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     K2Node_CustomEvent_TakeOverCharacter;              // 0x04C3(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7927[0x4];                                     // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_9;   // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DamageTakeOver_ReturnValue;   // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistBattleMember_ReturnValue;          // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7928[0x6];                                     // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_10;  // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_CustomEvent_hologramPlayerID;               // 0x04E0(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7929[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_11;  // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_HiKizunaEffect_ReturnValue;   // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_792A[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_12;  // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DeadInarow_ReturnValue;       // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_792B[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_13;  // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_15;              // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_JumpOff_ReturnValue;          // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               K2Node_CustomEvent_SasEffect;                      // 0x0512(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_792C[0x1];                                     // 0x0513(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Num;                            // 0x0514(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_14;  // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_4;                        // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_SasContinuity_ReturnValue;    // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_5;                        // 0x0522(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_792D[0x5];                                     // 0x0523(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_15;  // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_FirstStrike_ReturnValue;      // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_PsychicCombo_ReturnValue;     // 0x0531(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_792E[0x2];                                     // 0x0532(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_38;           // 0x0534(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_14;                    // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0545(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_10;                             // 0x0546(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_792F[0x1];                                     // 0x0547(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_39;           // 0x0548(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_15;                    // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0559(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy_1;                 // 0x055A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_97;                      // 0x055B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_97;                         // 0x055C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_96;                      // 0x055D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_96;                         // 0x055E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_95;                      // 0x055F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_95;                         // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_94;                      // 0x0561(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_94;                         // 0x0562(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_93;                      // 0x0563(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_93;                         // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_92;                      // 0x0565(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_92;                         // 0x0566(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_91;                      // 0x0567(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_91;                         // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_90;                      // 0x0569(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_90;                         // 0x056A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_89;                      // 0x056B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_89;                         // 0x056C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_88;                      // 0x056D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_88;                         // 0x056E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_87;                      // 0x056F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_87;                         // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_86;                      // 0x0571(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_86;                         // 0x0572(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_85;                      // 0x0573(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_85;                         // 0x0574(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_84;                      // 0x0575(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_84;                         // 0x0576(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_83;                      // 0x0577(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_83;                         // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_82;                      // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_82;                         // 0x057A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_81;                      // 0x057B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_81;                         // 0x057C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_80;                      // 0x057D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_80;                         // 0x057E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_79;                      // 0x057F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_79;                         // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_78;                      // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_78;                         // 0x0582(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_77;                      // 0x0583(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_77;                         // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_76;                      // 0x0585(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_76;                         // 0x0586(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_75;                      // 0x0587(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_75;                         // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_74;                      // 0x0589(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_74;                         // 0x058A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_73;                      // 0x058B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_73;                         // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_72;                      // 0x058D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_72;                         // 0x058E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_71;                      // 0x058F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_71;                         // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_70;                      // 0x0591(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_70;                         // 0x0592(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7930[0x5];                                     // 0x0593(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InputManager_C*                     CallFunc_GetInputManager_BP_InputManager;          // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSInputDeviceType Type)>      K2Node_CreateDelegate_OutputDelegate_40;           // 0x05A0(0x0010)(ZeroConstructor, NoDestructor)
	class URSGamepadLayout*                       CallFunc_GetGamepadLayout_ReturnValue;             // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSInputDeviceType                            CallFunc_GetRSCurrentInputDeviceTypeWithMouse_ReturnValue; // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7931[0x3];                                     // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_41;           // 0x05BC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_42;           // 0x05CC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_43;           // 0x05DC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_44;           // 0x05EC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_45;           // 0x05FC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_46;           // 0x060C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_47;           // 0x061C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_48;           // 0x062C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_49;           // 0x063C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_50;           // 0x064C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_51;           // 0x065C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_52;           // 0x066C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_53;           // 0x067C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_54;           // 0x068C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_55;           // 0x069C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_56;           // 0x06AC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_57;           // 0x06BC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_58;           // 0x06CC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_59;           // 0x06DC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_60;           // 0x06EC(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_69;                      // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_69;                         // 0x06FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7932[0x2];                                     // 0x06FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_61;           // 0x0700(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_68;                      // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_68;                         // 0x0711(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_67;                      // 0x0712(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_67;                         // 0x0713(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_66;                      // 0x0714(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_66;                         // 0x0715(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_65;                      // 0x0716(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_65;                         // 0x0717(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_64;                      // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_64;                         // 0x0719(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_63;                      // 0x071A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_63;                         // 0x071B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_62;                      // 0x071C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_62;                         // 0x071D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_61;                      // 0x071E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_61;                         // 0x071F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_60;                      // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_60;                         // 0x0721(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_59;                      // 0x0722(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_59;                         // 0x0723(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_58;                      // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_58;                         // 0x0725(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_57;                      // 0x0726(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_57;                         // 0x0727(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_62;           // 0x0728(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_56;                      // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_56;                         // 0x0739(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7933[0x2];                                     // 0x073A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_63;           // 0x073C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_64;           // 0x074C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_65;           // 0x075C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_66;           // 0x076C(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_55;                      // 0x077C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_55;                         // 0x077D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_54;                      // 0x077E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_54;                         // 0x077F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_53;                      // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_53;                         // 0x0781(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_52;                      // 0x0782(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_52;                         // 0x0783(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_51;                      // 0x0784(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_51;                         // 0x0785(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_50;                      // 0x0786(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_50;                         // 0x0787(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_49;                      // 0x0788(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_49;                         // 0x0789(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_48;                      // 0x078A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_48;                         // 0x078B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_67;           // 0x078C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_68;           // 0x079C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_69;           // 0x07AC(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_47;                      // 0x07BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_47;                         // 0x07BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7934[0x2];                                     // 0x07BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_70;           // 0x07C0(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_46;                      // 0x07D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_46;                         // 0x07D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_45;                      // 0x07D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_45;                         // 0x07D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_44;                      // 0x07D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_44;                         // 0x07D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_43;                      // 0x07D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_43;                         // 0x07D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_42;                      // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_42;                         // 0x07D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_41;                      // 0x07DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_41;                         // 0x07DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_40;                      // 0x07DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_40;                         // 0x07DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7935[0x2];                                     // 0x07DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_71;           // 0x07E0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_72;           // 0x07F0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_73;           // 0x0800(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_74;           // 0x0810(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_75;           // 0x0820(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_76;           // 0x0830(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_77;           // 0x0840(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_78;           // 0x0850(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_39;                      // 0x0860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_39;                         // 0x0861(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_38;                      // 0x0862(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_38;                         // 0x0863(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_37;                      // 0x0864(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_37;                         // 0x0865(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_36;                      // 0x0866(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_36;                         // 0x0867(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_35;                      // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_35;                         // 0x0869(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_34;                      // 0x086A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_34;                         // 0x086B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_33;                      // 0x086C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_33;                         // 0x086D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_32;                      // 0x086E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_32;                         // 0x086F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_31;                      // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_31;                         // 0x0871(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_30;                      // 0x0872(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_30;                         // 0x0873(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_29;                      // 0x0874(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_29;                         // 0x0875(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_28;                      // 0x0876(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_28;                         // 0x0877(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_27;                      // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_27;                         // 0x0879(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_26;                      // 0x087A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_26;                         // 0x087B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_79;           // 0x087C(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_25;                      // 0x088C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_25;                         // 0x088D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_24;                      // 0x088E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_24;                         // 0x088F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_23;                      // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_23;                         // 0x0891(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7936[0x2];                                     // 0x0892(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_80;           // 0x0894(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_22;                      // 0x08A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_22;                         // 0x08A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_21;                      // 0x08A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_21;                         // 0x08A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_81;           // 0x08A8(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_20;                      // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_20;                         // 0x08B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_19;                      // 0x08BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_19;                         // 0x08BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_82;           // 0x08BC(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_18;                      // 0x08CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_18;                         // 0x08CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_17;                      // 0x08CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_17;                         // 0x08CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_83;           // 0x08D0(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_16;                      // 0x08E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_16;                         // 0x08E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7937[0x2];                                     // 0x08E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_84;           // 0x08E4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_85;           // 0x08F4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_86;           // 0x0904(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_87;           // 0x0914(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_88;           // 0x0924(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_89;           // 0x0934(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_90;           // 0x0944(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_15;                      // 0x0954(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_15;                         // 0x0955(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_14;                      // 0x0956(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_14;                         // 0x0957(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_13;                      // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_13;                         // 0x0959(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_12;                      // 0x095A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_12;                         // 0x095B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_11;                      // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_11;                         // 0x095D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_10;                      // 0x095E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_10;                         // 0x095F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_9;                       // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_9;                          // 0x0961(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_8;                       // 0x0962(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_8;                          // 0x0963(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_7;                       // 0x0964(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_7;                          // 0x0965(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_6;                       // 0x0966(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_6;                          // 0x0967(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_5;                       // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_5;                          // 0x0969(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_4;                       // 0x096A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_4;                          // 0x096B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_3;                       // 0x096C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_3;                          // 0x096D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7938[0x2];                                     // 0x096E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_91;           // 0x0970(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_2;                       // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_2;                          // 0x0981(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7939[0x2];                                     // 0x0982(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_92;           // 0x0984(0x0010)(ZeroConstructor, NoDestructor)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout_1;                       // 0x0994(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key_1;                          // 0x0995(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadLayoutType                          K2Node_CustomEvent_layout;                         // 0x0996(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           K2Node_CustomEvent_Key;                            // 0x0997(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_93;           // 0x0998(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_94;           // 0x09A8(0x0010)(ZeroConstructor, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_11;                             // 0x09B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_793A[0x3];                                     // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds_3;                 // 0x09BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x09C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_95;           // 0x09C4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_793B[0x4];                                     // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_4;                     // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_4;                         // 0x09E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_793C[0x7];                                     // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_3;                     // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_3;                         // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveBrainFieldOther_bDummy;   // 0x09F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_793D[0x6];                                     // 0x09F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_2;                     // 0x09F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_2;                         // 0x0A00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_Event_EndType_1;                            // 0x0A01(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleVoiceType                        Temp_byte_Variable_12;                             // 0x0A02(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_793E[0x5];                                     // 0x0A03(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser_1;                     // 0x0A08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker_1;                         // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_Event_EndType;                              // 0x0A11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnBrainFieldMoveNormalFieldOther_bDummy;  // 0x0A12(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0A13(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0A14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0A15(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0A16(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveBrainField_bDummy;        // 0x0A17(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldOpenEnd_bDummy;               // 0x0A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldCloseStart_bDummy;            // 0x0A19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveNormalField_bDummy;       // 0x0A1A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_793F[0x5];                                     // 0x0A1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BrainFieldUser;                       // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttacker;                           // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldOpenStart_bDummy;             // 0x0A29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0A2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_6;                        // 0x0A2B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_96;           // 0x0A2C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_16;                    // 0x0A3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_7;                        // 0x0A3D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ForceFinishMetamorphosis_Dummy;           // 0x0A3E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7940[0x1];                                     // 0x0A3F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_97;           // 0x0A40(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bInterruption;          // 0x0A50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bLocationChange;        // 0x0A51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEndDrive_Dummy;                         // 0x0A52(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7941[0x1];                                     // 0x0A53(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_RegenerateHP_1;         // 0x0A54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnBeginDrive_Dummy;                       // 0x0A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7942[0x3];                                     // 0x0A59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_GaugeRate;              // 0x0A5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   Temp_byte_Variable_13;                             // 0x0A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0A61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        K2Node_Select_Default_1;                           // 0x0A62(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0A63(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_value;                          // 0x0A64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7943[0x3];                                     // 0x0A65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_User_1;                 // 0x0A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bPlayStart_1;           // 0x0A70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndDriveSequence_bSuccess;                // 0x0A71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_14;                             // 0x0A72(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7944[0x5];                                     // 0x0A73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_User;                   // 0x0A78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bPlayStart;             // 0x0A80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginDriveSequence_bSuccess;              // 0x0A81(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0A82(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0A83(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndDriveSequence_bSuccess_1;              // 0x0A84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_8;                        // 0x0A85(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENotifyDriveEvent                             K2Node_ComponentBoundEvent_Reason;                 // 0x0A86(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDriveGaugeMax_bDummy;                   // 0x0A87(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_ComponentBoundEvent_StockNum;               // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bItemUse;               // 0x0A8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bNoEffect;              // 0x0A8D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDriveNotifyBrainFieldStock_bDummy;      // 0x0A8E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7945[0x1];                                     // 0x0A8F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDriveGaugeMax_bDummy_1;                 // 0x0A98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0A99(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_9;                        // 0x0A9A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0A9B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0A9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_16;              // 0x0AA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerMaterialManageType                     K2Node_ComponentBoundEvent_Type;                   // 0x0AA1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0AA2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7946[0x1];                                     // 0x0AA3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds_2;                 // 0x0AA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBeginActor_1;                        // 0x0AA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bBeginActor;                          // 0x0AA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7947[0x6];                                     // 0x0AAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_PlayerEndMontage;                     // 0x0AB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0AB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0AB9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_2;                  // 0x0ABA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_3;                  // 0x0ABB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_17;                    // 0x0ABC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_17;              // 0x0ABD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7948[0x2];                                     // 0x0ABE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_NewState_1;             // 0x0AC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_Param_1;                // 0x0AC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0AC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0AC9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7949[0x2];                                     // 0x0ACA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_NewState;               // 0x0ACC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_Param;                  // 0x0AD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnEnterActionState_bDummy;                // 0x0AD4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0AD5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0AD6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794A[0x1];                                     // 0x0AD7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_98;           // 0x0AD8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_OnEnterUpperActionState_bDummy;           // 0x0AE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_794B[0x7];                                     // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0AF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_18;              // 0x0AF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0AF9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0AFA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LeaveBrainCrashAccess_Dummy;              // 0x0AFB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_99;           // 0x0AFC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_100;          // 0x0B0C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_18;                    // 0x0B1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0B1D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_15;                             // 0x0B1E(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0B1F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_19;              // 0x0B20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIOrder                                K2Node_Event_plan;                                 // 0x0B21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794C[0x2];                                     // 0x0B22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_weaponId;                             // 0x0B24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_skinID;                               // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeWeaponMesh_bDummy;                  // 0x0B2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_19;                    // 0x0B2D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAccessory                              K2Node_Event_index_1;                              // 0x0B2E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794D[0x1];                                     // 0x0B2F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_accessoryId;                          // 0x0B30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794E[0x4];                                     // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              K2Node_Event_table;                                // 0x0B38(0x01F8)()
	bool                                          K2Node_Event_bEnable;                              // 0x0D30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_794F[0x3];                                     // 0x0D31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ClaimantName;                         // 0x0D34(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Horizontal;                           // 0x0D3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Vertical;                             // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0D44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0D45(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAttachment                             K2Node_Event_index;                                // 0x0D46(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7950[0x1];                                     // 0x0D47(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_attachmentId;                         // 0x0D48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASHologramAttackTiming                      K2Node_Event_Timing;                               // 0x0D4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7951[0x3];                                     // 0x0D4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_Event_RequestCharacter;                     // 0x0D50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipAttachmentInterface_bDummy;          // 0x0D58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7952[0x7];                                     // 0x0D59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_AssultVisionRequestPool             K2Node_MakeStruct_F_AssultVisionRequestPool;       // 0x0D60(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0D70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0D71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7953[0x2];                                     // 0x0D72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_costumeId;                            // 0x0D74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingSequence_IsPlaying;              // 0x0D78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7954[0x3];                                     // 0x0D79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0D7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMissionCancel;                       // 0x0D80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7955[0x3];                                     // 0x0D81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_101;          // 0x0D84(0x0010)(ZeroConstructor, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_16;                             // 0x0D94(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7956[0x3];                                     // 0x0D95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds_1;                 // 0x0D98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7957[0x4];                                     // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFinishMoveManager_FinishMove_Manager;  // 0x0DA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FinishMoveActorManager_C*           K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager; // 0x0DA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0DB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0DB1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SASCancelEffectAndSEInterface_bDummy;     // 0x0DB2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_20;              // 0x0DB3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_17;                             // 0x0DB4(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7958[0x3];                                     // 0x0DB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_ComponentBoundEvent_commandName;            // 0x0DB8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_argName;                // 0x0DC0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0DC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7959[0x3];                                     // 0x0DC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_102;          // 0x0DCC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_21;              // 0x0DDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_20;                    // 0x0DDD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_21;                    // 0x0DDE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_18;                             // 0x0DDF(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_10;                       // 0x0DE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795A[0x3];                                     // 0x0DE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_103;          // 0x0DE4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0DF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_22;              // 0x0DF5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795B[0x2];                                     // 0x0DF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Time;                                 // 0x0DF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBonusGhostType                               K2Node_Event_Type;                                 // 0x0DFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_795C[0x3];                                     // 0x0DFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AliveTime;                            // 0x0E00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0E04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAnimKind                               K2Node_CustomEvent_NewKind;                        // 0x0E08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAnimKind                               K2Node_CustomEvent_OldKind;                        // 0x0E09(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnChangeAnimKind_Dummy;                   // 0x0E0A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795D[0x5];                                     // 0x0E0B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_CustomEvent_Montage_1;                      // 0x0E10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Interrupted_1;                  // 0x0E18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795E[0x7];                                     // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_CustomEvent_Montage;                        // 0x0E20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Interrupted;                    // 0x0E28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPressed_4;                           // 0x0E29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_22;                    // 0x0E2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state_1;            // 0x0E2B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_795F[0x4];                                     // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_attacker;               // 0x0E30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state;              // 0x0E38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7960[0x3];                                     // 0x0E39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_X;                                    // 0x0E3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Y;                                    // 0x0E40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPressed_3;                           // 0x0E44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7961[0x3];                                     // 0x0E45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Destination;                          // 0x0E48(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_104;          // 0x0E54(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_11;                       // 0x0E64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7962[0x3];                                     // 0x0E65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_105;          // 0x0E68(0x0010)(ZeroConstructor, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_19;                             // 0x0E78(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPressed_2;                           // 0x0E79(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDestroy_bDummy;                         // 0x0E7A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7963[0x1];                                     // 0x0E7B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0E7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_IdlingSec;                            // 0x0E80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_IdleRestoreDelay;                     // 0x0E84(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0E88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7964[0x3];                                     // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_106;          // 0x0E8C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_12;                       // 0x0E9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPressed_1;                           // 0x0E9D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            K2Node_CustomEvent_EndType;                        // 0x0E9E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7965[0x1];                                     // 0x0E9F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0EA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7966[0x4];                                     // 0x0EA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0EA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0EB0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0EB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0EC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_23;              // 0x0EC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerWalkRunStateKind                       K2Node_CustomEvent_Kind;                           // 0x0EC9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPressed;                             // 0x0ECA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7967[0x1];                                     // 0x0ECB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_107;          // 0x0ECC(0x0010)(ZeroConstructor, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0EDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            K2Node_ComponentBoundEvent_AttackInputKind;        // 0x0EDD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bDisable;                       // 0x0EDE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x0EDF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy_1;       // 0x0EE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7968[0x3];                                     // 0x0EE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_RegenerateHP;           // 0x0EE4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_108;          // 0x0EE8(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0EF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0EFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7969[0x3];                                     // 0x0EFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0F00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_796A[0x4];                                     // 0x0F04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_NewController;                        // 0x0F08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_OldController;                        // 0x0F10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFinishActorBeginPlay_ReturnValue;       // 0x0F18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_23;                    // 0x0F19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_796B[0x2];                                     // 0x0F1A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x0F1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0F20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_796C[0x4];                                     // 0x0F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_ComponentBoundEvent_Target;                 // 0x0F28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bLockOn;                // 0x0F30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bLostTarget;            // 0x0F31(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_796D[0x2];                                     // 0x0F32(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0F34(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0F38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0F3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0F40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   Temp_byte_Variable_20;                             // 0x0F41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_796E[0x6];                                     // 0x0F42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetLostTargetActor_ReturnValue;           // 0x0F48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             K2Node_Select_Default_2;                           // 0x0F50(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0F51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_BadStateByEn_ReturnValue;     // 0x0F52(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_4;             // 0x0F53(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)> K2Node_CreateDelegate_OutputDelegate_109;          // 0x0F54(0x0010)(ZeroConstructor, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_2;                // 0x0F64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0F65(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead_1;                           // 0x0F66(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_796F[0x1];                                     // 0x0F67(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0F68(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item;                           // 0x0F78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0F80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventPhysicsIdling_bDummy;                // 0x0F84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0F85(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7970[0x2];                                     // 0x0F86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList_1;           // 0x0F88(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_1;                         // 0x0F98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventPhysicsIdling_bDummy_1;              // 0x0FA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7971[0x3];                                     // 0x0FA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0FA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0FA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7972[0x7];                                     // 0x0FA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0FB0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_2;                         // 0x0FC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0FC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventPhysicsIdling_bDummy_2;              // 0x0FCC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0FCD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7973[0x2];                                     // 0x0FCE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList_1;         // 0x0FD0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_CableBase_C*                        CallFunc_Array_Get_Item_3;                         // 0x0FE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0FE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventPhysicsIdling_bDummy_3;              // 0x0FEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0FED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7974[0x2];                                     // 0x0FEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0FF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_110;          // 0x0FF8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x1008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_13;                       // 0x1009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7975[0x2];                                     // 0x100A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_ComponentBoundEvent_ImpactLocation;         // 0x100C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x1018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_24;              // 0x1019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7976[0x2];                                     // 0x101A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_111;          // 0x101C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7977[0x4];                                     // 0x102C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager_1;           // 0x1030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x1038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInFieldActorInEnemyList_Result;         // 0x1039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7978[0x6];                                     // 0x103A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager_2;           // 0x1040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x1048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInFieldActorInEnemyList_Result_1;       // 0x1049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x104A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy_1;                         // 0x104B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_24;                    // 0x104C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7979[0x3];                                     // 0x104D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_112;          // 0x1050(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param_1;                // 0x1060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetInvalidDamage_Dummy_2;                 // 0x1068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x1069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy_3;                 // 0x106A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer");
static_assert(sizeof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer) == 0x001070, "Wrong size on RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, EntryPoint) == 0x000000, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_5) == 0x000054, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_6) == 0x000064, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_7) == 0x000074, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_8) == 0x000084, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_9) == 0x000094, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_10) == 0x0000A4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_11) == 0x0000B4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_12) == 0x0000C4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_13) == 0x0000D4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_14) == 0x0000E4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_15) == 0x0000F4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_16) == 0x000104, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_17) == 0x000114, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_18) == 0x000124, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_19) == 0x000134, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_20) == 0x000144, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_21) == 0x000154, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_22) == 0x000164, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_23) == 0x000174, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_24) == 0x000184, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000194, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_25) == 0x000198, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_26) == 0x0001A8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_27) == 0x0001B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_28) == 0x0001C8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_29) == 0x0001D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001E8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable) == 0x0001E9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_30) == 0x0001EC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_1) == 0x0001FC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_31) == 0x000200, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable) == 0x000210, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_2) == 0x000211, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_1) == 0x000212, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_2) == 0x000213, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_32) == 0x000214, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_3) == 0x000224, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_3) == 0x000225, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_4) == 0x000226, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_4) == 0x000227, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable) == 0x000228, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_5) == 0x000229, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Counter_Variable) == 0x00022C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_IntInt_ReturnValue) == 0x000230, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Array_Index_Variable) == 0x000234, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_1) == 0x000238, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_33) == 0x00023C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_5) == 0x00024C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Counter_Variable_1) == 0x000250, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000254, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Array_Index_Variable_1) == 0x000258, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_6) == 0x00025C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_6) == 0x00025D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_2) == 0x00025E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_7) == 0x00025F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Counter_Variable_2) == 0x000260, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_IntInt_ReturnValue_2) == 0x000264, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Array_Index_Variable_2) == 0x000268, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_34) == 0x00026C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_3) == 0x00027C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Counter_Variable_3) == 0x000280, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_IntInt_ReturnValue_3) == 0x000284, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Array_Index_Variable_3) == 0x000288, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_4) == 0x00028C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_7) == 0x00028D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_8) == 0x00028E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_8) == 0x00028F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_5) == 0x000290, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_9) == 0x000291, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_9) == 0x000292, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_6) == 0x000293, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_10) == 0x000294, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_10) == 0x000295, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_7) == 0x000296, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_8) == 0x000297, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_11) == 0x000298, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_11) == 0x000299, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_12) == 0x00029A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_12) == 0x00029B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_9) == 0x00029C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_ToTargetLenge) == 0x0002A0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_ToTargetLenge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_ForceDisp) == 0x0002A4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_ForceDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_discoverPos) == 0x0002A8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_discoverPos' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_NewParam) == 0x0002B4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_NewParam1) == 0x0002B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_NewParam1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_NewParam2) == 0x0002BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_NewParam2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IndexIn) == 0x0002C0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IndexIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Parameter_1) == 0x0002C4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Parameter_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_17) == 0x0002D0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bHologram_1) == 0x0002D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bHologram_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Parameter) == 0x0002DC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_16) == 0x0002E8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_8) == 0x0002F0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bHologram) == 0x0002F4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bHologram' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_15) == 0x0002F5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_15) == 0x0002F8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_14) == 0x000300, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_14) == 0x000308, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_7) == 0x000310, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_13) == 0x000314, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_13) == 0x000318, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_12) == 0x000320, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_12) == 0x000328, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_6) == 0x000330, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_11) == 0x000334, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_11) == 0x000338, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_10) == 0x000340, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_10) == 0x000348, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_5) == 0x000350, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_9) == 0x000354, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_9) == 0x000358, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_8) == 0x000360, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_8) == 0x000368, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_4) == 0x000370, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_7) == 0x000374, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_7) == 0x000378, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_6) == 0x000380, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_6) == 0x000388, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_3) == 0x000390, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_5) == 0x000394, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_5) == 0x000398, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_4) == 0x0003A0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_4) == 0x0003A8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_2) == 0x0003B0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_3) == 0x0003B4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_3) == 0x0003B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_2) == 0x0003C0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_2) == 0x0003C8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime_1) == 0x0003D0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param_1) == 0x0003D4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner_1) == 0x0003D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_param) == 0x0003E0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Owner) == 0x0003E8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RemainTime) == 0x0003F0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RemainTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_flag_in) == 0x0003F4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_flag_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bON) == 0x0003F5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_ClaimantName_1) == 0x0003F8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_ClaimantName_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_13) == 0x000400, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_35) == 0x000404, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_36) == 0x000414, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsActionStatus_Result) == 0x000424, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000428, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_14) == 0x000430, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_KillEnemyBC_ReturnValue) == 0x000431, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_KillEnemyBC_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_1) == 0x000438, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue) == 0x000440, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_2) == 0x000448, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI) == 0x000450, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_Hp30p_ReturnValue) == 0x000451, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_Hp30p_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_3) == 0x000458, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_1) == 0x000460, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_KillByEn_ReturnValue) == 0x000461, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_KillByEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_BadStatus) == 0x000462, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_BadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_13) == 0x000463, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Select_Default) == 0x000464, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000465, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_4) == 0x000468, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000470, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerID_ReturnValue) == 0x000471, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_TargetPlayer) == 0x000472, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_TargetPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_5) == 0x000478, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_RevivePlayer) == 0x000480, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_RevivePlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_Recovery_ReturnValue) == 0x000481, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_Recovery_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_6) == 0x000488, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerID_ReturnValue_1) == 0x000490, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_Revival_ReturnValue) == 0x000491, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_Revival_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_2) == 0x000492, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000493, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_7) == 0x000498, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetIsBattleMode_IsBattleMode) == 0x0004A0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_DriveActive_ReturnValue) == 0x0004A1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_DriveActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x0004A2, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsBrainTalkAble_bTalk) == 0x0004A3, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsBrainTalkAble_bTalk' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_37) == 0x0004A4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer_3) == 0x0004B4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_8) == 0x0004B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_BFActivate_ReturnValue) == 0x0004C0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_BFActivate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsContentsOpen_bOpen) == 0x0004C1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsContentsOpen_bOpen' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_3) == 0x0004C2, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_TakeOverCharacter) == 0x0004C3, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_TakeOverCharacter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_9) == 0x0004C8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_DamageTakeOver_ReturnValue) == 0x0004D0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_DamageTakeOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsExistBattleMember_ReturnValue) == 0x0004D1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsExistBattleMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_10) == 0x0004D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_hologramPlayerID) == 0x0004E0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_hologramPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_11) == 0x0004E8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_HiKizunaEffect_ReturnValue) == 0x0004F0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_HiKizunaEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_12) == 0x0004F8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_DeadInarow_ReturnValue) == 0x000500, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_DeadInarow_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_13) == 0x000508, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_15) == 0x000510, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_JumpOff_ReturnValue) == 0x000511, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_JumpOff_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_SasEffect) == 0x000512, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_SasEffect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Num) == 0x000514, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Num' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_14) == 0x000518, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_4) == 0x000520, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_SasContinuity_ReturnValue) == 0x000521, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_SasContinuity_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_5) == 0x000522, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainTalkManager_BrainTalkManager_15) == 0x000528, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainTalkManager_BrainTalkManager_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_FirstStrike_ReturnValue) == 0x000530, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_FirstStrike_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_PsychicCombo_ReturnValue) == 0x000531, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_PsychicCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_38) == 0x000534, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_14) == 0x000544, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue) == 0x000545, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_10) == 0x000546, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_39) == 0x000548, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_15) == 0x000558, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetInvalidDamage_Dummy) == 0x000559, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetInvalidDamage_Dummy_1) == 0x00055A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetInvalidDamage_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_97) == 0x00055B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_97' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_97) == 0x00055C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_97' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_96) == 0x00055D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_96' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_96) == 0x00055E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_96' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_95) == 0x00055F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_95) == 0x000560, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_94) == 0x000561, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_94) == 0x000562, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_93) == 0x000563, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_93) == 0x000564, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_92) == 0x000565, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_92) == 0x000566, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_91) == 0x000567, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_91) == 0x000568, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_90) == 0x000569, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_90) == 0x00056A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_89) == 0x00056B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_89) == 0x00056C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_88) == 0x00056D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_88) == 0x00056E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_87) == 0x00056F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_87) == 0x000570, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_86) == 0x000571, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_86) == 0x000572, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_85) == 0x000573, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_85) == 0x000574, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_84) == 0x000575, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_84) == 0x000576, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_83) == 0x000577, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_83) == 0x000578, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_82) == 0x000579, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_82) == 0x00057A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_81) == 0x00057B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_81) == 0x00057C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_80) == 0x00057D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_80) == 0x00057E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_79) == 0x00057F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_79) == 0x000580, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_78) == 0x000581, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_78) == 0x000582, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_77) == 0x000583, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_77) == 0x000584, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_76) == 0x000585, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_76) == 0x000586, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_75) == 0x000587, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_75) == 0x000588, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_74) == 0x000589, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_74) == 0x00058A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_73) == 0x00058B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_73) == 0x00058C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_72) == 0x00058D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_72) == 0x00058E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_71) == 0x00058F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_71) == 0x000590, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_70) == 0x000591, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_70) == 0x000592, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetInputManager_BP_InputManager) == 0x000598, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetInputManager_BP_InputManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_40) == 0x0005A0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetGamepadLayout_ReturnValue) == 0x0005B0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetGamepadLayout_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetRSCurrentInputDeviceTypeWithMouse_ReturnValue) == 0x0005B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetRSCurrentInputDeviceTypeWithMouse_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_41) == 0x0005BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_42) == 0x0005CC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_43) == 0x0005DC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_44) == 0x0005EC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_45) == 0x0005FC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_46) == 0x00060C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_47) == 0x00061C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_48) == 0x00062C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_49) == 0x00063C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_50) == 0x00064C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_51) == 0x00065C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_52) == 0x00066C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_53) == 0x00067C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_54) == 0x00068C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_55) == 0x00069C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_56) == 0x0006AC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_57) == 0x0006BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_58) == 0x0006CC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_59) == 0x0006DC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_60) == 0x0006EC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_69) == 0x0006FC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_69) == 0x0006FD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_61) == 0x000700, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_68) == 0x000710, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_68) == 0x000711, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_67) == 0x000712, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_67) == 0x000713, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_66) == 0x000714, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_66) == 0x000715, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_65) == 0x000716, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_65) == 0x000717, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_64) == 0x000718, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_64) == 0x000719, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_63) == 0x00071A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_63) == 0x00071B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_62) == 0x00071C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_62) == 0x00071D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_61) == 0x00071E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_61) == 0x00071F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_60) == 0x000720, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_60) == 0x000721, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_59) == 0x000722, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_59) == 0x000723, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_58) == 0x000724, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_58) == 0x000725, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_57) == 0x000726, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_57) == 0x000727, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_62) == 0x000728, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_56) == 0x000738, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_56) == 0x000739, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_63) == 0x00073C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_64) == 0x00074C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_65) == 0x00075C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_66) == 0x00076C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_55) == 0x00077C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_55) == 0x00077D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_54) == 0x00077E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_54) == 0x00077F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_53) == 0x000780, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_53) == 0x000781, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_52) == 0x000782, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_52) == 0x000783, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_51) == 0x000784, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_51) == 0x000785, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_50) == 0x000786, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_50) == 0x000787, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_49) == 0x000788, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_49) == 0x000789, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_48) == 0x00078A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_48) == 0x00078B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_67) == 0x00078C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_68) == 0x00079C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_69) == 0x0007AC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_47) == 0x0007BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_47) == 0x0007BD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_70) == 0x0007C0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_46) == 0x0007D0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_46) == 0x0007D1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_45) == 0x0007D2, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_45) == 0x0007D3, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_44) == 0x0007D4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_44) == 0x0007D5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_43) == 0x0007D6, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_43) == 0x0007D7, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_42) == 0x0007D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_42) == 0x0007D9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_41) == 0x0007DA, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_41) == 0x0007DB, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_40) == 0x0007DC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_40) == 0x0007DD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_71) == 0x0007E0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_72) == 0x0007F0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_73) == 0x000800, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_74) == 0x000810, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_75) == 0x000820, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_76) == 0x000830, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_77) == 0x000840, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_78) == 0x000850, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_39) == 0x000860, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_39) == 0x000861, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_38) == 0x000862, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_38) == 0x000863, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_37) == 0x000864, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_37) == 0x000865, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_36) == 0x000866, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_36) == 0x000867, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_35) == 0x000868, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_35) == 0x000869, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_34) == 0x00086A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_34) == 0x00086B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_33) == 0x00086C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_33) == 0x00086D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_32) == 0x00086E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_32) == 0x00086F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_31) == 0x000870, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_31) == 0x000871, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_30) == 0x000872, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_30) == 0x000873, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_29) == 0x000874, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_29) == 0x000875, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_28) == 0x000876, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_28) == 0x000877, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_27) == 0x000878, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_27) == 0x000879, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_26) == 0x00087A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_26) == 0x00087B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_79) == 0x00087C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_25) == 0x00088C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_25) == 0x00088D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_24) == 0x00088E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_24) == 0x00088F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_23) == 0x000890, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_23) == 0x000891, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_80) == 0x000894, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_22) == 0x0008A4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_22) == 0x0008A5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_21) == 0x0008A6, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_21) == 0x0008A7, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_81) == 0x0008A8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_20) == 0x0008B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_20) == 0x0008B9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_19) == 0x0008BA, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_19) == 0x0008BB, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_82) == 0x0008BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_18) == 0x0008CC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_18) == 0x0008CD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_17) == 0x0008CE, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_17) == 0x0008CF, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_83) == 0x0008D0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_16) == 0x0008E0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_16) == 0x0008E1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_84) == 0x0008E4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_85) == 0x0008F4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_86) == 0x000904, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_87) == 0x000914, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_88) == 0x000924, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_89) == 0x000934, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_90) == 0x000944, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_15) == 0x000954, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_15) == 0x000955, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_14) == 0x000956, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_14) == 0x000957, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_13) == 0x000958, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_13) == 0x000959, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_12) == 0x00095A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_12) == 0x00095B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_11) == 0x00095C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_11) == 0x00095D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_10) == 0x00095E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_10) == 0x00095F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_9) == 0x000960, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_9) == 0x000961, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_8) == 0x000962, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_8) == 0x000963, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_7) == 0x000964, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_7) == 0x000965, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_6) == 0x000966, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_6) == 0x000967, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_5) == 0x000968, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_5) == 0x000969, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_4) == 0x00096A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_4) == 0x00096B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_3) == 0x00096C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_3) == 0x00096D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_91) == 0x000970, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_2) == 0x000980, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_2) == 0x000981, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_92) == 0x000984, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout_1) == 0x000994, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key_1) == 0x000995, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_layout) == 0x000996, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Key) == 0x000997, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Key' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_93) == 0x000998, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_94) == 0x0009A8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_11) == 0x0009B8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_DeltaSeconds_3) == 0x0009BC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_DeltaSeconds_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0009C0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_95) == 0x0009C4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_BrainFieldUser_4) == 0x0009D8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_BrainFieldUser_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IsAttacker_4) == 0x0009E0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IsAttacker_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_BrainFieldUser_3) == 0x0009E8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_BrainFieldUser_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IsAttacker_3) == 0x0009F0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IsAttacker_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldMoveBrainFieldOther_bDummy) == 0x0009F1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldMoveBrainFieldOther_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_BrainFieldUser_2) == 0x0009F8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_BrainFieldUser_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IsAttacker_2) == 0x000A00, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IsAttacker_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_EndType_1) == 0x000A01, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_EndType_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_12) == 0x000A02, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_BrainFieldUser_1) == 0x000A08, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_BrainFieldUser_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IsAttacker_1) == 0x000A10, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IsAttacker_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_EndType) == 0x000A11, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_EndType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldMoveNormalFieldOther_bDummy) == 0x000A12, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldMoveNormalFieldOther_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000A13, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000A14, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000A15, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000A16, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldMoveBrainField_bDummy) == 0x000A17, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldMoveBrainField_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldOpenEnd_bDummy) == 0x000A18, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldOpenEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldCloseStart_bDummy) == 0x000A19, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldCloseStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldMoveNormalField_bDummy) == 0x000A1A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldMoveNormalField_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_BrainFieldUser) == 0x000A20, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IsAttacker) == 0x000A28, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBrainFieldOpenStart_bDummy) == 0x000A29, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBrainFieldOpenStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000A2A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_6) == 0x000A2B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_96) == 0x000A2C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_96' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_16) == 0x000A3C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_7) == 0x000A3D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_ForceFinishMetamorphosis_Dummy) == 0x000A3E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_ForceFinishMetamorphosis_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_97) == 0x000A40, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_97' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bInterruption) == 0x000A50, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bInterruption' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bLocationChange) == 0x000A51, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bLocationChange' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnEndDrive_Dummy) == 0x000A52, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnEndDrive_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_RegenerateHP_1) == 0x000A54, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_RegenerateHP_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnBeginDrive_Dummy) == 0x000A58, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnBeginDrive_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_GaugeRate) == 0x000A5C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_GaugeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_13) == 0x000A60, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000A61, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Select_Default_1) == 0x000A62, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Enable) == 0x000A63, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_value) == 0x000A64, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_User_1) == 0x000A68, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_User_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bPlayStart_1) == 0x000A70, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bPlayStart_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EndDriveSequence_bSuccess) == 0x000A71, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EndDriveSequence_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_14) == 0x000A72, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_User) == 0x000A78, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_User' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bPlayStart) == 0x000A80, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bPlayStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BeginDriveSequence_bSuccess) == 0x000A81, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BeginDriveSequence_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000A82, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000A83, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EndDriveSequence_bSuccess_1) == 0x000A84, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EndDriveSequence_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_8) == 0x000A85, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_Reason) == 0x000A86, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_Reason' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnDriveGaugeMax_bDummy) == 0x000A87, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnDriveGaugeMax_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_StockNum) == 0x000A88, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_StockNum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bItemUse) == 0x000A8C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bItemUse' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bNoEffect) == 0x000A8D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bNoEffect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnDriveNotifyBrainFieldStock_bDummy) == 0x000A8E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnDriveNotifyBrainFieldStock_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetDebuggingManager_Manager) == 0x000A90, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnDriveGaugeMax_bDummy_1) == 0x000A98, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnDriveGaugeMax_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_1) == 0x000A99, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_9) == 0x000A9A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_2) == 0x000A9B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Length_ReturnValue) == 0x000A9C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_16) == 0x000AA0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_Type) == 0x000AA1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_SwitchEnum_CmpSuccess) == 0x000AA2, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_DeltaSeconds_2) == 0x000AA4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_DeltaSeconds_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bBeginActor_1) == 0x000AA8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bBeginActor_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bBeginActor) == 0x000AA9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_PlayerEndMontage) == 0x000AB0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_PlayerEndMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsDead_bDead) == 0x000AB8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsActionStatus_Result_1) == 0x000AB9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsActionStatus_Result_2) == 0x000ABA, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsActionStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsActionStatus_Result_3) == 0x000ABB, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsActionStatus_Result_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_17) == 0x000ABC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_17) == 0x000ABD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_NewState_1) == 0x000AC0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_NewState_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_Param_1) == 0x000AC4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_Param_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Conv_IntToByte_ReturnValue) == 0x000AC8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetValidValue_ReturnValue) == 0x000AC9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_NewState) == 0x000ACC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_Param) == 0x000AD0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnEnterActionState_bDummy) == 0x000AD4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnEnterActionState_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000AD5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetValidValue_ReturnValue_1) == 0x000AD6, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_98) == 0x000AD8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_98' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnEnterUpperActionState_bDummy) == 0x000AE8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnEnterUpperActionState_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetEnemyManager_Manager) == 0x000AF0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_18) == 0x000AF8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_3) == 0x000AF9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_4) == 0x000AFA, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_LeaveBrainCrashAccess_Dummy) == 0x000AFB, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_LeaveBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_99) == 0x000AFC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_99' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_100) == 0x000B0C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_100' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_18) == 0x000B1C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_5) == 0x000B1D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_15) == 0x000B1E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_6) == 0x000B1F, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_19) == 0x000B20, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_plan) == 0x000B21, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_plan' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_weaponId) == 0x000B24, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_weaponId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_skinID) == 0x000B28, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_skinID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_ChangeWeaponMesh_bDummy) == 0x000B2C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_ChangeWeaponMesh_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_19) == 0x000B2D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_index_1) == 0x000B2E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_accessoryId) == 0x000B30, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_accessoryId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_table) == 0x000B38, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_table' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bEnable) == 0x000D30, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_ClaimantName) == 0x000D34, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Horizontal) == 0x000D3C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Horizontal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Vertical) == 0x000D40, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Vertical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_7) == 0x000D44, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_8) == 0x000D45, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_index) == 0x000D46, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_attachmentId) == 0x000D48, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_attachmentId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Timing) == 0x000D4C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_RequestCharacter) == 0x000D50, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_RequestCharacter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EquipAttachmentInterface_bDummy) == 0x000D58, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EquipAttachmentInterface_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_MakeStruct_F_AssultVisionRequestPool) == 0x000D60, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_MakeStruct_F_AssultVisionRequestPool' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_9) == 0x000D70, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsPlayerStatus_Result) == 0x000D71, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_costumeId) == 0x000D74, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_costumeId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsPlayingSequence_IsPlaying) == 0x000D78, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsPlayingSequence_IsPlaying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Add_ReturnValue) == 0x000D7C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bMissionCancel) == 0x000D80, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bMissionCancel' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_101) == 0x000D84, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_101' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_16) == 0x000D94, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_DeltaSeconds_1) == 0x000D98, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetFinishMoveManager_FinishMove_Manager) == 0x000DA0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetFinishMoveManager_FinishMove_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager) == 0x000DA8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_DynamicCast_bSuccess) == 0x000DB0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000DB1, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SASCancelEffectAndSEInterface_bDummy) == 0x000DB2, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SASCancelEffectAndSEInterface_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_20) == 0x000DB3, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_17) == 0x000DB4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_commandName) == 0x000DB8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_commandName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_argName) == 0x000DC0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_argName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000DC8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_102) == 0x000DCC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_102' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_21) == 0x000DDC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_20) == 0x000DDD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_21) == 0x000DDE, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_18) == 0x000DDF, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_10) == 0x000DE0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_103) == 0x000DE4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_103' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_10) == 0x000DF4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_22) == 0x000DF5, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Time) == 0x000DF8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Type) == 0x000DFC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_AliveTime) == 0x000E00, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_AliveTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_DeltaSeconds) == 0x000E04, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_NewKind) == 0x000E08, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_NewKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_OldKind) == 0x000E09, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_OldKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnChangeAnimKind_Dummy) == 0x000E0A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnChangeAnimKind_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Montage_1) == 0x000E10, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Montage_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Interrupted_1) == 0x000E18, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Interrupted_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Montage) == 0x000E20, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Interrupted) == 0x000E28, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Interrupted' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bPressed_4) == 0x000E29, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bPressed_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_22) == 0x000E2A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bad_state_1) == 0x000E2B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bad_state_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_attacker) == 0x000E30, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_attacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bad_state) == 0x000E38, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bad_state' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_X) == 0x000E3C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Y) == 0x000E40, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bPressed_3) == 0x000E44, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bPressed_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_Destination) == 0x000E48, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_Destination' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_104) == 0x000E54, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_104' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_11) == 0x000E64, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_105) == 0x000E68, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_105' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_19) == 0x000E78, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bPressed_2) == 0x000E79, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bPressed_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_OnDestroy_bDummy) == 0x000E7A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_OnDestroy_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Num_Variable) == 0x000E7C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IdlingSec) == 0x000E80, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_IdleRestoreDelay) == 0x000E84, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_11) == 0x000E88, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_106) == 0x000E8C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_106' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_12) == 0x000E9C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bPressed_1) == 0x000E9D, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bPressed_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_EndType) == 0x000E9E, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_EndType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Array_Index_Variable_4) == 0x000EA0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerManager_PlayerManager) == 0x000EA8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerFixParam_Param) == 0x000EB0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainFieldManager_Manager) == 0x000EB8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBattleManager_BattleManager) == 0x000EC0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_23) == 0x000EC8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_Kind) == 0x000EC9, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_bPressed) == 0x000ECA, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_107) == 0x000ECC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_107' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_EndPlayReason) == 0x000EDC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_AttackInputKind) == 0x000EDD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_AttackInputKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_bDisable) == 0x000EDE, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetPlayerInputRestriction_bDummy) == 0x000EDF, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetPlayerInputRestriction_bDummy_1) == 0x000EE0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetPlayerInputRestriction_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_RegenerateHP) == 0x000EE4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_RegenerateHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_108) == 0x000EE8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_108' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_int_Loop_Counter_Variable_4) == 0x000EF8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000EFC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_IntInt_ReturnValue_4) == 0x000F00, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_NewController) == 0x000F08, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Event_OldController) == 0x000F10, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsFinishActorBeginPlay_ReturnValue) == 0x000F18, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsFinishActorBeginPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_23) == 0x000F19, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CustomEvent_DeltaSeconds) == 0x000F1C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000F20, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_Target) == 0x000F28, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bLockOn) == 0x000F30, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bLockOn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_bLostTarget) == 0x000F31, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_bLostTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000F34, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000F38, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Add_FloatFloat_ReturnValue) == 0x000F3C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_12) == 0x000F40, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_byte_Variable_20) == 0x000F41, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetLostTargetActor_ReturnValue) == 0x000F48, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetLostTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_Select_Default_2) == 0x000F50, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000F51, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_BrainTalkBt_BadStateByEn_ReturnValue) == 0x000F52, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_BrainTalkBt_BadStateByEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer_4) == 0x000F53, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_109) == 0x000F54, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_109' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerID_ReturnValue_2) == 0x000F64, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000F65, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsDead_bDead_1) == 0x000F66, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsDead_bDead_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetSASCodeActorList_CodeList) == 0x000F68, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Get_Item) == 0x000F78, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Length_ReturnValue_1) == 0x000F80, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EventPhysicsIdling_bDummy) == 0x000F84, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EventPhysicsIdling_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000F85, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetSASCodeActorList_CodeList_1) == 0x000F88, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetSASCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Get_Item_1) == 0x000F98, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EventPhysicsIdling_bDummy_1) == 0x000FA0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EventPhysicsIdling_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Length_ReturnValue_2) == 0x000FA4, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Less_IntInt_ReturnValue_2) == 0x000FA8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainCodeActorList_CodeList) == 0x000FB0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Get_Item_2) == 0x000FC0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Length_ReturnValue_3) == 0x000FC8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EventPhysicsIdling_bDummy_2) == 0x000FCC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EventPhysicsIdling_bDummy_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Less_IntInt_ReturnValue_3) == 0x000FCD, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainCodeActorList_CodeList_1) == 0x000FD0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Get_Item_3) == 0x000FE0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Array_Length_ReturnValue_4) == 0x000FE8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_EventPhysicsIdling_bDummy_3) == 0x000FEC, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_EventPhysicsIdling_bDummy_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Less_IntInt_ReturnValue_4) == 0x000FED, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000FF0, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_110) == 0x000FF8, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_110' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_13) == 0x001008, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsControlAI_bAI_13) == 0x001009, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsControlAI_bAI_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_ComponentBoundEvent_ImpactLocation) == 0x00100C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_ComponentBoundEvent_ImpactLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x001018, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_Has_Been_Initd_Variable_24) == 0x001019, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_Has_Been_Initd_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_111) == 0x00101C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_111' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainFieldManager_Manager_1) == 0x001030, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainFieldManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_14) == 0x001038, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsInFieldActorInEnemyList_Result) == 0x001039, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsInFieldActorInEnemyList_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetBrainFieldManager_Manager_2) == 0x001040, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetBrainFieldManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_15) == 0x001048, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsInFieldActorInEnemyList_Result_1) == 0x001049, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsInFieldActorInEnemyList_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemy_bEnemy) == 0x00104A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsEnemy_bEnemy_1) == 0x00104B, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsEnemy_bEnemy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, Temp_bool_IsClosed_Variable_24) == 0x00104C, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::Temp_bool_IsClosed_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, K2Node_CreateDelegate_OutputDelegate_112) == 0x001050, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::K2Node_CreateDelegate_OutputDelegate_112' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_GetPlayerFixParam_Param_1) == 0x001060, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_GetPlayerFixParam_Param_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetInvalidDamage_Dummy_2) == 0x001068, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetInvalidDamage_Dummy_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_IsValid_ReturnValue_16) == 0x001069, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer, CallFunc_SetInvalidDamage_Dummy_3) == 0x00106A, "Member 'RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer::CallFunc_SetInvalidDamage_Dummy_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature final
{
public:
	struct FVector                                ImpactLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature) == 0x00000C, "Wrong size on RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature, ImpactLocation) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature::ImpactLocation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOn;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLostTarget;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature, Target) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature::Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature, bLockOn) == 0x000008, "Member 'RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature::bLockOn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature, bLostTarget) == 0x000009, "Member 'RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature::bLostTarget' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateNpcWarpDither
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_UpdateNpcWarpDither final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_UpdateNpcWarpDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateNpcWarpDither");
static_assert(sizeof(RSBattlePlayer_C_UpdateNpcWarpDither) == 0x000004, "Wrong size on RSBattlePlayer_C_UpdateNpcWarpDither");
static_assert(offsetof(RSBattlePlayer_C_UpdateNpcWarpDither, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_UpdateNpcWarpDither::DeltaSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReceiveUnpossessed");
static_assert(sizeof(RSBattlePlayer_C_ReceiveUnpossessed) == 0x000008, "Wrong size on RSBattlePlayer_C_ReceiveUnpossessed");
static_assert(offsetof(RSBattlePlayer_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceivePossessed) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReceivePossessed");
static_assert(sizeof(RSBattlePlayer_C_ReceivePossessed) == 0x000008, "Wrong size on RSBattlePlayer_C_ReceivePossessed");
static_assert(offsetof(RSBattlePlayer_C_ReceivePossessed, NewController) == 0x000000, "Member 'RSBattlePlayer_C_ReceivePossessed::NewController' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature final
{
public:
	int32                                         RegenerateHP;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature) == 0x000004, "Wrong size on RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature, RegenerateHP) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature::RegenerateHP' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeDisableBattleActionFlag
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnChangeDisableBattleActionFlag final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeDisableBattleActionFlag) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeDisableBattleActionFlag");
static_assert(sizeof(RSBattlePlayer_C_OnChangeDisableBattleActionFlag) == 0x000001, "Wrong size on RSBattlePlayer_C_OnChangeDisableBattleActionFlag");
static_assert(offsetof(RSBattlePlayer_C_OnChangeDisableBattleActionFlag, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeDisableBattleActionFlag::bDisable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature final
{
public:
	ERSAttackInputKind                            AttackInputKind;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature, AttackInputKind) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature::AttackInputKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ReceiveEndPlay");
static_assert(sizeof(RSBattlePlayer_C_ReceiveEndPlay) == 0x000001, "Wrong size on RSBattlePlayer_C_ReceiveEndPlay");
static_assert(offsetof(RSBattlePlayer_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Psychic
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputAI_Psychic final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Psychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Psychic");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Psychic) == 0x000001, "Wrong size on RSBattlePlayer_C_InputAI_Psychic");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Psychic, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Psychic::bPressed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveChangeWalkRunStateKind
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ReceiveChangeWalkRunStateKind final
{
public:
	EPlayerWalkRunStateKind                       Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveChangeWalkRunStateKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ReceiveChangeWalkRunStateKind");
static_assert(sizeof(RSBattlePlayer_C_ReceiveChangeWalkRunStateKind) == 0x000001, "Wrong size on RSBattlePlayer_C_ReceiveChangeWalkRunStateKind");
static_assert(offsetof(RSBattlePlayer_C_ReceiveChangeWalkRunStateKind, Kind) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveChangeWalkRunStateKind::Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BindBrainFieldBattleEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BindBrainFieldBattleEnd final
{
public:
	EBrainFieldEndType                            EndType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BindBrainFieldBattleEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BindBrainFieldBattleEnd");
static_assert(sizeof(RSBattlePlayer_C_BindBrainFieldBattleEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_BindBrainFieldBattleEnd");
static_assert(offsetof(RSBattlePlayer_C_BindBrainFieldBattleEnd, EndType) == 0x000000, "Member 'RSBattlePlayer_C_BindBrainFieldBattleEnd::EndType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_UseItem
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputAI_UseItem final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_UseItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_UseItem");
static_assert(sizeof(RSBattlePlayer_C_InputAI_UseItem) == 0x000001, "Wrong size on RSBattlePlayer_C_InputAI_UseItem");
static_assert(offsetof(RSBattlePlayer_C_InputAI_UseItem, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_UseItem::bPressed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventPhysicsIdling
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EventPhysicsIdling final
{
public:
	float                                         IdlingSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleRestoreDelay;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EventPhysicsIdling) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EventPhysicsIdling");
static_assert(sizeof(RSBattlePlayer_C_EventPhysicsIdling) == 0x000008, "Wrong size on RSBattlePlayer_C_EventPhysicsIdling");
static_assert(offsetof(RSBattlePlayer_C_EventPhysicsIdling, IdlingSec) == 0x000000, "Member 'RSBattlePlayer_C_EventPhysicsIdling::IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventPhysicsIdling, IdleRestoreDelay) == 0x000004, "Member 'RSBattlePlayer_C_EventPhysicsIdling::IdleRestoreDelay' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Jump
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputAI_Jump final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Jump) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Jump");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Jump) == 0x000001, "Wrong size on RSBattlePlayer_C_InputAI_Jump");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Jump, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Jump::bPressed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReachNavLinkPoint
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_OnReachNavLinkPoint final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReachNavLinkPoint) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnReachNavLinkPoint");
static_assert(sizeof(RSBattlePlayer_C_OnReachNavLinkPoint) == 0x00000C, "Wrong size on RSBattlePlayer_C_OnReachNavLinkPoint");
static_assert(offsetof(RSBattlePlayer_C_OnReachNavLinkPoint, Destination) == 0x000000, "Member 'RSBattlePlayer_C_OnReachNavLinkPoint::Destination' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Dodge
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputAI_Dodge final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Dodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Dodge");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Dodge) == 0x000001, "Wrong size on RSBattlePlayer_C_InputAI_Dodge");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Dodge, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Dodge::bPressed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_LeftStick
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_InputAI_LeftStick final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_LeftStick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_InputAI_LeftStick");
static_assert(sizeof(RSBattlePlayer_C_InputAI_LeftStick) == 0x000008, "Wrong size on RSBattlePlayer_C_InputAI_LeftStick");
static_assert(offsetof(RSBattlePlayer_C_InputAI_LeftStick, X) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_LeftStick::X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_LeftStick, Y) == 0x000004, "Member 'RSBattlePlayer_C_InputAI_LeftStick::Y' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature::bad_state' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_797A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature::bad_state' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature, Attacker) == 0x000008, "Member 'RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature::Attacker' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Attack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputAI_Attack final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Attack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Attack");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Attack) == 0x000001, "Wrong size on RSBattlePlayer_C_InputAI_Attack");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Attack, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Attack::bPressed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ReceiveMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveMontageEnded) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReceiveMontageEnded");
static_assert(sizeof(RSBattlePlayer_C_ReceiveMontageEnded) == 0x000010, "Wrong size on RSBattlePlayer_C_ReceiveMontageEnded");
static_assert(offsetof(RSBattlePlayer_C_ReceiveMontageEnded, Montage) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReceiveMontageEnded, Interrupted) == 0x000008, "Member 'RSBattlePlayer_C_ReceiveMontageEnded::Interrupted' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ReceiveMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveMontageBlendingOut) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReceiveMontageBlendingOut");
static_assert(sizeof(RSBattlePlayer_C_ReceiveMontageBlendingOut) == 0x000010, "Wrong size on RSBattlePlayer_C_ReceiveMontageBlendingOut");
static_assert(offsetof(RSBattlePlayer_C_ReceiveMontageBlendingOut, Montage) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReceiveMontageBlendingOut, Interrupted) == 0x000008, "Member 'RSBattlePlayer_C_ReceiveMontageBlendingOut::Interrupted' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveChangeAnimKind
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ReceiveChangeAnimKind final
{
public:
	EPlayerAnimKind                               NewKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAnimKind                               OldKind;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveChangeAnimKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ReceiveChangeAnimKind");
static_assert(sizeof(RSBattlePlayer_C_ReceiveChangeAnimKind) == 0x000002, "Wrong size on RSBattlePlayer_C_ReceiveChangeAnimKind");
static_assert(offsetof(RSBattlePlayer_C_ReceiveChangeAnimKind, NewKind) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveChangeAnimKind::NewKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReceiveChangeAnimKind, OldKind) == 0x000001, "Member 'RSBattlePlayer_C_ReceiveChangeAnimKind::OldKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReceiveTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ReceiveTick");
static_assert(sizeof(RSBattlePlayer_C_ReceiveTick) == 0x000004, "Wrong size on RSBattlePlayer_C_ReceiveTick");
static_assert(offsetof(RSBattlePlayer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhostOneShot
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnBonusGhostOneShot final
{
public:
	float                                         AliveTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBonusGhostOneShot) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnBonusGhostOneShot");
static_assert(sizeof(RSBattlePlayer_C_OnBonusGhostOneShot) == 0x000004, "Wrong size on RSBattlePlayer_C_OnBonusGhostOneShot");
static_assert(offsetof(RSBattlePlayer_C_OnBonusGhostOneShot, AliveTime) == 0x000000, "Member 'RSBattlePlayer_C_OnBonusGhostOneShot::AliveTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhostFromDT
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBonusGhostFromDT final
{
public:
	EBonusGhostType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBonusGhostFromDT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBonusGhostFromDT");
static_assert(sizeof(RSBattlePlayer_C_OnBonusGhostFromDT) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBonusGhostFromDT");
static_assert(offsetof(RSBattlePlayer_C_OnBonusGhostFromDT, Type) == 0x000000, "Member 'RSBattlePlayer_C_OnBonusGhostFromDT::Type' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhost
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnBonusGhost final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBonusGhost) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnBonusGhost");
static_assert(sizeof(RSBattlePlayer_C_OnBonusGhost) == 0x000004, "Wrong size on RSBattlePlayer_C_OnBonusGhost");
static_assert(offsetof(RSBattlePlayer_C_OnBonusGhost, Time) == 0x000000, "Member 'RSBattlePlayer_C_OnBonusGhost::Time' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature final
{
public:
	class FName                                   CommandName;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ArgName;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature, CommandName) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature::CommandName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature, ArgName) == 0x000008, "Member 'RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature::ArgName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBattleSimulatorEndTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnBattleSimulatorEndTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBattleSimulatorEndTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnBattleSimulatorEndTick");
static_assert(sizeof(RSBattlePlayer_C_OnBattleSimulatorEndTick) == 0x000004, "Wrong size on RSBattlePlayer_C_OnBattleSimulatorEndTick");
static_assert(offsetof(RSBattlePlayer_C_OnBattleSimulatorEndTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_OnBattleSimulatorEndTick::DeltaSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBattleSimulatorMissionEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBattleSimulatorMissionEnd final
{
public:
	bool                                          bMissionCancel;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBattleSimulatorMissionEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBattleSimulatorMissionEnd");
static_assert(sizeof(RSBattlePlayer_C_OnBattleSimulatorMissionEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBattleSimulatorMissionEnd");
static_assert(offsetof(RSBattlePlayer_C_OnBattleSimulatorMissionEnd, bMissionCancel) == 0x000000, "Member 'RSBattlePlayer_C_OnBattleSimulatorMissionEnd::bMissionCancel' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EquipCostume
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_EquipCostume final
{
public:
	int32                                         CostumeId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EquipCostume) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EquipCostume");
static_assert(sizeof(RSBattlePlayer_C_EquipCostume) == 0x000004, "Wrong size on RSBattlePlayer_C_EquipCostume");
static_assert(offsetof(RSBattlePlayer_C_EquipCostume, CostumeId) == 0x000000, "Member 'RSBattlePlayer_C_EquipCostume::CostumeId' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckHologramAttack
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_CheckHologramAttack final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_797B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       RequestCharacter;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CheckHologramAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckHologramAttack");
static_assert(sizeof(RSBattlePlayer_C_CheckHologramAttack) == 0x000010, "Wrong size on RSBattlePlayer_C_CheckHologramAttack");
static_assert(offsetof(RSBattlePlayer_C_CheckHologramAttack, Timing) == 0x000000, "Member 'RSBattlePlayer_C_CheckHologramAttack::Timing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckHologramAttack, RequestCharacter) == 0x000008, "Member 'RSBattlePlayer_C_CheckHologramAttack::RequestCharacter' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EquipAttachment
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EquipAttachment final
{
public:
	EPlayerAttachment                             Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_797C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttachmentId;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EquipAttachment) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EquipAttachment");
static_assert(sizeof(RSBattlePlayer_C_EquipAttachment) == 0x000008, "Wrong size on RSBattlePlayer_C_EquipAttachment");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachment, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_EquipAttachment::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachment, AttachmentId) == 0x000004, "Member 'RSBattlePlayer_C_EquipAttachment::AttachmentId' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEyeControlParameter
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetEyeControlParameter final
{
public:
	float                                         Horizontal;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vertical;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetEyeControlParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEyeControlParameter");
static_assert(sizeof(RSBattlePlayer_C_SetEyeControlParameter) == 0x000008, "Wrong size on RSBattlePlayer_C_SetEyeControlParameter");
static_assert(offsetof(RSBattlePlayer_C_SetEyeControlParameter, Horizontal) == 0x000000, "Member 'RSBattlePlayer_C_SetEyeControlParameter::Horizontal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEyeControlParameter, Vertical) == 0x000004, "Member 'RSBattlePlayer_C_SetEyeControlParameter::Vertical' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEyeControlEnable
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetEyeControlEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_797D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetEyeControlEnable) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEyeControlEnable");
static_assert(sizeof(RSBattlePlayer_C_SetEyeControlEnable) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetEyeControlEnable");
static_assert(offsetof(RSBattlePlayer_C_SetEyeControlEnable, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEyeControlEnable::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEyeControlEnable, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetEyeControlEnable::ClaimantName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateParameter
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattlePlayer_C_UpdateParameter final
{
public:
	struct FCharactersParameterTable              Table;                                             // 0x0000(0x01F8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(RSBattlePlayer_C_UpdateParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UpdateParameter");
static_assert(sizeof(RSBattlePlayer_C_UpdateParameter) == 0x0001F8, "Wrong size on RSBattlePlayer_C_UpdateParameter");
static_assert(offsetof(RSBattlePlayer_C_UpdateParameter, Table) == 0x000000, "Member 'RSBattlePlayer_C_UpdateParameter::Table' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EquipAccessory
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EquipAccessory final
{
public:
	EPlayerAccessory                              Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_797E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AccessoryId;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EquipAccessory) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EquipAccessory");
static_assert(sizeof(RSBattlePlayer_C_EquipAccessory) == 0x000008, "Wrong size on RSBattlePlayer_C_EquipAccessory");
static_assert(offsetof(RSBattlePlayer_C_EquipAccessory, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_EquipAccessory::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAccessory, AccessoryId) == 0x000004, "Member 'RSBattlePlayer_C_EquipAccessory::AccessoryId' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EquipWeapon final
{
public:
	int32                                         WeaponId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkinID;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EquipWeapon) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EquipWeapon");
static_assert(sizeof(RSBattlePlayer_C_EquipWeapon) == 0x000008, "Wrong size on RSBattlePlayer_C_EquipWeapon");
static_assert(offsetof(RSBattlePlayer_C_EquipWeapon, WeaponId) == 0x000000, "Member 'RSBattlePlayer_C_EquipWeapon::WeaponId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipWeapon, SkinID) == 0x000004, "Member 'RSBattlePlayer_C_EquipWeapon::SkinID' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAIOrder
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetAIOrder final
{
public:
	EPlayerAIOrder                                Plan;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetAIOrder) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetAIOrder");
static_assert(sizeof(RSBattlePlayer_C_SetAIOrder) == 0x000001, "Wrong size on RSBattlePlayer_C_SetAIOrder");
static_assert(offsetof(RSBattlePlayer_C_SetAIOrder, Plan) == 0x000000, "Member 'RSBattlePlayer_C_SetAIOrder::Plan' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature final
{
public:
	int32                                         NewState;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature, NewState) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature::NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature, Param) == 0x000004, "Member 'RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature::Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature final
{
public:
	int32                                         NewState;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature, NewState) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature::NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature, Param) == 0x000004, "Member 'RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature::Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnBrainCrashEnd final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_797F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PlayerEndMontage;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainCrashEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBrainCrashEnd");
static_assert(sizeof(RSBattlePlayer_C_OnBrainCrashEnd) == 0x000010, "Wrong size on RSBattlePlayer_C_OnBrainCrashEnd");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashEnd, bBeginActor) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainCrashEnd::bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashEnd, PlayerEndMontage) == 0x000008, "Member 'RSBattlePlayer_C_OnBrainCrashEnd::PlayerEndMontage' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBrainCrashStart final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainCrashStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainCrashStart");
static_assert(sizeof(RSBattlePlayer_C_OnBrainCrashStart) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBrainCrashStart");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashStart, bBeginActor) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainCrashStart::bBeginActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEventBackbodyAttachmentDither
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnEventBackbodyAttachmentDither final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnEventBackbodyAttachmentDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnEventBackbodyAttachmentDither");
static_assert(sizeof(RSBattlePlayer_C_OnEventBackbodyAttachmentDither) == 0x000004, "Wrong size on RSBattlePlayer_C_OnEventBackbodyAttachmentDither");
static_assert(offsetof(RSBattlePlayer_C_OnEventBackbodyAttachmentDither, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_OnEventBackbodyAttachmentDither::DeltaSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature final
{
public:
	EPlayerMaterialManageType                     Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature, Type) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature::Type' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature final
{
public:
	int32                                         StockNum;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bItemUse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoEffect;                                         // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature) == 0x000008, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature, StockNum) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature::StockNum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature, bItemUse) == 0x000004, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature::bItemUse' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature, bNoEffect) == 0x000005, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature::bNoEffect' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature final
{
public:
	ENotifyDriveEvent                             Reason;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature) == 0x000001, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature, Reason) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature::Reason' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayStart;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature, User) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature::User' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature, bPlayStart) == 0x000008, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature::bPlayStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayStart;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature) == 0x000010, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature, User) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature::User' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature, bPlayStart) == 0x000008, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature::bPlayStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DM_SetMaterial
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DM_SetMaterial final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DM_SetMaterial) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DM_SetMaterial");
static_assert(sizeof(RSBattlePlayer_C_DM_SetMaterial) == 0x000001, "Wrong size on RSBattlePlayer_C_DM_SetMaterial");
static_assert(offsetof(RSBattlePlayer_C_DM_SetMaterial, Value) == 0x000000, "Member 'RSBattlePlayer_C_DM_SetMaterial::Value' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DM_SetVisibleUI
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DM_SetVisibleUI final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DM_SetVisibleUI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DM_SetVisibleUI");
static_assert(sizeof(RSBattlePlayer_C_DM_SetVisibleUI) == 0x000001, "Wrong size on RSBattlePlayer_C_DM_SetVisibleUI");
static_assert(offsetof(RSBattlePlayer_C_DM_SetVisibleUI, Enable) == 0x000000, "Member 'RSBattlePlayer_C_DM_SetVisibleUI::Enable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature) == 0x000004, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature, GaugeRate) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature::GaugeRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature final
{
public:
	float                                         RegenerateHP;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature) == 0x000004, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature, RegenerateHP) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature::RegenerateHP' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature final
{
public:
	bool                                          bInterruption;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationChange;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature");
static_assert(sizeof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature) == 0x000002, "Wrong size on RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature, bInterruption) == 0x000000, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature::bInterruption' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature, bLocationChange) == 0x000001, "Member 'RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature::bLocationChange' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldOpenStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BrainFieldOpenStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainFieldOpenStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainFieldOpenStart");
static_assert(sizeof(RSBattlePlayer_C_BrainFieldOpenStart) == 0x000010, "Wrong size on RSBattlePlayer_C_BrainFieldOpenStart");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldOpenStart, BrainFieldUser) == 0x000000, "Member 'RSBattlePlayer_C_BrainFieldOpenStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldOpenStart, IsAttacker) == 0x000008, "Member 'RSBattlePlayer_C_BrainFieldOpenStart::IsAttacker' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldMoveNormalField
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BrainFieldMoveNormalField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainFieldMoveNormalField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainFieldMoveNormalField");
static_assert(sizeof(RSBattlePlayer_C_BrainFieldMoveNormalField) == 0x000010, "Wrong size on RSBattlePlayer_C_BrainFieldMoveNormalField");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldMoveNormalField, BrainFieldUser) == 0x000000, "Member 'RSBattlePlayer_C_BrainFieldMoveNormalField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldMoveNormalField, IsAttacker) == 0x000008, "Member 'RSBattlePlayer_C_BrainFieldMoveNormalField::IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldMoveNormalField, EndType) == 0x000009, "Member 'RSBattlePlayer_C_BrainFieldMoveNormalField::EndType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldCloseStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BrainFieldCloseStart final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            EndType;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainFieldCloseStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainFieldCloseStart");
static_assert(sizeof(RSBattlePlayer_C_BrainFieldCloseStart) == 0x000010, "Wrong size on RSBattlePlayer_C_BrainFieldCloseStart");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldCloseStart, BrainFieldUser) == 0x000000, "Member 'RSBattlePlayer_C_BrainFieldCloseStart::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldCloseStart, IsAttacker) == 0x000008, "Member 'RSBattlePlayer_C_BrainFieldCloseStart::IsAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldCloseStart, EndType) == 0x000009, "Member 'RSBattlePlayer_C_BrainFieldCloseStart::EndType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldOpenEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BrainFieldOpenEnd final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainFieldOpenEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainFieldOpenEnd");
static_assert(sizeof(RSBattlePlayer_C_BrainFieldOpenEnd) == 0x000010, "Wrong size on RSBattlePlayer_C_BrainFieldOpenEnd");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldOpenEnd, BrainFieldUser) == 0x000000, "Member 'RSBattlePlayer_C_BrainFieldOpenEnd::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldOpenEnd, IsAttacker) == 0x000008, "Member 'RSBattlePlayer_C_BrainFieldOpenEnd::IsAttacker' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldMoveBrainField
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_BrainFieldMoveBrainField final
{
public:
	class AActor*                                 BrainFieldUser;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainFieldMoveBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainFieldMoveBrainField");
static_assert(sizeof(RSBattlePlayer_C_BrainFieldMoveBrainField) == 0x000010, "Wrong size on RSBattlePlayer_C_BrainFieldMoveBrainField");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldMoveBrainField, BrainFieldUser) == 0x000000, "Member 'RSBattlePlayer_C_BrainFieldMoveBrainField::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainFieldMoveBrainField, IsAttacker) == 0x000008, "Member 'RSBattlePlayer_C_BrainFieldMoveBrainField::IsAttacker' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AfterTelepoTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_AfterTelepoTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AfterTelepoTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_AfterTelepoTick");
static_assert(sizeof(RSBattlePlayer_C_AfterTelepoTick) == 0x000004, "Wrong size on RSBattlePlayer_C_AfterTelepoTick");
static_assert(offsetof(RSBattlePlayer_C_AfterTelepoTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_AfterTelepoTick::DeltaSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseWorldMap
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseWorldMap final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseWorldMap) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseWorldMap");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseWorldMap) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseWorldMap");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseWorldMap, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseWorldMap::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseWorldMap, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseWorldMap::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerWorldMap
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerWorldMap final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerWorldMap) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerWorldMap");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerWorldMap) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerWorldMap");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerWorldMap, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerWorldMap::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerWorldMap, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerWorldMap::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAssaultVision
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseAssaultVision final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseAssaultVision) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseAssaultVision");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseAssaultVision) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseAssaultVision");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAssaultVision, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseAssaultVision::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAssaultVision, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseAssaultVision::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerAssaultVision
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerAssaultVision final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerAssaultVision) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerAssaultVision");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerAssaultVision) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerAssaultVision");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerAssaultVision, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerAssaultVision::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerAssaultVision, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerAssaultVision::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVRight
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseCVRight final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseCVRight) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseCVRight");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseCVRight) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseCVRight");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVRight, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseCVRight::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVRight, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseCVRight::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVRight
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerCVRight final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerCVRight) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerCVRight");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerCVRight) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerCVRight");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVRight, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerCVRight::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVRight, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerCVRight::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVLeft
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseCVLeft final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseCVLeft) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseCVLeft");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseCVLeft) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseCVLeft");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVLeft, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseCVLeft::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVLeft, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseCVLeft::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVLeft
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerCVLeft final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerCVLeft) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerCVLeft");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerCVLeft) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerCVLeft");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVLeft, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerCVLeft::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVLeft, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerCVLeft::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSVDown
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSVDown final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSVDown) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSVDown");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSVDown) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSVDown");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSVDown, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSVDown::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSVDown, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSVDown::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVDown
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerCVDown final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerCVDown) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerCVDown");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerCVDown) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerCVDown");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVDown, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerCVDown::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVDown, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerCVDown::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseCVUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseCVUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseCVUP");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseCVUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseCVUP");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseCVUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseCVUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OntriggerCVUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OntriggerCVUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OntriggerCVUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OntriggerCVUP");
static_assert(sizeof(RSBattlePlayer_C_OntriggerCVUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OntriggerCVUP");
static_assert(offsetof(RSBattlePlayer_C_OntriggerCVUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OntriggerCVUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OntriggerCVUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OntriggerCVUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVMENUCOPEN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseCVMENUCOPEN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseCVMENUCOPEN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseCVMENUCOPEN");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseCVMENUCOPEN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseCVMENUCOPEN");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVMENUCOPEN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseCVMENUCOPEN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCVMENUCOPEN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseCVMENUCOPEN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVMENUOPEN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerCVMENUOPEN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerCVMENUOPEN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerCVMENUOPEN");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerCVMENUOPEN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerCVMENUOPEN");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVMENUOPEN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerCVMENUOPEN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerCVMENUOPEN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerCVMENUOPEN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseweaponAttackSub
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseweaponAttackSub final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseweaponAttackSub) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseweaponAttackSub");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseweaponAttackSub) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseweaponAttackSub");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseweaponAttackSub, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseweaponAttackSub::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseweaponAttackSub, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseweaponAttackSub::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerWeaponAttackSub
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTriggerWeaponAttackSub final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTriggerWeaponAttackSub) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTriggerWeaponAttackSub");
static_assert(sizeof(RSBattlePlayer_C_OnTriggerWeaponAttackSub) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTriggerWeaponAttackSub");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerWeaponAttackSub, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTriggerWeaponAttackSub::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTriggerWeaponAttackSub, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTriggerWeaponAttackSub::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveRight
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseMoveRight final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseMoveRight) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseMoveRight");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseMoveRight) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseMoveRight");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveRight, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseMoveRight::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveRight, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseMoveRight::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveRight
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgMoveRight final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgMoveRight) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgMoveRight");
static_assert(sizeof(RSBattlePlayer_C_OnTrgMoveRight) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgMoveRight");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveRight, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgMoveRight::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveRight, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgMoveRight::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveLeft
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseMoveLeft final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseMoveLeft) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseMoveLeft");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseMoveLeft) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseMoveLeft");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveLeft, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseMoveLeft::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveLeft, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseMoveLeft::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveLeft
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgMoveLeft final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgMoveLeft) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgMoveLeft");
static_assert(sizeof(RSBattlePlayer_C_OnTrgMoveLeft) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgMoveLeft");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveLeft, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgMoveLeft::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveLeft, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgMoveLeft::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveBackward
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseMoveBackward final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseMoveBackward) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseMoveBackward");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseMoveBackward) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseMoveBackward");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveBackward, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseMoveBackward::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveBackward, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseMoveBackward::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveBackward
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgMoveBackward final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgMoveBackward) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgMoveBackward");
static_assert(sizeof(RSBattlePlayer_C_OnTrgMoveBackward) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgMoveBackward");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveBackward, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgMoveBackward::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveBackward, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgMoveBackward::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveForward
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseMoveForward final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseMoveForward) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseMoveForward");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseMoveForward) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseMoveForward");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveForward, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseMoveForward::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseMoveForward, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseMoveForward::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveForward
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgMoveForward final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgMoveForward) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgMoveForward");
static_assert(sizeof(RSBattlePlayer_C_OnTrgMoveForward) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgMoveForward");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveForward, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgMoveForward::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgMoveForward, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgMoveForward::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseDPADEMU_DOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseDPADEMU_DOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseDPADEMU_DOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseDPADEMU_DOWN");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseDPADEMU_DOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseDPADEMU_DOWN");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseDPADEMU_DOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseDPADEMU_DOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseDPADEMU_DOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseDPADEMU_DOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgDPADEMU_DOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgDPADEMU_DOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgDPADEMU_DOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgDPADEMU_DOWN");
static_assert(sizeof(RSBattlePlayer_C_OnTrgDPADEMU_DOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgDPADEMU_DOWN");
static_assert(offsetof(RSBattlePlayer_C_OnTrgDPADEMU_DOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgDPADEMU_DOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgDPADEMU_DOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgDPADEMU_DOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemUse
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseItemUse final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseItemUse) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseItemUse");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseItemUse) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseItemUse");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemUse, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseItemUse::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemUse, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseItemUse::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemUse
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgItemUse final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgItemUse) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgItemUse");
static_assert(sizeof(RSBattlePlayer_C_OnTrgItemUse) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgItemUse");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemUse, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgItemUse::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemUse, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgItemUse::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemSelectR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseItemSelectR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseItemSelectR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseItemSelectR");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseItemSelectR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseItemSelectR");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemSelectR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseItemSelectR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemSelectR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseItemSelectR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemSelectR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgItemSelectR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgItemSelectR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgItemSelectR");
static_assert(sizeof(RSBattlePlayer_C_OnTrgItemSelectR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgItemSelectR");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemSelectR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgItemSelectR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemSelectR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgItemSelectR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemSelectL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseItemSelectL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseItemSelectL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseItemSelectL");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseItemSelectL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseItemSelectL");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemSelectL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseItemSelectL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseItemSelectL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseItemSelectL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemSelectL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgItemSelectL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgItemSelectL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgItemSelectL");
static_assert(sizeof(RSBattlePlayer_C_OnTrgItemSelectL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgItemSelectL");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemSelectL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgItemSelectL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgItemSelectL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgItemSelectL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockSwitchR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLockSwitchR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLockSwitchR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLockSwitchR");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLockSwitchR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLockSwitchR");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockSwitchR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLockSwitchR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockSwitchR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLockSwitchR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockSwitchR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLockSwitchR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLockSwitchR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLockSwitchR");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLockSwitchR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLockSwitchR");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockSwitchR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLockSwitchR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockSwitchR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLockSwitchR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockSwitchL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLockSwitchL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLockSwitchL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLockSwitchL");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLockSwitchL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLockSwitchL");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockSwitchL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLockSwitchL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockSwitchL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLockSwitchL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockSwitchL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLockSwitchL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLockSwitchL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLockSwitchL");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLockSwitchL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLockSwitchL");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockSwitchL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLockSwitchL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockSwitchL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLockSwitchL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockOn
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLockOn final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLockOn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLockOn");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLockOn) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLockOn");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockOn, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLockOn::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLockOn, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLockOn::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockOn
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLockOn final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLockOn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLockOn");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLockOn) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLockOn");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockOn, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLockOn::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLockOn, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLockOn::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCameraReset
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseCameraReset final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseCameraReset) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseCameraReset");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseCameraReset) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseCameraReset");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCameraReset, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseCameraReset::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseCameraReset, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseCameraReset::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgCameraReset
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgCameraReset final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgCameraReset) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgCameraReset");
static_assert(sizeof(RSBattlePlayer_C_OnTrgCameraReset) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgCameraReset");
static_assert(offsetof(RSBattlePlayer_C_OnTrgCameraReset, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgCameraReset::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgCameraReset, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgCameraReset::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleasePsychicField
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleasePsychicField final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleasePsychicField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleasePsychicField");
static_assert(sizeof(RSBattlePlayer_C_OnReleasePsychicField) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleasePsychicField");
static_assert(offsetof(RSBattlePlayer_C_OnReleasePsychicField, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleasePsychicField::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleasePsychicField, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleasePsychicField::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychicField
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgPsychicField final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgPsychicField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgPsychicField");
static_assert(sizeof(RSBattlePlayer_C_OnTrgPsychicField) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgPsychicField");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychicField, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgPsychicField::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychicField, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgPsychicField::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseBrainField
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseBrainField final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseBrainField");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseBrainField) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseBrainField");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseBrainField, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseBrainField::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseBrainField, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseBrainField::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgBrainField
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgBrainField final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgBrainField");
static_assert(sizeof(RSBattlePlayer_C_OnTrgBrainField) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgBrainField");
static_assert(offsetof(RSBattlePlayer_C_OnTrgBrainField, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgBrainField::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgBrainField, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgBrainField::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleasePsychicSpecial
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleasePsychicSpecial final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleasePsychicSpecial) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleasePsychicSpecial");
static_assert(sizeof(RSBattlePlayer_C_OnReleasePsychicSpecial) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleasePsychicSpecial");
static_assert(offsetof(RSBattlePlayer_C_OnReleasePsychicSpecial, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleasePsychicSpecial::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleasePsychicSpecial, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleasePsychicSpecial::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychicSpecial
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgPsychicSpecial final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgPsychicSpecial) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgPsychicSpecial");
static_assert(sizeof(RSBattlePlayer_C_OnTrgPsychicSpecial) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgPsychicSpecial");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychicSpecial, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgPsychicSpecial::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychicSpecial, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgPsychicSpecial::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnRelasePsychic
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnRelasePsychic final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnRelasePsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnRelasePsychic");
static_assert(sizeof(RSBattlePlayer_C_OnRelasePsychic) == 0x000002, "Wrong size on RSBattlePlayer_C_OnRelasePsychic");
static_assert(offsetof(RSBattlePlayer_C_OnRelasePsychic, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnRelasePsychic::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnRelasePsychic, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnRelasePsychic::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychic
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgPsychic final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgPsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgPsychic");
static_assert(sizeof(RSBattlePlayer_C_OnTrgPsychic) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgPsychic");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychic, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgPsychic::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgPsychic, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgPsychic::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseJump
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseJump final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseJump) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseJump");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseJump) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseJump");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseJump, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseJump::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseJump, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseJump::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgJump
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgJump final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgJump) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgJump");
static_assert(sizeof(RSBattlePlayer_C_OnTrgJump) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgJump");
static_assert(offsetof(RSBattlePlayer_C_OnTrgJump, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgJump::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgJump, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgJump::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseAttack final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseAttack");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseAttack");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAttack, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseAttack::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAttack, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseAttack::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgAttack final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgAttack");
static_assert(sizeof(RSBattlePlayer_C_OnTrgAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgAttack");
static_assert(offsetof(RSBattlePlayer_C_OnTrgAttack, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgAttack::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgAttack, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgAttack::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseDodge
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseDodge final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseDodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseDodge");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseDodge) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseDodge");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseDodge, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseDodge::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseDodge, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseDodge::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgDodge
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgDodge final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgDodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgDodge");
static_assert(sizeof(RSBattlePlayer_C_OnTrgDodge) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgDodge");
static_assert(offsetof(RSBattlePlayer_C_OnTrgDodge, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgDodge::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgDodge, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgDodge::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseAction final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseAction");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseAction) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseAction");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAction, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseAction::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseAction, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseAction::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgAction final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgAction");
static_assert(sizeof(RSBattlePlayer_C_OnTrgAction) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgAction");
static_assert(offsetof(RSBattlePlayer_C_OnTrgAction, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgAction::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgAction, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgAction::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasPage
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasPage final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasPage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasPage");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasPage) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasPage");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasPage, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasPage::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasPage, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasPage::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasPage
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasPage final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasPage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasPage");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasPage) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasPage");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasPage, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasPage::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasPage, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasPage::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasStop
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasStop final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasStop) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasStop");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasStop) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasStop");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasStop, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasStop::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasStop, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasStop::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasStop
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasStop final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasStop) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasStop");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasStop) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasStop");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasStop, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasStop::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasStop, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasStop::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasR");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasR");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasR
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasR final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasR) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasR");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasR) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasR");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasR, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasR::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasR, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasR::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasL");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasL");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasL
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasL final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasL) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasL");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasL) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasL");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasL, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasL::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasL, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasL::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasD
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasD final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasD) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasD");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasD) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasD");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasD, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasD::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasD, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasD::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasD
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasD final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasD) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasD");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasD) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasD");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasD, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasD::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasD, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasD::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasU
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasU final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasU) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasU");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasU) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasU");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasU, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasU::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasU, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasU::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasU
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasU final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasU) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasU");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasU) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasU");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasU, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasU::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasU, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasU::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasMenuOpenClose
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseSasMenuOpenClose final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseSasMenuOpenClose) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseSasMenuOpenClose");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseSasMenuOpenClose) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseSasMenuOpenClose");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasMenuOpenClose, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseSasMenuOpenClose::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseSasMenuOpenClose, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseSasMenuOpenClose::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasMenuOpenClose
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgSasMenuOpenClose final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgSasMenuOpenClose) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgSasMenuOpenClose");
static_assert(sizeof(RSBattlePlayer_C_OnTrgSasMenuOpenClose) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgSasMenuOpenClose");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasMenuOpenClose, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgSasMenuOpenClose::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgSasMenuOpenClose, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgSasMenuOpenClose::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.onReleaseL3
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseL3 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseL3) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseL3");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseL3) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseL3");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL3, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseL3::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL3, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseL3::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL3
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgL3 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgL3) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgL3");
static_assert(sizeof(RSBattlePlayer_C_OnTrgL3) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgL3");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL3, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgL3::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL3, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgL3::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseL2
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseL2 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseL2) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseL2");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseL2) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseL2");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL2, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseL2::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL2, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseL2::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL2
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgL2 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgL2) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgL2");
static_assert(sizeof(RSBattlePlayer_C_OnTrgL2) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgL2");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL2, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgL2::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL2, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgL2::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseL1
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseL1 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseL1) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseL1");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseL1) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseL1");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL1, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseL1::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseL1, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseL1::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL1
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgL1 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgL1) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgL1");
static_assert(sizeof(RSBattlePlayer_C_OnTrgL1) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgL1");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL1, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgL1::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgL1, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgL1::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR3
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseR3 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseR3) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseR3");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseR3) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseR3");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR3, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseR3::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR3, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseR3::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR3
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgR3 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgR3) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgR3");
static_assert(sizeof(RSBattlePlayer_C_OnTrgR3) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgR3");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR3, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgR3::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR3, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgR3::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR2
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseR2 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseR2) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseR2");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseR2) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseR2");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR2, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseR2::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR2, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseR2::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR2
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgR2 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgR2) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgR2");
static_assert(sizeof(RSBattlePlayer_C_OnTrgR2) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgR2");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR2, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgR2::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR2, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgR2::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR1
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseR1 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseR1) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseR1");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseR1) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseR1");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR1, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseR1::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseR1, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseR1::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR1
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgR1 final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgR1) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgR1");
static_assert(sizeof(RSBattlePlayer_C_OnTrgR1) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgR1");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR1, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgR1::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgR1, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgR1::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRRIGHT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseRRIGHT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseRRIGHT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseRRIGHT");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseRRIGHT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseRRIGHT");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRRIGHT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseRRIGHT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRRIGHT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseRRIGHT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRRIGHT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgRRIGHT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgRRIGHT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgRRIGHT");
static_assert(sizeof(RSBattlePlayer_C_OnTrgRRIGHT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgRRIGHT");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRRIGHT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgRRIGHT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRRIGHT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgRRIGHT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRLEFT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseRLEFT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseRLEFT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseRLEFT");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseRLEFT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseRLEFT");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRLEFT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseRLEFT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRLEFT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseRLEFT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRLEFT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgRLEFT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgRLEFT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgRLEFT");
static_assert(sizeof(RSBattlePlayer_C_OnTrgRLEFT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgRLEFT");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRLEFT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgRLEFT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRLEFT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgRLEFT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRDOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseRDOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseRDOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseRDOWN");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseRDOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseRDOWN");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRDOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseRDOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRDOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseRDOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRDOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgRDOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgRDOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgRDOWN");
static_assert(sizeof(RSBattlePlayer_C_OnTrgRDOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgRDOWN");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRDOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgRDOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRDOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgRDOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseRUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseRUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseRUP");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseRUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseRUP");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseRUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseRUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseRUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgRUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgRUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgRUP");
static_assert(sizeof(RSBattlePlayer_C_OnTrgRUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgRUP");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgRUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgRUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgRUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLRIGHT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLRIGHT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLRIGHT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLRIGHT");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLRIGHT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLRIGHT");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLRIGHT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLRIGHT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLRIGHT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLRIGHT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLRIGHT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLRIGHT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLRIGHT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLRIGHT");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLRIGHT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLRIGHT");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLRIGHT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLRIGHT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLRIGHT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLRIGHT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLLEFT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLLEFT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLLEFT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLLEFT");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLLEFT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLLEFT");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLLEFT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLLEFT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLLEFT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLLEFT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLLEFT
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLLEFT final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLLEFT) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLLEFT");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLLEFT) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLLEFT");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLLEFT, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLLEFT::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLLEFT, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLLEFT::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLDOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLDOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLDOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLDOWN");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLDOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLDOWN");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLDOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLDOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLDOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLDOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLDOWN
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLDOWN final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLDOWN) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLDOWN");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLDOWN) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLDOWN");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLDOWN, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLDOWN::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLDOWN, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLDOWN::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnReleaseLUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnReleaseLUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnReleaseLUP");
static_assert(sizeof(RSBattlePlayer_C_OnReleaseLUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OnReleaseLUP");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnReleaseLUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnReleaseLUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnReleaseLUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLUP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnTrgLUP final
{
public:
	ERSGamepadLayoutType                          Layout;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSGamepadInputName                           Key;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTrgLUP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnTrgLUP");
static_assert(sizeof(RSBattlePlayer_C_OnTrgLUP) == 0x000002, "Wrong size on RSBattlePlayer_C_OnTrgLUP");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLUP, Layout) == 0x000000, "Member 'RSBattlePlayer_C_OnTrgLUP::Layout' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTrgLUP, Key) == 0x000001, "Member 'RSBattlePlayer_C_OnTrgLUP::Key' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_SameSAS
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_SameSAS final
{
public:
	E_SASKindNative                               SasEffect;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7980[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_SameSAS) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BrainTalk_SameSAS");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_SameSAS) == 0x000008, "Wrong size on RSBattlePlayer_C_BrainTalk_SameSAS");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_SameSAS, SasEffect) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_SameSAS::SasEffect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_SameSAS, Num) == 0x000004, "Member 'RSBattlePlayer_C_BrainTalk_SameSAS::Num' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BondsSpecialAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_BondsSpecialAttack final
{
public:
	EPlayerID                                     HologramPlayerID;                                  // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_BondsSpecialAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainTalk_BondsSpecialAttack");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_BondsSpecialAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainTalk_BondsSpecialAttack");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_BondsSpecialAttack, HologramPlayerID) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_BondsSpecialAttack::HologramPlayerID' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_CoverDamage
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_CoverDamage final
{
public:
	EPlayerID                                     TakeOverCharacter;                                 // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_CoverDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainTalk_CoverDamage");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_CoverDamage) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainTalk_CoverDamage");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_CoverDamage, TakeOverCharacter) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_CoverDamage::TakeOverCharacter' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_Revive
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_Revive final
{
public:
	EPlayerID                                     Param_RevivePlayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_Revive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainTalk_Revive");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_Revive) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainTalk_Revive");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_Revive, Param_RevivePlayer) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_Revive::Param_RevivePlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_ItemRecovery
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_ItemRecovery final
{
public:
	EPlayerID                                     TargetPlayer;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_ItemRecovery) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainTalk_ItemRecovery");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_ItemRecovery) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainTalk_ItemRecovery");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_ItemRecovery, TargetPlayer) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_ItemRecovery::TargetPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BadStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainTalk_BadStatus final
{
public:
	EHCBadState                                   BadStatus;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BrainTalk_BadStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainTalk_BadStatus");
static_assert(sizeof(RSBattlePlayer_C_BrainTalk_BadStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainTalk_BadStatus");
static_assert(offsetof(RSBattlePlayer_C_BrainTalk_BadStatus, BadStatus) == 0x000000, "Member 'RSBattlePlayer_C_BrainTalk_BadStatus::BadStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPsychicEmissionInterface
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetPsychicEmissionInterface final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7981[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPsychicEmissionInterface) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPsychicEmissionInterface");
static_assert(sizeof(RSBattlePlayer_C_SetPsychicEmissionInterface) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetPsychicEmissionInterface");
static_assert(offsetof(RSBattlePlayer_C_SetPsychicEmissionInterface, bON) == 0x000000, "Member 'RSBattlePlayer_C_SetPsychicEmissionInterface::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPsychicEmissionInterface, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetPsychicEmissionInterface::ClaimantName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetStealth
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetStealth final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetStealth) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetStealth");
static_assert(sizeof(RSBattlePlayer_C_SetStealth) == 0x000001, "Wrong size on RSBattlePlayer_C_SetStealth");
static_assert(offsetof(RSBattlePlayer_C_SetStealth, Flag_in) == 0x000000, "Member 'RSBattlePlayer_C_SetStealth::Flag_in' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnPsychicEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnPsychicEnd final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7982[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnPsychicEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnPsychicEnd");
static_assert(sizeof(RSBattlePlayer_C_OnPsychicEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnPsychicEnd");
static_assert(offsetof(RSBattlePlayer_C_OnPsychicEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnPsychicEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPsychicEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnPsychicEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPsychicEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnPsychicEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnPsychicStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnPsychicStart final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7983[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnPsychicStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnPsychicStart");
static_assert(sizeof(RSBattlePlayer_C_OnPsychicStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnPsychicStart");
static_assert(offsetof(RSBattlePlayer_C_OnPsychicStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnPsychicStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPsychicStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnPsychicStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnCopyEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnCopyEnd final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7984[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnCopyEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnCopyEnd");
static_assert(sizeof(RSBattlePlayer_C_OnCopyEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnCopyEnd");
static_assert(offsetof(RSBattlePlayer_C_OnCopyEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnCopyEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnCopyEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnCopyEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnCopyEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnCopyEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnCopyStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnCopyStart final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7985[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnCopyStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnCopyStart");
static_assert(sizeof(RSBattlePlayer_C_OnCopyStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnCopyStart");
static_assert(offsetof(RSBattlePlayer_C_OnCopyStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnCopyStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnCopyStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnCopyStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStealthEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnStealthEnd final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7986[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnStealthEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnStealthEnd");
static_assert(sizeof(RSBattlePlayer_C_OnStealthEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnStealthEnd");
static_assert(offsetof(RSBattlePlayer_C_OnStealthEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnStealthEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStealthEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnStealthEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStealthEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnStealthEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStealthStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnStealthStart final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7987[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnStealthStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnStealthStart");
static_assert(sizeof(RSBattlePlayer_C_OnStealthStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnStealthStart");
static_assert(offsetof(RSBattlePlayer_C_OnStealthStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnStealthStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStealthStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnStealthStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnTelepoEnd final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7988[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTelepoEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTelepoEnd");
static_assert(sizeof(RSBattlePlayer_C_OnTelepoEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnTelepoEnd");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnTelepoEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnTelepoEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnTelepoEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnTelepoStart final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7989[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnTelepoStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTelepoStart");
static_assert(sizeof(RSBattlePlayer_C_OnTelepoStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnTelepoStart");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnTelepoStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTelepoStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnTelepoStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSeeThroughEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnSeeThroughEnd final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnSeeThroughEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnSeeThroughEnd");
static_assert(sizeof(RSBattlePlayer_C_OnSeeThroughEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnSeeThroughEnd");
static_assert(offsetof(RSBattlePlayer_C_OnSeeThroughEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnSeeThroughEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSeeThroughEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnSeeThroughEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSeeThroughEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnSeeThroughEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSeeThroughStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnSeeThroughStart final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnSeeThroughStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnSeeThroughStart");
static_assert(sizeof(RSBattlePlayer_C_OnSeeThroughStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnSeeThroughStart");
static_assert(offsetof(RSBattlePlayer_C_OnSeeThroughStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnSeeThroughStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSeeThroughStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnSeeThroughStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnMetalEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnMetalEnd final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnMetalEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnMetalEnd");
static_assert(sizeof(RSBattlePlayer_C_OnMetalEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnMetalEnd");
static_assert(offsetof(RSBattlePlayer_C_OnMetalEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnMetalEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnMetalEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnMetalEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnMetalEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnMetalEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnMetalStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnMetalStart final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnMetalStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnMetalStart");
static_assert(sizeof(RSBattlePlayer_C_OnMetalStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnMetalStart");
static_assert(offsetof(RSBattlePlayer_C_OnMetalStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnMetalStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnMetalStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnMetalStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnFireEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnFireEnd final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnFireEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnFireEnd");
static_assert(sizeof(RSBattlePlayer_C_OnFireEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnFireEnd");
static_assert(offsetof(RSBattlePlayer_C_OnFireEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnFireEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnFireEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnFireEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnFireEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnFireEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnFireStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnFireStart final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_798F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnFireStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnFireStart");
static_assert(sizeof(RSBattlePlayer_C_OnFireStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnFireStart");
static_assert(offsetof(RSBattlePlayer_C_OnFireStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnFireStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnFireStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnFireStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnElectricEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnElectricEnd final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7990[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnElectricEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnElectricEnd");
static_assert(sizeof(RSBattlePlayer_C_OnElectricEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_OnElectricEnd");
static_assert(offsetof(RSBattlePlayer_C_OnElectricEnd, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnElectricEnd::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnElectricEnd, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnElectricEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnElectricEnd, RemainTime) == 0x000010, "Member 'RSBattlePlayer_C_OnElectricEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnElectricStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnElectricStart final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7991[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnElectricStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnElectricStart");
static_assert(sizeof(RSBattlePlayer_C_OnElectricStart) == 0x000010, "Wrong size on RSBattlePlayer_C_OnElectricStart");
static_assert(offsetof(RSBattlePlayer_C_OnElectricStart, Param) == 0x000000, "Member 'RSBattlePlayer_C_OnElectricStart::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnElectricStart, Param_Owner) == 0x000008, "Member 'RSBattlePlayer_C_OnElectricStart::Param_Owner' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAcceleratorEnd
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnAcceleratorEnd final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7992[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAcceleratorEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAcceleratorEnd");
static_assert(sizeof(RSBattlePlayer_C_OnAcceleratorEnd) == 0x000020, "Wrong size on RSBattlePlayer_C_OnAcceleratorEnd");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorEnd, Parameter) == 0x000000, "Member 'RSBattlePlayer_C_OnAcceleratorEnd::Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorEnd, Param_Owner) == 0x000010, "Member 'RSBattlePlayer_C_OnAcceleratorEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorEnd, RemainTime) == 0x000018, "Member 'RSBattlePlayer_C_OnAcceleratorEnd::RemainTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorEnd, bHologram) == 0x00001C, "Member 'RSBattlePlayer_C_OnAcceleratorEnd::bHologram' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAcceleratorStart
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnAcceleratorStart final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7993[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAcceleratorStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAcceleratorStart");
static_assert(sizeof(RSBattlePlayer_C_OnAcceleratorStart) == 0x000020, "Wrong size on RSBattlePlayer_C_OnAcceleratorStart");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorStart, Parameter) == 0x000000, "Member 'RSBattlePlayer_C_OnAcceleratorStart::Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorStart, Param_Owner) == 0x000010, "Member 'RSBattlePlayer_C_OnAcceleratorStart::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAcceleratorStart, bHologram) == 0x000018, "Member 'RSBattlePlayer_C_OnAcceleratorStart::bHologram' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStartSequencer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnStartSequencer final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnStartSequencer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnStartSequencer");
static_assert(sizeof(RSBattlePlayer_C_OnStartSequencer) == 0x000004, "Wrong size on RSBattlePlayer_C_OnStartSequencer");
static_assert(offsetof(RSBattlePlayer_C_OnStartSequencer, IndexIn) == 0x000000, "Member 'RSBattlePlayer_C_OnStartSequencer::IndexIn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateMoveAssultAttack
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack final
{
public:
	int32                                         NewParam;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewParam1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewParam2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack");
static_assert(sizeof(RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack, NewParam1) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack::NewParam1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack, NewParam2) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack::NewParam2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.setEmPosDiscover
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetEmPosDiscover final
{
public:
	struct FVector                                DiscoverPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetEmPosDiscover) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEmPosDiscover");
static_assert(sizeof(RSBattlePlayer_C_SetEmPosDiscover) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetEmPosDiscover");
static_assert(offsetof(RSBattlePlayer_C_SetEmPosDiscover, DiscoverPos) == 0x000000, "Member 'RSBattlePlayer_C_SetEmPosDiscover::DiscoverPos' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateOutRangeFade_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_UpdateOutRangeFade_Native final
{
public:
	float                                         ToTargetLenge;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDisp;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateOutRangeFade_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateOutRangeFade_Native");
static_assert(sizeof(RSBattlePlayer_C_UpdateOutRangeFade_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_UpdateOutRangeFade_Native");
static_assert(offsetof(RSBattlePlayer_C_UpdateOutRangeFade_Native, ToTargetLenge) == 0x000000, "Member 'RSBattlePlayer_C_UpdateOutRangeFade_Native::ToTargetLenge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateOutRangeFade_Native, ForceDisp) == 0x000004, "Member 'RSBattlePlayer_C_UpdateOutRangeFade_Native::ForceDisp' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMoveInputTriger
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_UpdateMoveInputTriger final
{
public:
	struct FVector                                LMoveInputVector;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LCameraRotate;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMaxSpeedScale_Scale;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAddMovementInput_bEnable;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateMoveInputTriger) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateMoveInputTriger");
static_assert(sizeof(RSBattlePlayer_C_UpdateMoveInputTriger) == 0x000020, "Wrong size on RSBattlePlayer_C_UpdateMoveInputTriger");
static_assert(offsetof(RSBattlePlayer_C_UpdateMoveInputTriger, LMoveInputVector) == 0x000000, "Member 'RSBattlePlayer_C_UpdateMoveInputTriger::LMoveInputVector' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMoveInputTriger, LCameraRotate) == 0x00000C, "Member 'RSBattlePlayer_C_UpdateMoveInputTriger::LCameraRotate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMoveInputTriger, CallFunc_GetMaxSpeedScale_Scale) == 0x000018, "Member 'RSBattlePlayer_C_UpdateMoveInputTriger::CallFunc_GetMaxSpeedScale_Scale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMoveInputTriger, CallFunc_IsEnableAddMovementInput_bEnable) == 0x00001C, "Member 'RSBattlePlayer_C_UpdateMoveInputTriger::CallFunc_IsEnableAddMovementInput_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeAnimKind
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_OnChangeAnimKind final
{
public:
	EPlayerAnimKind                               NewAnimKind;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAnimKind                               OldKind;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         OldKindBP_l;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewKindBP_l;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7994[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttackComponentBase*>           CallFunc_GetInputAttackComponentList_ReturnValue;  // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7995[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeAnimKind) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnChangeAnimKind");
static_assert(sizeof(RSBattlePlayer_C_OnChangeAnimKind) == 0x000030, "Wrong size on RSBattlePlayer_C_OnChangeAnimKind");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, NewAnimKind) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeAnimKind::NewAnimKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, OldKind) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeAnimKind::OldKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, Dummy) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeAnimKind::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, OldKindBP_l) == 0x000003, "Member 'RSBattlePlayer_C_OnChangeAnimKind::OldKindBP_l' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, NewKindBP_l) == 0x000004, "Member 'RSBattlePlayer_C_OnChangeAnimKind::NewKindBP_l' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_OnChangeAnimKind::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, CallFunc_GetInputAttackComponentList_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnChangeAnimKind::CallFunc_GetInputAttackComponentList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnChangeAnimKind::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_OnChangeAnimKind::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'RSBattlePlayer_C_OnChangeAnimKind::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_OnChangeAnimKind::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnChangeAnimKind::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAnimKind, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_OnChangeAnimKind::Temp_int_Array_Index_Variable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ProcessDirectionControll
// 0x0270 (0x0270 - 0x0000)
struct RSBattlePlayer_C_ProcessDirectionControll final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPauseAutoAim;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7996[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7997[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLatestEnableInputWorldVector_ReturnValue; // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7998[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0040(0x0040)(ConstParm)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7999[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799A[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableDirectionControl_bEnable;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799B[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799C[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDirectionControllRotateSpeed_ReturnValue; // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetDirectionControlSocketName_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseSocketDirectionControl_ReturnValue;  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799D[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799E[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputOverLimit_ReturnValue;             // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799F[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcMeshSocketRotation_outLocation;       // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalcMeshSocketRotation_outRotator;        // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcMeshSocketRotation_ReturnValue;       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A0[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x0158(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x01E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ProcessDirectionControll) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ProcessDirectionControll");
static_assert(sizeof(RSBattlePlayer_C_ProcessDirectionControll) == 0x000270, "Wrong size on RSBattlePlayer_C_ProcessDirectionControll");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_ProcessDirectionControll::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, LDir) == 0x000004, "Member 'RSBattlePlayer_C_ProcessDirectionControll::LDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, LbPauseAutoAim) == 0x000010, "Member 'RSBattlePlayer_C_ProcessDirectionControll::LbPauseAutoAim' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsActionStatus_Result) == 0x000020, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_MakeRotFromX_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetLatestEnableInputWorldVector_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetLatestEnableInputWorldVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetAsyncResult_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000080, "Member 'RSBattlePlayer_C_ProcessDirectionControll::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'RSBattlePlayer_C_ProcessDirectionControll::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetWeakTargetPoint_Point) == 0x000094, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A4, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakVector_X) == 0x0000B0, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakVector_Y) == 0x0000B4, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakVector_Z) == 0x0000B8, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_MakeVector_ReturnValue) == 0x0000BC, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsEnableDirectionControl_bEnable) == 0x0000C8, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsEnableDirectionControl_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Normal_ReturnValue) == 0x0000CC, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetCurrentActionState_Kind) == 0x0000D8, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D9, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetDirectionControllRotateSpeed_ReturnValue) == 0x0000DC, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetDirectionControllRotateSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_GetDirectionControlSocketName_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_GetDirectionControlSocketName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsUseSocketDirectionControl_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsUseSocketDirectionControl_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000EC, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsControlAI_bAI) == 0x0000F0, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Abs_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Not_PreBool_ReturnValue) == 0x0000F8, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_IsInputOverLimit_ReturnValue) == 0x0000F9, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_IsInputOverLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000FC, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000108, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakRotator_Roll) == 0x000114, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakRotator_Pitch) == 0x000118, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_BreakRotator_Yaw) == 0x00011C, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Abs_ReturnValue_1) == 0x000120, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_SignOfFloat_ReturnValue) == 0x000124, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_FMin_ReturnValue) == 0x000128, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00012C, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_CalcMeshSocketRotation_outLocation) == 0x000130, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_CalcMeshSocketRotation_outLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_CalcMeshSocketRotation_outRotator) == 0x00013C, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_CalcMeshSocketRotation_outRotator' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_CalcMeshSocketRotation_ReturnValue) == 0x000148, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_CalcMeshSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_MakeRotator_ReturnValue) == 0x00014C, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x000158, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0001E0, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessDirectionControll, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000268, "Member 'RSBattlePlayer_C_ProcessDirectionControll::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetupAnimController
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_SetupAnimController final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPlayerWalkRunStateKind NewKind)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_79A2[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EPlayerAnimKind NewKind, EPlayerAnimKind OldKind)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetupAnimController) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetupAnimController");
static_assert(sizeof(RSBattlePlayer_C_SetupAnimController) == 0x000050, "Wrong size on RSBattlePlayer_C_SetupAnimController");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetupAnimController::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'RSBattlePlayer_C_SetupAnimController::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'RSBattlePlayer_C_SetupAnimController::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetupAnimController::CallFunc_GetPlayerAnimControllerComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'RSBattlePlayer_C_SetupAnimController::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetupAnimController, K2Node_CreateDelegate_OutputDelegate_3) == 0x000040, "Member 'RSBattlePlayer_C_SetupAnimController::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTheWaterSurface
// 0x0140 (0x0140 - 0x0000)
struct RSBattlePlayer_C_OnTheWaterSurface final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A4[0x1];                                     // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79A5[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnTheWaterSurface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTheWaterSurface");
static_assert(sizeof(RSBattlePlayer_C_OnTheWaterSurface) == 0x000140, "Wrong size on RSBattlePlayer_C_OnTheWaterSurface");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, Ret) == 0x000000, "Member 'RSBattlePlayer_C_OnTheWaterSurface::Ret' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, Temp_object_Variable) == 0x000008, "Member 'RSBattlePlayer_C_OnTheWaterSurface::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_LineTraceSingle_OutHit) == 0x000030, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_LineTraceSingle_ReturnValue) == 0x0000B8, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B9, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000BA, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_FaceIndex) == 0x00011C, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_TraceStart) == 0x000120, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_BreakHitResult_TraceEnd) == 0x00012C, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheWaterSurface, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000139, "Member 'RSBattlePlayer_C_OnTheWaterSurface::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnTheGroundSurface
// 0x0140 (0x0140 - 0x0000)
struct RSBattlePlayer_C_OnTheGroundSurface final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A7[0x1];                                     // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79A8[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnTheGroundSurface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnTheGroundSurface");
static_assert(sizeof(RSBattlePlayer_C_OnTheGroundSurface) == 0x000140, "Wrong size on RSBattlePlayer_C_OnTheGroundSurface");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, Ret) == 0x000000, "Member 'RSBattlePlayer_C_OnTheGroundSurface::Ret' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, Temp_object_Variable) == 0x000008, "Member 'RSBattlePlayer_C_OnTheGroundSurface::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_LineTraceSingle_OutHit) == 0x000030, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_LineTraceSingle_ReturnValue) == 0x0000B8, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B9, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000BA, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_FaceIndex) == 0x00011C, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_TraceStart) == 0x000120, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_BreakHitResult_TraceEnd) == 0x00012C, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnTheGroundSurface, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000139, "Member 'RSBattlePlayer_C_OnTheGroundSurface::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializePlayer_DEPRECATED
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_InitializePlayer_DEPRECATED final
{
public:
	class UClass*                                 RenderSettingsClass;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializePlayer_DEPRECATED) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializePlayer_DEPRECATED");
static_assert(sizeof(RSBattlePlayer_C_InitializePlayer_DEPRECATED) == 0x000008, "Wrong size on RSBattlePlayer_C_InitializePlayer_DEPRECATED");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer_DEPRECATED, RenderSettingsClass) == 0x000000, "Member 'RSBattlePlayer_C_InitializePlayer_DEPRECATED::RenderSettingsClass' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDamageingForPlayer
// 0x0238 (0x0238 - 0x0000)
struct RSBattlePlayer_C_OnDamageingForPlayer final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	float                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79A9[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthFromEvent_bFromEvent;            // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79AA[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp_1;                 // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0203(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79AB[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_Target;              // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79AC[0x1];                                     // 0x0213(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79AD[0x1];                                     // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79AE[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0228(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79AF[0x2];                                     // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B0[0x2];                                     // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnDamageingForPlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDamageingForPlayer");
static_assert(sizeof(RSBattlePlayer_C_OnDamageingForPlayer) == 0x000238, "Wrong size on RSBattlePlayer_C_OnDamageingForPlayer");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, DamageValue) == 0x0001C0, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, LAttacker) == 0x0001C8, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, LExtraType) == 0x0001D0, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_GetEnpcComp_ReturnComp) == 0x0001E0, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, Temp_bool_True_if_break_was_hit_Variable) == 0x0001E8, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsValid_ReturnValue) == 0x0001E9, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0001EA, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsStealthFromEvent_bFromEvent) == 0x0001EB, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsStealthFromEvent_bFromEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, Temp_int_Loop_Num_Variable) == 0x0001EC, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_GetPlayerID_ReturnValue) == 0x0001F0, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_GetEnpcComp_ReturnComp_1) == 0x0001F8, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_GetEnpcComp_ReturnComp_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000200, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000201, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000202, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_SetSasStealth_dummy) == 0x000203, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_BooleanAND_ReturnValue) == 0x000204, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_GetBattleTargetActor_Target) == 0x000208, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_GetBattleTargetActor_Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000210, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsValid_ReturnValue_2) == 0x000211, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsValid_ReturnValue_3) == 0x000212, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, Temp_int_Array_Index_Variable) == 0x000214, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsControlAI_bAI) == 0x000218, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000219, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00021A, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Array_Length_ReturnValue) == 0x00021C, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_IsControlAI_bAI_1) == 0x000220, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, Temp_int_Loop_Counter_Variable) == 0x000224, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, Temp_byte_Variable) == 0x000228, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000229, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Array_Find_ReturnValue) == 0x00022C, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000230, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000231, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageingForPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x000234, "Member 'RSBattlePlayer_C_OnDamageingForPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDeadPlayerCore
// 0x0440 (0x0440 - 0x0000)
struct RSBattlePlayer_C_OnDeadPlayerCore final
{
public:
	EDeadFactor                                   LDeadFactor;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79B1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           LDeadBeforeHitResult;                              // 0x0008(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetEnemyDeadReplaceLogName_ReturnValue;   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B2[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_GetDeadBeforeHitResult_hitResult;         // 0x01E0(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B3[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp_1;                 // 0x03A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B4[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCharacterLV_LV;                        // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B5[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79B6[0x8];                                     // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x03D0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0400(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79B7[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0404(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79B8[0x4];                                     // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79B9[0x3];                                     // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x042C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0435(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0436(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0437(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnDeadPlayerCore) == 0x000010, "Wrong alignment on RSBattlePlayer_C_OnDeadPlayerCore");
static_assert(sizeof(RSBattlePlayer_C_OnDeadPlayerCore) == 0x000440, "Wrong size on RSBattlePlayer_C_OnDeadPlayerCore");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, LDeadFactor) == 0x000000, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::LDeadFactor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, LDeadBeforeHitResult) == 0x000008, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::LDeadBeforeHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetEnpcComp_ReturnComp) == 0x0001C8, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetEnemyDeadReplaceLogName_ReturnValue) == 0x0001D0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetEnemyDeadReplaceLogName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsValid_ReturnValue) == 0x0001D8, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetDeadBeforeHitResult_hitResult) == 0x0001E0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetDeadBeforeHitResult_hitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsDriveMode_bDrive) == 0x0003A0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, Temp_int_Variable) == 0x0003A4, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetEnpcComp_ReturnComp_1) == 0x0003A8, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetEnpcComp_ReturnComp_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsValid_ReturnValue_1) == 0x0003B0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetCharacterLV_LV) == 0x0003B4, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetCharacterLV_LV' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetBattleManager_BattleManager) == 0x0003B8, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsValid_ReturnValue_2) == 0x0003C0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_Add_IntInt_ReturnValue) == 0x0003C4, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetTransform_ReturnValue) == 0x0003D0, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, Temp_byte_Variable) == 0x000400, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetName_ReturnValue) == 0x000404, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetId_ReturnValue) == 0x00040C, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_Array_Find_ReturnValue) == 0x000410, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_Conv_IntToString_ReturnValue) == 0x000418, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000428, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_Conv_StringToName_ReturnValue) == 0x00042C, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsValid_ReturnValue_3) == 0x000434, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetPlayerID_ReturnValue) == 0x000435, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000436, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_IsControlAI_bAI) == 0x000437, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDeadPlayerCore, CallFunc_GetPlayerController_ReturnValue) == 0x000438, "Member 'RSBattlePlayer_C_OnDeadPlayerCore::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageAnimFunc
// 0x01E0 (0x01E0 - 0x0000)
struct RSBattlePlayer_C_StartDamageAnimFunc final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	int32                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x01C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x01C5(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCBadState                                   BadState_Confusion;                                // 0x01C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BA[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttractSelf_ReturnValue;             // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartDamageAnimFunc) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StartDamageAnimFunc");
static_assert(sizeof(RSBattlePlayer_C_StartDamageAnimFunc) == 0x0001E0, "Wrong size on RSBattlePlayer_C_StartDamageAnimFunc");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, DamageValue) == 0x0001C0, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, IsDown) == 0x0001C4, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::IsDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, Dummy) == 0x0001C5, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, BadState_Confusion) == 0x0001C6, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::BadState_Confusion' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_IsControlPlayer_ReturnValue) == 0x0001C7, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_IsMainPlayer_bMainPlayer) == 0x0001C8, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_IsPlayerStatus_Result) == 0x0001C9, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0001CA, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_Not_PreBool_ReturnValue) == 0x0001CB, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_GetDebuggingManager_Manager) == 0x0001D0, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_IsValid_ReturnValue) == 0x0001D8, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageAnimFunc, CallFunc_CheckAttractSelf_ReturnValue) == 0x0001D9, "Member 'RSBattlePlayer_C_StartDamageAnimFunc::CallFunc_CheckAttractSelf_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ProcessLandCheck
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_ProcessLandCheck final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NowMovementMode_l;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue_1;           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetLocationHistory_ReturnValue;           // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BC[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceLandCheck_bLand;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BD[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TraceLandCheck_LandHeight;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue_2;           // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ProcessLandCheck) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ProcessLandCheck");
static_assert(sizeof(RSBattlePlayer_C_ProcessLandCheck) == 0x000040, "Wrong size on RSBattlePlayer_C_ProcessLandCheck");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_ProcessLandCheck::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, NowMovementMode_l) == 0x000004, "Member 'RSBattlePlayer_C_ProcessLandCheck::NowMovementMode_l' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsPlayerStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsPlayerStatus_Result_1) == 0x000006, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_Not_PreBool_ReturnValue_1) == 0x000008, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_Not_PreBool_ReturnValue_2) == 0x00000A, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsPlayerInAerial_ReturnValue_1) == 0x00000B, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsPlayerInAerial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_GetLocationHistory_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_GetLocationHistory_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_Array_LastIndex_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_TraceLandCheck_bLand) == 0x000034, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_TraceLandCheck_bLand' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_TraceLandCheck_LandHeight) == 0x000038, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_TraceLandCheck_LandHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsActionStatus_Result) == 0x00003D, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsPlayerInAerial_ReturnValue_2) == 0x00003E, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsPlayerInAerial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcessLandCheck, CallFunc_IsFlying_ReturnValue) == 0x00003F, "Member 'RSBattlePlayer_C_ProcessLandCheck::CallFunc_IsFlying_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHeadLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetHeadLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetHeadLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetHeadLocation");
static_assert(sizeof(RSBattlePlayer_C_GetHeadLocation) == 0x000018, "Wrong size on RSBattlePlayer_C_GetHeadLocation");
static_assert(offsetof(RSBattlePlayer_C_GetHeadLocation, Location) == 0x000000, "Member 'RSBattlePlayer_C_GetHeadLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHeadLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetHeadLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDamaging
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattlePlayer_C_OnDamaging final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	float                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x01C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDamaging) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDamaging");
static_assert(sizeof(RSBattlePlayer_C_OnDamaging) == 0x0001C8, "Wrong size on RSBattlePlayer_C_OnDamaging");
static_assert(offsetof(RSBattlePlayer_C_OnDamaging, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_OnDamaging::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamaging, DamageValue) == 0x0001C0, "Member 'RSBattlePlayer_C_OnDamaging::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamaging, Dummy) == 0x0001C4, "Member 'RSBattlePlayer_C_OnDamaging::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnDead");
static_assert(sizeof(RSBattlePlayer_C_OnDead) == 0x000001, "Wrong size on RSBattlePlayer_C_OnDead");
static_assert(offsetof(RSBattlePlayer_C_OnDead, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnDead::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBattling
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetBattling final
{
public:
	bool                                          bBattling;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTargetActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RevivePlayer_bSuccess;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79BF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBattling) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBattling");
static_assert(sizeof(RSBattlePlayer_C_SetBattling) == 0x000028, "Wrong size on RSBattlePlayer_C_SetBattling");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, bBattling) == 0x000000, "Member 'RSBattlePlayer_C_SetBattling::bBattling' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetBattling::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, LTargetActor) == 0x000008, "Member 'RSBattlePlayer_C_SetBattling::LTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_RevivePlayer_bSuccess) == 0x000010, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_RevivePlayer_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_IsCharacterDead_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000012, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_IsControlAI_bAI) == 0x000013, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000014, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattling, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetBattling::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheatCommand_SetBattlePlayerAIMode
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode final
{
public:
	class FName                                   AIMode;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AIMode_Key;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_2;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_3;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C0[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode");
static_assert(sizeof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode) == 0x000028, "Wrong size on RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, AIMode) == 0x000000, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::AIMode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, AIMode_Key) == 0x000008, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::AIMode_Key' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000012, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_EqualEqual_NameName_ReturnValue_2) == 0x000013, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_EqualEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_EqualEqual_NameName_ReturnValue_3) == 0x000014, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_EqualEqual_NameName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000015, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode, CallFunc_GetBlackboard_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetCamera
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_ResetCamera final
{
public:
	float                                         ResetSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeftStickY_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeftStickX_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLeftStickZero_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetCamera) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ResetCamera");
static_assert(sizeof(RSBattlePlayer_C_ResetCamera) == 0x000018, "Wrong size on RSBattlePlayer_C_ResetCamera");
static_assert(offsetof(RSBattlePlayer_C_ResetCamera, ResetSec) == 0x000000, "Member 'RSBattlePlayer_C_ResetCamera::ResetSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCamera, CallFunc_GetLeftStickY_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_ResetCamera::CallFunc_GetLeftStickY_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCamera, CallFunc_GetLeftStickX_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_ResetCamera::CallFunc_GetLeftStickX_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCamera, CallFunc_MakeVector2D_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ResetCamera::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCamera, CallFunc_IsLeftStickZero_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_ResetCamera::CallFunc_IsLeftStickZero_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAttack
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_InputAttack final
{
public:
	ERSAttackInputKind                            InputKind;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPress;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            LInputKind;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InputAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAttack");
static_assert(sizeof(RSBattlePlayer_C_InputAttack) == 0x000007, "Wrong size on RSBattlePlayer_C_InputAttack");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, InputKind) == 0x000000, "Member 'RSBattlePlayer_C_InputAttack::InputKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, bPress) == 0x000001, "Member 'RSBattlePlayer_C_InputAttack::bPress' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, Return) == 0x000002, "Member 'RSBattlePlayer_C_InputAttack::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, LInputKind) == 0x000003, "Member 'RSBattlePlayer_C_InputAttack::LInputKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, Temp_byte_Variable) == 0x000004, "Member 'RSBattlePlayer_C_InputAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, Temp_bool_Variable) == 0x000005, "Member 'RSBattlePlayer_C_InputAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAttack, K2Node_Select_Default) == 0x000006, "Member 'RSBattlePlayer_C_InputAttack::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeStateManager
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_InitializeStateManager final
{
public:
	TArray<class URSStateComponent*>              K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class URSStateComponent*>              K2Node_MakeArray_Array_1;                          // 0x0010(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializeStateManager) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeStateManager");
static_assert(sizeof(RSBattlePlayer_C_InitializeStateManager) == 0x000020, "Wrong size on RSBattlePlayer_C_InitializeStateManager");
static_assert(offsetof(RSBattlePlayer_C_InitializeStateManager, K2Node_MakeArray_Array) == 0x000000, "Member 'RSBattlePlayer_C_InitializeStateManager::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeStateManager, K2Node_MakeArray_Array_1) == 0x000010, "Member 'RSBattlePlayer_C_InitializeStateManager::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddPlayerStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_AddPlayerStatus final
{
public:
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AddPlayerStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AddPlayerStatus");
static_assert(sizeof(RSBattlePlayer_C_AddPlayerStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_AddPlayerStatus");
static_assert(offsetof(RSBattlePlayer_C_AddPlayerStatus, PlayerStatus) == 0x000000, "Member 'RSBattlePlayer_C_AddPlayerStatus::PlayerStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SubPlayerStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SubPlayerStatus final
{
public:
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SubPlayerStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SubPlayerStatus");
static_assert(sizeof(RSBattlePlayer_C_SubPlayerStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_SubPlayerStatus");
static_assert(offsetof(RSBattlePlayer_C_SubPlayerStatus, PlayerStatus) == 0x000000, "Member 'RSBattlePlayer_C_SubPlayerStatus::PlayerStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddActionStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_AddActionStatus final
{
public:
	EPlayerActionStatus                           ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AddActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AddActionStatus");
static_assert(sizeof(RSBattlePlayer_C_AddActionStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_AddActionStatus");
static_assert(offsetof(RSBattlePlayer_C_AddActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_AddActionStatus::ActionStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearActionStatus
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ClearActionStatus final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbClearEarlyInput;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C1[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPrevStateIndex_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearPrecedeInput_bDummy;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearActionStatus) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ClearActionStatus");
static_assert(sizeof(RSBattlePlayer_C_ClearActionStatus) == 0x000010, "Wrong size on RSBattlePlayer_C_ClearActionStatus");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ClearActionStatus::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, LbClearEarlyInput) == 0x000001, "Member 'RSBattlePlayer_C_ClearActionStatus::LbClearEarlyInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_GetPrevStateIndex_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_GetPrevStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_GetCurrentActionState_Kind) == 0x00000A, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'RSBattlePlayer_C_ClearActionStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_ClearPrecedeInput_bDummy) == 0x00000D, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_ClearPrecedeInput_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus, CallFunc_IsUpperActionStatus_bResult) == 0x00000E, "Member 'RSBattlePlayer_C_ClearActionStatus::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckInput
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_CheckInput final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LPrevCheckStartAttackFlag;                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInputPsychic_Dummy;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckInput) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckInput");
static_assert(sizeof(RSBattlePlayer_C_CheckInput) == 0x000008, "Wrong size on RSBattlePlayer_C_CheckInput");
static_assert(offsetof(RSBattlePlayer_C_CheckInput, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_CheckInput::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckInput, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_CheckInput::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckInput, LPrevCheckStartAttackFlag) == 0x000005, "Member 'RSBattlePlayer_C_CheckInput::LPrevCheckStartAttackFlag' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckInput, CallFunc_CheckInputPsychic_Dummy) == 0x000006, "Member 'RSBattlePlayer_C_CheckInput::CallFunc_CheckInputPsychic_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckInputPsychic
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckInputPsychic final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckInputPsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckInputPsychic");
static_assert(sizeof(RSBattlePlayer_C_CheckInputPsychic) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckInputPsychic");
static_assert(offsetof(RSBattlePlayer_C_CheckInputPsychic, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_CheckInputPsychic::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateCameraRotate
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_UpdateCameraRotate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbDisableRotate;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LCameraPitchLock;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C2[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LCalmpMinAngle;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LClampMaxAngle;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget_1;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget_2;              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseCutCamera_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C3[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueObjectInput_return;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C4[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOptionParam*                           CallFunc_GetOptionParam_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockonActionType                             CallFunc_GetLockonActionType_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateCameraRotate) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UpdateCameraRotate");
static_assert(sizeof(RSBattlePlayer_C_UpdateCameraRotate) == 0x000040, "Wrong size on RSBattlePlayer_C_UpdateCameraRotate");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_UpdateCameraRotate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, LbDisableRotate) == 0x000004, "Member 'RSBattlePlayer_C_UpdateCameraRotate::LbDisableRotate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, LCameraPitchLock) == 0x000005, "Member 'RSBattlePlayer_C_UpdateCameraRotate::LCameraPitchLock' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, LCalmpMinAngle) == 0x000008, "Member 'RSBattlePlayer_C_UpdateCameraRotate::LCalmpMinAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, LClampMaxAngle) == 0x00000C, "Member 'RSBattlePlayer_C_UpdateCameraRotate::LClampMaxAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsLockTarget_IsLockTarget) == 0x000010, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsControlAI_bAI) == 0x000011, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsLockTarget_IsLockTarget_1) == 0x000012, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsLockTarget_IsLockTarget_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsLockTarget_IsLockTarget_2) == 0x000013, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsLockTarget_IsLockTarget_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsUseCutCamera_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsUseCutCamera_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsEnable_ReturnValue) == 0x000015, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000018, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_IsUniqueObjectInput_return) == 0x000020, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_IsUniqueObjectInput_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_GetOptionParam_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_GetOptionParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, CallFunc_GetLockonActionType_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_UpdateCameraRotate::CallFunc_GetLockonActionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraRotate, K2Node_SwitchEnum_CmpSuccess) == 0x000039, "Member 'RSBattlePlayer_C_UpdateCameraRotate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetActionState
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetActionState final
{
public:
	EPlayerActionKind                             Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetActionState");
static_assert(sizeof(RSBattlePlayer_C_SetActionState) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetActionState");
static_assert(offsetof(RSBattlePlayer_C_SetActionState, Kind) == 0x000000, "Member 'RSBattlePlayer_C_SetActionState::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionState, Param) == 0x000004, "Member 'RSBattlePlayer_C_SetActionState::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetActionState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetUpperActionState
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetUpperActionState final
{
public:
	EPlayerUpperActionKind                        Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetUpperActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetUpperActionState");
static_assert(sizeof(RSBattlePlayer_C_SetUpperActionState) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetUpperActionState");
static_assert(offsetof(RSBattlePlayer_C_SetUpperActionState, Kind) == 0x000000, "Member 'RSBattlePlayer_C_SetUpperActionState::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetUpperActionState, Param) == 0x000004, "Member 'RSBattlePlayer_C_SetUpperActionState::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetUpperActionState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetUpperActionState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PreTick
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_PreTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreTick_Dummy;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFallAbleGround_ReturnValue;             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C7[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SyncResult_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C8[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PreTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PreTick");
static_assert(sizeof(RSBattlePlayer_C_PreTick) == 0x000018, "Wrong size on RSBattlePlayer_C_PreTick");
static_assert(offsetof(RSBattlePlayer_C_PreTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_PreTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_PreTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_PreTick_Dummy) == 0x000005, "Member 'RSBattlePlayer_C_PreTick::CallFunc_PreTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_IsFallAbleGround_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_PreTick::CallFunc_IsFallAbleGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_PreTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_SetEmphasisCrashGauge_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_PreTick::CallFunc_SetEmphasisCrashGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_SyncResult_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_PreTick::CallFunc_SyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00000E, "Member 'RSBattlePlayer_C_PreTick::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_IsOver_ReturnValue) == 0x00000F, "Member 'RSBattlePlayer_C_PreTick::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, CallFunc_IsEnable_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_PreTick::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTick, Temp_int_Variable) == 0x000014, "Member 'RSBattlePlayer_C_PreTick::Temp_int_Variable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.MainTick
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MainTick_Dummy;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInput_Dummy;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_MainTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_MainTick");
static_assert(sizeof(RSBattlePlayer_C_MainTick) == 0x000008, "Wrong size on RSBattlePlayer_C_MainTick");
static_assert(offsetof(RSBattlePlayer_C_MainTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MainTick, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_MainTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MainTick, CallFunc_MainTick_Dummy) == 0x000005, "Member 'RSBattlePlayer_C_MainTick::CallFunc_MainTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MainTick, CallFunc_CheckInput_Dummy) == 0x000006, "Member 'RSBattlePlayer_C_MainTick::CallFunc_CheckInput_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PostTick
// 0x0080 (0x0080 - 0x0000)
struct RSBattlePlayer_C_PostTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PostTick_Dummy;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79C9[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTelepo_bTelepo;                         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79CA[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79CB[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79CC[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0040(0x0040)(ConstParm)
};
static_assert(alignof(RSBattlePlayer_C_PostTick) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PostTick");
static_assert(sizeof(RSBattlePlayer_C_PostTick) == 0x000080, "Wrong size on RSBattlePlayer_C_PostTick");
static_assert(offsetof(RSBattlePlayer_C_PostTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_PostTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_PostTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_PostTick_Dummy) == 0x000005, "Member 'RSBattlePlayer_C_PostTick::CallFunc_PostTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Array_LastIndex_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_IsTelepo_bTelepo) == 0x000012, "Member 'RSBattlePlayer_C_PostTick::CallFunc_IsTelepo_bTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Array_Get_Item) == 0x000014, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_PostTick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_PostTick::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_PostTick::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_Not_PreBool_ReturnValue_1) == 0x000032, "Member 'RSBattlePlayer_C_PostTick::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_PostTick::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostTick, CallFunc_GetAsyncResult_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_PostTick::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckDamageReaction
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_CheckDamageReaction final
{
public:
	bool                                          LEnpc;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDownType                               LDownType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79CD[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LMontage;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableDamageAddReaction_ReturnValue;   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79CE[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayDamageEffect_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79CF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSet_Montage;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSet_Montage_1;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D0[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D1[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSet_Montage_2;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAddDamage_bAddDamage;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBlow_bBlow;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistDamage_bExist;                     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckDamageReaction) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckDamageReaction");
static_assert(sizeof(RSBattlePlayer_C_CheckDamageReaction) == 0x000058, "Wrong size on RSBattlePlayer_C_CheckDamageReaction");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, LEnpc) == 0x000000, "Member 'RSBattlePlayer_C_CheckDamageReaction::LEnpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, LDownType) == 0x000001, "Member 'RSBattlePlayer_C_CheckDamageReaction::LDownType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, LMontage) == 0x000008, "Member 'RSBattlePlayer_C_CheckDamageReaction::LMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_GetCurrentActionState_Kind) == 0x000010, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000011, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsDisableDamageAddReaction_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsDisableDamageAddReaction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsControlAI_bAI) == 0x000014, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, K2Node_SwitchEnum_CmpSuccess) == 0x000015, "Member 'RSBattlePlayer_C_CheckDamageReaction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsMetalMode_bMetal) == 0x000016, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000018, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_PlayDamageEffect_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_PlayDamageEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_GetAnimMontageFromSet_Montage) == 0x000028, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_GetAnimMontageFromSet_Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_GetAnimMontageFromSet_Montage_1) == 0x000030, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_GetAnimMontageFromSet_Montage_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsActionStatus_Result) == 0x000038, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_PlayAnimMontage_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_GetAnimMontageFromSet_Montage_2) == 0x000048, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_GetAnimMontageFromSet_Montage_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsDead_bDead) == 0x000050, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsAddDamage_bAddDamage) == 0x000051, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsAddDamage_bAddDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsBlow_bBlow) == 0x000052, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsBlow_bBlow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDamageReaction, CallFunc_IsExistDamage_bExist) == 0x000053, "Member 'RSBattlePlayer_C_CheckDamageReaction::CallFunc_IsExistDamage_bExist' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackActorHit
// 0x0310 (0x0310 - 0x0000)
struct RSBattlePlayer_C_OnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D2[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     LSkill;                                            // 0x01C8(0x00F0)(Edit, BlueprintVisible)
	class AActor*                                 LAttacker;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x02C1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UniqueAttackHitEffect_bDummy;             // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D3[0x5];                                     // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntroTutorialManager*                  CallFunc_GetIntroTutorialManager_ReturnValue;      // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x02D1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x02D3(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D4[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x02E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_3;                              // 0x02E8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D5[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D6[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_4;                              // 0x0301(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D7[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_4;        // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAttackActorHit) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAttackActorHit");
static_assert(sizeof(RSBattlePlayer_C_OnAttackActorHit) == 0x000310, "Wrong size on RSBattlePlayer_C_OnAttackActorHit");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_OnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Dummy) == 0x0001C0, "Member 'RSBattlePlayer_C_OnAttackActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, LSkill) == 0x0001C8, "Member 'RSBattlePlayer_C_OnAttackActorHit::LSkill' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, LAttacker) == 0x0002B8, "Member 'RSBattlePlayer_C_OnAttackActorHit::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_OnAttackActorHit_Dummy) == 0x0002C0, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Temp_byte_Variable) == 0x0002C1, "Member 'RSBattlePlayer_C_OnAttackActorHit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_UniqueAttackHitEffect_bDummy) == 0x0002C2, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_UniqueAttackHitEffect_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GetIntroTutorialManager_ReturnValue) == 0x0002C8, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GetIntroTutorialManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_IsValid_ReturnValue) == 0x0002D0, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Temp_byte_Variable_1) == 0x0002D1, "Member 'RSBattlePlayer_C_OnAttackActorHit::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002D2, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Temp_byte_Variable_2) == 0x0002D3, "Member 'RSBattlePlayer_C_OnAttackActorHit::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue) == 0x0002D4, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0002D8, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_1) == 0x0002DC, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_2) == 0x0002E0, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0002E4, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x0002E5, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002E6, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0002E7, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Temp_byte_Variable_3) == 0x0002E8, "Member 'RSBattlePlayer_C_OnAttackActorHit::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_3) == 0x0002EC, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x0002F0, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GetBattleManager_BattleManager) == 0x0002F8, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000300, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, Temp_byte_Variable_4) == 0x000301, "Member 'RSBattlePlayer_C_OnAttackActorHit::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_Array_Find_ReturnValue_4) == 0x000304, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_GreaterEqual_IntInt_ReturnValue_4) == 0x000308, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_GreaterEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackActorHit, CallFunc_IsControlAI_bAI) == 0x000309, "Member 'RSBattlePlayer_C_OnAttackActorHit::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SubActionStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SubActionStatus final
{
public:
	EPlayerActionStatus                           ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SubActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SubActionStatus");
static_assert(sizeof(RSBattlePlayer_C_SubActionStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_SubActionStatus");
static_assert(offsetof(RSBattlePlayer_C_SubActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_SubActionStatus::ActionStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeAttackComponent
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_InitializeAttackComponent final
{
public:
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79D8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ComboSetting_Dummy;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeAttackComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeAttackComponent");
static_assert(sizeof(RSBattlePlayer_C_InitializeAttackComponent) == 0x000018, "Wrong size on RSBattlePlayer_C_InitializeAttackComponent");
static_assert(offsetof(RSBattlePlayer_C_InitializeAttackComponent, CallFunc_IsControlAI_bAI) == 0x000000, "Member 'RSBattlePlayer_C_InitializeAttackComponent::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeAttackComponent, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_InitializeAttackComponent::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeAttackComponent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_InitializeAttackComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeAttackComponent, CallFunc_ComboSetting_Dummy) == 0x000011, "Member 'RSBattlePlayer_C_InitializeAttackComponent::CallFunc_ComboSetting_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ItemApply
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ItemApply final
{
public:
	bool                                          bRevive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ItemApply) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ItemApply");
static_assert(sizeof(RSBattlePlayer_C_ItemApply) == 0x000002, "Wrong size on RSBattlePlayer_C_ItemApply");
static_assert(offsetof(RSBattlePlayer_C_ItemApply, bRevive) == 0x000000, "Member 'RSBattlePlayer_C_ItemApply::bRevive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ItemApply, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_ItemApply::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetItemIdFromName
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetItemIdFromName final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConsumeItemID                                LItemID;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetItemIdFromName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetItemIdFromName");
static_assert(sizeof(RSBattlePlayer_C_SetItemIdFromName) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetItemIdFromName");
static_assert(offsetof(RSBattlePlayer_C_SetItemIdFromName, ItemId) == 0x000000, "Member 'RSBattlePlayer_C_SetItemIdFromName::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetItemIdFromName, LItemID) == 0x000008, "Member 'RSBattlePlayer_C_SetItemIdFromName::LItemID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetItemIdFromName, K2Node_SwitchName_CmpSuccess) == 0x000009, "Member 'RSBattlePlayer_C_SetItemIdFromName::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializePlayer
// 0x0084 (0x0084 - 0x0000)
struct RSBattlePlayer_C_InitializePlayer final
{
public:
	EPlayerID                                     ID;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_10;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_11;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_12;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_13;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_14;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_15;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_16;                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_17;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_18;                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_19;                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_20;                              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_21;                              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_22;                              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_23;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_24;                              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_25;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_26;                              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79DA[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0074(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializePlayer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_InitializePlayer");
static_assert(sizeof(RSBattlePlayer_C_InitializePlayer) == 0x000084, "Wrong size on RSBattlePlayer_C_InitializePlayer");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, ID) == 0x000000, "Member 'RSBattlePlayer_C_InitializePlayer::ID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable) == 0x000004, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_1) == 0x000008, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_2) == 0x00000C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_3) == 0x000010, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_4) == 0x000014, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_5) == 0x000018, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_6) == 0x00001C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_7) == 0x000020, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_8) == 0x000024, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_9) == 0x000028, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_10) == 0x00002C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_11) == 0x000030, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_12) == 0x000034, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_13) == 0x000038, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_14) == 0x00003C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_15) == 0x000040, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_16) == 0x000044, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_17) == 0x000048, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_18) == 0x00004C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_19) == 0x000050, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_20) == 0x000054, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_21) == 0x000058, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_22) == 0x00005C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_23) == 0x000060, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_24) == 0x000064, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_25) == 0x000068, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_int_Variable_26) == 0x00006C, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_int_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, Temp_byte_Variable) == 0x000070, "Member 'RSBattlePlayer_C_InitializePlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, CallFunc_GetName_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_InitializePlayer::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, K2Node_Select_Default) == 0x00007C, "Member 'RSBattlePlayer_C_InitializePlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePlayer, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_InitializePlayer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RegisterCombo
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_RegisterCombo final
{
public:
	EPlayerComboPattern                           Pattern;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RegisterCombo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RegisterCombo");
static_assert(sizeof(RSBattlePlayer_C_RegisterCombo) == 0x000004, "Wrong size on RSBattlePlayer_C_RegisterCombo");
static_assert(offsetof(RSBattlePlayer_C_RegisterCombo, Pattern) == 0x000000, "Member 'RSBattlePlayer_C_RegisterCombo::Pattern' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterCombo, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_RegisterCombo::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterCombo, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_RegisterCombo::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterCombo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_RegisterCombo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterCombo
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_UnregisterCombo final
{
public:
	EPlayerComboPattern                           Pattern;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UnregisterCombo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UnregisterCombo");
static_assert(sizeof(RSBattlePlayer_C_UnregisterCombo) == 0x000004, "Wrong size on RSBattlePlayer_C_UnregisterCombo");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCombo, Pattern) == 0x000000, "Member 'RSBattlePlayer_C_UnregisterCombo::Pattern' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCombo, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_UnregisterCombo::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCombo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_UnregisterCombo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCombo, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'RSBattlePlayer_C_UnregisterCombo::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ComboSetting
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_ComboSetting final
{
public:
	EPlayerComboPattern                           First;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerComboPattern                           Second;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ComboSetting) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ComboSetting");
static_assert(sizeof(RSBattlePlayer_C_ComboSetting) == 0x000003, "Wrong size on RSBattlePlayer_C_ComboSetting");
static_assert(offsetof(RSBattlePlayer_C_ComboSetting, First) == 0x000000, "Member 'RSBattlePlayer_C_ComboSetting::First' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ComboSetting, Second) == 0x000001, "Member 'RSBattlePlayer_C_ComboSetting::Second' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ComboSetting, Dummy) == 0x000002, "Member 'RSBattlePlayer_C_ComboSetting::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndCurrentAttack
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_EndCurrentAttack final
{
public:
	ERSAttackInputKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndAttack_Dummy;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndCurrentAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndCurrentAttack");
static_assert(sizeof(RSBattlePlayer_C_EndCurrentAttack) == 0x000003, "Wrong size on RSBattlePlayer_C_EndCurrentAttack");
static_assert(offsetof(RSBattlePlayer_C_EndCurrentAttack, Kind) == 0x000000, "Member 'RSBattlePlayer_C_EndCurrentAttack::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndCurrentAttack, CallFunc_EndAttack_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_EndCurrentAttack::CallFunc_EndAttack_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndCurrentAttack, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_EndCurrentAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStatusFull
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetActionStatusFull final
{
public:
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetActionStatusFull) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetActionStatusFull");
static_assert(sizeof(RSBattlePlayer_C_SetActionStatusFull) == 0x000001, "Wrong size on RSBattlePlayer_C_SetActionStatusFull");
static_assert(offsetof(RSBattlePlayer_C_SetActionStatusFull, CallFunc_IsUpperActionStatus_bResult) == 0x000000, "Member 'RSBattlePlayer_C_SetActionStatusFull::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddUpperActionStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_AddUpperActionStatus final
{
public:
	EPlayerUpperActionStatus                      ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AddUpperActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AddUpperActionStatus");
static_assert(sizeof(RSBattlePlayer_C_AddUpperActionStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_AddUpperActionStatus");
static_assert(offsetof(RSBattlePlayer_C_AddUpperActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_AddUpperActionStatus::ActionStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SubUpperActionStatus
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SubUpperActionStatus final
{
public:
	EPlayerUpperActionStatus                      ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SubUpperActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SubUpperActionStatus");
static_assert(sizeof(RSBattlePlayer_C_SubUpperActionStatus) == 0x000001, "Wrong size on RSBattlePlayer_C_SubUpperActionStatus");
static_assert(offsetof(RSBattlePlayer_C_SubUpperActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_SubUpperActionStatus::ActionStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearUpperActionStatus
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ClearUpperActionStatus final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearPrecedeInput_bDummy;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearUpperActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ClearUpperActionStatus");
static_assert(sizeof(RSBattlePlayer_C_ClearUpperActionStatus) == 0x000002, "Wrong size on RSBattlePlayer_C_ClearUpperActionStatus");
static_assert(offsetof(RSBattlePlayer_C_ClearUpperActionStatus, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ClearUpperActionStatus::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearUpperActionStatus, CallFunc_ClearPrecedeInput_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_ClearUpperActionStatus::CallFunc_ClearPrecedeInput_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSAS
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InitializeSAS final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InitializeSAS");
static_assert(sizeof(RSBattlePlayer_C_InitializeSAS) == 0x000001, "Wrong size on RSBattlePlayer_C_InitializeSAS");
static_assert(offsetof(RSBattlePlayer_C_InitializeSAS, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_InitializeSAS::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Initialize
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattlePlayer_C_Initialize final
{
public:
	bool                                          CallFunc_SetPlayerBattle_bDummy;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDisableActionBoringIdle_bDummy;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79DB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_NPCMetamorphosisComponent_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplySasEffectPassiveAll_bDummy;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         Temp_byte_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79DC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_BattlefieldManager_C*               CallFunc_GetBattlefieldManager_BP_BattlefieldManager; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79DD[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(E_SASKindNative Kind, ESASEquipStatus Status)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79DE[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetCharacterInfiniteBoundsSockets_Sockets; // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_2;                        // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79DF[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79E0[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SceneType                                   CallFunc_GetCurrentSceneType_SceneType;            // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_3;                        // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(E_SASButton Button, E_SASKindNative Kind)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_79E1[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPlayerID TargetID, int32 bondsLevel)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_4;                        // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E2[0x1];                                     // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy_1;       // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableBattleActionFlag_ReturnValue;    // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_3;             // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_5;                        // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E3[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            Temp_byte_Variable_1;                              // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterHitPriority                         Temp_byte_Variable_2;                              // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79E4[0x1];                                     // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattleMode_ReturnValue;                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         Temp_byte_Variable_3;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_6;                        // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         Temp_byte_Variable_4;                              // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateWeapon_bDummy;                      // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         K2Node_Select_Default_2;                           // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPlayerBattle_bDummy_1;                 // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFootIKEnable_Dummy;                    // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleReady_bDummy;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InitializeSAS_bDummy;                     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupAnimController_Dummy;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Initialize) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Initialize");
static_assert(sizeof(RSBattlePlayer_C_Initialize) == 0x0000D0, "Wrong size on RSBattlePlayer_C_Initialize");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetPlayerBattle_bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetPlayerBattle_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetDisableActionBoringIdle_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetDisableActionBoringIdle_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_ApplySasEffectPassiveAll_bDummy) == 0x000012, "Member 'RSBattlePlayer_C_Initialize::CallFunc_ApplySasEffectPassiveAll_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_byte_Variable) == 0x000013, "Member 'RSBattlePlayer_C_Initialize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000014, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'RSBattlePlayer_C_Initialize::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetBattlefieldManager_BP_BattlefieldManager) == 0x000028, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetBattlefieldManager_BP_BattlefieldManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000030, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_CreateDelegate_OutputDelegate_1) == 0x000034, "Member 'RSBattlePlayer_C_Initialize::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetPlayerID_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetCharacterInfiniteBoundsSockets_Sockets) == 0x000048, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetCharacterInfiniteBoundsSockets_Sockets' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000058, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetPlayerID_ReturnValue_1) == 0x00005A, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005B, "Member 'RSBattlePlayer_C_Initialize::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_1) == 0x00005C, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_2) == 0x00005D, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_MakeLiteralInt_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_Initialize::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetLevelManager_LevelManager) == 0x000068, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetLevelManager_LevelManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetCurrentSceneType_SceneType) == 0x000071, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetCurrentSceneType_SceneType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000072, "Member 'RSBattlePlayer_C_Initialize::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_3) == 0x000073, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_CreateDelegate_OutputDelegate_2) == 0x000074, "Member 'RSBattlePlayer_C_Initialize::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetUserParamManager_UserParamManager) == 0x000088, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_CreateDelegate_OutputDelegate_3) == 0x000090, "Member 'RSBattlePlayer_C_Initialize::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsValid_ReturnValue_2) == 0x0000A0, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_4) == 0x0000A1, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_bool_Variable) == 0x0000A2, "Member 'RSBattlePlayer_C_Initialize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_Select_Default) == 0x0000A4, "Member 'RSBattlePlayer_C_Initialize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetPlayerInputRestriction_bDummy) == 0x0000A8, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetPlayerInputRestriction_bDummy_1) == 0x0000A9, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetPlayerInputRestriction_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsValid_ReturnValue_3) == 0x0000AA, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsDisableBattleActionFlag_ReturnValue) == 0x0000AB, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsDisableBattleActionFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsEnemyPlayer_bEnemyPlayer_3) == 0x0000AC, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsEnemyPlayer_bEnemyPlayer_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_5) == 0x0000AD, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_bool_Variable_1) == 0x0000AE, "Member 'RSBattlePlayer_C_Initialize::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_Select_Default_1) == 0x0000B0, "Member 'RSBattlePlayer_C_Initialize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000B4, "Member 'RSBattlePlayer_C_Initialize::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_byte_Variable_1) == 0x0000B5, "Member 'RSBattlePlayer_C_Initialize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_byte_Variable_2) == 0x0000B6, "Member 'RSBattlePlayer_C_Initialize::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_GetBattleManager_BattleManager) == 0x0000B8, "Member 'RSBattlePlayer_C_Initialize::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsBattleMode_ReturnValue) == 0x0000C0, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsBattleMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_byte_Variable_3) == 0x0000C1, "Member 'RSBattlePlayer_C_Initialize::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_IsControlAI_bAI_6) == 0x0000C2, "Member 'RSBattlePlayer_C_Initialize::CallFunc_IsControlAI_bAI_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, Temp_byte_Variable_4) == 0x0000C3, "Member 'RSBattlePlayer_C_Initialize::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_CreateWeapon_bDummy) == 0x0000C4, "Member 'RSBattlePlayer_C_Initialize::CallFunc_CreateWeapon_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, K2Node_Select_Default_2) == 0x0000C5, "Member 'RSBattlePlayer_C_Initialize::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetPlayerBattle_bDummy_1) == 0x0000C6, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetPlayerBattle_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetFootIKEnable_Dummy) == 0x0000C7, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetFootIKEnable_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetBattleReady_bDummy) == 0x0000C8, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetBattleReady_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_InitializeSAS_bDummy) == 0x0000C9, "Member 'RSBattlePlayer_C_Initialize::CallFunc_InitializeSAS_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Initialize, CallFunc_SetupAnimController_Dummy) == 0x0000CA, "Member 'RSBattlePlayer_C_Initialize::CallFunc_SetupAnimController_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnRevive
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnRevive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnRevive_Dummy;                           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnRevive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnRevive");
static_assert(sizeof(RSBattlePlayer_C_OnRevive) == 0x000004, "Wrong size on RSBattlePlayer_C_OnRevive");
static_assert(offsetof(RSBattlePlayer_C_OnRevive, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnRevive::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnRevive, CallFunc_GetPlayerID_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnRevive::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnRevive, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_OnRevive::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnRevive, CallFunc_OnRevive_Dummy) == 0x000003, "Member 'RSBattlePlayer_C_OnRevive::CallFunc_OnRevive_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCharacterVisibility
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattlePlayer_C_SetCharacterVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBattle;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCharacterVisibility_bDummy;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E6[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E7[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E8[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79E9[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79EA[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79EB[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList_1;         // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79EC[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList_1;           // 0x00A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoBattleWeaponDispOff_bOff;             // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCharacterVisibility) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetCharacterVisibility");
static_assert(sizeof(RSBattlePlayer_C_SetCharacterVisibility) == 0x0000B8, "Wrong size on RSBattlePlayer_C_SetCharacterVisibility");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, bVisibility) == 0x000000, "Member 'RSBattlePlayer_C_SetCharacterVisibility::bVisibility' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetCharacterVisibility::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, bBattle) == 0x000002, "Member 'RSBattlePlayer_C_SetCharacterVisibility::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_SetCharacterVisibility_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_SetCharacterVisibility_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Num_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Counter_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Less_IntInt_ReturnValue_1) == 0x000028, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Add_IntInt_ReturnValue_2) == 0x00002C, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Counter_Variable_3) == 0x000030, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Add_IntInt_ReturnValue_3) == 0x000034, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Array_Index_Variable_1) == 0x000038, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Num_Variable_2) == 0x00003C, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Less_IntInt_ReturnValue_2) == 0x000040, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Loop_Num_Variable_3) == 0x000044, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Less_IntInt_ReturnValue_3) == 0x000048, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Array_Index_Variable_2) == 0x00004C, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, Temp_int_Array_Index_Variable_3) == 0x000050, "Member 'RSBattlePlayer_C_SetCharacterVisibility::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_GetBrainCodeActorList_CodeList) == 0x000058, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_GetSASCodeActorList_CodeList) == 0x000070, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_GetBrainCodeActorList_CodeList_1) == 0x000088, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_GetBrainCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_GetSASCodeActorList_CodeList_1) == 0x0000A0, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_GetSASCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Array_Length_ReturnValue_3) == 0x0000B0, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_IsPlayerStatus_Result) == 0x0000B4, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_IsNoBattleWeaponDispOff_bOff) == 0x0000B5, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_IsNoBattleWeaponDispOff_bOff' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x0000B6, "Member 'RSBattlePlayer_C_SetCharacterVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ThrowWeapon
// 0x04C0 (0x04C0 - 0x0000)
struct RSBattlePlayer_C_ThrowWeapon final
{
public:
	EWeaponThrowType                              ThrowType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79ED[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSearchAngle;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dir;                                               // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79EE[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTargetActor;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       LWeapon;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRange;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPoint;                                            // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79EF[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F0[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHorizontalDistanceTo_ReturnValue;      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F1[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x00C0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F2[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PrepareThrowWeapon_bOK;                   // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F3[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       CallFunc_PrepareThrowWeapon_Weapon;                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PrepareThrowWeapon_Target;                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F4[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00F8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F5[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0148(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F6[0x1];                                     // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F7[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F8[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x0270(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F9[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0290(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x02A0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x02B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79FA[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_2;       // 0x033C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_2;  // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x03C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x03C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79FB[0x1];                                     // 0x03C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0410(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0428(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79FC[0x2];                                     // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79FD[0x4];                                     // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0490(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x04B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ThrowWeapon) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ThrowWeapon");
static_assert(sizeof(RSBattlePlayer_C_ThrowWeapon) == 0x0004C0, "Wrong size on RSBattlePlayer_C_ThrowWeapon");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, ThrowType) == 0x000000, "Member 'RSBattlePlayer_C_ThrowWeapon::ThrowType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Speed) == 0x000004, "Member 'RSBattlePlayer_C_ThrowWeapon::Speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Range) == 0x000008, "Member 'RSBattlePlayer_C_ThrowWeapon::Range' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, TargetSearchAngle) == 0x00000C, "Member 'RSBattlePlayer_C_ThrowWeapon::TargetSearchAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Dir) == 0x000010, "Member 'RSBattlePlayer_C_ThrowWeapon::Dir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, bDummy) == 0x00001C, "Member 'RSBattlePlayer_C_ThrowWeapon::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, LTargetActor) == 0x000020, "Member 'RSBattlePlayer_C_ThrowWeapon::LTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, LWeapon) == 0x000028, "Member 'RSBattlePlayer_C_ThrowWeapon::LWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, LRange) == 0x000030, "Member 'RSBattlePlayer_C_ThrowWeapon::LRange' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, LDir) == 0x000034, "Member 'RSBattlePlayer_C_ThrowWeapon::LDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, LPoint) == 0x000040, "Member 'RSBattlePlayer_C_ThrowWeapon::LPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00005C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Normal_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_IsValid_ReturnValue_1) == 0x000081, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_GetHorizontalDistanceTo_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_GetHorizontalDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000088, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, K2Node_MakeArray_Array) == 0x000098, "Member 'RSBattlePlayer_C_ThrowWeapon::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_X) == 0x0000A8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Y) == 0x0000AC, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, K2Node_MakeArray_Array_1) == 0x0000C0, "Member 'RSBattlePlayer_C_ThrowWeapon::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, K2Node_SwitchEnum_CmpSuccess) == 0x0000D0, "Member 'RSBattlePlayer_C_ThrowWeapon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Array_Add_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_PrepareThrowWeapon_bOK) == 0x0000DC, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_PrepareThrowWeapon_bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_PrepareThrowWeapon_Weapon) == 0x0000E0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_PrepareThrowWeapon_Weapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_PrepareThrowWeapon_Target) == 0x0000E8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_PrepareThrowWeapon_Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Array_Add_ReturnValue_1) == 0x0000F0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Temp_object_Variable) == 0x0000F8, "Member 'RSBattlePlayer_C_ThrowWeapon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000108, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000114, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Add_VectorVector_ReturnValue) == 0x000120, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00012C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_X_1) == 0x000130, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Y_1) == 0x000134, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Z_1) == 0x000138, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_MakeVector_ReturnValue_1) == 0x00013C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000148, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001D0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D1, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001D2, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Time) == 0x0001D4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Distance) == 0x0001D8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Location) == 0x0001DC, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactPoint) == 0x0001E8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Normal) == 0x0001F4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactNormal) == 0x000200, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_PhysMat) == 0x000210, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitActor) == 0x000218, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitComponent) == 0x000220, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitBoneName) == 0x000228, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitItem) == 0x000230, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_FaceIndex) == 0x000234, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceStart) == 0x000238, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceEnd) == 0x000244, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000250, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_X_2) == 0x00025C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Y_2) == 0x000260, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakVector_Z_2) == 0x000264, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_Add_FloatFloat_ReturnValue) == 0x000268, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, K2Node_MakeArray_Array_2) == 0x000270, "Member 'RSBattlePlayer_C_ThrowWeapon::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_MakeVector_ReturnValue_2) == 0x000280, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Temp_object_Variable_1) == 0x000290, "Member 'RSBattlePlayer_C_ThrowWeapon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, Temp_object_Variable_2) == 0x0002A0, "Member 'RSBattlePlayer_C_ThrowWeapon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x0002B0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000338, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_OutHit_2) == 0x00033C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_OutHit_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_LineTraceSingleForObjects_ReturnValue_2) == 0x0003C4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_LineTraceSingleForObjects_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0003C5, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0003C6, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Time_1) == 0x0003C8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Distance_1) == 0x0003CC, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Location_1) == 0x0003D0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003DC, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Normal_1) == 0x0003E8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003F4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_PhysMat_1) == 0x000400, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitActor_1) == 0x000408, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitComponent_1) == 0x000410, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitBoneName_1) == 0x000418, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitItem_1) == 0x000420, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_FaceIndex_1) == 0x000424, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceStart_1) == 0x000428, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceEnd_1) == 0x000434, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000440, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000441, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Time_2) == 0x000444, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Distance_2) == 0x000448, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Location_2) == 0x00044C, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000458, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_Normal_2) == 0x000464, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000470, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_PhysMat_2) == 0x000480, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitActor_2) == 0x000488, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitComponent_2) == 0x000490, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitBoneName_2) == 0x000498, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_HitItem_2) == 0x0004A0, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_FaceIndex_2) == 0x0004A4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceStart_2) == 0x0004A8, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeapon, CallFunc_BreakHitResult_TraceEnd_2) == 0x0004B4, "Member 'RSBattlePlayer_C_ThrowWeapon::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TakeBackWeapon
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_TakeBackWeapon final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79FE[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79FF[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TakeBackWeapon) == 0x000004, "Wrong alignment on RSBattlePlayer_C_TakeBackWeapon");
static_assert(sizeof(RSBattlePlayer_C_TakeBackWeapon) == 0x000020, "Wrong size on RSBattlePlayer_C_TakeBackWeapon");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, Time) == 0x000000, "Member 'RSBattlePlayer_C_TakeBackWeapon::Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_TakeBackWeapon::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_TakeBackWeapon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_TakeBackWeapon::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_TakeBackWeapon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_TakeBackWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_TakeBackWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TakeBackWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_TakeBackWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginConnectEffect
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattlePlayer_C_OnBeginConnectEffect final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectConnectPoint                           SourceConnectPoint;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A00[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceSocketName;                                  // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectConnectPoint                           TargetConnectPoint;                                // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A01[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocketName;                                  // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          PlaySound;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A02[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRSBeamEffectInfo                      LEffectInfo;                                       // 0x0038(0x0030)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A03[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetConnectEffectLocation_Location;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A04[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBeginConnectEffect) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBeginConnectEffect");
static_assert(sizeof(RSBattlePlayer_C_OnBeginConnectEffect) == 0x0000A8, "Wrong size on RSBattlePlayer_C_OnBeginConnectEffect");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, ParticleSystem) == 0x000000, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::ParticleSystem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, ObjectName) == 0x000008, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::ObjectName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, SourceConnectPoint) == 0x000010, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::SourceConnectPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, SourceSocketName) == 0x000014, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::SourceSocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, TargetConnectPoint) == 0x00001C, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::TargetConnectPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, TargetSocketName) == 0x000020, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::TargetSocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, PlaySound) == 0x000028, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::PlaySound' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, bDummy) == 0x000030, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, LEffectInfo) == 0x000038, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::LEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, Temp_int_Array_Index_Variable) == 0x000068, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, Temp_int_Loop_Num_Variable) == 0x00006C, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_GetConnectEffectLocation_Location) == 0x00007C, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_GetConnectEffectLocation_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_Array_Add_ReturnValue) == 0x000094, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000098, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, K2Node_SwitchEnum_CmpSuccess) == 0x0000A0, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginConnectEffect, CallFunc_Array_Add_ReturnValue_1) == 0x0000A4, "Member 'RSBattlePlayer_C_OnBeginConnectEffect::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEndConnectEffect
// 0x0080 (0x0080 - 0x0000)
struct RSBattlePlayer_C_OnEndConnectEffect final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A05[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRSBeamEffectInfo>              LTempInfoList;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         LHandle;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A06[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSBeamEffectInfo                      K2Node_MakeStruct_RSBeamEffectInfo;                // 0x0038(0x0030)(NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A07[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEndConnectEffect) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnEndConnectEffect");
static_assert(sizeof(RSBattlePlayer_C_OnEndConnectEffect) == 0x000080, "Wrong size on RSBattlePlayer_C_OnEndConnectEffect");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, ObjectName) == 0x000000, "Member 'RSBattlePlayer_C_OnEndConnectEffect::ObjectName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_OnEndConnectEffect::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, LTempInfoList) == 0x000010, "Member 'RSBattlePlayer_C_OnEndConnectEffect::LTempInfoList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, LHandle) == 0x000020, "Member 'RSBattlePlayer_C_OnEndConnectEffect::LHandle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, Temp_int_Array_Index_Variable) == 0x000028, "Member 'RSBattlePlayer_C_OnEndConnectEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_OnEndConnectEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, K2Node_MakeStruct_RSBeamEffectInfo) == 0x000038, "Member 'RSBattlePlayer_C_OnEndConnectEffect::K2Node_MakeStruct_RSBeamEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'RSBattlePlayer_C_OnEndConnectEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndConnectEffect, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_OnEndConnectEffect::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateConnectEffect
// 0x0034 (0x0034 - 0x0000)
struct RSBattlePlayer_C_UpdateConnectEffect final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A08[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetConnectEffectLocation_Location;        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetConnectEffectLocation_Location_1;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A09[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_UpdateConnectEffect) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateConnectEffect");
static_assert(sizeof(RSBattlePlayer_C_UpdateConnectEffect) == 0x000034, "Wrong size on RSBattlePlayer_C_UpdateConnectEffect");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_UpdateConnectEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_UpdateConnectEffect::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_UpdateConnectEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_GetConnectEffectLocation_Location) == 0x000014, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_GetConnectEffectLocation_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_GetConnectEffectLocation_Location_1) == 0x000020, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_GetConnectEffectLocation_Location_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateConnectEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_UpdateConnectEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PrepareThrowWeapon
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_PrepareThrowWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponThrowType                              ThrowType;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A0A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSearchAngle;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A0B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       Weapon;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       CallFunc_GetPlayerWeaponPure_Weapon;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PrepareThrowWeapon) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PrepareThrowWeapon");
static_assert(sizeof(RSBattlePlayer_C_PrepareThrowWeapon) == 0x000038, "Wrong size on RSBattlePlayer_C_PrepareThrowWeapon");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, WeaponIndex) == 0x000000, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::WeaponIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, ThrowType) == 0x000004, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::ThrowType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, Range) == 0x000008, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::Range' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, TargetSearchAngle) == 0x00000C, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::TargetSearchAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, bOK) == 0x000010, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, Weapon) == 0x000018, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, Target) == 0x000020, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000028, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PrepareThrowWeapon, CallFunc_GetPlayerWeaponPure_Weapon) == 0x000030, "Member 'RSBattlePlayer_C_PrepareThrowWeapon::CallFunc_GetPlayerWeaponPure_Weapon' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateChangeBattle
// 0x000A (0x000A - 0x0000)
struct RSBattlePlayer_C_UpdateChangeBattle final
{
public:
	bool                                          CallFunc_IsEnableActionChangeBattle_bEnable;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionChangeBattle_bEnable_1;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_2;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateChangeBattle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateChangeBattle");
static_assert(sizeof(RSBattlePlayer_C_UpdateChangeBattle) == 0x00000A, "Wrong size on RSBattlePlayer_C_UpdateChangeBattle");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsEnableActionChangeBattle_bEnable) == 0x000000, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsEnableActionChangeBattle_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsEnableActionChangeBattle_bEnable_1) == 0x000002, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsEnableActionChangeBattle_bEnable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsActionStatus_Result) == 0x000003, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsOver_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsPlayerStatus_Result) == 0x000006, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsPlayerStatus_Result_1) == 0x000007, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateChangeBattle, CallFunc_IsPlayerStatus_Result_2) == 0x000009, "Member 'RSBattlePlayer_C_UpdateChangeBattle::CallFunc_IsPlayerStatus_Result_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleReady
// 0x000D (0x000D - 0x0000)
struct RSBattlePlayer_C_SetBattleReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bForce;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue_1;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue_2;      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnChangeBattleReady_bDummy;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnChangeBattleReady_bDummy_1;             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_2;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBattleReady) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetBattleReady");
static_assert(sizeof(RSBattlePlayer_C_SetBattleReady) == 0x00000D, "Wrong size on RSBattlePlayer_C_SetBattleReady");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, bReady) == 0x000000, "Member 'RSBattlePlayer_C_SetBattleReady::bReady' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, bForce) == 0x000001, "Member 'RSBattlePlayer_C_SetBattleReady::bForce' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetBattleReady::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_SetBattleParticleType_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_SetBattleParticleType_ReturnValue_1) == 0x000004, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_SetBattleParticleType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_IsPlayerStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_IsDriveMode_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_SetBattleParticleType_ReturnValue_2) == 0x000007, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_SetBattleParticleType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_IsPlayerStatus_Result_1) == 0x000008, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_OnChangeBattleReady_bDummy) == 0x000009, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_OnChangeBattleReady_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_OnChangeBattleReady_bDummy_1) == 0x00000A, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_OnChangeBattleReady_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_IsPlayerStatus_Result_2) == 0x00000B, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_IsPlayerStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleReady, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetBattleReady::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleReady
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnChangeBattleReady final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoBattleWeaponDispOff_bOff;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeBattleReady) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeBattleReady");
static_assert(sizeof(RSBattlePlayer_C_OnChangeBattleReady) == 0x000003, "Wrong size on RSBattlePlayer_C_OnChangeBattleReady");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleReady, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeBattleReady::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleReady, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeBattleReady::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleReady, CallFunc_IsNoBattleWeaponDispOff_bOff) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeBattleReady::CallFunc_IsNoBattleWeaponDispOff_bOff' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattlePlayer_C_ForceWarp final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         IdleRestoreDelay;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerCameraReset_Dummy;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A0C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ForceWarp) == 0x000010, "Wrong alignment on RSBattlePlayer_C_ForceWarp");
static_assert(sizeof(RSBattlePlayer_C_ForceWarp) == 0x0000D0, "Wrong size on RSBattlePlayer_C_ForceWarp");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, Transform) == 0x000000, "Member 'RSBattlePlayer_C_ForceWarp::Transform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, IdleRestoreDelay) == 0x000030, "Member 'RSBattlePlayer_C_ForceWarp::IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, CallFunc_PlayerCameraReset_Dummy) == 0x000034, "Member 'RSBattlePlayer_C_ForceWarp::CallFunc_PlayerCameraReset_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000038, "Member 'RSBattlePlayer_C_ForceWarp::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000C0, "Member 'RSBattlePlayer_C_ForceWarp::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp, CallFunc_IsControlAI_bAI) == 0x0000C1, "Member 'RSBattlePlayer_C_ForceWarp::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ThrowWeaponEnd
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_ThrowWeaponEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A0D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A0E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ThrowWeaponEnd) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ThrowWeaponEnd");
static_assert(sizeof(RSBattlePlayer_C_ThrowWeaponEnd) == 0x00001C, "Wrong size on RSBattlePlayer_C_ThrowWeaponEnd");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ThrowWeaponEnd, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_ThrowWeaponEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnOil
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOnOil final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDispStealthEffect_bOutDisp;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A0F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BadStateEffectOnOil_bDummy;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOnOil) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOnOil");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOnOil) == 0x000018, "Wrong size on RSBattlePlayer_C_BadStateEffectOnOil");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_IsDispStealthEffect_bOutDisp) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_IsDispStealthEffect_bOutDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_IsValid_ReturnValue_2) == 0x000004, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnOil, CallFunc_BadStateEffectOnOil_bDummy) == 0x000010, "Member 'RSBattlePlayer_C_BadStateEffectOnOil::CallFunc_BadStateEffectOnOil_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOffOil
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOffOil final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffOil_bDummy;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOffOil) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOffOil");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOffOil) == 0x000004, "Wrong size on RSBattlePlayer_C_BadStateEffectOffOil");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffOil, bNoMaterial) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOffOil::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffOil, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOffOil::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffOil, CallFunc_BadStateEffectOffOil_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOffOil::CallFunc_BadStateEffectOffOil_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffOil, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOffOil::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnFlooded
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOnFlooded final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDispStealthEffect_bOutDisp;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A10[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BadStateEffectOnFlooded_bDummy;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOnFlooded) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOnFlooded");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOnFlooded) == 0x000018, "Wrong size on RSBattlePlayer_C_BadStateEffectOnFlooded");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_IsDispStealthEffect_bOutDisp) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_IsDispStealthEffect_bOutDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_IsValid_ReturnValue_2) == 0x000004, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlooded, CallFunc_BadStateEffectOnFlooded_bDummy) == 0x000010, "Member 'RSBattlePlayer_C_BadStateEffectOnFlooded::CallFunc_BadStateEffectOnFlooded_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOffFlooded
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOffFlooded final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlooded_bDummy;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOffFlooded) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOffFlooded");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOffFlooded) == 0x000004, "Wrong size on RSBattlePlayer_C_BadStateEffectOffFlooded");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffFlooded, bNoMaterial) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOffFlooded::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffFlooded, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOffFlooded::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffFlooded, CallFunc_BadStateEffectOffFlooded_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOffFlooded::CallFunc_BadStateEffectOffFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOffFlooded, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOffFlooded::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetHoodVisible
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetHoodVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetHoodVisible) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetHoodVisible");
static_assert(sizeof(RSBattlePlayer_C_SetHoodVisible) == 0x000002, "Wrong size on RSBattlePlayer_C_SetHoodVisible");
static_assert(offsetof(RSBattlePlayer_C_SetHoodVisible, Visible) == 0x000000, "Member 'RSBattlePlayer_C_SetHoodVisible::Visible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHoodVisible, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetHoodVisible::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetFootIKEnable
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetFootIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A11[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetFootIKEnable) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetFootIKEnable");
static_assert(sizeof(RSBattlePlayer_C_SetFootIKEnable) == 0x000010, "Wrong size on RSBattlePlayer_C_SetFootIKEnable");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, Enable) == 0x000000, "Member 'RSBattlePlayer_C_SetFootIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, BlendTime) == 0x000004, "Member 'RSBattlePlayer_C_SetFootIKEnable::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, Dummy) == 0x000008, "Member 'RSBattlePlayer_C_SetFootIKEnable::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_SetFootIKEnable::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_SetFootIKEnable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'RSBattlePlayer_C_SetFootIKEnable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetFootIKEnable, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetFootIKEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateHUD
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_OnUpdateHUD final
{
public:
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A12[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A13[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnUpdateHUD) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnUpdateHUD");
static_assert(sizeof(RSBattlePlayer_C_OnUpdateHUD) == 0x000030, "Wrong size on RSBattlePlayer_C_OnUpdateHUD");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000000, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_GetHPPercent_Percent) == 0x000008, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_GetSoundManager_SoundManager) == 0x000020, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateHUD, CallFunc_GetHPPercent_Percent_1) == 0x000028, "Member 'RSBattlePlayer_C_OnUpdateHUD::CallFunc_GetHPPercent_Percent_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayBlendAnimMontage
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_PlayBlendAnimMontage final
{
public:
	class UAnimMontage*                           UpperAnimMontage;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LowerAnimMontage;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SectionName;                                       // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PlayBlendAnimMontage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlayBlendAnimMontage");
static_assert(sizeof(RSBattlePlayer_C_PlayBlendAnimMontage) == 0x000028, "Wrong size on RSBattlePlayer_C_PlayBlendAnimMontage");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, UpperAnimMontage) == 0x000000, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::UpperAnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, LowerAnimMontage) == 0x000008, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::LowerAnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, PlayRate) == 0x000010, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, SectionName) == 0x000014, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::SectionName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, CallFunc_PlayAnimMontage_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, CallFunc_PlayAnimMontage_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::CallFunc_PlayAnimMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBlendAnimMontage, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'RSBattlePlayer_C_PlayBlendAnimMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopBlendAnimMontage
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_StopBlendAnimMontage final
{
public:
	bool                                          Upper;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lower;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StopBlendAnimMontage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StopBlendAnimMontage");
static_assert(sizeof(RSBattlePlayer_C_StopBlendAnimMontage) == 0x000004, "Wrong size on RSBattlePlayer_C_StopBlendAnimMontage");
static_assert(offsetof(RSBattlePlayer_C_StopBlendAnimMontage, Upper) == 0x000000, "Member 'RSBattlePlayer_C_StopBlendAnimMontage::Upper' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopBlendAnimMontage, Lower) == 0x000001, "Member 'RSBattlePlayer_C_StopBlendAnimMontage::Lower' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopBlendAnimMontage, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_StopBlendAnimMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopBlendAnimMontage, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'RSBattlePlayer_C_StopBlendAnimMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStatusUpper
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetActionStatusUpper final
{
public:
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetActionStatusUpper) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetActionStatusUpper");
static_assert(sizeof(RSBattlePlayer_C_SetActionStatusUpper) == 0x000008, "Wrong size on RSBattlePlayer_C_SetActionStatusUpper");
static_assert(offsetof(RSBattlePlayer_C_SetActionStatusUpper, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SetActionStatusUpper::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStatusUpper, CallFunc_Conv_IntToByte_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetActionStatusUpper::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStatusUpper, CallFunc_GetValidValue_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_SetActionStatusUpper::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStatusUpper, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_SetActionStatusUpper::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAnimMontageFromSet
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_GetAnimMontageFromSet final
{
public:
	EPlayerAnimMontage                            AnimType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A14[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAnimMontage                            Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A15[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAnimMontageFromSet) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetAnimMontageFromSet");
static_assert(sizeof(RSBattlePlayer_C_GetAnimMontageFromSet) == 0x000020, "Wrong size on RSBattlePlayer_C_GetAnimMontageFromSet");
static_assert(offsetof(RSBattlePlayer_C_GetAnimMontageFromSet, AnimType) == 0x000000, "Member 'RSBattlePlayer_C_GetAnimMontageFromSet::AnimType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimMontageFromSet, Montage) == 0x000008, "Member 'RSBattlePlayer_C_GetAnimMontageFromSet::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimMontageFromSet, Temp_byte_Variable) == 0x000010, "Member 'RSBattlePlayer_C_GetAnimMontageFromSet::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimMontageFromSet, K2Node_Select_Default) == 0x000018, "Member 'RSBattlePlayer_C_GetAnimMontageFromSet::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventVisible
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_SetEventVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableBehaviorTree_bDisable;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventVisible_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBehaviorTreeTickEnable_ReturnValue;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAnimLeftStickPower_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventVisible) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEventVisible");
static_assert(sizeof(RSBattlePlayer_C_SetEventVisible) == 0x000006, "Wrong size on RSBattlePlayer_C_SetEventVisible");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, Visible) == 0x000000, "Member 'RSBattlePlayer_C_SetEventVisible::Visible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEventVisible::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, CallFunc_IsDisableBehaviorTree_bDisable) == 0x000002, "Member 'RSBattlePlayer_C_SetEventVisible::CallFunc_IsDisableBehaviorTree_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, CallFunc_SetEventVisible_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetEventVisible::CallFunc_SetEventVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, CallFunc_SetBehaviorTreeTickEnable_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetEventVisible::CallFunc_SetBehaviorTreeTickEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventVisible, CallFunc_ResetAnimLeftStickPower_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_SetEventVisible::CallFunc_ResetAnimLeftStickPower_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackWeakHit
// 0x01F0 (0x01F0 - 0x0000)
struct RSBattlePlayer_C_OnAttackWeakHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A16[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     ExtraType;                                         // 0x01C8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FActionParameter                       K2Node_MakeStruct_ActionParameter;                 // 0x01D8(0x0001)(NoDestructor)
	bool                                          CallFunc_OnAttackWeakHit_bDummy;                   // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A17[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattleSituationComponent*              CallFunc_GetBattleSituation_BattleSituation;       // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAttackWeakHit) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAttackWeakHit");
static_assert(sizeof(RSBattlePlayer_C_OnAttackWeakHit) == 0x0001F0, "Wrong size on RSBattlePlayer_C_OnAttackWeakHit");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_OnAttackWeakHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, bDummy) == 0x0001C0, "Member 'RSBattlePlayer_C_OnAttackWeakHit::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, ExtraType) == 0x0001C8, "Member 'RSBattlePlayer_C_OnAttackWeakHit::ExtraType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, K2Node_MakeStruct_ActionParameter) == 0x0001D8, "Member 'RSBattlePlayer_C_OnAttackWeakHit::K2Node_MakeStruct_ActionParameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, CallFunc_OnAttackWeakHit_bDummy) == 0x0001D9, "Member 'RSBattlePlayer_C_OnAttackWeakHit::CallFunc_OnAttackWeakHit_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, CallFunc_GetBattleSituation_BattleSituation) == 0x0001E0, "Member 'RSBattlePlayer_C_OnAttackWeakHit::CallFunc_GetBattleSituation_BattleSituation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackWeakHit, CallFunc_IsControlAI_bAI) == 0x0001E8, "Member 'RSBattlePlayer_C_OnAttackWeakHit::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDestroy
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_OnDestroy final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A18[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CloseBrainFieldSetting_bDummy;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DestroyRedCode_NewParam;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A19[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1A[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDestroy) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDestroy");
static_assert(sizeof(RSBattlePlayer_C_OnDestroy) == 0x000030, "Wrong size on RSBattlePlayer_C_OnDestroy");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnDestroy::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_OnDestroy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_CloseBrainFieldSetting_bDummy) == 0x000008, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_CloseBrainFieldSetting_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_IsPlayerStatus_Result) == 0x000009, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_DestroyRedCode_NewParam) == 0x00000B, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_DestroyRedCode_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_GetBattleManager_BattleManager) == 0x000010, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_IsValid_ReturnValue_2) == 0x000019, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_OnDestroy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDestroy, CallFunc_IsValid_ReturnValue_3) == 0x000029, "Member 'RSBattlePlayer_C_OnDestroy::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckExistActorToMoveDir
// 0x00C0 (0x00C0 - 0x0000)
struct RSBattlePlayer_C_CheckExistActorToMoveDir final
{
public:
	bool                                          LbCheckDir;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LDistSq;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LExistTarget;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LCheckDir;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LTargetActor;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0020(0x0040)(ConstParm)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1D[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXYSquared_ReturnValue;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1E[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_MathExpression_ReturnValue;                 // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1F[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcInputWorldVector_ReturnValue;         // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue_1;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckExistActorToMoveDir) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckExistActorToMoveDir");
static_assert(sizeof(RSBattlePlayer_C_CheckExistActorToMoveDir) == 0x0000C0, "Wrong size on RSBattlePlayer_C_CheckExistActorToMoveDir");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, LbCheckDir) == 0x000000, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::LbCheckDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, LDistSq) == 0x000004, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::LDistSq' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, LExistTarget) == 0x000008, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::LExistTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, LCheckDir) == 0x00000C, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::LCheckDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, LTargetActor) == 0x000018, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::LTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_GetAsyncResult_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_GetActorForwardVector_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_Dot_VectorVector_ReturnValue) == 0x00006C, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_IsPlayerStatus_Result) == 0x000080, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_VSizeXYSquared_ReturnValue) == 0x000090, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_IsControlAI_bAI) == 0x000094, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_DegCos_ReturnValue) == 0x000098, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, K2Node_MathExpression_ReturnValue) == 0x00009D, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_CalcInputWorldVector_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_CalcInputWorldVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000AC, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_DegCos_ReturnValue_1) == 0x0000B0, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_DegCos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000B4, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorToMoveDir, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'RSBattlePlayer_C_CheckExistActorToMoveDir::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.WarpToTargetActor
// 0x0328 (0x0328 - 0x0000)
struct RSBattlePlayer_C_WarpToTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A20[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 WarpCandidateAngle;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bCheckGround;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A21[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LWarpZ;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         LIgnoreActorArray;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FVector                                LWarpLocation;                                     // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LOffset;                                           // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A22[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A23[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A24[0x2];                                     // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0198(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A25[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x01B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x01C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A26[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A27[0x2];                                     // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A28[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A29[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_WarpToTargetActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_WarpToTargetActor");
static_assert(sizeof(RSBattlePlayer_C_WarpToTargetActor) == 0x000328, "Wrong size on RSBattlePlayer_C_WarpToTargetActor");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_WarpToTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, Distance) == 0x000008, "Member 'RSBattlePlayer_C_WarpToTargetActor::Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, WarpCandidateAngle) == 0x000010, "Member 'RSBattlePlayer_C_WarpToTargetActor::WarpCandidateAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, bCheckGround) == 0x000020, "Member 'RSBattlePlayer_C_WarpToTargetActor::bCheckGround' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, bSuccess) == 0x000021, "Member 'RSBattlePlayer_C_WarpToTargetActor::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, LWarpZ) == 0x000024, "Member 'RSBattlePlayer_C_WarpToTargetActor::LWarpZ' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, LIgnoreActorArray) == 0x000028, "Member 'RSBattlePlayer_C_WarpToTargetActor::LIgnoreActorArray' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, LWarpLocation) == 0x000038, "Member 'RSBattlePlayer_C_WarpToTargetActor::LWarpLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, LOffset) == 0x000044, "Member 'RSBattlePlayer_C_WarpToTargetActor::LOffset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, K2Node_MakeArray_Array) == 0x000050, "Member 'RSBattlePlayer_C_WarpToTargetActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, Temp_int_Array_Index_Variable) == 0x000060, "Member 'RSBattlePlayer_C_WarpToTargetActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, Temp_int_Loop_Num_Variable) == 0x000064, "Member 'RSBattlePlayer_C_WarpToTargetActor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_X) == 0x000068, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Y) == 0x00006C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Z) == 0x000070, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000078, "Member 'RSBattlePlayer_C_WarpToTargetActor::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'RSBattlePlayer_C_WarpToTargetActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_GetCapsuleRadius_Radius) == 0x00008C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00009C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakRotator_Roll) == 0x0000AC, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakRotator_Pitch) == 0x0000B0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakRotator_Yaw) == 0x0000B4, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_X_1) == 0x0000B8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Y_1) == 0x0000BC, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Z_1) == 0x0000C0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_MakeRotator_ReturnValue) == 0x0000C4, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'RSBattlePlayer_C_WarpToTargetActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000E0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000168, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Less_IntInt_ReturnValue) == 0x000169, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_IntInt_ReturnValue) == 0x00016C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_VectorVector_ReturnValue) == 0x000170, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00017C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000188, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00018C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_SphereTraceMulti_OutHits) == 0x000198, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_SphereTraceMulti_ReturnValue) == 0x0001A8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, K2Node_MakeArray_Array_1) == 0x0001B0, "Member 'RSBattlePlayer_C_WarpToTargetActor::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0001C0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000248, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Array_Length_ReturnValue) == 0x00024C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_MakeRotator_ReturnValue_1) == 0x000250, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00025C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_bBlockingHit) == 0x000268, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_bInitialOverlap) == 0x000269, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_Time) == 0x00026C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_Distance) == 0x000270, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_Location) == 0x000274, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_ImpactPoint) == 0x000280, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_Normal) == 0x00028C, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_ImpactNormal) == 0x000298, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_PhysMat) == 0x0002A8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_HitActor) == 0x0002B0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_HitComponent) == 0x0002B8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_HitBoneName) == 0x0002C0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_HitItem) == 0x0002C8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_FaceIndex) == 0x0002CC, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_TraceStart) == 0x0002D0, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakHitResult_TraceEnd) == 0x0002DC, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0002E8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_X_2) == 0x0002F4, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Y_2) == 0x0002F8, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_BreakVector_Z_2) == 0x0002FC, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_FloatFloat_ReturnValue) == 0x000300, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000304, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_GetActorForwardVector_ReturnValue) == 0x000308, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_IsValid_ReturnValue) == 0x000314, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToTargetActor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000318, "Member 'RSBattlePlayer_C_WarpToTargetActor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.WarpToLocation
// 0x0218 (0x0218 - 0x0000)
struct RSBattlePlayer_C_WarpToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckGround;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A2A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WarpLocation;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A2B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A2C[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A2D[0x1];                                     // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_WarpToLocation) == 0x000008, "Wrong alignment on RSBattlePlayer_C_WarpToLocation");
static_assert(sizeof(RSBattlePlayer_C_WarpToLocation) == 0x000218, "Wrong size on RSBattlePlayer_C_WarpToLocation");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, Location) == 0x000000, "Member 'RSBattlePlayer_C_WarpToLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, bCheckGround) == 0x00000C, "Member 'RSBattlePlayer_C_WarpToLocation::bCheckGround' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, WarpLocation) == 0x000010, "Member 'RSBattlePlayer_C_WarpToLocation::WarpLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, Temp_object_Variable) == 0x000020, "Member 'RSBattlePlayer_C_WarpToLocation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, K2Node_MakeArray_Array) == 0x000030, "Member 'RSBattlePlayer_C_WarpToLocation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000040, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000C8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000CC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_X) == 0x0000DC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_Y) == 0x0000E0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_Z) == 0x0000E4, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000F4, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x00017C, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x00017D, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x00017E, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_Time) == 0x000180, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_Distance) == 0x000184, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_Location) == 0x000188, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x000194, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_Normal) == 0x0001A0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x0001AC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_FaceIndex) == 0x0001DC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_TraceStart) == 0x0001E0, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakHitResult_TraceEnd) == 0x0001EC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_X_1) == 0x0001F8, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_Y_1) == 0x0001FC, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_BreakVector_Z_1) == 0x000200, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000204, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WarpToLocation, CallFunc_MakeVector_ReturnValue) == 0x000208, "Member 'RSBattlePlayer_C_WarpToLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginSAS_Telepo
// 0x0060 (0x0060 - 0x0000)
struct RSBattlePlayer_C_BeginSAS_Telepo final
{
public:
	bool                                          bLocationTelepo;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A2E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDistance;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisappearTime;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A2F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DisappearParticle;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DisappearParticleSecond;                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketNameSecond;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        TelepoParticle;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketNameTelepo;                                  // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyWeapon;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoCollision;                                      // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationTargetHeight;                             // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBegin;                                            // 0x0043(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A30[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                MeshChild;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          LBegin;                                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableBeginSAS_Telepo_bDisable;     // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Begin_bBegin;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginSAS_Telepo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BeginSAS_Telepo");
static_assert(sizeof(RSBattlePlayer_C_BeginSAS_Telepo) == 0x000060, "Wrong size on RSBattlePlayer_C_BeginSAS_Telepo");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, bLocationTelepo) == 0x000000, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::bLocationTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, TargetDistance) == 0x000004, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, DisappearTime) == 0x000008, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::DisappearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, DisappearParticle) == 0x000010, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::DisappearParticle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, SocketName) == 0x000018, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::SocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, DisappearParticleSecond) == 0x000020, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::DisappearParticleSecond' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, SocketNameSecond) == 0x000028, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::SocketNameSecond' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, TelepoParticle) == 0x000030, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::TelepoParticle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, SocketNameTelepo) == 0x000038, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::SocketNameTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, bOnlyWeapon) == 0x000040, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::bOnlyWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, bNoCollision) == 0x000041, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::bNoCollision' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, bLocationTargetHeight) == 0x000042, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::bLocationTargetHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, bBegin) == 0x000043, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::bBegin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, MeshChild) == 0x000048, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::MeshChild' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, LBegin) == 0x000058, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::LBegin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, CallFunc_CheckDisableBeginSAS_Telepo_bDisable) == 0x000059, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::CallFunc_CheckDisableBeginSAS_Telepo_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginSAS_Telepo, CallFunc_Begin_bBegin) == 0x00005A, "Member 'RSBattlePlayer_C_BeginSAS_Telepo::CallFunc_Begin_bBegin' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndSAS_Telepo
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_EndSAS_Telepo final
{
public:
	float                                         AppearTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A31[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        AppearParticle;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        AppearParticleSecond;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketNameSecond;                                  // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDirection;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A32[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        TelepoParticle;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketNameTelepo;                                  // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_End_bEnd;                                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndSAS_Telepo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EndSAS_Telepo");
static_assert(sizeof(RSBattlePlayer_C_EndSAS_Telepo) == 0x000048, "Wrong size on RSBattlePlayer_C_EndSAS_Telepo");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, AppearTime) == 0x000000, "Member 'RSBattlePlayer_C_EndSAS_Telepo::AppearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, AppearParticle) == 0x000008, "Member 'RSBattlePlayer_C_EndSAS_Telepo::AppearParticle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, SocketName) == 0x000010, "Member 'RSBattlePlayer_C_EndSAS_Telepo::SocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, AppearParticleSecond) == 0x000018, "Member 'RSBattlePlayer_C_EndSAS_Telepo::AppearParticleSecond' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, SocketNameSecond) == 0x000020, "Member 'RSBattlePlayer_C_EndSAS_Telepo::SocketNameSecond' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, bNoDirection) == 0x000028, "Member 'RSBattlePlayer_C_EndSAS_Telepo::bNoDirection' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, TelepoParticle) == 0x000030, "Member 'RSBattlePlayer_C_EndSAS_Telepo::TelepoParticle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, SocketNameTelepo) == 0x000038, "Member 'RSBattlePlayer_C_EndSAS_Telepo::SocketNameTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, bEnd) == 0x000040, "Member 'RSBattlePlayer_C_EndSAS_Telepo::bEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndSAS_Telepo, CallFunc_End_bEnd) == 0x000041, "Member 'RSBattlePlayer_C_EndSAS_Telepo::CallFunc_End_bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetShadowEnable
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattlePlayer_C_SetShadowEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOnlyWeapon;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A33[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               L_copyActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_SASCopyPlayerActor_C*>       L_copyPlayerList;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A34[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A35[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A36[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A37[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A38[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetShadowEnable) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetShadowEnable");
static_assert(sizeof(RSBattlePlayer_C_SetShadowEnable) == 0x0000A8, "Wrong size on RSBattlePlayer_C_SetShadowEnable");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetShadowEnable::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, bOnlyWeapon) == 0x000001, "Member 'RSBattlePlayer_C_SetShadowEnable::bOnlyWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetShadowEnable::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, L_copyActor) == 0x000008, "Member 'RSBattlePlayer_C_SetShadowEnable::L_copyActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, L_copyPlayerList) == 0x000010, "Member 'RSBattlePlayer_C_SetShadowEnable::L_copyPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Num_Variable_1) == 0x000038, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Array_Index_Variable_2) == 0x000048, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Num_Variable_2) == 0x00004C, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000058, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, Temp_int_Loop_Counter_Variable_2) == 0x000068, "Member 'RSBattlePlayer_C_SetShadowEnable::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Less_IntInt_ReturnValue_2) == 0x00006C, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Add_IntInt_ReturnValue_2) == 0x000070, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_GetBrainCodeActorList_CodeList) == 0x000078, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_GetSASCodeActorList_CodeList) == 0x000090, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetShadowEnable, CallFunc_Array_Length_ReturnValue_2) == 0x0000A0, "Member 'RSBattlePlayer_C_SetShadowEnable::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetHp
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetHp final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetHp) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetHp");
static_assert(sizeof(RSBattlePlayer_C_SetHp) == 0x000008, "Wrong size on RSBattlePlayer_C_SetHp");
static_assert(offsetof(RSBattlePlayer_C_SetHp, HP) == 0x000000, "Member 'RSBattlePlayer_C_SetHp::HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHp, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_SetHp::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHp, CallFunc_SetHP_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_SetHp::CallFunc_SetHP_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerHidden
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattlePlayer_C_SetPlayerHidden final
{
public:
	bool                                          Param_bHidden;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bWeaponOnly;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A39[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        LComponent;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                LMeshChildComponents;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3A[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AttachmentVisibilityOffOnHead_bDummy;     // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3B[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3C[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3D[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3E[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A3F[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A40[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A41[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A42[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A43[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UBP_RSParticleSystemComponent_C*        CallFunc_CastChildRSParticleComponent_BP_RSParticleComp; // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_CastChildRSParticleComponent_ParticleComp; // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A44[0x2];                                     // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerHidden) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetPlayerHidden");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerHidden) == 0x0000F8, "Wrong size on RSBattlePlayer_C_SetPlayerHidden");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Param_bHidden) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerHidden::Param_bHidden' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, bWeaponOnly) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerHidden::bWeaponOnly' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetPlayerHidden::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, LComponent) == 0x000008, "Member 'RSBattlePlayer_C_SetPlayerHidden::LComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, LMeshChildComponents) == 0x000010, "Member 'RSBattlePlayer_C_SetPlayerHidden::LMeshChildComponents' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Array_Index_Variable) == 0x000024, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Array_Index_Variable_1) == 0x000030, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Num_Variable_1) == 0x000034, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Num_Variable_2) == 0x000038, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Array_Index_Variable_2) == 0x000040, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Counter_Variable_1) == 0x000044, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Array_Index_Variable_3) == 0x00004C, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Num_Variable_3) == 0x000050, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Less_IntInt_ReturnValue_1) == 0x000054, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_AttachmentVisibilityOffOnHead_bDummy) == 0x000055, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_AttachmentVisibilityOffOnHead_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Counter_Variable_2) == 0x000060, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Counter_Variable_3) == 0x000064, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Less_IntInt_ReturnValue_2) == 0x000068, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Add_IntInt_ReturnValue_2) == 0x00006C, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Add_IntInt_ReturnValue_3) == 0x000070, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Array_Index_Variable_4) == 0x000074, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Array_Length_ReturnValue_1) == 0x00007C, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, K2Node_DynamicCast_AsCapsule_Collision) == 0x000080, "Member 'RSBattlePlayer_C_SetPlayerHidden::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'RSBattlePlayer_C_SetPlayerHidden::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Counter_Variable_4) == 0x00008C, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_GetChildrenComponents_Children) == 0x000090, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000A0, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000A4, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, Temp_int_Loop_Num_Variable_4) == 0x0000A8, "Member 'RSBattlePlayer_C_SetPlayerHidden::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Less_IntInt_ReturnValue_4) == 0x0000AC, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Array_Length_ReturnValue_2) == 0x0000B0, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_GetBrainCodeActorList_CodeList) == 0x0000B8, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Array_Length_ReturnValue_3) == 0x0000C8, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_GetSASCodeActorList_CodeList) == 0x0000D0, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_CastChildRSParticleComponent_BP_RSParticleComp) == 0x0000E0, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_CastChildRSParticleComponent_BP_RSParticleComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_CastChildRSParticleComponent_ParticleComp) == 0x0000E8, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_CastChildRSParticleComponent_ParticleComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_IsValid_ReturnValue_2) == 0x0000F0, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_IsValid_ReturnValue_3) == 0x0000F1, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHidden, CallFunc_Array_Length_ReturnValue_4) == 0x0000F4, "Member 'RSBattlePlayer_C_SetPlayerHidden::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcAccumulationByDefence
// 0x0060 (0x0060 - 0x0000)
struct RSBattlePlayer_C_CalcAccumulationByDefence final
{
public:
	float                                         RefWince;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefKnockback;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefDown;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLaunch;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlame;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectric;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlooded;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefOil;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefConfusion;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashScale;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashCapCheckRate;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A45[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          bReturn;                                           // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A46[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_CalcCrash;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcWince;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcDown;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcKnockBack;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcAccumulationByDefence_ReturnValue;    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A47[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuperArmor_bSuperArmor;                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccumulationByDefence_ForPlayer_ReturnValue; // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CalcAccumulationByDefence) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcAccumulationByDefence");
static_assert(sizeof(RSBattlePlayer_C_CalcAccumulationByDefence) == 0x000060, "Wrong size on RSBattlePlayer_C_CalcAccumulationByDefence");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefWince) == 0x000000, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefWince' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefKnockback) == 0x000004, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefKnockback' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefDown) == 0x000008, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefLaunch) == 0x00000C, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefLaunch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefFlame) == 0x000010, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefFlame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefElectric) == 0x000014, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefElectric' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefFlooded) == 0x000018, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefFlooded' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefOil) == 0x00001C, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefOil' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefConfusion) == 0x000020, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefConfusion' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefCrashScale) == 0x000024, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, RefCrashCapCheckRate) == 0x000028, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::RefCrashCapCheckRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, AttackActor) == 0x000030, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, bReturn) == 0x000039, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::bReturn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, L_CalcCrash) == 0x00003C, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::L_CalcCrash' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, L_CalcWince) == 0x000040, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::L_CalcWince' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, L_CalcDown) == 0x000044, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::L_CalcDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, L_CalcKnockBack) == 0x000048, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::L_CalcKnockBack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_GetDebuggingManager_Manager) == 0x000050, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000059, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_IsSuperArmor_bSuperArmor) == 0x00005A, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_IsSuperArmor_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_ForPlayer_ReturnValue) == 0x00005B, "Member 'RSBattlePlayer_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_ForPlayer_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcCritical
// 0x0088 (0x0088 - 0x0000)
struct RSBattlePlayer_C_CalcCritical final
{
public:
	float                                         Critical;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A48[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAssassinAttack;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A49[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 L_DefensrTargetActor;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsEnpc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A4A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_critical;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcCritical_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A4B[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A4C[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A4D[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A4E[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcCritical_ForPlayer_ReturnValue;       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CalcCritical) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcCritical");
static_assert(sizeof(RSBattlePlayer_C_CalcCritical) == 0x000088, "Wrong size on RSBattlePlayer_C_CalcCritical");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, Critical) == 0x000000, "Member 'RSBattlePlayer_C_CalcCritical::Critical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, DefenseActor) == 0x000008, "Member 'RSBattlePlayer_C_CalcCritical::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, bAssassinAttack) == 0x000010, "Member 'RSBattlePlayer_C_CalcCritical::bAssassinAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CalcCritical::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, L_DefensrTargetActor) == 0x000018, "Member 'RSBattlePlayer_C_CalcCritical::L_DefensrTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, L_IsEnpc) == 0x000020, "Member 'RSBattlePlayer_C_CalcCritical::L_IsEnpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, L_critical) == 0x000024, "Member 'RSBattlePlayer_C_CalcCritical::L_critical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_CalcCritical_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_CalcCritical_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000030, "Member 'RSBattlePlayer_C_CalcCritical::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattlePlayer_C_CalcCritical::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_GetBattleTargetActor_TargetActor) == 0x000048, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, K2Node_DynamicCast_AsRSBattle_Player) == 0x000050, "Member 'RSBattlePlayer_C_CalcCritical::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'RSBattlePlayer_C_CalcCritical::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000060, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000070, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_CalcCritical_ForPlayer_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_CalcCritical_ForPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_GetDebuggingManager_Manager) == 0x000078, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCritical, CallFunc_IsValid_ReturnValue_1) == 0x000080, "Member 'RSBattlePlayer_C_CalcCritical::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcFinalDamageByAttack
// 0x0110 (0x0110 - 0x0000)
struct RSBattlePlayer_C_CalcFinalDamageByAttack final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A4F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0010(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDamage;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByAttack_ReturnValue;      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByAttack_ForPlayer_ReturnValue; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CalcFinalDamageByAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcFinalDamageByAttack");
static_assert(sizeof(RSBattlePlayer_C_CalcFinalDamageByAttack) == 0x000110, "Wrong size on RSBattlePlayer_C_CalcFinalDamageByAttack");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, Damage) == 0x000000, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::Damage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, DefenseActor) == 0x000008, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, SkillInfo) == 0x000010, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, LDamage) == 0x000104, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, CallFunc_CalcFinalDamageByAttack_ReturnValue) == 0x000108, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::CallFunc_CalcFinalDamageByAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByAttack, CallFunc_CalcFinalDamageByAttack_ForPlayer_ReturnValue) == 0x00010C, "Member 'RSBattlePlayer_C_CalcFinalDamageByAttack::CallFunc_CalcFinalDamageByAttack_ForPlayer_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcFinalDamageByDefence
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_CalcFinalDamageByDefence final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A50[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNpcDamageLate;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOneKill;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A51[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LDamage;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByDefence_ReturnValue;     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A52[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A53[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByDefence_ForPlayer_ReturnValue; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A54[0x1];                                     // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager_2;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A55[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A56[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CalcFinalDamageByDefence) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcFinalDamageByDefence");
static_assert(sizeof(RSBattlePlayer_C_CalcFinalDamageByDefence) == 0x000078, "Wrong size on RSBattlePlayer_C_CalcFinalDamageByDefence");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, Damage) == 0x000000, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::Damage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, AttackActor) == 0x000008, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, LNpcDamageLate) == 0x000014, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::LNpcDamageLate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, LOneKill) == 0x000018, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::LOneKill' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, LDamage) == 0x00001C, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_GetDebuggingManager_Manager) == 0x000028, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000030, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000038, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ForPlayer_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ForPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsMissionActive_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, Temp_bool_Variable) == 0x000045, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsControlPlayer_ReturnValue) == 0x000046, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_GetDebuggingManager_Manager_1) == 0x000048, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_GetDebuggingManager_Manager_2) == 0x000050, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_GetDebuggingManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsValid_ReturnValue_2) == 0x000059, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_GetHP_HP) == 0x00005C, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, K2Node_Select_Default) == 0x000064, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000068, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000069, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_FFloor_ReturnValue) == 0x00006C, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcFinalDamageByDefence, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000070, "Member 'RSBattlePlayer_C_CalcFinalDamageByDefence::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackCollisionInfo
// 0x0190 (0x0190 - 0x0000)
struct RSBattlePlayer_C_OverwriteAttackCollisionInfo final
{
public:
	struct FHCCollisionCommonInfo                 RefCommonInfo;                                     // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHCSkillCommonInfo                     RefSkill;                                          // 0x0070(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A57[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LCrashRate;                                        // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAttackRate;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAttackUpRate;                                     // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LAssasinIndex;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A58[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x0178(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         LbrainCrashRate;                                   // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OverwriteAttackCollisionInfo_ReturnValue; // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OverwriteAttackCollisionInfo_ForPlayer_ReturnValue; // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OverwriteAttackCollisionInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OverwriteAttackCollisionInfo");
static_assert(sizeof(RSBattlePlayer_C_OverwriteAttackCollisionInfo) == 0x000190, "Wrong size on RSBattlePlayer_C_OverwriteAttackCollisionInfo");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, RefCommonInfo) == 0x000000, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::RefCommonInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, RefSkill) == 0x000070, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::RefSkill' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, ReturnValue) == 0x000160, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LCrashRate) == 0x000164, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LCrashRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LAttackRate) == 0x000168, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LAttackRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LAttackUpRate) == 0x00016C, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LAttackUpRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LAssasinIndex) == 0x000170, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LAssasinIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LExtraType) == 0x000178, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, LbrainCrashRate) == 0x000188, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::LbrainCrashRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, CallFunc_OverwriteAttackCollisionInfo_ReturnValue) == 0x00018C, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::CallFunc_OverwriteAttackCollisionInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00018D, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, CallFunc_BooleanOR_ReturnValue) == 0x00018E, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackCollisionInfo, CallFunc_OverwriteAttackCollisionInfo_ForPlayer_ReturnValue) == 0x00018F, "Member 'RSBattlePlayer_C_OverwriteAttackCollisionInfo::CallFunc_OverwriteAttackCollisionInfo_ForPlayer_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckFriendlyFire
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_IsCheckFriendlyFire final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          bHit;                                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCheckFriendlyFire_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A59[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckFriendlyFire) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsCheckFriendlyFire");
static_assert(sizeof(RSBattlePlayer_C_IsCheckFriendlyFire) == 0x000028, "Wrong size on RSBattlePlayer_C_IsCheckFriendlyFire");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, HitActor) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, bHit) == 0x000009, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::bHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, CallFunc_IsCheckFriendlyFire_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::CallFunc_IsCheckFriendlyFire_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000010, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckFriendlyFire, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000021, "Member 'RSBattlePlayer_C_IsCheckFriendlyFire::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnPlayerAssetLoad
// 0x01F0 (0x01F0 - 0x0000)
struct RSBattlePlayer_C_OnPlayerAssetLoad final
{
public:
	struct FPlayerInfo                            LPlayerInfo;                                       // 0x0000(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A5A[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x00D4(0x00D0)(NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x01A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPlayerBattleVoiceFacialAnimType      CallFunc_GetDataTableRowFromName_OutRow;           // 0x01A8(0x0012)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5B[0x5];                                     // 0x01BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5C[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnPlayerAssetLoad) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnPlayerAssetLoad");
static_assert(sizeof(RSBattlePlayer_C_OnPlayerAssetLoad) == 0x0001F0, "Wrong size on RSBattlePlayer_C_OnPlayerAssetLoad");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, LPlayerInfo) == 0x000000, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::LPlayerInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_GetPlayerID_ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x0000D4, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0001A4, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_IsControlAI_bAI) == 0x0001A5, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_Not_PreBool_ReturnValue) == 0x0001A6, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_GetPlayerID_ReturnValue_1) == 0x0001A7, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001A8, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001BA, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_LoadSoftObject_ReturnValue) == 0x0001C0, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, K2Node_DynamicCast_AsParticle_System) == 0x0001C8, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, K2Node_DynamicCast_bSuccess) == 0x0001D0, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, CallFunc_LoadSoftObject_ReturnValue_1) == 0x0001D8, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, K2Node_DynamicCast_AsParticle_System_1) == 0x0001E0, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPlayerAssetLoad, K2Node_DynamicCast_bSuccess_1) == 0x0001E8, "Member 'RSBattlePlayer_C_OnPlayerAssetLoad::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddCopyPlayer
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_AddCopyPlayer final
{
public:
	class ABP_SASCopyPlayerActor_C*               CopyPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AddCopyPlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AddCopyPlayer");
static_assert(sizeof(RSBattlePlayer_C_AddCopyPlayer) == 0x000010, "Wrong size on RSBattlePlayer_C_AddCopyPlayer");
static_assert(offsetof(RSBattlePlayer_C_AddCopyPlayer, CopyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_AddCopyPlayer::CopyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AddCopyPlayer, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_AddCopyPlayer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyWeaponOn
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_CopyWeaponOn final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CopyWeaponOn) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CopyWeaponOn");
static_assert(sizeof(RSBattlePlayer_C_CopyWeaponOn) == 0x000008, "Wrong size on RSBattlePlayer_C_CopyWeaponOn");
static_assert(offsetof(RSBattlePlayer_C_CopyWeaponOn, Time) == 0x000000, "Member 'RSBattlePlayer_C_CopyWeaponOn::Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyWeaponOn, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'RSBattlePlayer_C_CopyWeaponOn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyWeaponOff
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_CopyWeaponOff final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CopyWeaponOff) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CopyWeaponOff");
static_assert(sizeof(RSBattlePlayer_C_CopyWeaponOff) == 0x000008, "Wrong size on RSBattlePlayer_C_CopyWeaponOff");
static_assert(offsetof(RSBattlePlayer_C_CopyWeaponOff, Time) == 0x000000, "Member 'RSBattlePlayer_C_CopyWeaponOff::Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyWeaponOff, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'RSBattlePlayer_C_CopyWeaponOff::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMaterial_CopyWeapon
// 0x0108 (0x0108 - 0x0000)
struct RSBattlePlayer_C_UpdateMaterial_CopyWeapon final
{
public:
	class ABP_SASCopyPlayerActor_C*               LCopyPlayer;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5D[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5E[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5F[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A60[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0080(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A61[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_2;               // 0x00B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A62[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCopyVisible_bVisible;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A63[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue_1;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCopyVisible_bVisible_1;                 // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A64[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_3;               // 0x00E0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A65[0x2];                                     // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRate_ReturnValue_1;                    // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UpdateMaterial_CopyWeapon");
static_assert(sizeof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon) == 0x000108, "Wrong size on RSBattlePlayer_C_UpdateMaterial_CopyWeapon");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, LCopyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::LCopyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable_2) == 0x000024, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue_1) == 0x00002D, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable_2) == 0x000034, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable_3) == 0x000038, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue_2) == 0x00003C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue_3) == 0x000040, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable_3) == 0x000044, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable_3) == 0x000048, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue_2) == 0x00004C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable_4) == 0x000050, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable_4) == 0x000054, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue_3) == 0x000058, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable_4) == 0x00005C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue_4) == 0x000060, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Array_Index_Variable_5) == 0x000064, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Num_Variable_5) == 0x000068, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue_4) == 0x00006C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetWeaponList_WeaponList) == 0x000070, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetWeaponList_WeaponList_1) == 0x000080, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue_1) == 0x000094, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, Temp_int_Loop_Counter_Variable_5) == 0x000098, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Less_IntInt_ReturnValue_5) == 0x00009C, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000A0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue_2) == 0x0000A4, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetAttachParentActor_ReturnValue) == 0x0000A8, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetWeaponList_WeaponList_2) == 0x0000B0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetWeaponList_WeaponList_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue_3) == 0x0000C4, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_IsCopyVisible_bVisible) == 0x0000C8, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_IsCopyVisible_bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetAttachParentActor_ReturnValue_1) == 0x0000D0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetAttachParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0000D8, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_IsCopyVisible_bVisible_1) == 0x0000D9, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_IsCopyVisible_bVisible_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue_4) == 0x0000DC, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetWeaponList_WeaponList_3) == 0x0000E0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetWeaponList_WeaponList_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Array_Length_ReturnValue_5) == 0x0000F0, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_IsOver_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_IsOver_ReturnValue_1) == 0x0000F5, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetRate_ReturnValue) == 0x0000F8, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_GetRate_ReturnValue_1) == 0x0000FC, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_GetRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, K2Node_SwitchEnum_CmpSuccess) == 0x000104, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMaterial_CopyWeapon, CallFunc_IsEnable_ReturnValue) == 0x000105, "Member 'RSBattlePlayer_C_UpdateMaterial_CopyWeapon::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCopyWeaponMaterialValue
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattlePlayer_C_SetCopyWeaponMaterialValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A66[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               LCopyPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       LWeapon;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A67[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A68[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetWeaponMaterialScalarParameter_bDummy;  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponMaterialScalarParameter_bDummy_1; // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A69[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A6A[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetWeaponMaterialScalarParameter_bDummy_2; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A6B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetWeaponMaterialScalarParameter_bDummy_3; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A6C[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetCopyWeaponMaterialValue) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetCopyWeaponMaterialValue");
static_assert(sizeof(RSBattlePlayer_C_SetCopyWeaponMaterialValue) == 0x0000A0, "Wrong size on RSBattlePlayer_C_SetCopyWeaponMaterialValue");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Value) == 0x000000, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, LCopyPlayer) == 0x000008, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::LCopyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, LWeapon) == 0x000010, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::LWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Num_Variable_1) == 0x00002C, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Array_Index_Variable_1) == 0x000030, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Array_Index_Variable_2) == 0x00003C, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Num_Variable_2) == 0x000040, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Less_IntInt_ReturnValue_1) == 0x000044, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_GetWeaponList_WeaponList) == 0x000048, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_SetWeaponMaterialScalarParameter_bDummy) == 0x00005C, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_SetWeaponMaterialScalarParameter_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_SetWeaponMaterialScalarParameter_bDummy_1) == 0x00005D, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_SetWeaponMaterialScalarParameter_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, Temp_int_Loop_Counter_Variable_2) == 0x000060, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Less_IntInt_ReturnValue_2) == 0x000068, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Add_IntInt_ReturnValue_2) == 0x00006C, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_SetWeaponMaterialScalarParameter_bDummy_2) == 0x000070, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_SetWeaponMaterialScalarParameter_bDummy_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_GetAttachParentActor_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_SetWeaponMaterialScalarParameter_bDummy_3) == 0x000080, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_SetWeaponMaterialScalarParameter_bDummy_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000081, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_GetWeaponList_WeaponList_1) == 0x000088, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCopyWeaponMaterialValue, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'RSBattlePlayer_C_SetCopyWeaponMaterialValue::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BulletFire
// 0x00D8 (0x00D8 - 0x0000)
struct RSBattlePlayer_C_BulletFire final
{
public:
	EBulletType                                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A6D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttackCollisionInfoBP                 CollisionInfo;                                     // 0x0008(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   SkillName_CopyBullet;                              // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BulletFire) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BulletFire");
static_assert(sizeof(RSBattlePlayer_C_BulletFire) == 0x0000D8, "Wrong size on RSBattlePlayer_C_BulletFire");
static_assert(offsetof(RSBattlePlayer_C_BulletFire, Type) == 0x000000, "Member 'RSBattlePlayer_C_BulletFire::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BulletFire, CollisionInfo) == 0x000008, "Member 'RSBattlePlayer_C_BulletFire::CollisionInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BulletFire, SkillName_CopyBullet) == 0x0000C8, "Member 'RSBattlePlayer_C_BulletFire::SkillName_CopyBullet' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BulletFire, bDummy) == 0x0000D0, "Member 'RSBattlePlayer_C_BulletFire::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOnIndex
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_CopyPlayerOnIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AppearTime;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttachOriginal;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A6E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWithSubWeapon;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A6F[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CopyPlayerOnIndex) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CopyPlayerOnIndex");
static_assert(sizeof(RSBattlePlayer_C_CopyPlayerOnIndex) == 0x000030, "Wrong size on RSBattlePlayer_C_CopyPlayerOnIndex");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, AppearTime) == 0x000004, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::AppearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, bAttachOriginal) == 0x000008, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::bAttachOriginal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, Montage) == 0x000010, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, bWithSubWeapon) == 0x000018, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::bWithSubWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, bDummy) == 0x000019, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, CallFunc_Array_Get_Item) == 0x000020, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOnIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_CopyPlayerOnIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOffIndex
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_CopyPlayerOffIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisappearTime;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A70[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CopyPlayerOffIndex) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CopyPlayerOffIndex");
static_assert(sizeof(RSBattlePlayer_C_CopyPlayerOffIndex) == 0x000020, "Wrong size on RSBattlePlayer_C_CopyPlayerOffIndex");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOffIndex, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_CopyPlayerOffIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOffIndex, DisappearTime) == 0x000004, "Member 'RSBattlePlayer_C_CopyPlayerOffIndex::DisappearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOffIndex, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_CopyPlayerOffIndex::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOffIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'RSBattlePlayer_C_CopyPlayerOffIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOffIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CopyPlayerOffIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOn
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_CopyPlayerOn final
{
public:
	float                                         AppearTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A71[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A72[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CopyPlayerOn) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CopyPlayerOn");
static_assert(sizeof(RSBattlePlayer_C_CopyPlayerOn) == 0x000020, "Wrong size on RSBattlePlayer_C_CopyPlayerOn");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, AppearTime) == 0x000000, "Member 'RSBattlePlayer_C_CopyPlayerOn::AppearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_CopyPlayerOn::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_CopyPlayerOn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_CopyPlayerOn::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_CopyPlayerOn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CopyPlayerOn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CopyPlayerOn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOn, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_CopyPlayerOn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOff
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_CopyPlayerOff final
{
public:
	float                                         DisappearTime;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A73[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A74[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CopyPlayerOff) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CopyPlayerOff");
static_assert(sizeof(RSBattlePlayer_C_CopyPlayerOff) == 0x000020, "Wrong size on RSBattlePlayer_C_CopyPlayerOff");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, DisappearTime) == 0x000000, "Member 'RSBattlePlayer_C_CopyPlayerOff::DisappearTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_CopyPlayerOff::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_CopyPlayerOff::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_CopyPlayerOff::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_CopyPlayerOff::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CopyPlayerOff::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CopyPlayerOff::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayerOff, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_CopyPlayerOff::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndBulletFire
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EndBulletFire final
{
public:
	EBulletType                                   BulletType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndBulletFire) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndBulletFire");
static_assert(sizeof(RSBattlePlayer_C_EndBulletFire) == 0x000002, "Wrong size on RSBattlePlayer_C_EndBulletFire");
static_assert(offsetof(RSBattlePlayer_C_EndBulletFire, BulletType) == 0x000000, "Member 'RSBattlePlayer_C_EndBulletFire::BulletType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndBulletFire, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EndBulletFire::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearActionStatus_Common
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ClearActionStatus_Common final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearActionStatus_Common) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ClearActionStatus_Common");
static_assert(sizeof(RSBattlePlayer_C_ClearActionStatus_Common) == 0x000001, "Wrong size on RSBattlePlayer_C_ClearActionStatus_Common");
static_assert(offsetof(RSBattlePlayer_C_ClearActionStatus_Common, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ClearActionStatus_Common::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealth
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetSasStealth final
{
public:
	bool                                          Stealth_on_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hero_order_in;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_delay;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_ignore;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_sas_cancel_in;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          From_event_in;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A75[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LLerpTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetSasStealth) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetSasStealth");
static_assert(sizeof(RSBattlePlayer_C_SetSasStealth) == 0x000010, "Wrong size on RSBattlePlayer_C_SetSasStealth");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, Stealth_on_in) == 0x000000, "Member 'RSBattlePlayer_C_SetSasStealth::Stealth_on_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, Hero_order_in) == 0x000001, "Member 'RSBattlePlayer_C_SetSasStealth::Hero_order_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, Check_delay) == 0x000002, "Member 'RSBattlePlayer_C_SetSasStealth::Check_delay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, Check_ignore) == 0x000003, "Member 'RSBattlePlayer_C_SetSasStealth::Check_ignore' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, No_sas_cancel_in) == 0x000004, "Member 'RSBattlePlayer_C_SetSasStealth::No_sas_cancel_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, From_event_in) == 0x000005, "Member 'RSBattlePlayer_C_SetSasStealth::From_event_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, Dummy) == 0x000006, "Member 'RSBattlePlayer_C_SetSasStealth::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, LLerpTime) == 0x000008, "Member 'RSBattlePlayer_C_SetSasStealth::LLerpTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, CallFunc_IsPlayerStatus_Result) == 0x00000C, "Member 'RSBattlePlayer_C_SetSasStealth::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth, CallFunc_IsPlayerStatus_Result_1) == 0x00000D, "Member 'RSBattlePlayer_C_SetSasStealth::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDamageActorHit
// 0x0350 (0x0350 - 0x0000)
struct RSBattlePlayer_C_OnDamageActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            LHitStopType;                                      // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A76[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDamageActorHit_Dummy;                   // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A77[0x5];                                     // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A78[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShowUnDiscoverIcon_bDummy;                // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A79[0x6];                                     // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable;                              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7A[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay; // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7B[0x5];                                     // 0x0213(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker; // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType; // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType; // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget; // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7C[0x5];                                     // 0x0223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_CheckPlayNexusDriveTelepoAttack_Skill;    // 0x0228(0x00F0)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7D[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager_1;         // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x032A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7E[0x5];                                     // 0x032B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Select_Default;                             // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Select_Default_1;                           // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDamageActorHit) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDamageActorHit");
static_assert(sizeof(RSBattlePlayer_C_OnDamageActorHit) == 0x000350, "Wrong size on RSBattlePlayer_C_OnDamageActorHit");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_OnDamageActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, Dummy) == 0x0001C0, "Member 'RSBattlePlayer_C_OnDamageActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, LHitStopType) == 0x0001C1, "Member 'RSBattlePlayer_C_OnDamageActorHit::LHitStopType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, LAttacker) == 0x0001C8, "Member 'RSBattlePlayer_C_OnDamageActorHit::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_OnDamageActorHit_Dummy) == 0x0001D0, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_OnDamageActorHit_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, Temp_bool_Variable) == 0x0001D1, "Member 'RSBattlePlayer_C_OnDamageActorHit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, Temp_bool_Variable_1) == 0x0001D2, "Member 'RSBattlePlayer_C_OnDamageActorHit::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_GetBattleTargetActor_TargetActor) == 0x0001D8, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue) == 0x0001E0, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_GetEnpcComp_ReturnComp) == 0x0001E8, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_1) == 0x0001F0, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_ShowUnDiscoverIcon_bDummy) == 0x0001F1, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_ShowUnDiscoverIcon_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, Temp_object_Variable) == 0x0001F8, "Member 'RSBattlePlayer_C_OnDamageActorHit::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsControlAI_bAI) == 0x000200, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_GetBattleManager_BattleManager) == 0x000208, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_2) == 0x000210, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_3) == 0x000211, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay) == 0x000212, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker) == 0x000218, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType) == 0x000220, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType) == 0x000221, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget) == 0x000222, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_Skill) == 0x000228, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_Skill' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000318, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_GetBattleManager_BattleManager_1) == 0x000320, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_GetBattleManager_BattleManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000328, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_4) == 0x000329, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_5) == 0x00032A, "Member 'RSBattlePlayer_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, K2Node_Select_Default) == 0x000330, "Member 'RSBattlePlayer_C_OnDamageActorHit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, K2Node_Select_Default_1) == 0x000338, "Member 'RSBattlePlayer_C_OnDamageActorHit::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000340, "Member 'RSBattlePlayer_C_OnDamageActorHit::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess) == 0x000348, "Member 'RSBattlePlayer_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetHideSASOutline
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetHideSASOutline final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A7F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetHideSASOutline) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetHideSASOutline");
static_assert(sizeof(RSBattlePlayer_C_SetHideSASOutline) == 0x000010, "Wrong size on RSBattlePlayer_C_SetHideSASOutline");
static_assert(offsetof(RSBattlePlayer_C_SetHideSASOutline, bHide) == 0x000000, "Member 'RSBattlePlayer_C_SetHideSASOutline::bHide' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHideSASOutline, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetHideSASOutline::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHideSASOutline, bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_SetHideSASOutline::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RevivePlayer
// 0x00C0 (0x00C0 - 0x0000)
struct RSBattlePlayer_C_RevivePlayer final
{
public:
	EPlayerReviveKind                             Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A80[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LAddDamageMontage;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LRecoverHP;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerReviveKind                             Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A81[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerReviveKind                             Temp_byte_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A82[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerAccessoryExtendParameter_bOutEquip; // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A83[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_GetPlayerAccessoryExtendParameter_outParameter; // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A84[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue_1;                     // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A85[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_5;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A86[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChangeSoundState_ReturnValue;             // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A87[0x5];                                     // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnRevive_Dummy;                           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A88[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A89[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_RevivePlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_RevivePlayer");
static_assert(sizeof(RSBattlePlayer_C_RevivePlayer) == 0x0000C0, "Wrong size on RSBattlePlayer_C_RevivePlayer");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Kind) == 0x000000, "Member 'RSBattlePlayer_C_RevivePlayer::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, bSuccess) == 0x000001, "Member 'RSBattlePlayer_C_RevivePlayer::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, LbSuccess) == 0x000002, "Member 'RSBattlePlayer_C_RevivePlayer::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, LAddDamageMontage) == 0x000008, "Member 'RSBattlePlayer_C_RevivePlayer::LAddDamageMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, LRecoverHP) == 0x000010, "Member 'RSBattlePlayer_C_RevivePlayer::LRecoverHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable) == 0x000014, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_byte_Variable) == 0x000018, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable_1) == 0x00001C, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable_3) == 0x000024, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable_4) == 0x000028, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_byte_Variable_1) == 0x00002C, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable) == 0x00002D, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_1) == 0x00002E, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_2) == 0x00002F, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_3) == 0x000030, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_4) == 0x000031, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_5) == 0x000032, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_6) == 0x000033, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_SetHP_bDummy) == 0x000034, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000035, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000038, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetPlayerAccessoryExtendParameter_bOutEquip) == 0x00003C, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetPlayerAccessoryExtendParameter_bOutEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetPlayerAccessoryExtendParameter_outParameter) == 0x000040, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetPlayerAccessoryExtendParameter_outParameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Array_Get_Item) == 0x000054, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetHP_HP) == 0x000058, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00005C, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_IsPlayerStatus_Result) == 0x000060, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_7) == 0x000061, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, K2Node_Select_Default) == 0x000064, "Member 'RSBattlePlayer_C_RevivePlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_IsDead_ReturnValue) == 0x000069, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x00006A, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_IsDead_ReturnValue_1) == 0x00006B, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_IsDead_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_IsMainPlayer_bMainPlayer) == 0x00006C, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_float_Variable_5) == 0x000070, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetSoundManager_SoundManager) == 0x000078, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, K2Node_SwitchEnum_CmpSuccess) == 0x000081, "Member 'RSBattlePlayer_C_RevivePlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_ChangeSoundState_ReturnValue) == 0x000082, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_ChangeSoundState_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000088, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, K2Node_Select_Default_1) == 0x000090, "Member 'RSBattlePlayer_C_RevivePlayer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_OnRevive_Dummy) == 0x000091, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_OnRevive_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000094, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_GetMaxHP_MaxHP) == 0x0000A0, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, Temp_bool_Variable_8) == 0x0000A4, "Member 'RSBattlePlayer_C_RevivePlayer::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, K2Node_Select_Default_2) == 0x0000A8, "Member 'RSBattlePlayer_C_RevivePlayer::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, K2Node_Select_Default_3) == 0x0000AC, "Member 'RSBattlePlayer_C_RevivePlayer::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_FCeil_ReturnValue) == 0x0000B4, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RevivePlayer, CallFunc_Max_ReturnValue) == 0x0000B8, "Member 'RSBattlePlayer_C_RevivePlayer::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyPlayerBattle
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetEnemyPlayerBattle final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseBrainField;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyPlayerBattle_bDummy;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyPlayerBattle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyPlayerBattle");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyPlayerBattle) == 0x000004, "Wrong size on RSBattlePlayer_C_SetEnemyPlayerBattle");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyPlayerBattle, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyPlayerBattle::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyPlayerBattle, bUseBrainField) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyPlayerBattle::bUseBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyPlayerBattle, CallFunc_OnEnemyPlayerBattle_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetEnemyPlayerBattle::CallFunc_OnEnemyPlayerBattle_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyPlayerBattle, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetEnemyPlayerBattle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetItemID
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetItemID final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHelpPlayer;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetItemID) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetItemID");
static_assert(sizeof(RSBattlePlayer_C_SetItemID) == 0x000002, "Wrong size on RSBattlePlayer_C_SetItemID");
static_assert(offsetof(RSBattlePlayer_C_SetItemID, ItemId) == 0x000000, "Member 'RSBattlePlayer_C_SetItemID::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetItemID, bHelpPlayer) == 0x000001, "Member 'RSBattlePlayer_C_SetItemID::bHelpPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayMontage
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_CopyPlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SectionName;                                       // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A8A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               LCopy;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A8B[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCopyVisible_bVisible;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A8C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CopyPlayMontage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CopyPlayMontage");
static_assert(sizeof(RSBattlePlayer_C_CopyPlayMontage) == 0x000040, "Wrong size on RSBattlePlayer_C_CopyPlayMontage");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, Montage) == 0x000000, "Member 'RSBattlePlayer_C_CopyPlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, PlayRate) == 0x000008, "Member 'RSBattlePlayer_C_CopyPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, SectionName) == 0x00000C, "Member 'RSBattlePlayer_C_CopyPlayMontage::SectionName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, LCopy) == 0x000018, "Member 'RSBattlePlayer_C_CopyPlayMontage::LCopy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_CopyPlayMontage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'RSBattlePlayer_C_CopyPlayMontage::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattlePlayer_C_CopyPlayMontage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_CopyPlayMontage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_CopyPlayMontage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, CallFunc_IsCopyVisible_bVisible) == 0x000034, "Member 'RSBattlePlayer_C_CopyPlayMontage::CallFunc_IsCopyVisible_bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyPlayMontage, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_CopyPlayMontage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CopyStopMontage
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CopyStopMontage final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A8D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CopyStopMontage) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CopyStopMontage");
static_assert(sizeof(RSBattlePlayer_C_CopyStopMontage) == 0x000018, "Wrong size on RSBattlePlayer_C_CopyStopMontage");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_CopyStopMontage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_CopyStopMontage::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_CopyStopMontage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_CopyStopMontage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CopyStopMontage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CopyStopMontage, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CopyStopMontage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DamageReaction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DamageReaction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DamageReaction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DamageReaction");
static_assert(sizeof(RSBattlePlayer_C_DamageReaction) == 0x000001, "Wrong size on RSBattlePlayer_C_DamageReaction");
static_assert(offsetof(RSBattlePlayer_C_DamageReaction, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_DamageReaction::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableButtonInput
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetDisableButtonInput final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDisableButtonInput) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetDisableButtonInput");
static_assert(sizeof(RSBattlePlayer_C_SetDisableButtonInput) == 0x000001, "Wrong size on RSBattlePlayer_C_SetDisableButtonInput");
static_assert(offsetof(RSBattlePlayer_C_SetDisableButtonInput, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_SetDisableButtonInput::bDisable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateOn
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_BadStateOn final
{
public:
	EHCBadState                                   BadState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateOn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateOn");
static_assert(sizeof(RSBattlePlayer_C_BadStateOn) == 0x000003, "Wrong size on RSBattlePlayer_C_BadStateOn");
static_assert(offsetof(RSBattlePlayer_C_BadStateOn, BadState) == 0x000000, "Member 'RSBattlePlayer_C_BadStateOn::BadState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateOn, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_BadStateOn::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateOn, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'RSBattlePlayer_C_BadStateOn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateOff
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BadStateOff final
{
public:
	EHCBadState                                   BadState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A8E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateOff) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BadStateOff");
static_assert(sizeof(RSBattlePlayer_C_BadStateOff) == 0x000018, "Wrong size on RSBattlePlayer_C_BadStateOff");
static_assert(offsetof(RSBattlePlayer_C_BadStateOff, BadState) == 0x000000, "Member 'RSBattlePlayer_C_BadStateOff::BadState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateOff, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_BadStateOff::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateOff, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_BadStateOff::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateOff, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'RSBattlePlayer_C_BadStateOff::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveComboSetting
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetReserveComboSetting final
{
public:
	bool                                          CallFunc_ComboSetting_Dummy;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetReserveComboSetting) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetReserveComboSetting");
static_assert(sizeof(RSBattlePlayer_C_SetReserveComboSetting) == 0x000001, "Wrong size on RSBattlePlayer_C_SetReserveComboSetting");
static_assert(offsetof(RSBattlePlayer_C_SetReserveComboSetting, CallFunc_ComboSetting_Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetReserveComboSetting::CallFunc_ComboSetting_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCounter
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionCounter final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionCounter) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionCounter");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionCounter) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableActionCounter");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionCounter, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionCounter::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCounterAnim
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableCounterAnim final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableCounterAnim) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableCounterAnim");
static_assert(sizeof(RSBattlePlayer_C_IsEnableCounterAnim) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableCounterAnim");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCounterAnim, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableCounterAnim::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CreateWeapon
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CreateWeapon final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CreateWeapon) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CreateWeapon");
static_assert(sizeof(RSBattlePlayer_C_CreateWeapon) == 0x000001, "Wrong size on RSBattlePlayer_C_CreateWeapon");
static_assert(offsetof(RSBattlePlayer_C_CreateWeapon, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_CreateWeapon::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ENpcDead
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_ENpcDead final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A8F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0004(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ENpcDead) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ENpcDead");
static_assert(sizeof(RSBattlePlayer_C_ENpcDead) == 0x00000C, "Wrong size on RSBattlePlayer_C_ENpcDead");
static_assert(offsetof(RSBattlePlayer_C_ENpcDead, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ENpcDead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ENpcDead, CallFunc_GetName_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_ENpcDead::CallFunc_GetName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCharactersParameterTable
// 0x07F0 (0x07F0 - 0x0000)
struct RSBattlePlayer_C_GetCharactersParameterTable final
{
public:
	struct FCharactersParameter                   Param;                                             // 0x0000(0x01F8)(Parm, OutParm, HasGetValueTypeHash)
	struct FCharactersParameter                   Parameter;                                         // 0x01F8(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A90[0x5];                                     // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_GetCharactersParameterTable_ReturnValue;  // 0x03F8(0x01F8)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x05F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A91[0x6];                                     // 0x05F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameter                   CallFunc_GetCharactersParameterTable_param;        // 0x05F8(0x01F8)(HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCharactersParameterTable) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCharactersParameterTable");
static_assert(sizeof(RSBattlePlayer_C_GetCharactersParameterTable) == 0x0007F0, "Wrong size on RSBattlePlayer_C_GetCharactersParameterTable");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, Param) == 0x000000, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, Parameter) == 0x0001F8, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0003F0, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_GetPlayerID_ReturnValue) == 0x0003F1, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_GetPlayerID_ReturnValue_1) == 0x0003F2, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_GetCharactersParameterTable_ReturnValue) == 0x0003F8, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_GetCharactersParameterTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_IsValid_ReturnValue) == 0x0005F0, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_IsExistPartyMember_ReturnValue) == 0x0005F1, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharactersParameterTable, CallFunc_GetCharactersParameterTable_param) == 0x0005F8, "Member 'RSBattlePlayer_C_GetCharactersParameterTable::CallFunc_GetCharactersParameterTable_param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentUpperActionState
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetCurrentUpperActionState final
{
public:
	EPlayerUpperActionKind                        Kind;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A92[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentUpperActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCurrentUpperActionState");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentUpperActionState) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetCurrentUpperActionState");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentUpperActionState, Kind) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentUpperActionState::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentUpperActionState, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetCurrentUpperActionState::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentUpperActionState, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetCurrentUpperActionState::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentUpperActionState, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_GetCurrentUpperActionState::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckHardenRestriction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CheckHardenRestriction final
{
public:
	EPlayerActionKind                             Action_kind_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckHardenRestriction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckHardenRestriction");
static_assert(sizeof(RSBattlePlayer_C_CheckHardenRestriction) == 0x000002, "Wrong size on RSBattlePlayer_C_CheckHardenRestriction");
static_assert(offsetof(RSBattlePlayer_C_CheckHardenRestriction, Action_kind_in) == 0x000000, "Member 'RSBattlePlayer_C_CheckHardenRestriction::Action_kind_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckHardenRestriction, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_CheckHardenRestriction::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInitializeDebug
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInitializeDebug final
{
public:
	class UObject*                                LDebuggingManager;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInitializeDebug) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInitializeDebug");
static_assert(sizeof(RSBattlePlayer_C_OnInitializeDebug) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInitializeDebug");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeDebug, LDebuggingManager) == 0x000000, "Member 'RSBattlePlayer_C_OnInitializeDebug::LDebuggingManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeDebug, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_OnInitializeDebug::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeDebug, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnInitializeDebug::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldBattleStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldBattleStart final
{
public:
	bool                                          LbUserPlayer;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A93[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenBrainFieldSetting_bDummy;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetBattleThink_Dummy;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldBattleStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldBattleStart");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldBattleStart) == 0x000018, "Wrong size on RSBattlePlayer_C_OnBrainFieldBattleStart");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, LbUserPlayer) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::LbUserPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_IsUserIsPlayer_IsPlayer) == 0x000011, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_OpenBrainFieldSetting_bDummy) == 0x000012, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_OpenBrainFieldSetting_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_ResetBattleThink_Dummy) == 0x000013, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_ResetBattleThink_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleStart, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000014, "Member 'RSBattlePlayer_C_OnBrainFieldBattleStart::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldBattleEnd
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldBattleEnd final
{
public:
	EBrainFieldEndType                            EndType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CloseBrainFieldSetting_bDummy;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldBattleEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldBattleEnd");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldBattleEnd) == 0x000003, "Wrong size on RSBattlePlayer_C_OnBrainFieldBattleEnd");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleEnd, EndType) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldBattleEnd::EndType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleEnd, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_OnBrainFieldBattleEnd::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldBattleEnd, CallFunc_CloseBrainFieldSetting_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_OnBrainFieldBattleEnd::CallFunc_CloseBrainFieldSetting_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OpenBrainFieldSetting
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_OpenBrainFieldSetting final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A94[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableENPCBrainField_bEnableGauge;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A95[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager_1;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceBrainField_bInfinite;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableENPCBrainField_bEnableGauge_1;    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OpenBrainFieldSetting) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OpenBrainFieldSetting");
static_assert(sizeof(RSBattlePlayer_C_OpenBrainFieldSetting) == 0x000028, "Wrong size on RSBattlePlayer_C_OpenBrainFieldSetting");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000001, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsEnableENPCBrainField_bEnableGauge) == 0x000010, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsEnableENPCBrainField_bEnableGauge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000011, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsControlAI_bAI) == 0x000012, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_GetBattleManager_BattleManager_1) == 0x000018, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_GetBattleManager_BattleManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsForceBrainField_bInfinite) == 0x000021, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsForceBrainField_bInfinite' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsEnableENPCBrainField_bEnableGauge_1) == 0x000022, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsEnableENPCBrainField_bEnableGauge_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000023, "Member 'RSBattlePlayer_C_OpenBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CloseBrainFieldSetting
// 0x0260 (0x0260 - 0x0000)
struct RSBattlePlayer_C_CloseBrainFieldSetting final
{
public:
	EBrainFieldEndType                            EndType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbIgnoreResetBFGauge;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A96[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A97[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetBrainFieldUserList_User;               // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A98[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0038(0x01F8)()
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A99[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9A[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9B[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager_1;         // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CloseBrainFieldSetting) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CloseBrainFieldSetting");
static_assert(sizeof(RSBattlePlayer_C_CloseBrainFieldSetting) == 0x000260, "Wrong size on RSBattlePlayer_C_CloseBrainFieldSetting");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, EndType) == 0x000000, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::EndType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, LbIgnoreResetBFGauge) == 0x000002, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::LbIgnoreResetBFGauge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000010, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsMissionActive_ReturnValue) == 0x00001A, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetBrainFieldUserList_User) == 0x000020, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetBrainFieldUserList_User' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetPlayerID_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000032, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000230, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_Array_Find_ReturnValue) == 0x000234, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000238, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetBattleManager_BattleManager) == 0x000240, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsControlAI_bAI) == 0x000248, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_GetBattleManager_BattleManager_1) == 0x000250, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_GetBattleManager_BattleManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainFieldSetting, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000258, "Member 'RSBattlePlayer_C_CloseBrainFieldSetting::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashAccessOn
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_OnBrainCrashAccessOn final
{
public:
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBrainCrashAccessExtraTime_bEnable;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsBrainCrashAccessExtraTime_ExtraTime;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainCrashAccessOn) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBrainCrashAccessOn");
static_assert(sizeof(RSBattlePlayer_C_OnBrainCrashAccessOn) == 0x000028, "Wrong size on RSBattlePlayer_C_OnBrainCrashAccessOn");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_GetMainPlayer_Player) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsBrainCrashAccessExtraTime_bEnable) == 0x000008, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsBrainCrashAccessExtraTime_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsBrainCrashAccessExtraTime_ExtraTime) == 0x00000C, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsBrainCrashAccessExtraTime_ExtraTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000020, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainCrashAccessOn, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'RSBattlePlayer_C_OnBrainCrashAccessOn::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveChangeCombo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetReserveChangeCombo final
{
public:
	bool                                          Reserve;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetReserveChangeCombo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetReserveChangeCombo");
static_assert(sizeof(RSBattlePlayer_C_SetReserveChangeCombo) == 0x000001, "Wrong size on RSBattlePlayer_C_SetReserveChangeCombo");
static_assert(offsetof(RSBattlePlayer_C_SetReserveChangeCombo, Reserve) == 0x000000, "Member 'RSBattlePlayer_C_SetReserveChangeCombo::Reserve' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.isEnableActionRecovery
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionRecovery final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionJump_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionRecovery) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionRecovery");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionRecovery) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionRecovery");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionRecovery, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionRecovery::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionRecovery, CallFunc_IsEnableActionJump_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionRecovery::CallFunc_IsEnableActionJump_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAccessoryEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_UpdateAccessoryEffect final
{
public:
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateAccessoryEffect) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateAccessoryEffect");
static_assert(sizeof(RSBattlePlayer_C_UpdateAccessoryEffect) == 0x000001, "Wrong size on RSBattlePlayer_C_UpdateAccessoryEffect");
static_assert(offsetof(RSBattlePlayer_C_UpdateAccessoryEffect, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_UpdateAccessoryEffect::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerDodge
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerDodge final
{
public:
	bool                                          LbNoAction;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Telepo_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDodge_bEnable;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A9E[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTelepoDodge_bTelepo;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_2;                        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyInputDodge_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusOil_bBadStatus;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFlooded_bBadStatus;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLeftStickY_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPrecedeInputDodgeStick_ReturnValue;    // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeftStickX_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrecedeInputDodge_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AA0[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerDodge) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerDodge");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerDodge) == 0x000050, "Wrong size on RSBattlePlayer_C_OnInputTriggerDodge");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, LbNoAction) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::LbNoAction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsActiveSAS_Telepo_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsActiveSAS_Telepo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsControlAI_bAI_1) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsEnableActionDodge_bEnable) == 0x000005, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsEnableActionDodge_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_MakeLiteralByte_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_CheckTelepoDodge_bTelepo) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_CheckTelepoDodge_bTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsControlAI_bAI_2) == 0x000021, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsControlAI_bAI_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsNotifyInputDodge_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsNotifyInputDodge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsBadStatusOil_bBadStatus) == 0x000023, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsBadStatusOil_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsBadStatusFlooded_bBadStatus) == 0x000024, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsBadStatusFlooded_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_GetLeftStickY_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_GetLeftStickY_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_GetPrecedeInputDodgeStick_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_GetPrecedeInputDodgeStick_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_GetLeftStickX_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_GetLeftStickX_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_IsPrecedeInputDodge_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_IsPrecedeInputDodge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000049, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerDodge, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00004C, "Member 'RSBattlePlayer_C_OnInputTriggerDodge::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttack
// 0x0108 (0x0108 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerAttack final
{
public:
	ERSAttackInputKind                            LPsychicToWeapon;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_89;                             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_92;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_94;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_96;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_97;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_98;                             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_99;                             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_100;                            // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_101;                            // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_102;                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_103;                            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_104;                            // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_105;                            // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_106;                            // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_107;                            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA1[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return;                       // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable_1;                              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_2;                              // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_3;                              // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AA2[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA3[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_4;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_5;                              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_6;                              // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_7;                              // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_8;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return_2;                     // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_108;                            // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_109;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_110;                            // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_111;                            // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_112;                            // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue_1;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_113;                            // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJustDodgeDirection_bJustDodge;          // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJustDodgeDirection_bJustDodge_1;        // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_114;                            // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_2;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackedFlyingCombo_ReturnValue;        // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue_2;    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_115;                            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_116;                            // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Telepo_ReturnValue;           // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_3;                  // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_4;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_3;                     // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_117;                            // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA4[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateFloating_IsFloating;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackingByKind_ReturnValue;            // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackingByKind_ReturnValue_1;          // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackingByKind_ReturnValue_2;          // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackingByKind_ReturnValue_3;          // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_118;                            // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_119;                            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA5[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default_1;                           // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_5;                  // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_120;                            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_121;                            // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_4;                     // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_5;                     // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_6;                     // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA6[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_122;                            // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_123;                            // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x00EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPsychicComboLevelMax_ReturnValue;      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default_2;                           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_6;                  // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_7;                     // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_8;                     // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_9;                     // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_124;                            // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_125;                            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             Temp_byte_Variable_9;                              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_3;                           // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetAttackInputKind_AttackKind;            // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackInputAccept_ReturnValue;          // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerAttack) == 0x000108, "Wrong size on RSBattlePlayer_C_OnInputTriggerAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, LPsychicToWeapon) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::LPsychicToWeapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_1) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_2) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_3) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_4) == 0x000005, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_5) == 0x000006, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_6) == 0x000007, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_7) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_8) == 0x000009, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_9) == 0x00000A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_10) == 0x00000B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_11) == 0x00000C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable) == 0x00000D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_12) == 0x00000E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_13) == 0x00000F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_14) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_15) == 0x000011, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_16) == 0x000012, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_17) == 0x000013, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_18) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_19) == 0x000015, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_20) == 0x000016, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_21) == 0x000017, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_22) == 0x000018, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_23) == 0x000019, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_24) == 0x00001A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_25) == 0x00001B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_26) == 0x00001C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_27) == 0x00001D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_28) == 0x00001E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_29) == 0x00001F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_30) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_31) == 0x000021, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_32) == 0x000022, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_33) == 0x000023, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_34) == 0x000024, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_35) == 0x000025, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_36) == 0x000026, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_37) == 0x000027, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_38) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_39) == 0x000029, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_40) == 0x00002A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_41) == 0x00002B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_42) == 0x00002C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_43) == 0x00002D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_44) == 0x00002E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_45) == 0x00002F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_46) == 0x000030, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_47) == 0x000031, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_48) == 0x000032, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_49) == 0x000033, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_50) == 0x000034, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_51) == 0x000035, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_52) == 0x000036, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_53) == 0x000037, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_54) == 0x000038, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_55) == 0x000039, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_56) == 0x00003A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_57) == 0x00003B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_58) == 0x00003C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_59) == 0x00003D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_60) == 0x00003E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_61) == 0x00003F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_62) == 0x000040, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_63) == 0x000041, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_64) == 0x000042, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_65) == 0x000043, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_66) == 0x000044, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_67) == 0x000045, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_68) == 0x000046, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_69) == 0x000047, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_70) == 0x000048, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_71) == 0x000049, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_72) == 0x00004A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_73) == 0x00004B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_74) == 0x00004C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_75) == 0x00004D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_76) == 0x00004E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_77) == 0x00004F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_78) == 0x000050, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_79) == 0x000051, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_80) == 0x000052, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_81) == 0x000053, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_82) == 0x000054, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_83) == 0x000055, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_84) == 0x000056, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_85) == 0x000057, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_86) == 0x000058, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_87) == 0x000059, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_88) == 0x00005A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_89) == 0x00005B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_90) == 0x00005C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_91) == 0x00005D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_92) == 0x00005E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_93) == 0x00005F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_94) == 0x000060, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_95) == 0x000061, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_96) == 0x000062, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_96' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_97) == 0x000063, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_97' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_98) == 0x000064, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_98' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_99) == 0x000065, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_99' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_100) == 0x000066, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_100' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_101) == 0x000067, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_101' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_102) == 0x000068, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_102' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_103) == 0x000069, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_103' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_104) == 0x00006A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_104' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_105) == 0x00006B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_105' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_106) == 0x00006C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_106' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_107) == 0x00006D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_107' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_int_Variable) == 0x000070, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return) == 0x000074, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_1) == 0x000075, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_2) == 0x000076, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_3) == 0x000077, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_MakeLiteralByte_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00007C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_1) == 0x000080, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_int_Variable_1) == 0x000084, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_4) == 0x000088, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_5) == 0x000089, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_6) == 0x00008A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_7) == 0x00008B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_8) == 0x00008C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_2) == 0x00008D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_108) == 0x00008E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_108' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result) == 0x00008F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_109) == 0x000090, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_109' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000091, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsPlayerStatus_Result) == 0x000092, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_Select_Default) == 0x000093, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_Not_PreBool_ReturnValue) == 0x000094, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_110) == 0x000095, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_110' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_111) == 0x000096, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_111' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_112) == 0x000097, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_112' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetComboAttackInputKind_ReturnValue_1) == 0x000098, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetComboAttackInputKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000099, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_1) == 0x00009A, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_113) == 0x00009B, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_113' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsPlayerInAerial_ReturnValue) == 0x00009C, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsJustDodgeDirection_bJustDodge) == 0x00009D, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsJustDodgeDirection_bJustDodge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsJustDodgeDirection_bJustDodge_1) == 0x00009E, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsJustDodgeDirection_bJustDodge_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_114) == 0x00009F, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_114' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_2) == 0x0000A0, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackedFlyingCombo_ReturnValue) == 0x0000A1, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackedFlyingCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetComboAttackInputKind_ReturnValue_2) == 0x0000A2, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetComboAttackInputKind_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_SwitchEnum_CmpSuccess) == 0x0000A3, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_115) == 0x0000A4, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_115' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_116) == 0x0000A5, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_116' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActiveSAS_Telepo_ReturnValue) == 0x0000A6, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActiveSAS_Telepo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_3) == 0x0000A7, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_4) == 0x0000A8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_3) == 0x0000A9, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_117) == 0x0000AA, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_117' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetCurrentTargetActor_TargetActor) == 0x0000B0, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x0000B8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsEnemyStateFloating_IsFloating) == 0x0000C9, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsEnemyStateFloating_IsFloating' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsLockTarget_IsLockTarget) == 0x0000CA, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackingByKind_ReturnValue) == 0x0000CB, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackingByKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackingByKind_ReturnValue_1) == 0x0000CC, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackingByKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackingByKind_ReturnValue_2) == 0x0000CD, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackingByKind_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackingByKind_ReturnValue_3) == 0x0000CE, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackingByKind_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_118) == 0x0000CF, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_118' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_119) == 0x0000D0, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_119' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue) == 0x0000D4, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetFlyingPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetFlyingPsychicComboLevel_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetFlyingPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000DC, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_Select_Default_1) == 0x0000DD, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_Less_IntInt_ReturnValue) == 0x0000DE, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_5) == 0x0000DF, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetCurrentActionState_Kind) == 0x0000E0, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_120) == 0x0000E1, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_120' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_121) == 0x0000E2, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_121' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_4) == 0x0000E3, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_5) == 0x0000E4, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_6) == 0x0000E5, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000EC, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_122) == 0x0000ED, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_122' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_123) == 0x0000EE, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_123' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsUpperActionStatus_bResult) == 0x0000EF, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetPsychicComboLevelMax_ReturnValue) == 0x0000F0, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetPsychicComboLevelMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetPsychicComboLevel_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0000F8, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_Select_Default_2) == 0x0000F9, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000FA, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsActionStatus_Result_6) == 0x0000FB, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsActionStatus_Result_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_7) == 0x0000FC, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_8) == 0x0000FD, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_InputAttack_return_9) == 0x0000FE, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_InputAttack_return_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_124) == 0x0000FF, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_124' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_bool_Variable_125) == 0x000100, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_bool_Variable_125' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, Temp_byte_Variable_9) == 0x000101, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, K2Node_Select_Default_3) == 0x000102, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_GetAttackInputKind_AttackKind) == 0x000103, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_GetAttackInputKind_AttackKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsControlAI_bAI) == 0x000104, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsEnableActionAttack_bEnable) == 0x000105, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttack, CallFunc_IsAttackInputAccept_ReturnValue) == 0x000106, "Member 'RSBattlePlayer_C_OnInputTriggerAttack::CallFunc_IsAttackInputAccept_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputReleaseAttack final
{
public:
	bool                                          CallFunc_InputAttack_return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputReleaseAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputReleaseAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputReleaseAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputReleaseAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttack, CallFunc_InputAttack_return) == 0x000000, "Member 'RSBattlePlayer_C_OnInputReleaseAttack::CallFunc_InputAttack_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemUse
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerItemUse final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EConsumeItemID                                CallFunc_GetUseItemID_ItemID;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConsumeItemID                                Temp_byte_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AA7[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue_1;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerUseItem_IsUse;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionUseItem_ReturnValue;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionUseItem_ReturnValue_1;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA8[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_2;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerUseItem_IsUse_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRecastItem_bRecast;                     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EConsumeItemID                                CallFunc_IsRecastItem_ItemID;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNeedItemUse_bOK;                     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerItemUse) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerItemUse");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerItemUse) == 0x000058, "Wrong size on RSBattlePlayer_C_OnInputTriggerItemUse");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_1) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_2) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_3) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_4) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_5) == 0x000005, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_6) == 0x000006, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_7) == 0x000007, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_8) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_9) == 0x000009, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_10) == 0x00000A, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_11) == 0x00000B, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_12) == 0x00000C, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_13) == 0x00000D, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_14) == 0x00000E, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_15) == 0x00000F, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_16) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_17) == 0x000011, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_18) == 0x000012, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_bool_Variable_19) == 0x000013, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_GetUseItemID_ItemID) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_GetUseItemID_ItemID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, Temp_byte_Variable) == 0x000015, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_SpawnSoundAtLocationRS_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_SpawnSoundAtLocationRS_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x000030, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_PlayerUseItem_IsUse) == 0x000038, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_PlayerUseItem_IsUse' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsEnableActionUseItem_ReturnValue) == 0x000039, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsEnableActionUseItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsCharacterDead_ReturnValue) == 0x00003A, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsPlayerStatus_Result) == 0x00003C, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_Not_PreBool_ReturnValue_1) == 0x00003D, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsActionStatus_Result) == 0x00003E, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsBadStatusElectric_bBadStatus) == 0x00003F, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsEnableActionUseItem_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsEnableActionUseItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000041, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_GetHUDMainGame_HUDMainGame_2) == 0x000048, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_GetHUDMainGame_HUDMainGame_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_PlayerUseItem_IsUse_1) == 0x000050, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_PlayerUseItem_IsUse_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsRecastItem_bRecast) == 0x000051, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsRecastItem_bRecast' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsRecastItem_ItemID) == 0x000052, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsRecastItem_ItemID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, K2Node_Select_Default) == 0x000053, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_CheckNeedItemUse_bOK) == 0x000054, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_CheckNeedItemUse_bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemUse, CallFunc_IsControlAI_bAI) == 0x000055, "Member 'RSBattlePlayer_C_OnInputTriggerItemUse::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerTargetLock
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerTargetLock final
{
public:
	bool                                          LbPrevLockOn;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue_1;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetFix_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockTarget_ReturnValue_2;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue_3;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIgnoreVisionFog_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVisionFog_ReturnValue;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerTargetLock) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerTargetLock");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerTargetLock) == 0x000030, "Wrong size on RSBattlePlayer_C_OnInputTriggerTargetLock");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, LbPrevLockOn) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::LbPrevLockOn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsLockTarget_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsLockTarget_ReturnValue_1) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsLockTarget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsTargetFix_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsTargetFix_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsLockTarget_ReturnValue_2) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsLockTarget_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsActionStatus_Result) == 0x000021, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsActionStatus_Result_1) == 0x000022, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsControlAI_bAI) == 0x000023, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsLockTarget_ReturnValue_3) == 0x000024, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsLockTarget_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_Not_PreBool_ReturnValue) == 0x000025, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_Not_PreBool_ReturnValue_1) == 0x000026, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_Not_PreBool_ReturnValue_2) == 0x000027, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsIgnoreVisionFog_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsIgnoreVisionFog_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsInVisionFog_ReturnValue) == 0x000029, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsInVisionFog_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_Not_PreBool_ReturnValue_3) == 0x00002A, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLock, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x00002B, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLock::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BindInputEvent
// 0x0310 (0x0310 - 0x0000)
struct RSBattlePlayer_C_BindInputEvent final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bAerial)>                 K2Node_CreateDelegate_OutputDelegate_3;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x0060(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_8;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_9;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_10;           // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_11;           // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_12;           // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_13;           // 0x00D0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bDisable)>                K2Node_CreateDelegate_OutputDelegate_14;           // 0x00E0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_15;           // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_16;           // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_17;           // 0x0110(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_18;           // 0x0120(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_19;           // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_20;           // 0x0140(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_21;           // 0x0150(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_22;           // 0x0160(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_23;           // 0x0170(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_24;           // 0x0180(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_25;           // 0x0190(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_26;           // 0x01A0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_27;           // 0x01B0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_28;           // 0x01C0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_29;           // 0x01D0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_30;           // 0x01E0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_31;           // 0x01F0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_32;           // 0x0200(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_33;           // 0x0210(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_34;           // 0x0220(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_35;           // 0x0230(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_36;           // 0x0240(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_37;           // 0x0250(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_38;           // 0x0260(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_39;           // 0x0270(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bAerial)>                 K2Node_CreateDelegate_OutputDelegate_40;           // 0x0280(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_41;           // 0x0290(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_42;           // 0x02A0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_43;           // 0x02B0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EPlayerInputSASReadyType ReadyType)> K2Node_CreateDelegate_OutputDelegate_44;           // 0x02C0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_45;           // 0x02D0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bSlow)>                   K2Node_CreateDelegate_OutputDelegate_46;           // 0x02E0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_47;           // 0x02F0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_48;           // 0x0300(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BindInputEvent) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BindInputEvent");
static_assert(sizeof(RSBattlePlayer_C_BindInputEvent) == 0x000310, "Wrong size on RSBattlePlayer_C_BindInputEvent");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000020, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_3) == 0x000030, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_4) == 0x000040, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_5) == 0x000050, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_6) == 0x000060, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_7) == 0x000070, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_8) == 0x000080, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_9) == 0x000090, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_10) == 0x0000A0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_11) == 0x0000B0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_12) == 0x0000C0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_13) == 0x0000D0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_14) == 0x0000E0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_15) == 0x0000F0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_16) == 0x000100, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_17) == 0x000110, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_18) == 0x000120, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_19) == 0x000130, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_20) == 0x000140, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_21) == 0x000150, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_22) == 0x000160, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_23) == 0x000170, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_24) == 0x000180, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_25) == 0x000190, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_26) == 0x0001A0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_27) == 0x0001B0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_28) == 0x0001C0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_29) == 0x0001D0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_30) == 0x0001E0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_31) == 0x0001F0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_32) == 0x000200, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_33) == 0x000210, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_34) == 0x000220, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_35) == 0x000230, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_36) == 0x000240, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_37) == 0x000250, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_38) == 0x000260, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_39) == 0x000270, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_40) == 0x000280, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_41) == 0x000290, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_42) == 0x0002A0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_43) == 0x0002B0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_44) == 0x0002C0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_45) == 0x0002D0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_46) == 0x0002E0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_47) == 0x0002F0, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindInputEvent, K2Node_CreateDelegate_OutputDelegate_48) == 0x000300, "Member 'RSBattlePlayer_C_BindInputEvent::K2Node_CreateDelegate_OutputDelegate_48' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerTargetLockChange
// 0x0090 (0x0090 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerTargetLockChange final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          blResetChangeSasSet;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAA[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LPrevTargetActor;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               TargetEnemyList;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetFix_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOptionParam*                           CallFunc_GetOptionParam_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnReadyTargetChange_ReturnValue;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ELockonActionType                             CallFunc_GetLockonActionType_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAC[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAD[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor_1;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAE[0x5];                                     // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AAF[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeLockTarget_ReturnValue;             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerTargetLockChange) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerTargetLockChange");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerTargetLockChange) == 0x000090, "Wrong size on RSBattlePlayer_C_OnInputTriggerTargetLockChange");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, bLeft) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::bLeft' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, blResetChangeSasSet) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::blResetChangeSasSet' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, LPrevTargetActor) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::LPrevTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, TargetEnemyList) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::TargetEnemyList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, Temp_float_Variable) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, Temp_float_Variable_1) == 0x000024, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_IsTargetFix_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_IsTargetFix_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetUserParamManager_UserParamManager) == 0x000030, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetOptionParam_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetOptionParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_IsOnReadyTargetChange_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_IsOnReadyTargetChange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetLockonActionType_ReturnValue) == 0x000041, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetLockonActionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, K2Node_SwitchEnum_CmpSuccess) == 0x000042, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000048, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetCurrentTargetActor_TargetActor_1) == 0x000058, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetCurrentTargetActor_TargetActor_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_IsActionStatus_Result) == 0x000060, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_IsActionStatus_Result_1) == 0x000061, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_IsLockTarget_IsLockTarget) == 0x000062, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetEnemyManager_Manager) == 0x000068, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, Temp_bool_Variable) == 0x000070, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_GetEnemyList_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, K2Node_Select_Default) == 0x000088, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerTargetLockChange, CallFunc_ChangeLockTarget_ReturnValue) == 0x00008C, "Member 'RSBattlePlayer_C_OnInputTriggerTargetLockChange::CallFunc_ChangeLockTarget_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerResetCamera
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerResetCamera final
{
public:
	bool                                          LbReset;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueObjectInput_return;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerResetCamera) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerResetCamera");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerResetCamera) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInputTriggerResetCamera");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerResetCamera, LbReset) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerResetCamera::LbReset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerResetCamera, CallFunc_IsEnable_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerResetCamera::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerResetCamera, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerResetCamera::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerResetCamera, CallFunc_IsUniqueObjectInput_return) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerResetCamera::CallFunc_IsUniqueObjectInput_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerSASReady
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerSASReady final
{
public:
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerSASReady) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerSASReady");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerSASReady) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInputTriggerSASReady");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerSASReady, CallFunc_GetGameSystemManager_Manager) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerSASReady::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerSASReady, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerSASReady::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerSASReady, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerSASReady::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerSASReady, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerSASReady::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseSASReady
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInputReleaseSASReady final
{
public:
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputReleaseSASReady) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputReleaseSASReady");
static_assert(sizeof(RSBattlePlayer_C_OnInputReleaseSASReady) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInputReleaseSASReady");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseSASReady, CallFunc_GetGameSystemManager_Manager) == 0x000000, "Member 'RSBattlePlayer_C_OnInputReleaseSASReady::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseSASReady, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_OnInputReleaseSASReady::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseSASReady, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnInputReleaseSASReady::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseSASReady, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000011, "Member 'RSBattlePlayer_C_OnInputReleaseSASReady::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearEarlyInput
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ClearEarlyInput final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearEarlyInput) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ClearEarlyInput");
static_assert(sizeof(RSBattlePlayer_C_ClearEarlyInput) == 0x000001, "Wrong size on RSBattlePlayer_C_ClearEarlyInput");
static_assert(offsetof(RSBattlePlayer_C_ClearEarlyInput, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ClearEarlyInput::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableCameraControlTimer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetDisableCameraControlTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetDisableCameraControlTimer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDisableCameraControlTimer");
static_assert(sizeof(RSBattlePlayer_C_SetDisableCameraControlTimer) == 0x000004, "Wrong size on RSBattlePlayer_C_SetDisableCameraControlTimer");
static_assert(offsetof(RSBattlePlayer_C_SetDisableCameraControlTimer, Time) == 0x000000, "Member 'RSBattlePlayer_C_SetDisableCameraControlTimer::Time' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashEventStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BrainCrashEventStart final
{
public:
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlaySASCodeDirection_bDummy;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Stealth_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainCrashEventStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainCrashEventStart");
static_assert(sizeof(RSBattlePlayer_C_BrainCrashEventStart) == 0x000018, "Wrong size on RSBattlePlayer_C_BrainCrashEventStart");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_SetLookAtEnable_bResult) == 0x000001, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_IsLockTarget_IsLockTarget) == 0x000002, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_SetSasStealth_dummy) == 0x000004, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_DisablePlayerFootIK_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_PlaySASCodeDirection_bDummy) == 0x000006, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_PlaySASCodeDirection_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_IsActiveSAS_Stealth_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_IsActiveSAS_Stealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_EnableRigidBody_bDummy) == 0x000011, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventStart, CallFunc_EventStart_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_BrainCrashEventStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashEventEnd
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_BrainCrashEventEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClearGetterManager*                    CallFunc_GetClearGetterManager_ClearGetterManager; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Stealth_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Metal_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopSASCodeDirection_bDummy;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainCrashEventEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BrainCrashEventEnd");
static_assert(sizeof(RSBattlePlayer_C_BrainCrashEventEnd) == 0x000030, "Wrong size on RSBattlePlayer_C_BrainCrashEventEnd");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, Montage) == 0x000000, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_GetClearGetterManager_ClearGetterManager) == 0x000010, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_GetClearGetterManager_ClearGetterManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000018, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_SetSasStealth_dummy) == 0x000020, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_IsActiveSAS_Stealth_ReturnValue) == 0x000021, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_IsActiveSAS_Stealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_IsActiveSAS_Metal_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_IsActiveSAS_Metal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_DisablePlayerFootIK_bDummy) == 0x000023, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_StopSASCodeDirection_bDummy) == 0x000024, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_StopSASCodeDirection_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_IsControlAI_bAI) == 0x000026, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_EnableRigidBody_bDummy) == 0x000027, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_IsControlAI_bAI_1) == 0x000028, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashEventEnd, CallFunc_EventEnd_ReturnValue) == 0x000029, "Member 'RSBattlePlayer_C_BrainCrashEventEnd::CallFunc_EventEnd_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerLaunchAttack
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerLaunchAttack final
{
public:
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerLaunchAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerLaunchAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerLaunchAttack) == 0x000003, "Wrong size on RSBattlePlayer_C_OnInputTriggerLaunchAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerLaunchAttack, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerLaunchAttack::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerLaunchAttack, CallFunc_InputAttack_return) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerLaunchAttack::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerLaunchAttack, CallFunc_IsControlAI_bAI) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerLaunchAttack::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseLaunchAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputReleaseLaunchAttack final
{
public:
	bool                                          CallFunc_InputAttack_return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputReleaseLaunchAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputReleaseLaunchAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputReleaseLaunchAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputReleaseLaunchAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseLaunchAttack, CallFunc_InputAttack_return) == 0x000000, "Member 'RSBattlePlayer_C_OnInputReleaseLaunchAttack::CallFunc_InputAttack_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetLockOnTargetInterface
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetLockOnTargetInterface final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetLockOnTargetInterface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetLockOnTargetInterface");
static_assert(sizeof(RSBattlePlayer_C_GetLockOnTargetInterface) == 0x000010, "Wrong size on RSBattlePlayer_C_GetLockOnTargetInterface");
static_assert(offsetof(RSBattlePlayer_C_GetLockOnTargetInterface, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_GetLockOnTargetInterface::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetLockOnTargetInterface, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000008, "Member 'RSBattlePlayer_C_GetLockOnTargetInterface::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawMotionInfo
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattlePlayer_C_DebugDrawMotionInfo final
{
public:
	class FText                                   LObjectText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible)
	class FText                                   LFaceText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible)
	class FText                                   LWeaponText;                                       // 0x0030(0x0018)(Edit, BlueprintVisible)
	class FText                                   LUpperText;                                        // 0x0048(0x0018)(Edit, BlueprintVisible)
	class FText                                   LCancelText;                                       // 0x0060(0x0018)(Edit, BlueprintVisible)
	class UAnimMontage*                           LMontage;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LDefaultText;                                      // 0x0080(0x0018)(Edit, BlueprintVisible)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawMotionInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawMotionInfo");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawMotionInfo) == 0x0000B8, "Wrong size on RSBattlePlayer_C_DebugDrawMotionInfo");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LObjectText) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LObjectText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LFaceText) == 0x000018, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LFaceText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LWeaponText) == 0x000030, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LWeaponText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LUpperText) == 0x000048, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LUpperText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LCancelText) == 0x000060, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LCancelText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LMontage) == 0x000078, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, LDefaultText) == 0x000080, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::LDefaultText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, CallFunc_GetPlayerController_ReturnValue) == 0x000098, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, CallFunc_K2_GetPawn_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, CallFunc_GetDebuggingManager_Manager) == 0x0000A8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfo, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'RSBattlePlayer_C_DebugDrawMotionInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackMotionPlayRate
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetAttackMotionPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAttackMotionPlayRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetAttackMotionPlayRate");
static_assert(sizeof(RSBattlePlayer_C_GetAttackMotionPlayRate) == 0x000008, "Wrong size on RSBattlePlayer_C_GetAttackMotionPlayRate");
static_assert(offsetof(RSBattlePlayer_C_GetAttackMotionPlayRate, PlayRate) == 0x000000, "Member 'RSBattlePlayer_C_GetAttackMotionPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAttackMotionPlayRate, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetAttackMotionPlayRate::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveRegenerate
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_OnDriveRegenerate final
{
public:
	float                                         RegenerateHPRate;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LRecoveryHP;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LCurrentHP;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AB3[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB4[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP_1;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnDriveRegenerate) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDriveRegenerate");
static_assert(sizeof(RSBattlePlayer_C_OnDriveRegenerate) == 0x000048, "Wrong size on RSBattlePlayer_C_OnDriveRegenerate");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, RegenerateHPRate) == 0x000000, "Member 'RSBattlePlayer_C_OnDriveRegenerate::RegenerateHPRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, LRecoveryHP) == 0x000004, "Member 'RSBattlePlayer_C_OnDriveRegenerate::LRecoveryHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, LCurrentHP) == 0x000008, "Member 'RSBattlePlayer_C_OnDriveRegenerate::LCurrentHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000028, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_GetHP_HP) == 0x000030, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_GetHP_HP_1) == 0x000038, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_GetHP_HP_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_GetMaxHP_MaxHP) == 0x00003C, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveRegenerate, CallFunc_FTrunc_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_OnDriveRegenerate::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginDrive
// 0x0240 (0x0240 - 0x0000)
struct RSBattlePlayer_C_OnBeginDrive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AB6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0010(0x01F8)()
	float                                         CallFunc_GetMoveSpeedRate_ReturnValue;             // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB7[0x3];                                     // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB8[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0218(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AB9[0x3];                                     // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnBeginDrive) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBeginDrive");
static_assert(sizeof(RSBattlePlayer_C_OnBeginDrive) == 0x000240, "Wrong size on RSBattlePlayer_C_OnBeginDrive");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBeginDrive::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_OnBeginDrive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_GetPlayerID_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_GetMoveSpeedRate_ReturnValue) == 0x000208, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_GetMoveSpeedRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_ScaleMaxSpeed_Result) == 0x00020C, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, Temp_int_Loop_Num_Variable) == 0x000210, "Member 'RSBattlePlayer_C_OnBeginDrive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_IsControlAI_bAI) == 0x000214, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_SetBattleParticleType_ReturnValue) == 0x000215, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000218, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, Temp_int_Loop_Counter_Variable) == 0x000228, "Member 'RSBattlePlayer_C_OnBeginDrive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_Less_IntInt_ReturnValue) == 0x00022C, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_Add_IntInt_ReturnValue) == 0x000230, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_Array_Length_ReturnValue) == 0x000234, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginDrive, CallFunc_GetSoundManager_SoundManager) == 0x000238, "Member 'RSBattlePlayer_C_OnBeginDrive::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEndDrive
// 0x0220 (0x0220 - 0x0000)
struct RSBattlePlayer_C_OnEndDrive final
{
public:
	bool                                          bInterruption;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationChange;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreMaxSpeed_Result;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ABA[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0010(0x01F8)()
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEndDrive) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnEndDrive");
static_assert(sizeof(RSBattlePlayer_C_OnEndDrive) == 0x000220, "Wrong size on RSBattlePlayer_C_OnEndDrive");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, bInterruption) == 0x000000, "Member 'RSBattlePlayer_C_OnEndDrive::bInterruption' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, bLocationChange) == 0x000001, "Member 'RSBattlePlayer_C_OnEndDrive::bLocationChange' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, Dummy) == 0x000002, "Member 'RSBattlePlayer_C_OnEndDrive::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_RestoreMaxSpeed_Result) == 0x000004, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_RestoreMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_IsControlAI_bAI) == 0x000005, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_ClearBattleParticle_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_ClearBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_SetBattleParticleType_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_GetPlayerID_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_BooleanOR_ReturnValue_1) == 0x00000A, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000208, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_GetSoundManager_SoundManager) == 0x000210, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEndDrive, CallFunc_IsControlAI_bAI_1) == 0x000218, "Member 'RSBattlePlayer_C_OnEndDrive::CallFunc_IsControlAI_bAI_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawDriveInfo
// 0x05A0 (0x05A0 - 0x0000)
struct RSBattlePlayer_C_DebugDrawDriveInfo final
{
public:
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class FText                                   LText;                                             // 0x0018(0x0018)(Edit, BlueprintVisible)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDrive_ReturnValue;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ABB[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ABC[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ABD[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0040)(HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ABE[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x00E0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0100(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0118(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetBattleBonusRate_Rate;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ABF[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0160(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetDriveTimerRemain_ReturnValue;          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNpcDriveIntervalTimerRemain_ReturnValue; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01A8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x01E8(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetParameterMaxTime_ReturnValue;          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentParameterRate_ReturnValue;      // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0230(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0270(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_GetBrainFieldCount_ReturnValue;           // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicGaugeRate_ReturnValue;          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x02B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x02F8(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicWaitGaugeRate_ReturnValue;      // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttackRate_ReturnValue;                // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0340(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x0380(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetAttackAnimationPlayRate_ReturnValue;   // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMoveSpeedRate_ReturnValue;             // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x03C8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x0408(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetMaxDriveTime_ReturnValue;              // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentDriveTime_ReturnValue;          // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_13;           // 0x0450(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_14;           // 0x0490(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetMaxDriveGauge_ReturnValue;             // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDriveGauge_ReturnValue;                // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_15;           // 0x04D8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_16;           // 0x0518(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AC0[0x4];                                     // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0560(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0570(0x0018)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC1[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0599(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawDriveInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawDriveInfo");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawDriveInfo) == 0x0005A0, "Wrong size on RSBattlePlayer_C_DebugDrawDriveInfo");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, LPlayer) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::LPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, LPlayerList) == 0x000008, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::LPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, LText) == 0x000018, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::LText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_struct_Variable) == 0x000030, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_struct_Variable_1) == 0x000040, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_int_Array_Index_Variable) == 0x000050, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_int_Loop_Num_Variable) == 0x000054, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_DynamicCast_AsRSBattle_Player) == 0x000058, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_IsEnableDrive_ReturnValue) == 0x000061, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_IsEnableDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_bool_Variable) == 0x000068, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_Select_Default) == 0x00006C, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPlayerManager_PlayerManager) == 0x0000C0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPlayerID_self_CastInput) == 0x0000C8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPlayerID_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPlayerList_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000F0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x000118, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetBattleBonusRate_Rate) == 0x000158, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetBattleBonusRate_Rate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_2) == 0x000160, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetDriveTimerRemain_ReturnValue) == 0x0001A0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetDriveTimerRemain_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetNpcDriveIntervalTimerRemain_ReturnValue) == 0x0001A4, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetNpcDriveIntervalTimerRemain_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001A8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_4) == 0x0001E8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetParameterMaxTime_ReturnValue) == 0x000228, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetParameterMaxTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetCurrentParameterRate_ReturnValue) == 0x00022C, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetCurrentParameterRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_5) == 0x000230, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_6) == 0x000270, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetBrainFieldCount_ReturnValue) == 0x0002B0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetBrainFieldCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPsychicGaugeRate_ReturnValue) == 0x0002B4, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPsychicGaugeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_7) == 0x0002B8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_8) == 0x0002F8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetPsychicWaitGaugeRate_ReturnValue) == 0x000338, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetPsychicWaitGaugeRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetAttackRate_ReturnValue) == 0x00033C, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetAttackRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_9) == 0x000340, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_10) == 0x000380, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetAttackAnimationPlayRate_ReturnValue) == 0x0003C0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetAttackAnimationPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetMoveSpeedRate_ReturnValue) == 0x0003C4, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetMoveSpeedRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_11) == 0x0003C8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_12) == 0x000408, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetMaxDriveTime_ReturnValue) == 0x000448, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetMaxDriveTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetCurrentDriveTime_ReturnValue) == 0x00044C, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetCurrentDriveTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_13) == 0x000450, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_14) == 0x000490, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetMaxDriveGauge_ReturnValue) == 0x0004D0, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetMaxDriveGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetDriveGauge_ReturnValue) == 0x0004D4, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetDriveGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_15) == 0x0004D8, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeStruct_FormatArgumentData_16) == 0x000518, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeStruct_FormatArgumentData_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, Temp_int_Loop_Counter_Variable) == 0x000558, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, K2Node_MakeArray_Array) == 0x000560, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_Format_ReturnValue) == 0x000570, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_Less_IntInt_ReturnValue) == 0x000588, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_Add_IntInt_ReturnValue) == 0x00058C, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_GetDebuggingManager_Manager) == 0x000590, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_IsValid_ReturnValue) == 0x000598, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawDriveInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000599, "Member 'RSBattlePlayer_C_DebugDrawDriveInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetPsychicCombo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetPsychicCombo final
{
public:
	bool                                          bNoRushAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetPsychicCombo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetPsychicCombo");
static_assert(sizeof(RSBattlePlayer_C_ResetPsychicCombo) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetPsychicCombo");
static_assert(offsetof(RSBattlePlayer_C_ResetPsychicCombo, bNoRushAttack) == 0x000000, "Member 'RSBattlePlayer_C_ResetPsychicCombo::bNoRushAttack' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetObstructPsychic
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetObstructPsychic final
{
public:
	bool                                          bSAS;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPsychic;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDrive;                                            // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBrainCrash;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ObstructAnimation;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Param_ObstructSequencer;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetObstructPsychic) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetObstructPsychic");
static_assert(sizeof(RSBattlePlayer_C_SetObstructPsychic) == 0x000018, "Wrong size on RSBattlePlayer_C_SetObstructPsychic");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, bSAS) == 0x000000, "Member 'RSBattlePlayer_C_SetObstructPsychic::bSAS' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, bPsychic) == 0x000001, "Member 'RSBattlePlayer_C_SetObstructPsychic::bPsychic' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, bAttack) == 0x000002, "Member 'RSBattlePlayer_C_SetObstructPsychic::bAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, bDrive) == 0x000003, "Member 'RSBattlePlayer_C_SetObstructPsychic::bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, bBrainCrash) == 0x000004, "Member 'RSBattlePlayer_C_SetObstructPsychic::bBrainCrash' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, ObstructAnimation) == 0x000008, "Member 'RSBattlePlayer_C_SetObstructPsychic::ObstructAnimation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetObstructPsychic, Param_ObstructSequencer) == 0x000010, "Member 'RSBattlePlayer_C_SetObstructPsychic::Param_ObstructSequencer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStateObstructPsychic
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetActionStateObstructPsychic final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetActionStateObstructPsychic) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetActionStateObstructPsychic");
static_assert(sizeof(RSBattlePlayer_C_SetActionStateObstructPsychic) == 0x000028, "Wrong size on RSBattlePlayer_C_SetActionStateObstructPsychic");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_IsDisableAction_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_GetEventManager_EventManager_1) == 0x000018, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_GetEventManager_EventManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActionStateObstructPsychic, CallFunc_IsValid_ReturnValue_3) == 0x000022, "Member 'RSBattlePlayer_C_SetActionStateObstructPsychic::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerJump
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerJump final
{
public:
	EJumpActionParam                              LJumpParam;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAirJumpAble_bAble;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLeftStickZero_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_2;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionJump_bEnable;               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputJump_ReturnValue;           // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerJump) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerJump");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerJump) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInputTriggerJump");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, LJumpParam) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerJump::LJumpParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsAirJumpAble_bAble) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsAirJumpAble_bAble' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsActionStatus_Result_1) == 0x00000C, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsLeftStickZero_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsLeftStickZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsActionStatus_Result_2) == 0x000015, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsActionStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsEnableActionJump_bEnable) == 0x000016, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsEnableActionJump_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerJump, CallFunc_IsPrecedeInputJump_ReturnValue) == 0x000017, "Member 'RSBattlePlayer_C_OnInputTriggerJump::CallFunc_IsPrecedeInputJump_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearPrecedeInput
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ClearPrecedeInput final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearPrecedeInput) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ClearPrecedeInput");
static_assert(sizeof(RSBattlePlayer_C_ClearPrecedeInput) == 0x000001, "Wrong size on RSBattlePlayer_C_ClearPrecedeInput");
static_assert(offsetof(RSBattlePlayer_C_ClearPrecedeInput, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ClearPrecedeInput::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCoverDamagePlayer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetCoverDamagePlayer final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCoverDamagePlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetCoverDamagePlayer");
static_assert(sizeof(RSBattlePlayer_C_SetCoverDamagePlayer) == 0x000004, "Wrong size on RSBattlePlayer_C_SetCoverDamagePlayer");
static_assert(offsetof(RSBattlePlayer_C_SetCoverDamagePlayer, InPlayerID) == 0x000000, "Member 'RSBattlePlayer_C_SetCoverDamagePlayer::InPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCoverDamagePlayer, bSuccess) == 0x000001, "Member 'RSBattlePlayer_C_SetCoverDamagePlayer::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCoverDamagePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetCoverDamagePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCoverDamagePlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetCoverDamagePlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetCoverDamagePlayer
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_ResetCoverDamagePlayer final
{
public:
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ResetCoverDamagePlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ResetCoverDamagePlayer");
static_assert(sizeof(RSBattlePlayer_C_ResetCoverDamagePlayer) == 0x000008, "Wrong size on RSBattlePlayer_C_ResetCoverDamagePlayer");
static_assert(offsetof(RSBattlePlayer_C_ResetCoverDamagePlayer, CallFunc_GetPlayerManager_PlayerManager) == 0x000000, "Member 'RSBattlePlayer_C_ResetCoverDamagePlayer::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ProcFellOutOfWorld
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_ProcFellOutOfWorld final
{
public:
	struct FVector                                LReturnLocation;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AC7[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ProcFellOutOfWorld) == 0x000010, "Wrong alignment on RSBattlePlayer_C_ProcFellOutOfWorld");
static_assert(sizeof(RSBattlePlayer_C_ProcFellOutOfWorld) == 0x000050, "Wrong size on RSBattlePlayer_C_ProcFellOutOfWorld");
static_assert(offsetof(RSBattlePlayer_C_ProcFellOutOfWorld, LReturnLocation) == 0x000000, "Member 'RSBattlePlayer_C_ProcFellOutOfWorld::LReturnLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcFellOutOfWorld, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ProcFellOutOfWorld::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcFellOutOfWorld, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ProcFellOutOfWorld::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcFellOutOfWorld, CallFunc_Array_Get_Item) == 0x000014, "Member 'RSBattlePlayer_C_ProcFellOutOfWorld::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcFellOutOfWorld, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ProcFellOutOfWorld::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraMode");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraMode) == 0x000002, "Wrong size on RSBattlePlayer_C_SetPlayerCameraMode");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraMode, Mode) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraMode::Mode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraMode, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerCameraMode::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetPlayerCameraMode final
{
public:
	EPlayerCameraMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCameraMode                             CallFunc_GetPlayerCameraMode_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerCameraMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetPlayerCameraMode");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerCameraMode) == 0x000002, "Wrong size on RSBattlePlayer_C_GetPlayerCameraMode");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraMode, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerCameraMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraMode, CallFunc_GetPlayerCameraMode_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_GetPlayerCameraMode::CallFunc_GetPlayerCameraMode_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraViewTarget
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraViewTarget final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AC8[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraViewTarget_return;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraViewTarget) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraViewTarget");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraViewTarget) == 0x000010, "Wrong size on RSBattlePlayer_C_SetPlayerCameraViewTarget");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraViewTarget, BlendTime) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraViewTarget::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraViewTarget, BlendFunc) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerCameraViewTarget::BlendFunc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraViewTarget, BlendExp) == 0x000008, "Member 'RSBattlePlayer_C_SetPlayerCameraViewTarget::BlendExp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraViewTarget, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCameraViewTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraViewTarget, CallFunc_SetPlayerCameraViewTarget_return) == 0x00000D, "Member 'RSBattlePlayer_C_SetPlayerCameraViewTarget::CallFunc_SetPlayerCameraViewTarget_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraFieldOfView final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraFieldOfView_return;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraFieldOfView");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraFieldOfView) == 0x000008, "Wrong size on RSBattlePlayer_C_SetPlayerCameraFieldOfView");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraFieldOfView, FOV) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraFieldOfView::FOV' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraFieldOfView, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraFieldOfView, CallFunc_SetPlayerCameraFieldOfView_return) == 0x000005, "Member 'RSBattlePlayer_C_SetPlayerCameraFieldOfView::CallFunc_SetPlayerCameraFieldOfView_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetPlayerCameraFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayerCameraFieldOfView_fov;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerCameraFieldOfView) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerCameraFieldOfView");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerCameraFieldOfView) == 0x000008, "Wrong size on RSBattlePlayer_C_GetPlayerCameraFieldOfView");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraFieldOfView, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerCameraFieldOfView::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraFieldOfView, CallFunc_GetPlayerCameraFieldOfView_fov) == 0x000004, "Member 'RSBattlePlayer_C_GetPlayerCameraFieldOfView::CallFunc_GetPlayerCameraFieldOfView_fov' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraLocation final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraLocation_return;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraLocation");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_SetPlayerCameraLocation");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraLocation, Pos) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraLocation::Pos' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraLocation, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCameraLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraLocation, CallFunc_SetPlayerCameraLocation_return) == 0x00000D, "Member 'RSBattlePlayer_C_SetPlayerCameraLocation::CallFunc_SetPlayerCameraLocation_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetPlayerCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPlayerCameraLocation_location;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerCameraLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerCameraLocation");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerCameraLocation) == 0x000018, "Wrong size on RSBattlePlayer_C_GetPlayerCameraLocation");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraLocation, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerCameraLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraLocation, CallFunc_GetPlayerCameraLocation_location) == 0x00000C, "Member 'RSBattlePlayer_C_GetPlayerCameraLocation::CallFunc_GetPlayerCameraLocation_location' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraRotation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraRotation_return;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraRotation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraRotation");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraRotation) == 0x000010, "Wrong size on RSBattlePlayer_C_SetPlayerCameraRotation");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraRotation, Rot) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraRotation::Rot' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraRotation, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCameraRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraRotation, CallFunc_SetPlayerCameraRotation_return) == 0x00000D, "Member 'RSBattlePlayer_C_SetPlayerCameraRotation::CallFunc_SetPlayerCameraRotation_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetPlayerCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetPlayerCameraRotation_rotation;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerCameraRotation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerCameraRotation");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerCameraRotation) == 0x000018, "Wrong size on RSBattlePlayer_C_GetPlayerCameraRotation");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraRotation, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerCameraRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraRotation, CallFunc_GetPlayerCameraRotation_rotation) == 0x00000C, "Member 'RSBattlePlayer_C_GetPlayerCameraRotation::CallFunc_GetPlayerCameraRotation_rotation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraDirection
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCameraDirection final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraDirection_return;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCameraDirection) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCameraDirection");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCameraDirection) == 0x000010, "Wrong size on RSBattlePlayer_C_SetPlayerCameraDirection");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraDirection, Pos) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCameraDirection::Pos' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraDirection, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCameraDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCameraDirection, CallFunc_SetPlayerCameraDirection_return) == 0x00000D, "Member 'RSBattlePlayer_C_SetPlayerCameraDirection::CallFunc_SetPlayerCameraDirection_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraDirection
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetPlayerCameraDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPlayerCameraDirection_direction;       // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerCameraDirection) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerCameraDirection");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerCameraDirection) == 0x000018, "Wrong size on RSBattlePlayer_C_GetPlayerCameraDirection");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraDirection, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerCameraDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerCameraDirection, CallFunc_GetPlayerCameraDirection_direction) == 0x00000C, "Member 'RSBattlePlayer_C_GetPlayerCameraDirection::CallFunc_GetPlayerCameraDirection_direction' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMeshFitGroundCheckLocation
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_GetMeshFitGroundCheckLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckHeight;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetMeshFitGroundCheckLocation");
static_assert(sizeof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation) == 0x000024, "Wrong size on RSBattlePlayer_C_GetMeshFitGroundCheckLocation");
static_assert(offsetof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation, Location) == 0x000000, "Member 'RSBattlePlayer_C_GetMeshFitGroundCheckLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation, CheckHeight) == 0x00000C, "Member 'RSBattlePlayer_C_GetMeshFitGroundCheckLocation::CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_GetMeshFitGroundCheckLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_GetMeshFitGroundCheckLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMeshFitGroundCheckLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_GetMeshFitGroundCheckLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackLongPress
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerAttackLongPress final
{
public:
	bool                                          bInAerial;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerAttackLongPress) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerAttackLongPress");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerAttackLongPress) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputTriggerAttackLongPress");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPress, bInAerial) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPress::bInAerial' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBackStepAttack
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerBackStepAttack final
{
public:
	bool                                          CallFunc_IsAttackedFlyingCombo_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJustDodgeDirection_bJustDodge;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerBackStepAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerBackStepAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerBackStepAttack) == 0x000007, "Wrong size on RSBattlePlayer_C_OnInputTriggerBackStepAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_IsAttackedFlyingCombo_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_IsAttackedFlyingCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_InputAttack_return) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_InputAttack_return_1) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_IsControlAI_bAI) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_IsActionStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerBackStepAttack, CallFunc_IsJustDodgeDirection_bJustDodge) == 0x000006, "Member 'RSBattlePlayer_C_OnInputTriggerBackStepAttack::CallFunc_IsJustDodgeDirection_bJustDodge' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseBackStepAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputReleaseBackStepAttack final
{
public:
	bool                                          CallFunc_InputAttack_return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputReleaseBackStepAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputReleaseBackStepAttack");
static_assert(sizeof(RSBattlePlayer_C_OnInputReleaseBackStepAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputReleaseBackStepAttack");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseBackStepAttack, CallFunc_InputAttack_return) == 0x000000, "Member 'RSBattlePlayer_C_OnInputReleaseBackStepAttack::CallFunc_InputAttack_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DamageBefore
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_DamageBefore final
{
public:
	bool                                          IgnoreAutoSasMetal;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageBefore_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAutoHarden_return;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DamageBefore) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DamageBefore");
static_assert(sizeof(RSBattlePlayer_C_DamageBefore) == 0x000004, "Wrong size on RSBattlePlayer_C_DamageBefore");
static_assert(offsetof(RSBattlePlayer_C_DamageBefore, IgnoreAutoSasMetal) == 0x000000, "Member 'RSBattlePlayer_C_DamageBefore::IgnoreAutoSasMetal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DamageBefore, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_DamageBefore::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DamageBefore, CallFunc_DamageBefore_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_DamageBefore::CallFunc_DamageBefore_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DamageBefore, CallFunc_CheckAutoHarden_return) == 0x000003, "Member 'RSBattlePlayer_C_DamageBefore::CallFunc_CheckAutoHarden_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SubHardenTime
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SubHardenTime final
{
public:
	float                                         SubTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SubHardenTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SubHardenTime");
static_assert(sizeof(RSBattlePlayer_C_SubHardenTime) == 0x000008, "Wrong size on RSBattlePlayer_C_SubHardenTime");
static_assert(offsetof(RSBattlePlayer_C_SubHardenTime, SubTime) == 0x000000, "Member 'RSBattlePlayer_C_SubHardenTime::SubTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SubHardenTime, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_SubHardenTime::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHardenParameter
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_GetHardenParameter final
{
public:
	float                                         RateMin;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RateMax;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SubTimeMin;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SubTimeMax;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Metal_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetHardenParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetHardenParameter");
static_assert(sizeof(RSBattlePlayer_C_GetHardenParameter) == 0x000014, "Wrong size on RSBattlePlayer_C_GetHardenParameter");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, RateMin) == 0x000000, "Member 'RSBattlePlayer_C_GetHardenParameter::RateMin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, RateMax) == 0x000004, "Member 'RSBattlePlayer_C_GetHardenParameter::RateMax' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, SubTimeMin) == 0x000008, "Member 'RSBattlePlayer_C_GetHardenParameter::SubTimeMin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, SubTimeMax) == 0x00000C, "Member 'RSBattlePlayer_C_GetHardenParameter::SubTimeMax' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000010, "Member 'RSBattlePlayer_C_GetHardenParameter::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHardenParameter, CallFunc_IsActiveSAS_Metal_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_GetHardenParameter::CallFunc_IsActiveSAS_Metal_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAutoStealth
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckAutoStealth final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAutoStealth) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckAutoStealth");
static_assert(sizeof(RSBattlePlayer_C_CheckAutoStealth) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckAutoStealth");
static_assert(offsetof(RSBattlePlayer_C_CheckAutoStealth, bSuccess) == 0x000000, "Member 'RSBattlePlayer_C_CheckAutoStealth::bSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawStatus
// 0x0910 (0x0910 - 0x0000)
struct RSBattlePlayer_C_DebugDrawStatus final
{
public:
	class FText                                   LText;                                             // 0x0000(0x0018)(Edit, BlueprintVisible)
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AC9[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ACA[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ACB[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_1;    // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ACC[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ACD[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C0(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetMaxDriveGauge_ReturnValue;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicGaugeMax_Value;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0108(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0148(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicGauge_Value;                    // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDriveGauge_ReturnValue;                // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0190(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x01D0(0x0040)(HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ACE[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_GetParameterTable_ReturnValue;            // 0x0228(0x01F8)()
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0420(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0430(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0448(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0488(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x04C8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0508(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x0548(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x0588(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x05C8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_13;           // 0x0608(0x0040)(HasGetValueTypeHash)
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0648(0x0068)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ACF[0x4];                                     // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_14;           // 0x06B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_15;           // 0x06F8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_16;           // 0x0738(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_17;           // 0x0778(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_18;           // 0x07B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_19;           // 0x07F8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_20;           // 0x0838(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD0[0x3];                                     // 0x0879(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_21;           // 0x0888(0x0040)(HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x08C8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x08D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x08E8(0x0018)()
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0909(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawStatus) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawStatus");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawStatus) == 0x000910, "Wrong size on RSBattlePlayer_C_DebugDrawStatus");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, LText) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawStatus::LText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, LPlayerList) == 0x000018, "Member 'RSBattlePlayer_C_DebugDrawStatus::LPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_DebugDrawStatus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, Temp_int_Loop_Num_Variable) == 0x000030, "Member 'RSBattlePlayer_C_DebugDrawStatus::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_AsRSBattle_Player) == 0x000038, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000048, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_AsBPI_Character_Paramater_1) == 0x000060, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_AsBPI_Character_Paramater_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetMaxHP_MaxHP) == 0x000074, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetHP_HP) == 0x000078, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C0, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetMaxDriveGauge_ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetMaxDriveGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPsychicGaugeMax_Value) == 0x000104, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPsychicGaugeMax_Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_2) == 0x000108, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_3) == 0x000148, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPsychicGauge_Value) == 0x000188, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPsychicGauge_Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetDriveGauge_ReturnValue) == 0x00018C, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetDriveGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_4) == 0x000190, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_5) == 0x0001D0, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPlayerID_self_CastInput) == 0x000210, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPlayerID_ReturnValue) == 0x000220, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetParameterTable_ReturnValue) == 0x000228, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetParameterTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000420, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_Conv_StringToText_ReturnValue) == 0x000430, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_6) == 0x000448, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_7) == 0x000488, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_8) == 0x0004C8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_9) == 0x000508, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_10) == 0x000548, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_11) == 0x000588, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_12) == 0x0005C8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_13) == 0x000608, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetParameterBasic_ReturnValue) == 0x000648, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, Temp_int_Loop_Counter_Variable) == 0x0006B0, "Member 'RSBattlePlayer_C_DebugDrawStatus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_14) == 0x0006B8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_15) == 0x0006F8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_16) == 0x000738, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_17) == 0x000778, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_18) == 0x0007B8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_19) == 0x0007F8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_20) == 0x000838, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_Less_IntInt_ReturnValue) == 0x000878, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_Add_IntInt_ReturnValue) == 0x00087C, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPlayerManager_PlayerManager) == 0x000880, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeStruct_FormatArgumentData_21) == 0x000888, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeStruct_FormatArgumentData_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetPlayerList_ReturnValue) == 0x0008C8, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, K2Node_MakeArray_Array) == 0x0008D8, "Member 'RSBattlePlayer_C_DebugDrawStatus::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_Format_ReturnValue) == 0x0008E8, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_GetDebuggingManager_Manager) == 0x000900, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_IsValid_ReturnValue) == 0x000908, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawStatus, CallFunc_IsControlAI_bAI) == 0x000909, "Member 'RSBattlePlayer_C_DebugDrawStatus::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TraceLandCheck
// 0x0090 (0x0090 - 0x0000)
struct RSBattlePlayer_C_TraceLandCheck final
{
public:
	float                                         CheckHeight;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLand;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD1[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandHeight;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHeight;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LLocation;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbLand;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD2[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0020(0x0040)(ConstParm)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_TraceLandCheck) == 0x000008, "Wrong alignment on RSBattlePlayer_C_TraceLandCheck");
static_assert(sizeof(RSBattlePlayer_C_TraceLandCheck) == 0x000090, "Wrong size on RSBattlePlayer_C_TraceLandCheck");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CheckHeight) == 0x000000, "Member 'RSBattlePlayer_C_TraceLandCheck::CheckHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, bLand) == 0x000004, "Member 'RSBattlePlayer_C_TraceLandCheck::bLand' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, LandHeight) == 0x000008, "Member 'RSBattlePlayer_C_TraceLandCheck::LandHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, LHeight) == 0x00000C, "Member 'RSBattlePlayer_C_TraceLandCheck::LHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, LLocation) == 0x000010, "Member 'RSBattlePlayer_C_TraceLandCheck::LLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, LbLand) == 0x00001C, "Member 'RSBattlePlayer_C_TraceLandCheck::LbLand' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_GetAsyncResult_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_X) == 0x000060, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_Y) == 0x000064, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_Z) == 0x000068, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00006C, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_X_1) == 0x000078, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_Y_1) == 0x00007C, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_BreakVector_Z_1) == 0x000080, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, K2Node_MathExpression_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_TraceLandCheck::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TraceLandCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_TraceLandCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugGetObjectAnimationName
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_DebugGetObjectAnimationName final
{
public:
	class FText                                   AnimationName;                                     // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(RSBattlePlayer_C_DebugGetObjectAnimationName) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugGetObjectAnimationName");
static_assert(sizeof(RSBattlePlayer_C_DebugGetObjectAnimationName) == 0x000018, "Wrong size on RSBattlePlayer_C_DebugGetObjectAnimationName");
static_assert(offsetof(RSBattlePlayer_C_DebugGetObjectAnimationName, AnimationName) == 0x000000, "Member 'RSBattlePlayer_C_DebugGetObjectAnimationName::AnimationName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RegisterCurrentAttack
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_RegisterCurrentAttack final
{
public:
	class UAttackComponentBaseBP_C*               AttackComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_RegisterCurrentAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_RegisterCurrentAttack");
static_assert(sizeof(RSBattlePlayer_C_RegisterCurrentAttack) == 0x000008, "Wrong size on RSBattlePlayer_C_RegisterCurrentAttack");
static_assert(offsetof(RSBattlePlayer_C_RegisterCurrentAttack, AttackComp) == 0x000000, "Member 'RSBattlePlayer_C_RegisterCurrentAttack::AttackComp' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterCurrentAttack
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_UnregisterCurrentAttack final
{
public:
	class UAttackComponentBaseBP_C*               AttackComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UnregisterCurrentAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UnregisterCurrentAttack");
static_assert(sizeof(RSBattlePlayer_C_UnregisterCurrentAttack) == 0x000010, "Wrong size on RSBattlePlayer_C_UnregisterCurrentAttack");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCurrentAttack, AttackComp) == 0x000000, "Member 'RSBattlePlayer_C_UnregisterCurrentAttack::AttackComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterCurrentAttack, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_UnregisterCurrentAttack::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetWeakNumber
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetWeakNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetWeakNumber) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetWeakNumber");
static_assert(sizeof(RSBattlePlayer_C_GetWeakNumber) == 0x000004, "Wrong size on RSBattlePlayer_C_GetWeakNumber");
static_assert(offsetof(RSBattlePlayer_C_GetWeakNumber, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetWeakNumber::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoEventStart
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_DoEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD3[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CopyPlayerOff_bDummy;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelDrive_bDummy;                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndSAS_Telepo_bEnd;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventStart_bDummy;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoEventStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoEventStart");
static_assert(sizeof(RSBattlePlayer_C_DoEventStart) == 0x000028, "Wrong size on RSBattlePlayer_C_DoEventStart");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_ClearBattleParticle_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_ClearBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_CopyPlayerOff_bDummy) == 0x000011, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_CopyPlayerOff_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_GetEnpcComp_ReturnComp) == 0x000018, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_CancelDrive_bDummy) == 0x000021, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_CancelDrive_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_EndSAS_Telepo_bEnd) == 0x000022, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_EndSAS_Telepo_bEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_SetLookAtEnable_bResult) == 0x000023, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_SetInvalidDamage_Dummy) == 0x000024, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventStart, CallFunc_DoEventStart_bDummy) == 0x000025, "Member 'RSBattlePlayer_C_DoEventStart::CallFunc_DoEventStart_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoEventEnd
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_DoEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue_1;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue_2;      // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventLookAtLocation_bDummy;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Copy_ReturnValue;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CopyPlayerOn_bDummy;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpawnWait_bSpawnWait;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventEnd_bDummy;                        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoEventEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoEventEnd");
static_assert(sizeof(RSBattlePlayer_C_DoEventEnd) == 0x000020, "Wrong size on RSBattlePlayer_C_DoEventEnd");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsBattling_bBatting) == 0x000010, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsPlayerStatus_Result) == 0x000011, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000012, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetBattleParticleType_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetBattleParticleType_ReturnValue_1) == 0x000014, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetBattleParticleType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsPlayerStatus_Result_1) == 0x000015, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsDriveMode_ReturnValue) == 0x000016, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetBattleParticleType_ReturnValue_2) == 0x000017, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetBattleParticleType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetEventLookAtLocation_bDummy) == 0x000018, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetEventLookAtLocation_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsActiveSAS_Copy_ReturnValue) == 0x000019, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsActiveSAS_Copy_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_CopyPlayerOn_bDummy) == 0x00001A, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_CopyPlayerOn_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_IsSpawnWait_bSpawnWait) == 0x00001B, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_IsSpawnWait_bSpawnWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetLookAtEnable_bResult) == 0x00001C, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_SetInvalidDamage_Dummy) == 0x00001D, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoEventEnd, CallFunc_DoEventEnd_bDummy) == 0x00001E, "Member 'RSBattlePlayer_C_DoEventEnd::CallFunc_DoEventEnd_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoStaticEventStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_DoStaticEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventStart_bDummy;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoStaticEventStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoStaticEventStart");
static_assert(sizeof(RSBattlePlayer_C_DoStaticEventStart) == 0x000018, "Wrong size on RSBattlePlayer_C_DoStaticEventStart");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoStaticEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_SetLookAtEnable_bResult) == 0x000001, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_DisablePlayerFootIK_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_IsLockTarget_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_EnableRigidBody_bDummy) == 0x000011, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventStart, CallFunc_DoStaticEventStart_bDummy) == 0x000012, "Member 'RSBattlePlayer_C_DoStaticEventStart::CallFunc_DoStaticEventStart_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoStaticEventEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_DoStaticEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWeaponAttachMode_bBattle;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD7[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventEnd_bDummy;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoStaticEventEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoStaticEventEnd");
static_assert(sizeof(RSBattlePlayer_C_DoStaticEventEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_DoStaticEventEnd");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoStaticEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_IsWeaponAttachMode_bBattle) == 0x000002, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_IsWeaponAttachMode_bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_DisablePlayerFootIK_bDummy) == 0x000010, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_EnableRigidBody_bDummy) == 0x000011, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_IsControlAI_bAI_1) == 0x000012, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoStaticEventEnd, CallFunc_DoStaticEventEnd_bDummy) == 0x000013, "Member 'RSBattlePlayer_C_DoStaticEventEnd::CallFunc_DoStaticEventEnd_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventStart
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_DoDynamicEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLookAtEnable_bResult;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD9[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventStart_bDummy;               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoDynamicEventStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoDynamicEventStart");
static_assert(sizeof(RSBattlePlayer_C_DoDynamicEventStart) == 0x000028, "Wrong size on RSBattlePlayer_C_DoDynamicEventStart");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoDynamicEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x000010, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_DisablePlayerFootIK_bDummy) == 0x000011, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_SetLookAtEnable_bResult) == 0x000012, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_SetLookAtEnable_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, Temp_bool_Variable) == 0x000013, "Member 'RSBattlePlayer_C_DoDynamicEventStart::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_EnableRigidBody_bDummy) == 0x000014, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000018, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_IsLockTarget_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_IsControlAI_bAI) == 0x000021, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, Temp_bool_Variable_1) == 0x000022, "Member 'RSBattlePlayer_C_DoDynamicEventStart::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, Temp_bool_Variable_2) == 0x000023, "Member 'RSBattlePlayer_C_DoDynamicEventStart::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, K2Node_Select_Default) == 0x000024, "Member 'RSBattlePlayer_C_DoDynamicEventStart::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventStart, CallFunc_DoDynamicEventStart_bDummy) == 0x000025, "Member 'RSBattlePlayer_C_DoDynamicEventStart::CallFunc_DoDynamicEventStart_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventEnd
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_DoDynamicEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADA[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWeaponAttachMode_bBattle;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventEnd_bDummy;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoDynamicEventEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoDynamicEventEnd");
static_assert(sizeof(RSBattlePlayer_C_DoDynamicEventEnd) == 0x000018, "Wrong size on RSBattlePlayer_C_DoDynamicEventEnd");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_DisablePlayerFootIK_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_IsWeaponAttachMode_bBattle) == 0x000011, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_IsWeaponAttachMode_bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_IsControlAI_bAI_1) == 0x000012, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_EnableRigidBody_bDummy) == 0x000013, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventEnd, CallFunc_DoDynamicEventEnd_bDummy) == 0x000014, "Member 'RSBattlePlayer_C_DoDynamicEventEnd::CallFunc_DoDynamicEventEnd_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplySkill
// 0x0200 (0x0200 - 0x0000)
struct RSBattlePlayer_C_ApplySkill final
{
public:
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoApplySkill_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADB[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0008(0x01F8)()
};
static_assert(alignof(RSBattlePlayer_C_ApplySkill) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ApplySkill");
static_assert(sizeof(RSBattlePlayer_C_ApplySkill) == 0x000200, "Wrong size on RSBattlePlayer_C_ApplySkill");
static_assert(offsetof(RSBattlePlayer_C_ApplySkill, CallFunc_IsControlAI_bAI) == 0x000000, "Member 'RSBattlePlayer_C_ApplySkill::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySkill, CallFunc_GetPlayerID_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_ApplySkill::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySkill, CallFunc_DoApplySkill_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_ApplySkill::CallFunc_DoApplySkill_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySkill, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_ApplySkill::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoApplySkill
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_DoApplySkill final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ADC[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADD[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DoApplySkill) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoApplySkill");
static_assert(sizeof(RSBattlePlayer_C_DoApplySkill) == 0x000020, "Wrong size on RSBattlePlayer_C_DoApplySkill");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoApplySkill::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_GetPlayerID_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000011, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_GetLearnedSkillParameter_Parameter) == 0x000014, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoApplySkill, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x000018, "Member 'RSBattlePlayer_C_DoApplySkill::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveBrainField
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldMoveBrainField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldMoveBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldMoveBrainField");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldMoveBrainField) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBrainFieldMoveBrainField");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainField, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainField::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveNormalField
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldMoveNormalField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldMoveNormalField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldMoveNormalField");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldMoveNormalField) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBrainFieldMoveNormalField");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalField, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalField::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldOpenEnd
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldOpenEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LBeforeSealReaction;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADF[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE0[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE1[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue_1;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game_1;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE2[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Em8000_GetPartner_PartnerActor;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE3[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE4[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_GetHP_self_CastInput;                     // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetHP_HP_1;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldOpenEnd) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldOpenEnd");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldOpenEnd) == 0x0000A8, "Wrong size on RSBattlePlayer_C_OnBrainFieldOpenEnd");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, LBeforeSealReaction) == 0x000001, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::LBeforeSealReaction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetEnpcComp_ReturnComp) == 0x000010, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetHUD_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_AsHUDMain_Game) == 0x000030, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetHP_HP) == 0x00003C, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetPlayerController_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetHUD_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetHUD_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_AsHUDMain_Game_1) == 0x000058, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_AsHUDMain_Game_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_Em8000_GetPartner_PartnerActor) == 0x000068, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_Em8000_GetPartner_PartnerActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_AsRSBattle_Character) == 0x000078, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetHP_self_CastInput) == 0x000088, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetHP_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetHP_HP_1) == 0x000098, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetHP_HP_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue_4) == 0x00009C, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_GetPlayerID_ReturnValue) == 0x00009D, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00009E, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsValid_ReturnValue_5) == 0x00009F, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenEnd, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000A0, "Member 'RSBattlePlayer_C_OnBrainFieldOpenEnd::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldCloseStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldCloseStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldCloseStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldCloseStart");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldCloseStart) == 0x000001, "Wrong size on RSBattlePlayer_C_OnBrainFieldCloseStart");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldCloseStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldCloseStart::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawENPCMotionInfo
// 0x00D8 (0x00D8 - 0x0000)
struct RSBattlePlayer_C_DebugDrawENPCMotionInfo final
{
public:
	bool                                          L_Exec;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LObjectText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible)
	class FText                                   LFaceText;                                         // 0x0020(0x0018)(Edit, BlueprintVisible)
	class FText                                   LWeaponText;                                       // 0x0038(0x0018)(Edit, BlueprintVisible)
	class FText                                   LUpperText;                                        // 0x0050(0x0018)(Edit, BlueprintVisible)
	class FText                                   LCancelText;                                       // 0x0068(0x0018)(Edit, BlueprintVisible)
	class UAnimMontage*                           LMontage;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LDefaultText;                                      // 0x0088(0x0018)(Edit, BlueprintVisible)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE6[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE7[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawENPCMotionInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawENPCMotionInfo");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawENPCMotionInfo) == 0x0000D8, "Wrong size on RSBattlePlayer_C_DebugDrawENPCMotionInfo");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, L_Exec) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::L_Exec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LObjectText) == 0x000008, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LObjectText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LFaceText) == 0x000020, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LFaceText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LWeaponText) == 0x000038, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LWeaponText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LUpperText) == 0x000050, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LUpperText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LCancelText) == 0x000068, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LCancelText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LMontage) == 0x000080, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, LDefaultText) == 0x000088, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::LDefaultText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_IsValid_ReturnValue_1) == 0x0000A9, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, K2Node_DynamicCast_AsRSBattle_Player) == 0x0000B0, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_GetDebuggingManager_Manager) == 0x0000C0, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_GetCurrentTargetActor_TargetActor) == 0x0000C8, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_IsValid_ReturnValue_2) == 0x0000D0, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_IsValid_ReturnValue_3) == 0x0000D1, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawENPCMotionInfo, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D2, "Member 'RSBattlePlayer_C_DebugDrawENPCMotionInfo::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawMotionInfoCore
// 0x10E8 (0x10E8 - 0x0000)
struct RSBattlePlayer_C_DebugDrawMotionInfoCore final
{
public:
	class FText                                   LObjectText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible)
	class FText                                   LFaceText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible)
	class FText                                   LWeaponText;                                       // 0x0030(0x0018)(Edit, BlueprintVisible)
	class FText                                   LUpperText;                                        // 0x0048(0x0018)(Edit, BlueprintVisible)
	class FText                                   LCancelText;                                       // 0x0060(0x0018)(Edit, BlueprintVisible)
	class UAnimMontage*                           LMontage;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LDefaultText;                                      // 0x0080(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE8[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00B8(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE9[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x00F0(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AEA[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0110(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0128(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AEB[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_6;                              // 0x0148(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x0160(0x0018)()
	bool                                          Temp_bool_Variable_4;                              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AEC[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_8;                              // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0198(0x0018)()
	bool                                          Temp_bool_Variable_5;                              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AED[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_10;                             // 0x01B8(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x01D0(0x0018)()
	bool                                          Temp_bool_Variable_6;                              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AEE[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_12;                             // 0x01F0(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0208(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0220(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AEF[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0238(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0250(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_DebugGetObjectAnimationName_AnimationName; // 0x0290(0x0018)()
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AF0[0x2];                                     // 0x02AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AF1[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x02C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x02E0(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0330(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0348(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0388(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x03C8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0408(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0448(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0488(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x04C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x04D8(0x0018)()
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue;       // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue;      // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF2[0x3];                                     // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x0500(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0540(0x0018)()
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0558(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0568(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x05A8(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF3[0x7];                                     // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x05C8(0x0040)(HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue_1;     // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue;          // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue_1;    // 0x0614(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF4[0x3];                                     // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x0618(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue_1;              // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AF5[0x4];                                     // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0660(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x0678(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_13;           // 0x06B8(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x06F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF6[0x7];                                     // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x0710(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_14;           // 0x0728(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue_2;    // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF7[0x3];                                     // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_GetBlendTime_ReturnValue;         // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_15;           // 0x0770(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue_2;              // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue;          // 0x07B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_16;           // 0x07B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_17;           // 0x07F8(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_2;              // 0x0838(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x0848(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_18;           // 0x0860(0x0040)(HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue_2;     // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue_3;     // 0x08A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x08B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x08B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF8[0x6];                                     // 0x08B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue_4;     // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x08C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AF9[0x3];                                     // 0x08C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue_1;        // 0x08C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetBlendTime_ReturnValue_1;       // 0x08C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AFA[0x4];                                     // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_19;           // 0x08D0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_20;           // 0x0910(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue_1;        // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AFB[0x4];                                     // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_21;           // 0x0958(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionIdleWalkRun_bEnable;        // 0x0998(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AFC[0x7];                                     // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x09A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x09B0(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x09C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_22;           // 0x09E0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionDodge_bEnable;              // 0x0A20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionPsychic_bEnable;            // 0x0A21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AFD[0x6];                                     // 0x0A22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x0A28(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x0A40(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_23;           // 0x0A58(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_24;           // 0x0A98(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind_1;             // 0x0AD9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0ADA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AFE[0x5];                                     // 0x0ADB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_5;                           // 0x0AE0(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0AF8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_25;           // 0x0B10(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0B50(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x0B60(0x0018)()
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue_2;        // 0x0B78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetBlendTime_ReturnValue_2;       // 0x0B7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_26;           // 0x0B80(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_27;           // 0x0BC0(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue_2;        // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AFF[0x4];                                     // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_28;           // 0x0C08(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_4;                          // 0x0C48(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentASNodeAssetPlayRate_ReturnValue; // 0x0C58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B00[0x4];                                     // 0x0C5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_4;                     // 0x0C60(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_29;           // 0x0C78(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentASNodeAssetLength_ReturnValue;  // 0x0CB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentASNodeAssetTime_ReturnValue;    // 0x0CBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_30;           // 0x0CC0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_31;           // 0x0D00(0x0040)(HasGetValueTypeHash)
	class FName                                   CallFunc_DebugGetCurrentASNodeAssetName_ReturnValue; // 0x0D40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DebugIsCurrentASNodeRootMotion_ReturnValue; // 0x0D48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B01[0x7];                                     // 0x0D49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0D50(0x0018)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0D68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B02[0x7];                                     // 0x0D69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_32;           // 0x0D70(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0DB0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_33;           // 0x0DC8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_5;                          // 0x0E08(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue_5;     // 0x0E18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_5;                     // 0x0E20(0x0018)()
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue_3;        // 0x0E38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B03[0x4];                                     // 0x0E3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_34;           // 0x0E40(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue_3;    // 0x0E80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B04[0x3];                                     // 0x0E81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_GetBlendTime_ReturnValue_3;       // 0x0E84(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_35;           // 0x0E88(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_6;                           // 0x0EC8(0x0018)()
	float                                         CallFunc_GetPlayLength_ReturnValue_3;              // 0x0EE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B05[0x4];                                     // 0x0EE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_36;           // 0x0EE8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_37;           // 0x0F28(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue_3;        // 0x0F68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B06[0x4];                                     // 0x0F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue_3;              // 0x0F70(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_38;           // 0x0F80(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_5;          // 0x0FC0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0FD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B07[0x7];                                     // 0x0FD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_39;           // 0x0FE0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_6;                          // 0x1020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_15;                             // 0x1030(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_6;                     // 0x1048(0x0018)()
	class FText                                   K2Node_Select_Default_7;                           // 0x1060(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_40;           // 0x1078(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_7;                          // 0x10B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_7;                     // 0x10C8(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x10E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawMotionInfoCore) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawMotionInfoCore");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawMotionInfoCore) == 0x0010E8, "Wrong size on RSBattlePlayer_C_DebugDrawMotionInfoCore");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LObjectText) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LObjectText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LFaceText) == 0x000018, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LFaceText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LWeaponText) == 0x000030, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LWeaponText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LUpperText) == 0x000048, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LUpperText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LCancelText) == 0x000060, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LCancelText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LMontage) == 0x000078, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LMontage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, LDefaultText) == 0x000080, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::LDefaultText' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable) == 0x000098, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable) == 0x0000A0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_1) == 0x0000B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_1) == 0x0000D0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_2) == 0x0000D8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_3) == 0x0000F0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_2) == 0x000108, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_4) == 0x000110, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_5) == 0x000128, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_3) == 0x000140, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_6) == 0x000148, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_7) == 0x000160, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_4) == 0x000178, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_8) == 0x000180, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_9) == 0x000198, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_5) == 0x0001B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_10) == 0x0001B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_11) == 0x0001D0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_6) == 0x0001E8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_12) == 0x0001F0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_13) == 0x000208, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array) == 0x000220, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_bool_Variable_7) == 0x000230, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue) == 0x000238, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData) == 0x000250, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_DebugGetObjectAnimationName_AnimationName) == 0x000290, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_DebugGetObjectAnimationName_AnimationName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x0002A8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentActionState_Kind) == 0x0002AC, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_IntToByte_ReturnValue) == 0x0002AD, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0002B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetValidValue_ReturnValue) == 0x0002C0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue) == 0x0002C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_1) == 0x0002E0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000320, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000330, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_2) == 0x000348, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_3) == 0x000388, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_4) == 0x0003C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_5) == 0x000408, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_6) == 0x000448, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_7) == 0x000488, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_1) == 0x0004C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_1) == 0x0004D8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue) == 0x0004F0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsRootMotionAnimMontage_ReturnValue) == 0x0004F8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsRootMotionAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetPlayLength_ReturnValue) == 0x0004FC, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_8) == 0x000500, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default) == 0x000540, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetObjectName_ReturnValue) == 0x000558, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_9) == 0x000568, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0005A8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue) == 0x0005C0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_10) == 0x0005C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue_1) == 0x000608, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPlayRate_ReturnValue) == 0x000610, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsRootMotionAnimMontage_ReturnValue_1) == 0x000614, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsRootMotionAnimMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_11) == 0x000618, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetPlayLength_ReturnValue_1) == 0x000658, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetPlayLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_1) == 0x000660, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_12) == 0x000678, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_13) == 0x0006B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetObjectName_ReturnValue_1) == 0x0006F8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_1) == 0x000708, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue_3) == 0x000710, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_14) == 0x000728, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsRootMotionAnimMontage_ReturnValue_2) == 0x000768, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsRootMotionAnimMontage_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetBlendTime_ReturnValue) == 0x00076C, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetBlendTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_15) == 0x000770, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetPlayLength_ReturnValue_2) == 0x0007B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetPlayLength_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPosition_ReturnValue) == 0x0007B4, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_16) == 0x0007B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_17) == 0x0007F8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetObjectName_ReturnValue_2) == 0x000838, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetObjectName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue_4) == 0x000848, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_18) == 0x000860, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue_2) == 0x0008A0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue_3) == 0x0008A8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_2) == 0x0008B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_3) == 0x0008B1, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue_4) == 0x0008B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_4) == 0x0008C0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPlayRate_ReturnValue_1) == 0x0008C4, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPlayRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetBlendTime_ReturnValue_1) == 0x0008C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetBlendTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_19) == 0x0008D0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_20) == 0x000910, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPosition_ReturnValue_1) == 0x000950, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_21) == 0x000958, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsEnableActionIdleWalkRun_bEnable) == 0x000998, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsEnableActionIdleWalkRun_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_2) == 0x0009A0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_2) == 0x0009B0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_2) == 0x0009C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_22) == 0x0009E0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsEnableActionDodge_bEnable) == 0x000A20, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsEnableActionDodge_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsEnableActionPsychic_bEnable) == 0x000A21, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsEnableActionPsychic_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_3) == 0x000A28, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_4) == 0x000A40, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_23) == 0x000A58, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_24) == 0x000A98, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsEnableActionAttack_bEnable) == 0x000AD8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentActionState_Kind_1) == 0x000AD9, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentActionState_Kind_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000ADA, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_5) == 0x000AE0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_14) == 0x000AF8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_25) == 0x000B10, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_3) == 0x000B50, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_3) == 0x000B60, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPlayRate_ReturnValue_2) == 0x000B78, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPlayRate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetBlendTime_ReturnValue_2) == 0x000B7C, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetBlendTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_26) == 0x000B80, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_27) == 0x000BC0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPosition_ReturnValue_2) == 0x000C00, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPosition_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_28) == 0x000C08, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_4) == 0x000C48, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentASNodeAssetPlayRate_ReturnValue) == 0x000C58, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentASNodeAssetPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_4) == 0x000C60, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_29) == 0x000C78, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentASNodeAssetLength_ReturnValue) == 0x000CB8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentASNodeAssetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetCurrentASNodeAssetTime_ReturnValue) == 0x000CBC, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetCurrentASNodeAssetTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_30) == 0x000CC0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_31) == 0x000D00, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_DebugGetCurrentASNodeAssetName_ReturnValue) == 0x000D40, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_DebugGetCurrentASNodeAssetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_DebugIsCurrentASNodeRootMotion_ReturnValue) == 0x000D48, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_DebugIsCurrentASNodeRootMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_NameToText_ReturnValue) == 0x000D50, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_BooleanOR_ReturnValue) == 0x000D68, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_32) == 0x000D70, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_BoolToText_ReturnValue) == 0x000DB0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_33) == 0x000DC8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_5) == 0x000E08, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetAnimMontageFromSlot_ReturnValue_5) == 0x000E18, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetAnimMontageFromSlot_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_5) == 0x000E20, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPlayRate_ReturnValue_3) == 0x000E38, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPlayRate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_34) == 0x000E40, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsRootMotionAnimMontage_ReturnValue_3) == 0x000E80, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsRootMotionAnimMontage_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetBlendTime_ReturnValue_3) == 0x000E84, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetBlendTime_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_35) == 0x000E88, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_6) == 0x000EC8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetPlayLength_ReturnValue_3) == 0x000EE0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetPlayLength_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_36) == 0x000EE8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_37) == 0x000F28, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Montage_GetPosition_ReturnValue_3) == 0x000F68, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Montage_GetPosition_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_GetObjectName_ReturnValue_3) == 0x000F70, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_GetObjectName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_38) == 0x000F80, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Conv_StringToText_ReturnValue_5) == 0x000FC0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Conv_StringToText_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_5) == 0x000FD8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_39) == 0x000FE0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_6) == 0x001020, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, Temp_text_Variable_15) == 0x001030, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_6) == 0x001048, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_Select_Default_7) == 0x001060, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeStruct_FormatArgumentData_40) == 0x001078, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeStruct_FormatArgumentData_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, K2Node_MakeArray_Array_7) == 0x0010B8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::K2Node_MakeArray_Array_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_Format_ReturnValue_7) == 0x0010C8, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_Format_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawMotionInfoCore, CallFunc_IsValid_ReturnValue_6) == 0x0010E0, "Member 'RSBattlePlayer_C_DebugDrawMotionInfoCore::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawPosition
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattlePlayer_C_DebugDrawPosition final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B08[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue_1;          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawPosition) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawPosition");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawPosition) == 0x0000A8, "Wrong size on RSBattlePlayer_C_DebugDrawPosition");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_BreakVector_X) == 0x00000C, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_BreakVector_Y) == 0x000010, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_BreakVector_Z) == 0x000014, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_MakeLiteralString_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_MakeLiteralString_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_MakeLiteralString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00004C, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_Conv_VectorToString_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000068, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000088, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_GetDebuggingManager_Manager) == 0x000098, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawPosition, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_DebugDrawPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoBattleSequencerStart
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_DoBattleSequencerStart final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoBattleSequencerStart_bDummy;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoBattleSequencerStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DoBattleSequencerStart");
static_assert(sizeof(RSBattlePlayer_C_DoBattleSequencerStart) == 0x000007, "Wrong size on RSBattlePlayer_C_DoBattleSequencerStart");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, bSetEnemyEvent) == 0x000000, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, bDriveSequence) == 0x000001, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000003, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, CallFunc_DoBattleSequencerStart_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::CallFunc_DoBattleSequencerStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, CallFunc_DisablePlayerFootIK_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerStart, CallFunc_EnableRigidBody_bDummy) == 0x000006, "Member 'RSBattlePlayer_C_DoBattleSequencerStart::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoBattleSequencerEnd
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_DoBattleSequencerEnd final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoBattleSequencerEnd_bDummy;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWeaponAttachMode_bBattle;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableRigidBody_bDummy;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoBattleSequencerEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DoBattleSequencerEnd");
static_assert(sizeof(RSBattlePlayer_C_DoBattleSequencerEnd) == 0x000007, "Wrong size on RSBattlePlayer_C_DoBattleSequencerEnd");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, bSetEnemyEvent) == 0x000000, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, bDriveSequence) == 0x000001, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, CallFunc_DoBattleSequencerEnd_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::CallFunc_DoBattleSequencerEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, CallFunc_DisablePlayerFootIK_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, CallFunc_IsWeaponAttachMode_bBattle) == 0x000005, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::CallFunc_IsWeaponAttachMode_bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoBattleSequencerEnd, CallFunc_EnableRigidBody_bDummy) == 0x000006, "Member 'RSBattlePlayer_C_DoBattleSequencerEnd::CallFunc_EnableRigidBody_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateCameraDither
// 0x0100 (0x0100 - 0x0000)
struct RSBattlePlayer_C_UpdateCameraDither final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_UseDither;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B09[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraDither;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LNearLocation;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewValueTemp;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateCameraDither_CameraDither;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_SetCameraDither_self_CastInput;           // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCameraDither_Dummy;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0A[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0B[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0C[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindClosestPointOnSegment_ReturnValue;    // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0D[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance2D_ReturnValue;            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateCameraDither) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UpdateCameraDither");
static_assert(sizeof(RSBattlePlayer_C_UpdateCameraDither) == 0x000100, "Wrong size on RSBattlePlayer_C_UpdateCameraDither");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_UpdateCameraDither::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, Param_UseDither) == 0x000004, "Member 'RSBattlePlayer_C_UpdateCameraDither::Param_UseDither' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CameraDither) == 0x000008, "Member 'RSBattlePlayer_C_UpdateCameraDither::CameraDither' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, LNearLocation) == 0x00000C, "Member 'RSBattlePlayer_C_UpdateCameraDither::LNearLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, NewValueTemp) == 0x000018, "Member 'RSBattlePlayer_C_UpdateCameraDither::NewValueTemp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_UpdateCameraDither_CameraDither) == 0x00001C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_UpdateCameraDither_CameraDither' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_UpdateCameraDither::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_FClamp_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattlePlayer_C_UpdateCameraDither::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000038, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_X) == 0x000054, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_Y) == 0x000058, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_Z) == 0x00005C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000060, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_SetCameraDither_self_CastInput) == 0x000068, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_SetCameraDither_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_SetCameraDither_Dummy) == 0x000078, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_SetCameraDither_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Less_IntInt_ReturnValue) == 0x000079, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00007C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Abs_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000089, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00008C, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000098, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_GetUpVector_ReturnValue) == 0x0000A4, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_X_1) == 0x0000BC, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_Y_1) == 0x0000C0, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_BreakVector_Z_1) == 0x0000C4, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C8, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Abs_ReturnValue_1) == 0x0000E4, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_FindClosestPointOnSegment_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_FindClosestPointOnSegment_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Vector_Distance2D_ReturnValue) == 0x0000F8, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateCameraDither, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000FC, "Member 'RSBattlePlayer_C_UpdateCameraDither::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCameraDither
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetCameraDither final
{
public:
	float                                         SetDitherValue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCameraDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetCameraDither");
static_assert(sizeof(RSBattlePlayer_C_SetCameraDither) == 0x000008, "Wrong size on RSBattlePlayer_C_SetCameraDither");
static_assert(offsetof(RSBattlePlayer_C_SetCameraDither, SetDitherValue) == 0x000000, "Member 'RSBattlePlayer_C_SetCameraDither::SetDitherValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCameraDither, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_SetCameraDither::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BindDispathers
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_BindDispathers final
{
public:
	TDelegate<void(EChangeAreaStatus Status, bool IsChangeLocation)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BindDispathers) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BindDispathers");
static_assert(sizeof(RSBattlePlayer_C_BindDispathers) == 0x000020, "Wrong size on RSBattlePlayer_C_BindDispathers");
static_assert(offsetof(RSBattlePlayer_C_BindDispathers, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'RSBattlePlayer_C_BindDispathers::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindDispathers, CallFunc_GetSceneManager_SceneManager) == 0x000010, "Member 'RSBattlePlayer_C_BindDispathers::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindDispathers, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_BindDispathers::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeAreaLoadStatus
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_OnChangeAreaLoadStatus final
{
public:
	EChangeAreaStatus                             Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsChangeLocation;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAreaChange_bDummy;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreaChangeEnd_bDummy;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreaChangeBegin_bDummy;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeAreaLoadStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeAreaLoadStatus");
static_assert(sizeof(RSBattlePlayer_C_OnChangeAreaLoadStatus) == 0x000007, "Wrong size on RSBattlePlayer_C_OnChangeAreaLoadStatus");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, Status) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::Status' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, bIsChangeLocation) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::bIsChangeLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, CallFunc_OnAreaChange_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::CallFunc_OnAreaChange_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, CallFunc_AreaChangeEnd_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::CallFunc_AreaChangeEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeAreaLoadStatus, CallFunc_AreaChangeBegin_bDummy) == 0x000006, "Member 'RSBattlePlayer_C_OnChangeAreaLoadStatus::CallFunc_AreaChangeBegin_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AreaChangeBegin
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_AreaChangeBegin final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnableInputStick_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AreaChangeBegin) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AreaChangeBegin");
static_assert(sizeof(RSBattlePlayer_C_AreaChangeBegin) == 0x000003, "Wrong size on RSBattlePlayer_C_AreaChangeBegin");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeBegin, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_AreaChangeBegin::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeBegin, CallFunc_SetEnableInputStick_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_AreaChangeBegin::CallFunc_SetEnableInputStick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeBegin, CallFunc_SetInvalidDamage_Dummy) == 0x000002, "Member 'RSBattlePlayer_C_AreaChangeBegin::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AreaChangeEnd
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_AreaChangeEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AreaChangeEnd) == 0x000004, "Wrong alignment on RSBattlePlayer_C_AreaChangeEnd");
static_assert(sizeof(RSBattlePlayer_C_AreaChangeEnd) == 0x00000C, "Wrong size on RSBattlePlayer_C_AreaChangeEnd");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_AreaChangeEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeEnd, CallFunc_SetInvalidDamage_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_AreaChangeEnd::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AreaChangeEnd, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_AreaChangeEnd::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTimerPause
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_SetTimerPause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B0F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoTimerPause_bDummy;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTimerPause_bDummy_1;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetTimerPause) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetTimerPause");
static_assert(sizeof(RSBattlePlayer_C_SetTimerPause) == 0x000014, "Wrong size on RSBattlePlayer_C_SetTimerPause");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, bPause) == 0x000000, "Member 'RSBattlePlayer_C_SetTimerPause::bPause' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetTimerPause::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, CallFunc_DoTimerPause_bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_SetTimerPause::CallFunc_DoTimerPause_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_SetTimerPause::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000E, "Member 'RSBattlePlayer_C_SetTimerPause::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, CallFunc_DoTimerPause_bDummy_1) == 0x00000F, "Member 'RSBattlePlayer_C_SetTimerPause::CallFunc_DoTimerPause_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTimerPause, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetTimerPause::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoTimerPause
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_DoTimerPause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B10[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoTimerPause) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoTimerPause");
static_assert(sizeof(RSBattlePlayer_C_DoTimerPause) == 0x000018, "Wrong size on RSBattlePlayer_C_DoTimerPause");
static_assert(offsetof(RSBattlePlayer_C_DoTimerPause, bPause) == 0x000000, "Member 'RSBattlePlayer_C_DoTimerPause::bPause' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTimerPause, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_DoTimerPause::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTimerPause, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_DoTimerPause::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTimerPause, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_DoTimerPause::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTimerPause, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'RSBattlePlayer_C_DoTimerPause::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnterActionState
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnEnterActionState final
{
public:
	EPlayerActionKind                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B11[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCancelMeshFit;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             LPrevState;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelMeshFitGround_bDummy;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnterActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnEnterActionState");
static_assert(sizeof(RSBattlePlayer_C_OnEnterActionState) == 0x000010, "Wrong size on RSBattlePlayer_C_OnEnterActionState");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, NewState) == 0x000000, "Member 'RSBattlePlayer_C_OnEnterActionState::NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, Param) == 0x000004, "Member 'RSBattlePlayer_C_OnEnterActionState::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_OnEnterActionState::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, LbCancelMeshFit) == 0x000009, "Member 'RSBattlePlayer_C_OnEnterActionState::LbCancelMeshFit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, LPrevState) == 0x00000A, "Member 'RSBattlePlayer_C_OnEnterActionState::LPrevState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'RSBattlePlayer_C_OnEnterActionState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterActionState, CallFunc_CancelMeshFitGround_bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_OnEnterActionState::CallFunc_CancelMeshFitGround_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnterUpperActionState
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_OnEnterUpperActionState final
{
public:
	EPlayerUpperActionKind                        NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B12[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnterUpperActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnEnterUpperActionState");
static_assert(sizeof(RSBattlePlayer_C_OnEnterUpperActionState) == 0x00000C, "Wrong size on RSBattlePlayer_C_OnEnterUpperActionState");
static_assert(offsetof(RSBattlePlayer_C_OnEnterUpperActionState, NewState) == 0x000000, "Member 'RSBattlePlayer_C_OnEnterUpperActionState::NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterUpperActionState, Param) == 0x000004, "Member 'RSBattlePlayer_C_OnEnterUpperActionState::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnterUpperActionState, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_OnEnterUpperActionState::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginPsychicDither
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_BeginPsychicDither final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginPsychicDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_BeginPsychicDither");
static_assert(sizeof(RSBattlePlayer_C_BeginPsychicDither) == 0x00000C, "Wrong size on RSBattlePlayer_C_BeginPsychicDither");
static_assert(offsetof(RSBattlePlayer_C_BeginPsychicDither, ParameterName) == 0x000000, "Member 'RSBattlePlayer_C_BeginPsychicDither::ParameterName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPsychicDither, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_BeginPsychicDither::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndPsychicDither
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EndPsychicDither final
{
public:
	bool                                          bNoInterp;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndPsychicDither) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndPsychicDither");
static_assert(sizeof(RSBattlePlayer_C_EndPsychicDither) == 0x000002, "Wrong size on RSBattlePlayer_C_EndPsychicDither");
static_assert(offsetof(RSBattlePlayer_C_EndPsychicDither, bNoInterp) == 0x000000, "Member 'RSBattlePlayer_C_EndPsychicDither::bNoInterp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndPsychicDither, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EndPsychicDither::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdatePsychicDither
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_UpdatePsychicDither final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdatePsychicDither) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdatePsychicDither");
static_assert(sizeof(RSBattlePlayer_C_UpdatePsychicDither) == 0x000001, "Wrong size on RSBattlePlayer_C_UpdatePsychicDither");
static_assert(offsetof(RSBattlePlayer_C_UpdatePsychicDither, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_UpdatePsychicDither::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginDriveSequence
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_BeginDriveSequence final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginDriveSequence) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginDriveSequence");
static_assert(sizeof(RSBattlePlayer_C_BeginDriveSequence) == 0x000004, "Wrong size on RSBattlePlayer_C_BeginDriveSequence");
static_assert(offsetof(RSBattlePlayer_C_BeginDriveSequence, bSuccess) == 0x000000, "Member 'RSBattlePlayer_C_BeginDriveSequence::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginDriveSequence, LbSuccess) == 0x000001, "Member 'RSBattlePlayer_C_BeginDriveSequence::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginDriveSequence, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_BeginDriveSequence::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginDriveSequence, CallFunc_SetInvalidDamage_Dummy) == 0x000003, "Member 'RSBattlePlayer_C_BeginDriveSequence::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndDriveSequence
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_EndDriveSequence final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbSuccess;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndDriveSequence) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndDriveSequence");
static_assert(sizeof(RSBattlePlayer_C_EndDriveSequence) == 0x000005, "Wrong size on RSBattlePlayer_C_EndDriveSequence");
static_assert(offsetof(RSBattlePlayer_C_EndDriveSequence, bSuccess) == 0x000000, "Member 'RSBattlePlayer_C_EndDriveSequence::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndDriveSequence, LbSuccess) == 0x000001, "Member 'RSBattlePlayer_C_EndDriveSequence::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndDriveSequence, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_EndDriveSequence::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndDriveSequence, CallFunc_IsControlAI_bAI) == 0x000003, "Member 'RSBattlePlayer_C_EndDriveSequence::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndDriveSequence, CallFunc_SetInvalidDamage_Dummy) == 0x000004, "Member 'RSBattlePlayer_C_EndDriveSequence::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangedBondsLevel
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_OnChangedBondsLevel final
{
public:
	EPlayerID                                     TargetID;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B13[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewLevel;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASKindFromPlayerID_SAS;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B14[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplySasEffectPassive_bDummy;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangedBondsLevel) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnChangedBondsLevel");
static_assert(sizeof(RSBattlePlayer_C_OnChangedBondsLevel) == 0x000014, "Wrong size on RSBattlePlayer_C_OnChangedBondsLevel");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, TargetID) == 0x000000, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::TargetID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, NewLevel) == 0x000004, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::NewLevel' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, CallFunc_GetSASKindFromPlayerID_SAS) == 0x000008, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::CallFunc_GetSASKindFromPlayerID_SAS' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, CallFunc_Conv_IntToByte_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, CallFunc_GetValidValue_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedBondsLevel, CallFunc_ApplySasEffectPassive_bDummy) == 0x000012, "Member 'RSBattlePlayer_C_OnChangedBondsLevel::CallFunc_ApplySasEffectPassive_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSeeThroughSetting
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetSeeThroughSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B15[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetSeeThroughSetting) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetSeeThroughSetting");
static_assert(sizeof(RSBattlePlayer_C_SetSeeThroughSetting) == 0x000010, "Wrong size on RSBattlePlayer_C_SetSeeThroughSetting");
static_assert(offsetof(RSBattlePlayer_C_SetSeeThroughSetting, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetSeeThroughSetting::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSeeThroughSetting, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetSeeThroughSetting::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSeeThroughSetting, bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_SetSeeThroughSetting::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoHPEvent
// 0x0278 (0x0278 - 0x0000)
struct RSBattlePlayer_C_DoHPEvent final
{
public:
	int32                                         NewHP;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevHP;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B16[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LEnpcDyingRate;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsEnpc;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B17[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LPrevHpRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNewHpRate;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoHPEvent_bDummy;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B18[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcDyingHpRate_EnpcDyingHpRate;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFinishActorBeginPlay_ReturnValue;       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0040(0x01F8)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x023E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x023F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0246(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0247(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B19[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_4;       // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_5;       // 0x0253(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_6;       // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_7;       // 0x0257(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1A[0x2];                                     // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DoHPEvent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DoHPEvent");
static_assert(sizeof(RSBattlePlayer_C_DoHPEvent) == 0x000278, "Wrong size on RSBattlePlayer_C_DoHPEvent");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, NewHP) == 0x000000, "Member 'RSBattlePlayer_C_DoHPEvent::NewHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, PrevHP) == 0x000004, "Member 'RSBattlePlayer_C_DoHPEvent::PrevHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_DoHPEvent::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, LEnpcDyingRate) == 0x00000C, "Member 'RSBattlePlayer_C_DoHPEvent::LEnpcDyingRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, LIsEnpc) == 0x000010, "Member 'RSBattlePlayer_C_DoHPEvent::LIsEnpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, LPrevHpRate) == 0x000014, "Member 'RSBattlePlayer_C_DoHPEvent::LPrevHpRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, LNewHpRate) == 0x000018, "Member 'RSBattlePlayer_C_DoHPEvent::LNewHpRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_DoHPEvent_bDummy) == 0x000028, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_DoHPEvent_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_GetEnpcDyingHpRate_EnpcDyingHpRate) == 0x000038, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_GetEnpcDyingHpRate_EnpcDyingHpRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_IsFinishActorBeginPlay_ReturnValue) == 0x00003D, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_IsFinishActorBeginPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_GetPlayerID_ReturnValue) == 0x00003E, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003F, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000238, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000239, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_BooleanAND_ReturnValue) == 0x00023A, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00023B, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00023C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00023D, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_BooleanAND_ReturnValue_1) == 0x00023E, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Less_FloatFloat_ReturnValue) == 0x00023F, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_BooleanAND_ReturnValue_2) == 0x000240, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000241, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000242, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_BooleanAND_ReturnValue_3) == 0x000243, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000244, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x000245, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000246, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000247, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_IsControlAI_bAI) == 0x000248, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_SelectFloat_ReturnValue) == 0x00024C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000250, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_4) == 0x000251, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000252, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_5) == 0x000253, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000254, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_6) == 0x000255, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x000256, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_LessEqual_FloatFloat_ReturnValue_7) == 0x000257, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_LessEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Greater_IntInt_ReturnValue) == 0x000258, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000259, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00025C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000260, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_GetMaxHP_MaxHP) == 0x000264, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000268, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00026C, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoHPEvent, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000270, "Member 'RSBattlePlayer_C_DoHPEvent::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEquipSAS
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnEquipSAS final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Kind;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnEquipSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEquipSAS");
static_assert(sizeof(RSBattlePlayer_C_OnEquipSAS) == 0x000002, "Wrong size on RSBattlePlayer_C_OnEquipSAS");
static_assert(offsetof(RSBattlePlayer_C_OnEquipSAS, Button) == 0x000000, "Member 'RSBattlePlayer_C_OnEquipSAS::Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEquipSAS, Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnEquipSAS::Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SASCancelAll
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_SASCancelAll final
{
public:
	bool                                          bCancelCost;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1D[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1F[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     K2Node_DynamicCast_AsBPI_SASManager;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelSAS_Success;                        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SASCancelAll) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SASCancelAll");
static_assert(sizeof(RSBattlePlayer_C_SASCancelAll) == 0x000048, "Wrong size on RSBattlePlayer_C_SASCancelAll");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, bCancelCost) == 0x000000, "Member 'RSBattlePlayer_C_SASCancelAll::bCancelCost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, Temp_int_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SASCancelAll::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, Temp_int_Variable_1) == 0x000008, "Member 'RSBattlePlayer_C_SASCancelAll::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000016, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_IsControlAI_bAI) == 0x00001C, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_GetSASManager_SAS_Manager) == 0x000020, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_MakeLiteralInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, K2Node_DynamicCast_AsBPI_SASManager) == 0x000030, "Member 'RSBattlePlayer_C_SASCancelAll::K2Node_DynamicCast_AsBPI_SASManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattlePlayer_C_SASCancelAll::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_CancelSAS_Success) == 0x000042, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_CancelSAS_Success' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelAll, CallFunc_IsValid_ReturnValue) == 0x000043, "Member 'RSBattlePlayer_C_SASCancelAll::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveGaugeMax
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnDriveGaugeMax final
{
public:
	ENotifyDriveEvent                             Reason;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDriveGaugeMax) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnDriveGaugeMax");
static_assert(sizeof(RSBattlePlayer_C_OnDriveGaugeMax) == 0x000002, "Wrong size on RSBattlePlayer_C_OnDriveGaugeMax");
static_assert(offsetof(RSBattlePlayer_C_OnDriveGaugeMax, Reason) == 0x000000, "Member 'RSBattlePlayer_C_OnDriveGaugeMax::Reason' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveGaugeMax, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnDriveGaugeMax::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RegisterInVisionFog
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_RegisterInVisionFog final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RegisterInVisionFog) == 0x000004, "Wrong alignment on RSBattlePlayer_C_RegisterInVisionFog");
static_assert(sizeof(RSBattlePlayer_C_RegisterInVisionFog) == 0x000010, "Wrong size on RSBattlePlayer_C_RegisterInVisionFog");
static_assert(offsetof(RSBattlePlayer_C_RegisterInVisionFog, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_RegisterInVisionFog::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterInVisionFog, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_RegisterInVisionFog::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterInVisionFog, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_RegisterInVisionFog::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterInVisionFog
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_UnregisterInVisionFog final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPrevEnable;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UnregisterInVisionFog) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UnregisterInVisionFog");
static_assert(sizeof(RSBattlePlayer_C_UnregisterInVisionFog) == 0x000010, "Wrong size on RSBattlePlayer_C_UnregisterInVisionFog");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, LbPrevEnable) == 0x000008, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::LbPrevEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000B, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UnregisterInVisionFog, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x00000C, "Member 'RSBattlePlayer_C_UnregisterInVisionFog::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeWireNeon
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_InitializeWireNeon final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B20[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B21[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B22[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWireNeon                              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0038)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B23[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializeWireNeon) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeWireNeon");
static_assert(sizeof(RSBattlePlayer_C_InitializeWireNeon) == 0x000070, "Wrong size on RSBattlePlayer_C_InitializeWireNeon");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_InitializeWireNeon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_InitializeWireNeon::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_InitializeWireNeon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeWireNeon, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'RSBattlePlayer_C_InitializeWireNeon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWireNeon
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetWireNeon final
{
public:
	EWireNeonPlayerState                          NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForce;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B24[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LIndex;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetWireNeon) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetWireNeon");
static_assert(sizeof(RSBattlePlayer_C_SetWireNeon) == 0x000010, "Wrong size on RSBattlePlayer_C_SetWireNeon");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, NewState) == 0x000000, "Member 'RSBattlePlayer_C_SetWireNeon::NewState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, bForce) == 0x000001, "Member 'RSBattlePlayer_C_SetWireNeon::bForce' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, LIndex) == 0x000004, "Member 'RSBattlePlayer_C_SetWireNeon::LIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetWireNeon::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetWireNeon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWireNeon, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_SetWireNeon::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeBattleParticle
// 0x0088 (0x0088 - 0x0000)
struct RSBattlePlayer_C_InitializeBattleParticle final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B25[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B26[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B27[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B28[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPlayerBattleParticleData             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0048)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B29[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializeBattleParticle) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeBattleParticle");
static_assert(sizeof(RSBattlePlayer_C_InitializeBattleParticle) == 0x000088, "Wrong size on RSBattlePlayer_C_InitializeBattleParticle");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_InitializeBattleParticle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_InitializeBattleParticle::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_SetBattleParticleType_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_InitializeBattleParticle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeBattleParticle, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_InitializeBattleParticle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleParticleColor
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_SetBattleParticleColor final
{
public:
	struct FFPlayerBattleParticleData             Data;                                              // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetBattleParticleColor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBattleParticleColor");
static_assert(sizeof(RSBattlePlayer_C_SetBattleParticleColor) == 0x000048, "Wrong size on RSBattlePlayer_C_SetBattleParticleColor");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleColor, Data) == 0x000000, "Member 'RSBattlePlayer_C_SetBattleParticleColor::Data' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAnimNotifyCondition
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetAnimNotifyCondition final
{
public:
	int32                                         ConditionNo;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetAnimNotifyCondition) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetAnimNotifyCondition");
static_assert(sizeof(RSBattlePlayer_C_GetAnimNotifyCondition) == 0x000008, "Wrong size on RSBattlePlayer_C_GetAnimNotifyCondition");
static_assert(offsetof(RSBattlePlayer_C_GetAnimNotifyCondition, ConditionNo) == 0x000000, "Member 'RSBattlePlayer_C_GetAnimNotifyCondition::ConditionNo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimNotifyCondition, Result) == 0x000004, "Member 'RSBattlePlayer_C_GetAnimNotifyCondition::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimNotifyCondition, CallFunc_IsControlAI_bAI) == 0x000005, "Member 'RSBattlePlayer_C_GetAnimNotifyCondition::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimNotifyCondition, K2Node_SwitchInteger_CmpSuccess) == 0x000006, "Member 'RSBattlePlayer_C_GetAnimNotifyCondition::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAnimNotifyCondition, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_GetAnimNotifyCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SpawnForceBrainTalkModeParticle
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SpawnForceBrainTalkModeParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B2A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SpawnForceBrainTalkModeParticle) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SpawnForceBrainTalkModeParticle");
static_assert(sizeof(RSBattlePlayer_C_SpawnForceBrainTalkModeParticle) == 0x000010, "Wrong size on RSBattlePlayer_C_SpawnForceBrainTalkModeParticle");
static_assert(offsetof(RSBattlePlayer_C_SpawnForceBrainTalkModeParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SpawnForceBrainTalkModeParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnForceBrainTalkModeParticle, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SpawnForceBrainTalkModeParticle::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DestroyForceBrainTalkModeParticle
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DestroyForceBrainTalkModeParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DestroyForceBrainTalkModeParticle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DestroyForceBrainTalkModeParticle");
static_assert(sizeof(RSBattlePlayer_C_DestroyForceBrainTalkModeParticle) == 0x000001, "Wrong size on RSBattlePlayer_C_DestroyForceBrainTalkModeParticle");
static_assert(offsetof(RSBattlePlayer_C_DestroyForceBrainTalkModeParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DestroyForceBrainTalkModeParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCapsuleSize
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCapsuleSize final
{
public:
	EPlayerCapsuleSize                            Size;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B2B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRadius;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCapsuleSize                            Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B2C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCapsuleSize) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerCapsuleSize");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCapsuleSize) == 0x000018, "Wrong size on RSBattlePlayer_C_SetPlayerCapsuleSize");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, Size) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::Size' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, LRadius) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::LRadius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, Temp_byte_Variable) == 0x000008, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, Temp_float_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, Temp_float_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCapsuleSize, K2Node_Select_Default) == 0x000014, "Member 'RSBattlePlayer_C_SetPlayerCapsuleSize::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DeactivateBattleParticle
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_DeactivateBattleParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DeactivateBattleParticle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DeactivateBattleParticle");
static_assert(sizeof(RSBattlePlayer_C_DeactivateBattleParticle) == 0x000003, "Wrong size on RSBattlePlayer_C_DeactivateBattleParticle");
static_assert(offsetof(RSBattlePlayer_C_DeactivateBattleParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DeactivateBattleParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DeactivateBattleParticle, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'RSBattlePlayer_C_DeactivateBattleParticle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DeactivateBattleParticle, CallFunc_IsValid_ReturnValue_2) == 0x000002, "Member 'RSBattlePlayer_C_DeactivateBattleParticle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DelayDeactivateBattleParticle
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_DelayDeactivateBattleParticle final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B2D[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DelayDeactivateBattleParticle) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DelayDeactivateBattleParticle");
static_assert(sizeof(RSBattlePlayer_C_DelayDeactivateBattleParticle) == 0x00000C, "Wrong size on RSBattlePlayer_C_DelayDeactivateBattleParticle");
static_assert(offsetof(RSBattlePlayer_C_DelayDeactivateBattleParticle, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_DelayDeactivateBattleParticle::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DelayDeactivateBattleParticle, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_DelayDeactivateBattleParticle::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DelayDeactivateBattleParticle, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_DelayDeactivateBattleParticle::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DelayDeactivateBattleParticle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_DelayDeactivateBattleParticle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeDriveParameter
// 0x00E0 (0x00E0 - 0x0000)
struct RSBattlePlayer_C_InitializeDriveParameter final
{
public:
	struct FPlayerDriveCommonParameter            CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x0030)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpened_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B2E[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerDriveGaugeParameter             CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0038(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B2F[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetDriveParameterName_Name;               // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B30[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerDriveParameter                  CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x0098(0x0040)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeDriveParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeDriveParameter");
static_assert(sizeof(RSBattlePlayer_C_InitializeDriveParameter) == 0x0000E0, "Wrong size on RSBattlePlayer_C_InitializeDriveParameter");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_IsContentsOpened_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_IsContentsOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000038, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000088, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDriveParameterName_Name) == 0x00008C, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDriveParameterName_Name' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x000098, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDriveParameter, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0000D8, "Member 'RSBattlePlayer_C_InitializeDriveParameter::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoTalkEventEnd
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_DoTalkEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndTalkLookAtTurn_bDummy;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTalkEventEnd_bDummy;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoTalkEventEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DoTalkEventEnd");
static_assert(sizeof(RSBattlePlayer_C_DoTalkEventEnd) == 0x000003, "Wrong size on RSBattlePlayer_C_DoTalkEventEnd");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoTalkEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventEnd, CallFunc_EndTalkLookAtTurn_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_DoTalkEventEnd::CallFunc_EndTalkLookAtTurn_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventEnd, CallFunc_DoTalkEventEnd_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_DoTalkEventEnd::CallFunc_DoTalkEventEnd_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldOpenStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldOpenStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B31[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldOpenStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldOpenStart");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldOpenStart) == 0x000018, "Wrong size on RSBattlePlayer_C_OnBrainFieldOpenStart");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldOpenStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenStart, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000008, "Member 'RSBattlePlayer_C_OnBrainFieldOpenStart::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldOpenStart, CallFunc_IsPlayerStatus_Result) == 0x000010, "Member 'RSBattlePlayer_C_OnBrainFieldOpenStart::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputTriggerAssassinAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_InputTriggerAssassinAttack final
{
public:
	bool                                          CallFunc_InputAttack_return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputTriggerAssassinAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputTriggerAssassinAttack");
static_assert(sizeof(RSBattlePlayer_C_InputTriggerAssassinAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_InputTriggerAssassinAttack");
static_assert(offsetof(RSBattlePlayer_C_InputTriggerAssassinAttack, CallFunc_InputAttack_return) == 0x000000, "Member 'RSBattlePlayer_C_InputTriggerAssassinAttack::CallFunc_InputAttack_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetActiveSASNum
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetActiveSASNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetActiveSASNum) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetActiveSASNum");
static_assert(sizeof(RSBattlePlayer_C_GetActiveSASNum) == 0x000004, "Wrong size on RSBattlePlayer_C_GetActiveSASNum");
static_assert(offsetof(RSBattlePlayer_C_GetActiveSASNum, Num) == 0x000000, "Member 'RSBattlePlayer_C_GetActiveSASNum::Num' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveNotifyBrainFieldStock
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnDriveNotifyBrainFieldStock final
{
public:
	int32                                         InNum;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bItemUse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoEffect;                                         // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B32[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnDriveNotifyBrainFieldStock");
static_assert(sizeof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock) == 0x000020, "Wrong size on RSBattlePlayer_C_OnDriveNotifyBrainFieldStock");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, InNum) == 0x000000, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::InNum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, bItemUse) == 0x000004, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::bItemUse' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, bNoEffect) == 0x000005, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::bNoEffect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, bDummy) == 0x000006, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000019, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnDriveNotifyBrainFieldStock, CallFunc_IsControlAI_bAI) == 0x00001A, "Member 'RSBattlePlayer_C_OnDriveNotifyBrainFieldStock::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventSprint
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEventSprint final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventSprint) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEventSprint");
static_assert(sizeof(RSBattlePlayer_C_SetEventSprint) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEventSprint");
static_assert(offsetof(RSBattlePlayer_C_SetEventSprint, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEventSprint::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemSelect
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerItemSelect final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B33[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrecedeInputUseItem_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerItemSelect) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerItemSelect");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerItemSelect) == 0x000018, "Wrong size on RSBattlePlayer_C_OnInputTriggerItemSelect");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemSelect, bRight) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerItemSelect::bRight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemSelect, CallFunc_GetCurrentActionState_Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerItemSelect::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemSelect, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerItemSelect::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemSelect, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerItemSelect::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerItemSelect, CallFunc_IsPrecedeInputUseItem_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerItemSelect::CallFunc_IsPrecedeInputUseItem_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnPossesController
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnPossesController final
{
public:
	class AController*                            Param_Controller;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ResumePlayer_bResume;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B34[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnPossesController) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnPossesController");
static_assert(sizeof(RSBattlePlayer_C_OnPossesController) == 0x000020, "Wrong size on RSBattlePlayer_C_OnPossesController");
static_assert(offsetof(RSBattlePlayer_C_OnPossesController, Param_Controller) == 0x000000, "Member 'RSBattlePlayer_C_OnPossesController::Param_Controller' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPossesController, CallFunc_ResumePlayer_bResume) == 0x000008, "Member 'RSBattlePlayer_C_OnPossesController::CallFunc_ResumePlayer_bResume' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPossesController, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnPossesController::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnPossesController, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnPossesController::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnUnpossesController
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnUnpossesController final
{
public:
	class AController*                            Param_Controller;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SuspendPlayer_bSuspend;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B35[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnUnpossesController) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnUnpossesController");
static_assert(sizeof(RSBattlePlayer_C_OnUnpossesController) == 0x000020, "Wrong size on RSBattlePlayer_C_OnUnpossesController");
static_assert(offsetof(RSBattlePlayer_C_OnUnpossesController, Param_Controller) == 0x000000, "Member 'RSBattlePlayer_C_OnUnpossesController::Param_Controller' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUnpossesController, CallFunc_SuspendPlayer_bSuspend) == 0x000008, "Member 'RSBattlePlayer_C_OnUnpossesController::CallFunc_SuspendPlayer_bSuspend' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUnpossesController, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnUnpossesController::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUnpossesController, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnUnpossesController::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAreaChange
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_OnAreaChange final
{
public:
	bool                                          bChangeLocation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B36[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationRestaurant_InAjito;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationAjito_InAjito;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleReady_bDummy;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetCollisionOverlap_bDummy;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B37[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B38[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnAreaChange) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAreaChange");
static_assert(sizeof(RSBattlePlayer_C_OnAreaChange) == 0x000028, "Wrong size on RSBattlePlayer_C_OnAreaChange");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, bChangeLocation) == 0x000000, "Member 'RSBattlePlayer_C_OnAreaChange::bChangeLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnAreaChange::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_GetSceneManager_SceneManager) == 0x000008, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_IsLocationRestaurant_InAjito) == 0x000010, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_IsLocationRestaurant_InAjito' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_IsLocationAjito_InAjito) == 0x000011, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_IsLocationAjito_InAjito' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_IsControlAI_bAI) == 0x000012, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_SetBattleReady_bDummy) == 0x000014, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_SetBattleReady_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_ResetCollisionOverlap_bDummy) == 0x000015, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_ResetCollisionOverlap_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_GetMaxHP_MaxHP) == 0x000018, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_SetHP_bDummy) == 0x00001C, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChange, CallFunc_GetBrainCrashManager_Manager) == 0x000020, "Member 'RSBattlePlayer_C_OnAreaChange::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeDataTable
// 0x0328 (0x0328 - 0x0000)
struct RSBattlePlayer_C_InitializeDataTable final
{
public:
	TArray<struct FBrainFieldPsychicGaugeDirectionData> LPsychicGaugeData;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FNpcDriveData                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B39[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerBrainFieldData                  CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0068(0x0030)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3A[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendLotData                         CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x00A0(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3B[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendLotData                         CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x00F8(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3C[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendLotData                         CallFunc_GetDataTableRowFromName_OutRow_4;         // 0x0150(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_4;    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3D[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3E[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x01B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B3F[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrainFieldPsychicGaugeDirectionData   CallFunc_GetDataTableRowFromName_OutRow_5;         // 0x01D0(0x0018)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_5;    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B40[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B41[0x2];                                     // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x01FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B42[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerBrainFieldData                  CallFunc_GetDataTableRowFromName_OutRow_6;         // 0x0208(0x0030)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_6;    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B43[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerBrainFieldHelpData              CallFunc_GetDataTableRowFromName_OutRow_7;         // 0x0240(0x00A8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_7;    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B44[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B45[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFCombinationVisionData                CallFunc_GetDataTableRowFromName_OutRow_8;         // 0x02F8(0x002C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_8;    // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeDataTable) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeDataTable");
static_assert(sizeof(RSBattlePlayer_C_InitializeDataTable) == 0x000328, "Wrong size on RSBattlePlayer_C_InitializeDataTable");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, LPsychicGaugeData) == 0x000000, "Member 'RSBattlePlayer_C_InitializeDataTable::LPsychicGaugeData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000068, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000098, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x0000A0, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0000F0, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x0000F8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x000148, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_4) == 0x000150, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_4) == 0x0001A0, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_int_Array_Index_Variable) == 0x0001A4, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_int_Loop_Num_Variable) == 0x0001A8, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_name_Variable) == 0x0001AC, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_bool_Variable) == 0x0001B4, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0001B8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_Array_Length_ReturnValue) == 0x0001C8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_5) == 0x0001D0, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_5) == 0x0001E8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_Array_Add_ReturnValue) == 0x0001EC, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_name_Variable_1) == 0x0001F0, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetPlayerID_ReturnValue) == 0x0001F8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001F9, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, K2Node_Select_Default) == 0x0001FC, "Member 'RSBattlePlayer_C_InitializeDataTable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_6) == 0x000208, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_6) == 0x000238, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_7) == 0x000240, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_7) == 0x0002E8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, Temp_int_Loop_Counter_Variable) == 0x0002EC, "Member 'RSBattlePlayer_C_InitializeDataTable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_Less_IntInt_ReturnValue) == 0x0002F0, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_Add_IntInt_ReturnValue) == 0x0002F4, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_OutRow_8) == 0x0002F8, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_OutRow_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeDataTable, CallFunc_GetDataTableRowFromName_ReturnValue_8) == 0x000324, "Member 'RSBattlePlayer_C_InitializeDataTable::CallFunc_GetDataTableRowFromName_ReturnValue_8' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCapsuleCollisionPreset
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_SetCapsuleCollisionPreset final
{
public:
	bool                                          bNpc;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B46[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCapsuleCollisionPreset) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetCapsuleCollisionPreset");
static_assert(sizeof(RSBattlePlayer_C_SetCapsuleCollisionPreset) == 0x000020, "Wrong size on RSBattlePlayer_C_SetCapsuleCollisionPreset");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, bNpc) == 0x000000, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::bNpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, Temp_name_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, Temp_name_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, K2Node_Select_Default) == 0x000014, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCapsuleCollisionPreset, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00001C, "Member 'RSBattlePlayer_C_SetCapsuleCollisionPreset::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveBrainFieldOther
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther final
{
public:
	bool                                          bFriendField;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ForceFinishMetamorphosis_Dummy;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetAction_bReset;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetStatus_Dummy;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther) == 0x000007, "Wrong size on RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, bFriendField) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::bFriendField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, CallFunc_ForceFinishMetamorphosis_Dummy) == 0x000002, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::CallFunc_ForceFinishMetamorphosis_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, CallFunc_OnEnemyBrainFieldResetAction_bReset) == 0x000003, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::CallFunc_OnEnemyBrainFieldResetAction_bReset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy) == 0x000004, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, CallFunc_OnEnemyBrainFieldResetStatus_Dummy) == 0x000005, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::CallFunc_OnEnemyBrainFieldResetStatus_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveNormalFieldOther
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther final
{
public:
	bool                                          bFriendField;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B47[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnEnemyBrainFieldResetAction_bReset;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy;      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther");
static_assert(sizeof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther) == 0x000020, "Wrong size on RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, bFriendField) == 0x000000, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::bFriendField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, CallFunc_Add_VectorVector_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, CallFunc_OnEnemyBrainFieldResetAction_bReset) == 0x00001C, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::CallFunc_OnEnemyBrainFieldResetAction_bReset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy) == 0x00001D, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther, CallFunc_IsValid_ReturnValue) == 0x00001E, "Member 'RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAsyncParameter
// 0x0148 (0x0148 - 0x0000)
struct RSBattlePlayer_C_SetAsyncParameter final
{
public:
	struct FVector                                LInputDir;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCheckDir;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LTargetRadius;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LTargetLocation;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbCheckTarget;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B48[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTarget;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAsyncCopyParameter_bCheckCopy;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B49[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAsyncCopyParameter_Right;              // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAsyncCopyParameter_Left;               // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcInputWorldVector_ReturnValue;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4A[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B4B[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B4C[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerAsyncParameter                  K2Node_MakeStruct_PlayerAsyncParameter;            // 0x0098(0x00A8)(NoDestructor)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetAsyncParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetAsyncParameter");
static_assert(sizeof(RSBattlePlayer_C_SetAsyncParameter) == 0x000148, "Wrong size on RSBattlePlayer_C_SetAsyncParameter");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LInputDir) == 0x000000, "Member 'RSBattlePlayer_C_SetAsyncParameter::LInputDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LCheckDir) == 0x00000C, "Member 'RSBattlePlayer_C_SetAsyncParameter::LCheckDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LTargetRadius) == 0x000018, "Member 'RSBattlePlayer_C_SetAsyncParameter::LTargetRadius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LTargetLocation) == 0x00001C, "Member 'RSBattlePlayer_C_SetAsyncParameter::LTargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LbCheckTarget) == 0x000028, "Member 'RSBattlePlayer_C_SetAsyncParameter::LbCheckTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, LTarget) == 0x000030, "Member 'RSBattlePlayer_C_SetAsyncParameter::LTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000038, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetAsyncCopyParameter_bCheckCopy) == 0x000039, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetAsyncCopyParameter_bCheckCopy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetAsyncCopyParameter_Right) == 0x00003C, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetAsyncCopyParameter_Right' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetAsyncCopyParameter_Left) == 0x000048, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetAsyncCopyParameter_Left' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_CalcInputWorldVector_ReturnValue) == 0x000054, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_CalcInputWorldVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000070, "Member 'RSBattlePlayer_C_SetAsyncParameter::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'RSBattlePlayer_C_SetAsyncParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetCapsuleRadius_Radius) == 0x000084, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetActorForwardVector_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_IsValid_ReturnValue_1) == 0x000094, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_IsActionStatus_Result) == 0x000095, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, K2Node_MakeStruct_PlayerAsyncParameter) == 0x000098, "Member 'RSBattlePlayer_C_SetAsyncParameter::K2Node_MakeStruct_PlayerAsyncParameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAsyncParameter, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000140, "Member 'RSBattlePlayer_C_SetAsyncParameter::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCrashDamage
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetBrainCrashDamage final
{
public:
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventEndDown_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B4D[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo;                 // 0x0018(0x0008)(NoDestructor)
	int32                                         CallFunc_CalculateBrainCrashDamage_damage;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBrainCrashDamage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBrainCrashDamage");
static_assert(sizeof(RSBattlePlayer_C_SetBrainCrashDamage) == 0x000028, "Wrong size on RSBattlePlayer_C_SetBrainCrashDamage");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000000, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_SetEventEndDown_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_SetEventEndDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_GetPlayerPawn_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, K2Node_MakeStruct_HCHitEffectInfo) == 0x000018, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::K2Node_MakeStruct_HCHitEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_CalculateBrainCrashDamage_damage) == 0x000020, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_CalculateBrainCrashDamage_damage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashDamage, CallFunc_IsDead_bDead) == 0x000024, "Member 'RSBattlePlayer_C_SetBrainCrashDamage::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAttachment
// 0x00D4 (0x00D4 - 0x0000)
struct RSBattlePlayer_C_UpdateAttachment final
{
public:
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0004(0x00D0)(NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateAttachment) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateAttachment");
static_assert(sizeof(RSBattlePlayer_C_UpdateAttachment) == 0x0000D4, "Wrong size on RSBattlePlayer_C_UpdateAttachment");
static_assert(offsetof(RSBattlePlayer_C_UpdateAttachment, CallFunc_GetPlayerID_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_UpdateAttachment::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateAttachment, CallFunc_GetPlayerID_ReturnValue_1) == 0x000001, "Member 'RSBattlePlayer_C_UpdateAttachment::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateAttachment, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_UpdateAttachment::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventRevivePlayer
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_EventRevivePlayer final
{
public:
	bool                                          CallFunc_RevivePlayer_bSuccess;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EventRevivePlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EventRevivePlayer");
static_assert(sizeof(RSBattlePlayer_C_EventRevivePlayer) == 0x000003, "Wrong size on RSBattlePlayer_C_EventRevivePlayer");
static_assert(offsetof(RSBattlePlayer_C_EventRevivePlayer, CallFunc_RevivePlayer_bSuccess) == 0x000000, "Member 'RSBattlePlayer_C_EventRevivePlayer::CallFunc_RevivePlayer_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventRevivePlayer, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000001, "Member 'RSBattlePlayer_C_EventRevivePlayer::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventRevivePlayer, CallFunc_IsDead_bDead) == 0x000002, "Member 'RSBattlePlayer_C_EventRevivePlayer::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AfterInitialize
// 0x0210 (0x0210 - 0x0000)
struct RSBattlePlayer_C_AfterInitialize final
{
public:
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationRestaurant_InAjito;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationAjito_InAjito;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4F[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0010(0x01F8)()
	bool                                          CallFunc_ResetCollisionOverlap_bDummy;             // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AfterInitialize) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AfterInitialize");
static_assert(sizeof(RSBattlePlayer_C_AfterInitialize) == 0x000210, "Wrong size on RSBattlePlayer_C_AfterInitialize");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_GetSceneManager_SceneManager) == 0x000000, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_IsLocationRestaurant_InAjito) == 0x000008, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_IsLocationRestaurant_InAjito' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_IsLocationAjito_InAjito) == 0x000009, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_IsLocationAjito_InAjito' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_GetPlayerID_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AfterInitialize, CallFunc_ResetCollisionOverlap_bDummy) == 0x000208, "Member 'RSBattlePlayer_C_AfterInitialize::CallFunc_ResetCollisionOverlap_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveBegin_RotateTarget
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_AttackMoveBegin_RotateTarget final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   EaseType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B50[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseBlendExp;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B51[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LDotValue;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LTargetDir;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B52[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetLocationHistory_ReturnValue;           // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B53[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AttackMoveBegin_RotateTarget");
static_assert(sizeof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget) == 0x000078, "Wrong size on RSBattlePlayer_C_AttackMoveBegin_RotateTarget");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, Distance) == 0x000000, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, Time) == 0x000004, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, EaseType) == 0x000008, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::EaseType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, EaseBlendExp) == 0x00000C, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::EaseBlendExp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, bSuccess) == 0x000010, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, LDotValue) == 0x000014, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::LDotValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, LTargetDir) == 0x000018, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::LTargetDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, LbSuccess) == 0x000024, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_GetLocationHistory_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_GetLocationHistory_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_Array_LastIndex_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_BreakVector_X) == 0x000050, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_BreakVector_Y) == 0x000054, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_BreakVector_Z) == 0x000058, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_MakeVector_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_RotateTarget, CallFunc_Normal_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_AttackMoveBegin_RotateTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveUpdate_RotateCircle
// 0x0140 (0x0140 - 0x0000)
struct RSBattlePlayer_C_AttackMoveUpdate_RotateCircle final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnd;                                             // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B54[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LMoveDir;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LMoveDistance;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B55[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B56[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B57[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcRate_Rate;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AttackMoveUpdate_RotateCircle");
static_assert(sizeof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle) == 0x000140, "Wrong size on RSBattlePlayer_C_AttackMoveUpdate_RotateCircle");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, bEnd) == 0x000004, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::bEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, LbEnd) == 0x000005, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::LbEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, LMoveDir) == 0x000008, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::LMoveDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, LMoveDistance) == 0x000014, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::LMoveDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, Temp_float_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, Temp_bool_Variable) == 0x000030, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000034, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000BC, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_GetCurrentTargetActor_TargetActor) == 0x0000C8, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000D4, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_BreakVector_X) == 0x0000EC, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_BreakVector_Z) == 0x0000F4, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_MakeVector_ReturnValue) == 0x0000F8, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Normal_ReturnValue) == 0x000104, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, Temp_float_Variable_1) == 0x000110, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, K2Node_Select_Default) == 0x000114, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_CalcRate_Rate) == 0x000118, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_CalcRate_Rate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_MakeRotator_ReturnValue) == 0x00011C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Ease_ReturnValue) == 0x000128, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00012C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_Add_FloatFloat_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_RotateCircle, CallFunc_FMin_ReturnValue) == 0x00013C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_RotateCircle::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateIconOn
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_BadStateIconOn final
{
public:
	struct FBadStateAddParticleData               Data;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Handle;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LHandle;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_BadStateIconOn_Handle;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDispStealthEffect_bOutDisp;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B58[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_BadStateIconOn_Handle_1;                  // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BadStateIconOn) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BadStateIconOn");
static_assert(sizeof(RSBattlePlayer_C_BadStateIconOn) == 0x000050, "Wrong size on RSBattlePlayer_C_BadStateIconOn");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, Data) == 0x000000, "Member 'RSBattlePlayer_C_BadStateIconOn::Data' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, Handle) == 0x000028, "Member 'RSBattlePlayer_C_BadStateIconOn::Handle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, LHandle) == 0x000030, "Member 'RSBattlePlayer_C_BadStateIconOn::LHandle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, CallFunc_BadStateIconOn_Handle) == 0x000038, "Member 'RSBattlePlayer_C_BadStateIconOn::CallFunc_BadStateIconOn_Handle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_BadStateIconOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, CallFunc_IsDispStealthEffect_bOutDisp) == 0x000041, "Member 'RSBattlePlayer_C_BadStateIconOn::CallFunc_IsDispStealthEffect_bOutDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateIconOn, CallFunc_BadStateIconOn_Handle_1) == 0x000048, "Member 'RSBattlePlayer_C_BadStateIconOn::CallFunc_BadStateIconOn_Handle_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSetStealthMode
// 0x000B (0x000B - 0x0000)
struct RSBattlePlayer_C_OnSetStealthMode final
{
public:
	bool                                          bStealth;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnSetStealthMode_bSuccess;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnSetStealthMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnSetStealthMode");
static_assert(sizeof(RSBattlePlayer_C_OnSetStealthMode) == 0x00000B, "Wrong size on RSBattlePlayer_C_OnSetStealthMode");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, bStealth) == 0x000000, "Member 'RSBattlePlayer_C_OnSetStealthMode::bStealth' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, bSuccess) == 0x000001, "Member 'RSBattlePlayer_C_OnSetStealthMode::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_OnSetStealthMode_bSuccess) == 0x000002, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_OnSetStealthMode_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_1) == 0x000004, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_2) == 0x000005, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_3) == 0x000006, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_4) == 0x000008, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_5) == 0x000009, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSetStealthMode, CallFunc_IsValid_ReturnValue_6) == 0x00000A, "Member 'RSBattlePlayer_C_OnSetStealthMode::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnFlame
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOnFlame final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDispStealthEffect_bOutDisp;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlame_bDummy;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOnFlame) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOnFlame");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOnFlame) == 0x000006, "Wrong size on RSBattlePlayer_C_BadStateEffectOnFlame");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, CallFunc_IsDispStealthEffect_bOutDisp) == 0x000004, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::CallFunc_IsDispStealthEffect_bOutDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnFlame, CallFunc_BadStateEffectOnFlame_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_BadStateEffectOnFlame::CallFunc_BadStateEffectOnFlame_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnElec
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_BadStateEffectOnElec final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDispStealthEffect_bOutDisp;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnElec_bDummy;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectOnElec) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateEffectOnElec");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectOnElec) == 0x000006, "Wrong size on RSBattlePlayer_C_BadStateEffectOnElec");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, CallFunc_IsDispStealthEffect_bOutDisp) == 0x000004, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::CallFunc_IsDispStealthEffect_bOutDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectOnElec, CallFunc_BadStateEffectOnElec_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_BadStateEffectOnElec::CallFunc_BadStateEffectOnElec_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAreaChangeFadeOut
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_OnAreaChangeFadeOut final
{
public:
	bool                                          bChangeLocation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B59[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSPlayerCameraManager*                 K2Node_DynamicCast_AsRSPlayer_Camera_Manager;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnAreaChangeFadeOut) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAreaChangeFadeOut");
static_assert(sizeof(RSBattlePlayer_C_OnAreaChangeFadeOut) == 0x000028, "Wrong size on RSBattlePlayer_C_OnAreaChangeFadeOut");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, bChangeLocation) == 0x000000, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::bChangeLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, K2Node_DynamicCast_AsRSPlayer_Camera_Manager) == 0x000010, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::K2Node_DynamicCast_AsRSPlayer_Camera_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAreaChangeFadeOut, CallFunc_MakeLiteralName_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_OnAreaChangeFadeOut::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BindSASStartEventForENPC
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattlePlayer_C_BindSASStartEventForENPC final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPlayerID SAS_PlayerID)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5D[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5E[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5F[0x5];                                     // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_GetEnpcComp_self_CastInput;               // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp_1;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BindSASStartEventForENPC) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BindSASStartEventForENPC");
static_assert(sizeof(RSBattlePlayer_C_BindSASStartEventForENPC) == 0x0000A0, "Wrong size on RSBattlePlayer_C_BindSASStartEventForENPC");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetPlayerID_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetEnpcComp_ReturnComp) == 0x000020, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002A, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_BooleanOR_ReturnValue) == 0x00002B, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetEnemyManager_EnemyManager) == 0x000030, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetEnemyList_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_Array_Get_Item) == 0x000050, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, K2Node_DynamicCast_AsRSBattle_Player) == 0x000060, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_IsValid_ReturnValue_2) == 0x00006A, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetEnpcComp_self_CastInput) == 0x000070, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetEnpcComp_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetEnpcComp_ReturnComp_1) == 0x000080, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetEnpcComp_ReturnComp_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetPlayerID_self_CastInput) == 0x000088, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_GetPlayerID_ReturnValue_1) == 0x000098, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_IsValid_ReturnValue_3) == 0x000099, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00009A, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00009B, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BindSASStartEventForENPC, CallFunc_BooleanOR_ReturnValue_1) == 0x00009C, "Member 'RSBattlePlayer_C_BindSASStartEventForENPC::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartENPCSAS
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_StartENPCSAS final
{
public:
	EPlayerID                                     SAS_PlayerID;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartENPCSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartENPCSAS");
static_assert(sizeof(RSBattlePlayer_C_StartENPCSAS) == 0x000003, "Wrong size on RSBattlePlayer_C_StartENPCSAS");
static_assert(offsetof(RSBattlePlayer_C_StartENPCSAS, SAS_PlayerID) == 0x000000, "Member 'RSBattlePlayer_C_StartENPCSAS::SAS_PlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartENPCSAS, CallFunc_GetPlayerID_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_StartENPCSAS::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartENPCSAS, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_StartENPCSAS::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ChangeWeaponMesh
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_ChangeWeaponMesh final
{
public:
	int32                                         WeaponId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkinID;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B60[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               LWeaponList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B61[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B62[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B63[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ChangeWeaponMesh) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ChangeWeaponMesh");
static_assert(sizeof(RSBattlePlayer_C_ChangeWeaponMesh) == 0x000078, "Wrong size on RSBattlePlayer_C_ChangeWeaponMesh");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, WeaponId) == 0x000000, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::WeaponId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, SkinID) == 0x000004, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::SkinID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, LWeaponList) == 0x000010, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::LWeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Loop_Num_Variable) == 0x000030, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000035, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_SelectInt_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, Temp_int_Loop_Num_Variable_1) == 0x000048, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_GetWeaponList_WeaponList) == 0x000050, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeWeaponMesh, CallFunc_GetWeaponList_WeaponList_1) == 0x000068, "Member 'RSBattlePlayer_C_ChangeWeaponMesh::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeContentsOpen
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_InitializeContentsOpen final
{
public:
	class UFlagManager*                           LFlagManager;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B64[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B65[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B66[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B67[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B68[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EContentsOpening Contents, bool bOpen)> K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B69[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpened_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B6A[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSGameInstance*                        CallFunc_GetRSGameInstance_RSGameInstance;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlagManager*                           CallFunc_GetFlagManager_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializeContentsOpen) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeContentsOpen");
static_assert(sizeof(RSBattlePlayer_C_InitializeContentsOpen) == 0x000078, "Wrong size on RSBattlePlayer_C_InitializeContentsOpen");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, LFlagManager) == 0x000000, "Member 'RSBattlePlayer_C_InitializeContentsOpen::LFlagManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, Temp_int_Variable) == 0x000008, "Member 'RSBattlePlayer_C_InitializeContentsOpen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, Temp_int_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_InitializeContentsOpen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Conv_IntToByte_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_GetValidValue_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000019, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000024, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_MakeLiteralInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, Temp_int_Array_Index_Variable) == 0x000030, "Member 'RSBattlePlayer_C_InitializeContentsOpen::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'RSBattlePlayer_C_InitializeContentsOpen::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000038, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'RSBattlePlayer_C_InitializeContentsOpen::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'RSBattlePlayer_C_InitializeContentsOpen::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Less_IntInt_ReturnValue_1) == 0x000058, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_IsContentsOpened_ReturnValue) == 0x000061, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_IsContentsOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_GetRSGameInstance_RSGameInstance) == 0x000068, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_GetRSGameInstance_RSGameInstance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeContentsOpen, CallFunc_GetFlagManager_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_InitializeContentsOpen::CallFunc_GetFlagManager_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnContentsOpen
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_OnContentsOpen final
{
public:
	EContentsOpening                              Contents;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpen;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B6B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnContentsOpen) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnContentsOpen");
static_assert(sizeof(RSBattlePlayer_C_OnContentsOpen) == 0x000018, "Wrong size on RSBattlePlayer_C_OnContentsOpen");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, Contents) == 0x000000, "Member 'RSBattlePlayer_C_OnContentsOpen::Contents' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, bOpen) == 0x000001, "Member 'RSBattlePlayer_C_OnContentsOpen::bOpen' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'RSBattlePlayer_C_OnContentsOpen::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnContentsOpen::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnContentsOpen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, CallFunc_Not_PreBool_ReturnValue_1) == 0x000015, "Member 'RSBattlePlayer_C_OnContentsOpen::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnContentsOpen, K2Node_SwitchEnum_CmpSuccess) == 0x000016, "Member 'RSBattlePlayer_C_OnContentsOpen::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetPlayerActionState
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_ResetPlayerActionState final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B6C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B6D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_4;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetPlayerActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ResetPlayerActionState");
static_assert(sizeof(RSBattlePlayer_C_ResetPlayerActionState) == 0x000024, "Wrong size on RSBattlePlayer_C_ResetPlayerActionState");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000008, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsBadStatusElectric_bBadStatus) == 0x00000C, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsPlayerStatus_Result) == 0x00000D, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x00000E, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x00000F, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000010, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsActionStatus_Result) == 0x000014, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x000018, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_Conv_ByteToInt_ReturnValue_4) == 0x00001C, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_Conv_ByteToInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsCharacterDead_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsActionStatus_Result_1) == 0x000021, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetPlayerActionState, CallFunc_IsPlayerStatus_Result_1) == 0x000022, "Member 'RSBattlePlayer_C_ResetPlayerActionState::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveBegin_ToTarget
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_AttackMoveBegin_ToTarget final
{
public:
	float                                         MoveTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B6E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MoveTarget;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AttackMoveBegin_ToTarget) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AttackMoveBegin_ToTarget");
static_assert(sizeof(RSBattlePlayer_C_AttackMoveBegin_ToTarget) == 0x000020, "Wrong size on RSBattlePlayer_C_AttackMoveBegin_ToTarget");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_ToTarget, MoveTime) == 0x000000, "Member 'RSBattlePlayer_C_AttackMoveBegin_ToTarget::MoveTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_ToTarget, MoveTarget) == 0x000008, "Member 'RSBattlePlayer_C_AttackMoveBegin_ToTarget::MoveTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveBegin_ToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_AttackMoveBegin_ToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveUpdate_ToTarget
// 0x0198 (0x0198 - 0x0000)
struct RSBattlePlayer_C_AttackMoveUpdate_ToTarget final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAerial;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnd;                                              // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B6F[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LMoveRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEnd;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B70[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0010(0x0040)(ConstParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AttackMove_AerialTargetLocation_MoveLocation; // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B71[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue_1;             // 0x0070(0x0040)(ConstParm)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B72[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B73[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B74[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AttackMoveUpdate_ToTarget");
static_assert(sizeof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget) == 0x000198, "Wrong size on RSBattlePlayer_C_AttackMoveUpdate_ToTarget");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, bAerial) == 0x000004, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::bAerial' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, bEnd) == 0x000005, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::bEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, LMoveRate) == 0x000008, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::LMoveRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, LbEnd) == 0x00000C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::LbEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_GetAsyncResult_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_AttackMove_AerialTargetLocation_MoveLocation) == 0x00005C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_AttackMove_AerialTargetLocation_MoveLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_GetAsyncResult_ReturnValue_1) == 0x000070, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_GetAsyncResult_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_MakeVector_ReturnValue_1) == 0x0000CC, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000D8, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_IsValid_ReturnValue) == 0x0000E4, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000E5, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_FMin_ReturnValue) == 0x0000EC, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F0, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_VEase_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000100, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000188, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00018C, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMoveUpdate_ToTarget, CallFunc_FMin_ReturnValue_1) == 0x000190, "Member 'RSBattlePlayer_C_AttackMoveUpdate_ToTarget::CallFunc_FMin_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCheckChargeTelepo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetCheckChargeTelepo final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCheckChargeTelepo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetCheckChargeTelepo");
static_assert(sizeof(RSBattlePlayer_C_SetCheckChargeTelepo) == 0x000001, "Wrong size on RSBattlePlayer_C_SetCheckChargeTelepo");
static_assert(offsetof(RSBattlePlayer_C_SetCheckChargeTelepo, bCheck) == 0x000000, "Member 'RSBattlePlayer_C_SetCheckChargeTelepo::bCheck' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerSuperArmor
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_SetPlayerSuperArmor final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B75[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B76[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerSuperArmor) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerSuperArmor");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerSuperArmor) == 0x000014, "Wrong size on RSBattlePlayer_C_SetPlayerSuperArmor");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerSuperArmor, bON) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerSuperArmor::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerSuperArmor, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerSuperArmor::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerSuperArmor, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerSuperArmor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerSuperArmor, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetPlayerSuperArmor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDummyTest
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetDummyTest final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetDummyTest) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetDummyTest");
static_assert(sizeof(RSBattlePlayer_C_GetDummyTest) == 0x000001, "Wrong size on RSBattlePlayer_C_GetDummyTest");
static_assert(offsetof(RSBattlePlayer_C_GetDummyTest, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_GetDummyTest::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Is Unique Effective Sas
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_Is_Unique_Effective_Sas final
{
public:
	class AActor*                                 AttackActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEffectiveSas;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B77[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WinceRate;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockBackRate;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Is_Unique_Effective_Sas) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Is_Unique_Effective_Sas");
static_assert(sizeof(RSBattlePlayer_C_Is_Unique_Effective_Sas) == 0x000020, "Wrong size on RSBattlePlayer_C_Is_Unique_Effective_Sas");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, AttackActor) == 0x000000, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, IsEffectiveSas) == 0x000008, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::IsEffectiveSas' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, WinceRate) == 0x00000C, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::WinceRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, KnockBackRate) == 0x000010, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::KnockBackRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, DownRate) == 0x000014, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::DownRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Effective_Sas, CrashRate) == 0x000018, "Member 'RSBattlePlayer_C_Is_Unique_Effective_Sas::CrashRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangedInputDevice
// 0x000A (0x000A - 0x0000)
struct RSBattlePlayer_C_OnChangedInputDevice final
{
public:
	ERSInputDeviceType                            Device;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              LInputType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSInputDeviceType                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              Temp_byte_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              Temp_byte_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerInputType                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnChangedInputDevice) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangedInputDevice");
static_assert(sizeof(RSBattlePlayer_C_OnChangedInputDevice) == 0x00000A, "Wrong size on RSBattlePlayer_C_OnChangedInputDevice");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Device) == 0x000000, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Device' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, LInputType) == 0x000001, "Member 'RSBattlePlayer_C_OnChangedInputDevice::LInputType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable) == 0x000002, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable_1) == 0x000003, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable_2) == 0x000004, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable_3) == 0x000005, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable_4) == 0x000006, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, Temp_byte_Variable_5) == 0x000007, "Member 'RSBattlePlayer_C_OnChangedInputDevice::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, CallFunc_IsControlAI_bAI) == 0x000008, "Member 'RSBattlePlayer_C_OnChangedInputDevice::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangedInputDevice, K2Node_Select_Default) == 0x000009, "Member 'RSBattlePlayer_C_OnChangedInputDevice::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndDriveMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EndDriveMode final
{
public:
	bool                                          bInterruption;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLocationChange;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndDriveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndDriveMode");
static_assert(sizeof(RSBattlePlayer_C_EndDriveMode) == 0x000002, "Wrong size on RSBattlePlayer_C_EndDriveMode");
static_assert(offsetof(RSBattlePlayer_C_EndDriveMode, bInterruption) == 0x000000, "Member 'RSBattlePlayer_C_EndDriveMode::bInterruption' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndDriveMode, bLocationChange) == 0x000001, "Member 'RSBattlePlayer_C_EndDriveMode::bLocationChange' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckTelepoDodge
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckTelepoDodge final
{
public:
	bool                                          bTelepo;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTelepo;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B78[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSAS_bActive;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Telepo_ReturnValue;           // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckTelepoDodge) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckTelepoDodge");
static_assert(sizeof(RSBattlePlayer_C_CheckTelepoDodge) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckTelepoDodge");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, bTelepo) == 0x000000, "Member 'RSBattlePlayer_C_CheckTelepoDodge::bTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, LbTelepo) == 0x000001, "Member 'RSBattlePlayer_C_CheckTelepoDodge::LbTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnableSASEffect_bEnable) == 0x000002, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsActiveEnpcSAS_bActive) == 0x000015, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsActiveEnpcSAS_bActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000016, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTelepoDodge, CallFunc_IsActiveSAS_Telepo_ReturnValue) == 0x000017, "Member 'RSBattlePlayer_C_CheckTelepoDodge::CallFunc_IsActiveSAS_Telepo_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBodyMaterialScalarParameter
// 0x0068 (0x0068 - 0x0000)
struct RSBattlePlayer_C_SetBodyMaterialScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParameterValue;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B79[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B7A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B7B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B7C[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetExtraMesh_ExtraMesh;                   // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBodyMaterialScalarParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBodyMaterialScalarParameter");
static_assert(sizeof(RSBattlePlayer_C_SetBodyMaterialScalarParameter) == 0x000068, "Wrong size on RSBattlePlayer_C_SetBodyMaterialScalarParameter");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, ParameterName) == 0x000000, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, ParameterValue) == 0x000008, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::ParameterValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Loop_Num_Variable_1) == 0x000024, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Less_IntInt_ReturnValue_1) == 0x00002C, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_GetWeaponList_WeaponList) == 0x000038, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_GetExtraMesh_ExtraMesh) == 0x000050, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_GetExtraMesh_ExtraMesh' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBodyMaterialScalarParameter, CallFunc_IsValid_ReturnValue_1) == 0x000064, "Member 'RSBattlePlayer_C_SetBodyMaterialScalarParameter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCrashReceive
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetBrainCrashReceive final
{
public:
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B7D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCrashResistanceMax_ReturnValue;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBrainCrashReceive) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBrainCrashReceive");
static_assert(sizeof(RSBattlePlayer_C_SetBrainCrashReceive) == 0x000018, "Wrong size on RSBattlePlayer_C_SetBrainCrashReceive");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashReceive, CallFunc_GetEnpcComp_ReturnComp) == 0x000000, "Member 'RSBattlePlayer_C_SetBrainCrashReceive::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashReceive, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetBrainCrashReceive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashReceive, CallFunc_GetCrashResistanceMax_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetBrainCrashReceive::CallFunc_GetCrashResistanceMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCrashReceive, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetBrainCrashReceive::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ParameterApplyDrive
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_ParameterApplyDrive final
{
public:
	float                                         LDriveGaugeRate;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B7E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B7F[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ParameterApplyDrive) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ParameterApplyDrive");
static_assert(sizeof(RSBattlePlayer_C_ParameterApplyDrive) == 0x000024, "Wrong size on RSBattlePlayer_C_ParameterApplyDrive");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, LDriveGaugeRate) == 0x000000, "Member 'RSBattlePlayer_C_ParameterApplyDrive::LDriveGaugeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000004, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000008, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000014, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetPlayerID_ReturnValue) == 0x000015, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetLearnedSkillParameter_bLearned) == 0x000016, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetLearnedSkillParameter_Parameter) == 0x000018, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x00001C, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ParameterApplyDrive, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_ParameterApplyDrive::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAccessoryInvincibleDamageAfter
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B80[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B81[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter");
static_assert(sizeof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter) == 0x000010, "Wrong size on RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, CallFunc_IsDead_bDead) == 0x000001, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000002, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000004, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000008, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAccessoryInvalidDamageAfter
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B82[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter");
static_assert(sizeof(RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter) == 0x00000C, "Wrong size on RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter");
static_assert(offsetof(RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeParameterFromPlayerInfo
// 0x0218 (0x0218 - 0x0000)
struct RSBattlePlayer_C_InitializeParameterFromPlayerInfo final
{
public:
	struct FCharactersParameterBasic              LBadStatus;                                        // 0x0000(0x0068)(Edit, BlueprintVisible)
	struct FPlayerInfo                            LPlayerInfo;                                       // 0x0068(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x013F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B83[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0144(0x00D0)(NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeParameterFromPlayerInfo");
static_assert(sizeof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo) == 0x000218, "Wrong size on RSBattlePlayer_C_InitializeParameterFromPlayerInfo");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, LBadStatus) == 0x000000, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::LBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, LPlayerInfo) == 0x000068, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::LPlayerInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_IntInt_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_SetHP_bDummy) == 0x000139, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00013A, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00013B, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00013C, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00013D, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x00013E, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_GetPlayerID_ReturnValue) == 0x00013F, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000140, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeParameterFromPlayerInfo, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000144, "Member 'RSBattlePlayer_C_InitializeParameterFromPlayerInfo::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckEmphasisCrashGauge
// 0x03C0 (0x03C0 - 0x0000)
struct RSBattlePlayer_C_CheckEmphasisCrashGauge final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B84[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01C8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCHitResult                           LHitResult;                                        // 0x01D8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B85[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue;        // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x03A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B86[0x3];                                     // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B87[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue_1;      // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckEmphasisCrashGauge) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckEmphasisCrashGauge");
static_assert(sizeof(RSBattlePlayer_C_CheckEmphasisCrashGauge) == 0x0003C0, "Wrong size on RSBattlePlayer_C_CheckEmphasisCrashGauge");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, ReturnValue) == 0x0001C0, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, LExtraType) == 0x0001C8, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, LHitResult) == 0x0001D8, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, Temp_bool_True_if_break_was_hit_Variable) == 0x000398, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, Temp_int_Array_Index_Variable) == 0x00039C, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_Not_PreBool_ReturnValue) == 0x0003A0, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_SetEmphasisCrashGauge_ReturnValue) == 0x0003A1, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_SetEmphasisCrashGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_Array_Get_Item) == 0x0003A2, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003A3, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003A4, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_Array_Length_ReturnValue) == 0x0003A8, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, Temp_int_Loop_Counter_Variable) == 0x0003AC, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_Less_IntInt_ReturnValue) == 0x0003B0, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_Add_IntInt_ReturnValue) == 0x0003B4, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_BooleanAND_ReturnValue) == 0x0003B8, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_SetEmphasisCrashGauge_ReturnValue_1) == 0x0003B9, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_SetEmphasisCrashGauge_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEmphasisCrashGauge, CallFunc_IsEnemyDamageDown_bool) == 0x0003BA, "Member 'RSBattlePlayer_C_CheckEmphasisCrashGauge::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AjitoSetting
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_AjitoSetting final
{
public:
	bool                                          bInAjito;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B88[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResumePlayer_bResume;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SuspendPlayer_bSuspend;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AjitoSetting) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AjitoSetting");
static_assert(sizeof(RSBattlePlayer_C_AjitoSetting) == 0x000018, "Wrong size on RSBattlePlayer_C_AjitoSetting");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, bInAjito) == 0x000000, "Member 'RSBattlePlayer_C_AjitoSetting::bInAjito' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_ResumePlayer_bResume) == 0x000011, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_ResumePlayer_bResume' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_SuspendPlayer_bSuspend) == 0x000012, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_SuspendPlayer_bSuspend' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_IsPlayerStatus_Result) == 0x000013, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_IsPlayerStatus_Result_1) == 0x000014, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_IsControlAI_bAI) == 0x000015, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AjitoSetting, CallFunc_IsControlAI_bAI_1) == 0x000016, "Member 'RSBattlePlayer_C_AjitoSetting::CallFunc_IsControlAI_bAI_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugBattleParticleClaimantListOutput
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_DebugBattleParticleClaimantListOutput final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B89[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugBattleParticleClaimantListOutput");
static_assert(sizeof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput) == 0x000038, "Wrong size on RSBattlePlayer_C_DebugBattleParticleClaimantListOutput");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, CallFunc_Conv_NameToString_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugBattleParticleClaimantListOutput, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_DebugBattleParticleClaimantListOutput::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetExecNpcRevive
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetExecNpcRevive final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetExecNpcRevive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetExecNpcRevive");
static_assert(sizeof(RSBattlePlayer_C_SetExecNpcRevive) == 0x000001, "Wrong size on RSBattlePlayer_C_SetExecNpcRevive");
static_assert(offsetof(RSBattlePlayer_C_SetExecNpcRevive, bExec) == 0x000000, "Member 'RSBattlePlayer_C_SetExecNpcRevive::bExec' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetInvalidKeepOut
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetInvalidKeepOut final
{
public:
	bool                                          IsInvalid;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetInvalidKeepOut) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetInvalidKeepOut");
static_assert(sizeof(RSBattlePlayer_C_SetInvalidKeepOut) == 0x000002, "Wrong size on RSBattlePlayer_C_SetInvalidKeepOut");
static_assert(offsetof(RSBattlePlayer_C_SetInvalidKeepOut, IsInvalid) == 0x000000, "Member 'RSBattlePlayer_C_SetInvalidKeepOut::IsInvalid' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetInvalidKeepOut, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetInvalidKeepOut::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlaySoundBattleVoice
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_PlaySoundBattleVoice final
{
public:
	EPlayerBattleVoiceType                        Voice;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B8A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          LSound;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleVoiceType                        Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerBattleVoiceType                        Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B8B[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B8C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerFacialAnim                             K2Node_Select_Default;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B8D[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_ReplaceNotifySound_Native_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   CallFunc_PlayVoice_ReturnValue;                    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PlaySoundBattleVoice) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlaySoundBattleVoice");
static_assert(sizeof(RSBattlePlayer_C_PlaySoundBattleVoice) == 0x000058, "Wrong size on RSBattlePlayer_C_PlaySoundBattleVoice");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, Voice) == 0x000000, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::Voice' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, LSound) == 0x000008, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::LSound' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, Temp_byte_Variable) == 0x000010, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, Temp_byte_Variable_1) == 0x000012, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_GetEventManager_EventManager) == 0x000018, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x000020, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_GetSoundManager_SoundManager) == 0x000028, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, K2Node_Select_Default) == 0x000030, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_GetSoundManager_SoundManager_1) == 0x000038, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_GetSoundManager_SoundManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_ReplaceNotifySound_Native_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_ReplaceNotifySound_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, CallFunc_PlayVoice_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::CallFunc_PlayVoice_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySoundBattleVoice, K2Node_Select_Default_1) == 0x000050, "Member 'RSBattlePlayer_C_PlaySoundBattleVoice::K2Node_Select_Default_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayBattleStartVoice
// 0x0090 (0x0090 - 0x0000)
struct RSBattlePlayer_C_PlayBattleStartVoice final
{
public:
	TArray<class ARSBattlePlayer_C*>              LVoiceList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              LPlayerList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B8E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B8F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B90[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusElectric_self_CastInput;       // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B91[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusConfusion_self_CastInput;      // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PlayBattleStartVoice) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlayBattleStartVoice");
static_assert(sizeof(RSBattlePlayer_C_PlayBattleStartVoice) == 0x000090, "Wrong size on RSBattlePlayer_C_PlayBattleStartVoice");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, LVoiceList) == 0x000000, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::LVoiceList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, LPlayerList) == 0x000010, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::LPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsPlayerStatus_Result) == 0x000041, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_GetPlayersAll_Player) == 0x000048, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsBadStatusElectric_self_CastInput) == 0x000060, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsBadStatusElectric_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000070, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsBadStatusConfusion_self_CastInput) == 0x000078, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsBadStatusConfusion_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000088, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsCharacterDead_ReturnValue) == 0x000089, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x00008A, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x00008B, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00008C, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00008D, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBattleStartVoice, CallFunc_IsControlAI_bAI) == 0x00008E, "Member 'RSBattlePlayer_C_PlayBattleStartVoice::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainTalkAble
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_IsBrainTalkAble final
{
public:
	bool                                          bTalk;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTalk;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainTalkAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainTalkAble");
static_assert(sizeof(RSBattlePlayer_C_IsBrainTalkAble) == 0x000006, "Wrong size on RSBattlePlayer_C_IsBrainTalkAble");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, bTalk) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainTalkAble::bTalk' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, LbTalk) == 0x000001, "Member 'RSBattlePlayer_C_IsBrainTalkAble::LbTalk' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, CallFunc_IsCharacterDead_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsBrainTalkAble::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000003, "Member 'RSBattlePlayer_C_IsBrainTalkAble::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000004, "Member 'RSBattlePlayer_C_IsBrainTalkAble::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainTalkAble, CallFunc_IsPlayerStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_IsBrainTalkAble::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventBeforeBindCharacter
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter");
static_assert(sizeof(RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter) == 0x000001, "Wrong size on RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter");
static_assert(offsetof(RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequencerStart
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_BattleSequencerStart final
{
public:
	bool                                          IsSetEnemyEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerStart_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BattleSequencerStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BattleSequencerStart");
static_assert(sizeof(RSBattlePlayer_C_BattleSequencerStart) == 0x000005, "Wrong size on RSBattlePlayer_C_BattleSequencerStart");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerStart, IsSetEnemyEvent) == 0x000000, "Member 'RSBattlePlayer_C_BattleSequencerStart::IsSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerStart, bDriveSequence) == 0x000001, "Member 'RSBattlePlayer_C_BattleSequencerStart::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerStart, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_BattleSequencerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerStart, CallFunc_IsControlAI_bAI) == 0x000003, "Member 'RSBattlePlayer_C_BattleSequencerStart::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerStart, CallFunc_BattleSequencerStart_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_BattleSequencerStart::CallFunc_BattleSequencerStart_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DoTalkEventStart
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_DoTalkEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoTalkEventStart_bDummy;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DoTalkEventStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DoTalkEventStart");
static_assert(sizeof(RSBattlePlayer_C_DoTalkEventStart) == 0x000005, "Wrong size on RSBattlePlayer_C_DoTalkEventStart");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_DoTalkEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventStart, CallFunc_GetCurrentActionState_Kind) == 0x000001, "Member 'RSBattlePlayer_C_DoTalkEventStart::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventStart, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_DoTalkEventStart::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventStart, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'RSBattlePlayer_C_DoTalkEventStart::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DoTalkEventStart, CallFunc_DoTalkEventStart_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_DoTalkEventStart::CallFunc_DoTalkEventStart_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayPsychicComboCaptureSE
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_PlayPsychicComboCaptureSE final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PlayPsychicComboCaptureSE) == 0x000001, "Wrong alignment on RSBattlePlayer_C_PlayPsychicComboCaptureSE");
static_assert(sizeof(RSBattlePlayer_C_PlayPsychicComboCaptureSE) == 0x000001, "Wrong size on RSBattlePlayer_C_PlayPsychicComboCaptureSE");
static_assert(offsetof(RSBattlePlayer_C_PlayPsychicComboCaptureSE, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_PlayPsychicComboCaptureSE::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopPsychicComboCaptureSE
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StopPsychicComboCaptureSE final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StopPsychicComboCaptureSE) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StopPsychicComboCaptureSE");
static_assert(sizeof(RSBattlePlayer_C_StopPsychicComboCaptureSE) == 0x000001, "Wrong size on RSBattlePlayer_C_StopPsychicComboCaptureSE");
static_assert(offsetof(RSBattlePlayer_C_StopPsychicComboCaptureSE, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_StopPsychicComboCaptureSE::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ChangeCostumeMesh
// 0x0098 (0x0098 - 0x0000)
struct RSBattlePlayer_C_ChangeCostumeMesh final
{
public:
	int32                                         CostumeItemID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LHoodVisible;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B92[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B93[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetBattleMemberActorFromKind_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B94[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B95[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B96[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList_1;       // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B97[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B98[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResourceManager_C*                  CallFunc_GetResourceManager_ResourceManager;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ChangeCostumeMesh) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ChangeCostumeMesh");
static_assert(sizeof(RSBattlePlayer_C_ChangeCostumeMesh) == 0x000098, "Wrong size on RSBattlePlayer_C_ChangeCostumeMesh");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CostumeItemID) == 0x000000, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CostumeItemID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, LHoodVisible) == 0x000004, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::LHoodVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Loop_Num_Variable_1) == 0x00001C, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000021, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_GetBattleMemberActorFromKind_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_GetBattleMemberActorFromKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000030, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_IsPlayerStatusAI_bResult) == 0x000041, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000048, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_SetHoodVisible_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_IsDriveMode_bDrive) == 0x000060, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_BooleanOR_ReturnValue) == 0x000061, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_GetCopyPlayerList_CopyPlayerList_1) == 0x000068, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_GetCopyPlayerList_CopyPlayerList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, Temp_int_Loop_Counter_Variable_1) == 0x00007C, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Less_IntInt_ReturnValue_1) == 0x000080, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_GetPlayerID_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeCostumeMesh, CallFunc_GetResourceManager_ResourceManager) == 0x000090, "Member 'RSBattlePlayer_C_ChangeCostumeMesh::CallFunc_GetResourceManager_ResourceManager' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Is Accumulating Attacks
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Is_Accumulating_Attacks final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B99[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChargeAttackComponent_C*               K2Node_DynamicCast_AsCharge_Attack_Component;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCharging_result;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Is_Accumulating_Attacks) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Is_Accumulating_Attacks");
static_assert(sizeof(RSBattlePlayer_C_Is_Accumulating_Attacks) == 0x000018, "Wrong size on RSBattlePlayer_C_Is_Accumulating_Attacks");
static_assert(offsetof(RSBattlePlayer_C_Is_Accumulating_Attacks, Result) == 0x000000, "Member 'RSBattlePlayer_C_Is_Accumulating_Attacks::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Accumulating_Attacks, K2Node_DynamicCast_AsCharge_Attack_Component) == 0x000008, "Member 'RSBattlePlayer_C_Is_Accumulating_Attacks::K2Node_DynamicCast_AsCharge_Attack_Component' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Accumulating_Attacks, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'RSBattlePlayer_C_Is_Accumulating_Attacks::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Is_Accumulating_Attacks, CallFunc_GetCharging_result) == 0x000011, "Member 'RSBattlePlayer_C_Is_Accumulating_Attacks::CallFunc_GetCharging_result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAsyncCopyParameter
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_GetAsyncCopyParameter final
{
public:
	bool                                          bCheckCopy;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Right;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Left;                                              // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAsyncCopyParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetAsyncCopyParameter");
static_assert(sizeof(RSBattlePlayer_C_GetAsyncCopyParameter) == 0x00001C, "Wrong size on RSBattlePlayer_C_GetAsyncCopyParameter");
static_assert(offsetof(RSBattlePlayer_C_GetAsyncCopyParameter, bCheckCopy) == 0x000000, "Member 'RSBattlePlayer_C_GetAsyncCopyParameter::bCheckCopy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAsyncCopyParameter, Right) == 0x000004, "Member 'RSBattlePlayer_C_GetAsyncCopyParameter::Right' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAsyncCopyParameter, Left) == 0x000010, "Member 'RSBattlePlayer_C_GetAsyncCopyParameter::Left' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDelayDeath
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_SetDelayDeath final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbFromForward;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             LReactionType;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbReactionChance;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnpcMetamorphosisiFinishType                 LFinishType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9B[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDamageKind                             CallFunc_GetDamageReaction_ReactionType;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReactionChance_CallFromCPP_ReturnValue; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInfinityCrashChance_ReturnValue;        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReserveFinishCancelAction_bDummy;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecMetamorphosis_bExec;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDelayDeath_ReturnValue;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDelayDeath) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDelayDeath");
static_assert(sizeof(RSBattlePlayer_C_SetDelayDeath) == 0x000020, "Wrong size on RSBattlePlayer_C_SetDelayDeath");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetDelayDeath::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, LbFromForward) == 0x000001, "Member 'RSBattlePlayer_C_SetDelayDeath::LbFromForward' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, LReactionType) == 0x000002, "Member 'RSBattlePlayer_C_SetDelayDeath::LReactionType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, LbReactionChance) == 0x000003, "Member 'RSBattlePlayer_C_SetDelayDeath::LbReactionChance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, LFinishType) == 0x000004, "Member 'RSBattlePlayer_C_SetDelayDeath::LFinishType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsMetalMode_bMetal) == 0x000005, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_GetName_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_GetDamageReaction_ReactionType) == 0x000010, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_GetDamageReaction_ReactionType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsReactionChance_CallFromCPP_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsReactionChance_CallFromCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_GetCurrentActionState_Kind) == 0x000014, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000015, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, K2Node_SwitchEnum_CmpSuccess) == 0x000016, "Member 'RSBattlePlayer_C_SetDelayDeath::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsInfinityCrashChance_ReturnValue) == 0x000017, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsInfinityCrashChance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_ReserveFinishCancelAction_bDummy) == 0x00001A, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_ReserveFinishCancelAction_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsExecMetamorphosis_bExec) == 0x00001B, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsExecMetamorphosis_bExec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsPlayerStatus_Result) == 0x00001C, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_OnDead_Dummy) == 0x00001D, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDelayDeath, CallFunc_IsDelayDeath_ReturnValue) == 0x00001E, "Member 'RSBattlePlayer_C_SetDelayDeath::CallFunc_IsDelayDeath_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDamageCollisionInvincible
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_SetDamageCollisionInvincible final
{
public:
	bool                                          bInvincible;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9D[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetDamageCollisionInvincible) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDamageCollisionInvincible");
static_assert(sizeof(RSBattlePlayer_C_SetDamageCollisionInvincible) == 0x000014, "Wrong size on RSBattlePlayer_C_SetDamageCollisionInvincible");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionInvincible, bInvincible) == 0x000000, "Member 'RSBattlePlayer_C_SetDamageCollisionInvincible::bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionInvincible, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetDamageCollisionInvincible::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionInvincible, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetDamageCollisionInvincible::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionInvincible, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_SetDamageCollisionInvincible::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionInvincible, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetDamageCollisionInvincible::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSasSeeThroughCutIn
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_InitializeSasSeeThroughCutIn final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SeeThroughJustDodgeCutin_C*         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn) == 0x000010, "Wrong alignment on RSBattlePlayer_C_InitializeSasSeeThroughCutIn");
static_assert(sizeof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn) == 0x000050, "Wrong size on RSBattlePlayer_C_InitializeSasSeeThroughCutIn");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_InitializeSasSeeThroughCutIn::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn, CallFunc_IsControlAI_bAI) == 0x000030, "Member 'RSBattlePlayer_C_InitializeSasSeeThroughCutIn::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_InitializeSasSeeThroughCutIn::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn, CallFunc_FinishSpawningActor_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_InitializeSasSeeThroughCutIn::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasSeeThroughCutIn, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_InitializeSasSeeThroughCutIn::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetGameOverVoiceData
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_GetGameOverVoiceData final
{
public:
	int32                                         VoiceNo;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B9F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          VoiceData;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA1[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetGameOverVoiceData) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetGameOverVoiceData");
static_assert(sizeof(RSBattlePlayer_C_GetGameOverVoiceData) == 0x000030, "Wrong size on RSBattlePlayer_C_GetGameOverVoiceData");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, VoiceNo) == 0x000000, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::VoiceNo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, VoiceData) == 0x000008, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::VoiceData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_Array_Get_Item) == 0x000018, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetGameOverVoiceData, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_GetGameOverVoiceData::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FallInsureProc
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_FallInsureProc final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_FallInsureProc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_FallInsureProc");
static_assert(sizeof(RSBattlePlayer_C_FallInsureProc) == 0x00000C, "Wrong size on RSBattlePlayer_C_FallInsureProc");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_FallInsureProc::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, CallFunc_IsPlayerStatus_Result) == 0x000004, "Member 'RSBattlePlayer_C_FallInsureProc::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, CallFunc_IsActionStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_FallInsureProc::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, CallFunc_IsPlayerStatus_Result_1) == 0x000006, "Member 'RSBattlePlayer_C_FallInsureProc::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_FallInsureProc::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FallInsureProc, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_FallInsureProc::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PreTickInput
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_PreTickInput final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_rightStickY;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_rightStickX;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_leftStickY;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_leftStickX;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetConfusionStickInput_bOverwriteInput;   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA2[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetConfusionStickInput_StickInput;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_InputManager_C*                     CallFunc_GetInputManager_BP_InputManager;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadLayout*                       CallFunc_GetGamepadLayout_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadEvent*                        CallFunc_GetKeyEvent_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadEvent*                        CallFunc_GetKeyEvent_ReturnValue_1;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadEvent*                        CallFunc_GetKeyEvent_ReturnValue_2;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSGamepadEvent*                        CallFunc_GetKeyEvent_ReturnValue_3;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA3[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEventMoveLeftStickY_value;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMoveLeftStickX_value;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventMove_result;                       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_2;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_3;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PreTickInput) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PreTickInput");
static_assert(sizeof(RSBattlePlayer_C_PreTickInput) == 0x000070, "Wrong size on RSBattlePlayer_C_PreTickInput");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_PreTickInput::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, L_rightStickY) == 0x000004, "Member 'RSBattlePlayer_C_PreTickInput::L_rightStickY' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, L_rightStickX) == 0x000008, "Member 'RSBattlePlayer_C_PreTickInput::L_rightStickX' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, L_leftStickY) == 0x00000C, "Member 'RSBattlePlayer_C_PreTickInput::L_leftStickY' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, L_leftStickX) == 0x000010, "Member 'RSBattlePlayer_C_PreTickInput::L_leftStickX' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsPlayerStatus_Result) == 0x000014, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetConfusionStickInput_bOverwriteInput) == 0x000015, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetConfusionStickInput_bOverwriteInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetConfusionStickInput_StickInput) == 0x000018, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetConfusionStickInput_StickInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetInputManager_BP_InputManager) == 0x000020, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetInputManager_BP_InputManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_BreakVector2D_X) == 0x000028, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetGamepadLayout_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetGamepadLayout_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetKeyEvent_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetKeyEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetKeyEvent_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetKeyEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetKeyEvent_ReturnValue_2) == 0x000048, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetKeyEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetKeyEvent_ReturnValue_3) == 0x000050, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetKeyEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_Not_PreBool_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsPlayerStatus_Result_1) == 0x000059, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetEventMoveLeftStickY_value) == 0x00005C, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetEventMoveLeftStickY_value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_GetEventMoveLeftStickX_value) == 0x000060, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_GetEventMoveLeftStickX_value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsEventMove_result) == 0x000064, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsEventMove_result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsPlayerStatus_Result_2) == 0x000065, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsPlayerStatus_Result_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_Not_PreBool_ReturnValue_1) == 0x000066, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsControlAI_bAI) == 0x000067, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreTickInput, CallFunc_IsPlayerStatus_Result_3) == 0x000068, "Member 'RSBattlePlayer_C_PreTickInput::CallFunc_IsPlayerStatus_Result_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttackMove_AerialTargetLocation
// 0x00F0 (0x00F0 - 0x0000)
struct RSBattlePlayer_C_AttackMove_AerialTargetLocation final
{
public:
	struct FVector                                MoveLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LGroundLocation;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LMoveLocation;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA4[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0070(0x0040)(ConstParm)
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue_1;             // 0x00B0(0x0040)(ConstParm)
};
static_assert(alignof(RSBattlePlayer_C_AttackMove_AerialTargetLocation) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AttackMove_AerialTargetLocation");
static_assert(sizeof(RSBattlePlayer_C_AttackMove_AerialTargetLocation) == 0x0000F0, "Wrong size on RSBattlePlayer_C_AttackMove_AerialTargetLocation");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, MoveLocation) == 0x000000, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::MoveLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, LGroundLocation) == 0x00000C, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::LGroundLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, LMoveLocation) == 0x000018, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::LMoveLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_X) == 0x000024, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Y) == 0x000028, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Z) == 0x00002C, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_X_1) == 0x000030, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Y_1) == 0x000034, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Z_1) == 0x000038, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_X_2) == 0x000040, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Y_2) == 0x000044, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Z_2) == 0x000048, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_X_3) == 0x000058, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Y_3) == 0x00005C, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_BreakVector_Z_3) == 0x000060, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_GetAsyncResult_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttackMove_AerialTargetLocation, CallFunc_GetAsyncResult_ReturnValue_1) == 0x0000B0, "Member 'RSBattlePlayer_C_AttackMove_AerialTargetLocation::CallFunc_GetAsyncResult_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeSasEquipStatus
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnChangeSasEquipStatus final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASEquipStatus                               Status;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplySasEffectPassive_bDummy;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeSasEquipStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeSasEquipStatus");
static_assert(sizeof(RSBattlePlayer_C_OnChangeSasEquipStatus) == 0x000003, "Wrong size on RSBattlePlayer_C_OnChangeSasEquipStatus");
static_assert(offsetof(RSBattlePlayer_C_OnChangeSasEquipStatus, Kind) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeSasEquipStatus::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeSasEquipStatus, Status) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeSasEquipStatus::Status' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeSasEquipStatus, CallFunc_ApplySasEffectPassive_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeSasEquipStatus::CallFunc_ApplySasEffectPassive_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectPassive
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ApplySASEffectPassive final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ApplySASEffectPassive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ApplySASEffectPassive");
static_assert(sizeof(RSBattlePlayer_C_ApplySASEffectPassive) == 0x000002, "Wrong size on RSBattlePlayer_C_ApplySASEffectPassive");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectPassive, Kind) == 0x000000, "Member 'RSBattlePlayer_C_ApplySASEffectPassive::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectPassive, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_ApplySASEffectPassive::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectPassiveAll
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ApplySASEffectPassiveAll final
{
public:
	bool                                          bLinkAbleOnly;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ApplySASEffectPassiveAll) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ApplySASEffectPassiveAll");
static_assert(sizeof(RSBattlePlayer_C_ApplySASEffectPassiveAll) == 0x000002, "Wrong size on RSBattlePlayer_C_ApplySASEffectPassiveAll");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectPassiveAll, bLinkAbleOnly) == 0x000000, "Member 'RSBattlePlayer_C_ApplySASEffectPassiveAll::bLinkAbleOnly' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectPassiveAll, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_ApplySASEffectPassiveAll::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectActive
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_ApplySASEffectActive final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActivate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ApplySASEffectActive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ApplySASEffectActive");
static_assert(sizeof(RSBattlePlayer_C_ApplySASEffectActive) == 0x000003, "Wrong size on RSBattlePlayer_C_ApplySASEffectActive");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectActive, Kind) == 0x000000, "Member 'RSBattlePlayer_C_ApplySASEffectActive::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectActive, bActivate) == 0x000001, "Member 'RSBattlePlayer_C_ApplySASEffectActive::bActivate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplySASEffectActive, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_ApplySASEffectActive::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializePreAssetLoad
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_InitializePreAssetLoad final
{
public:
	class UBP_EnpcDamageMoveComponent_C*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ENpcComponent_C*                    CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_InitializePreAssetLoad) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializePreAssetLoad");
static_assert(sizeof(RSBattlePlayer_C_InitializePreAssetLoad) == 0x000010, "Wrong size on RSBattlePlayer_C_InitializePreAssetLoad");
static_assert(offsetof(RSBattlePlayer_C_InitializePreAssetLoad, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_InitializePreAssetLoad::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializePreAssetLoad, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000008, "Member 'RSBattlePlayer_C_InitializePreAssetLoad::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginBattleField
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_OnBeginBattleField final
{
public:
	class ARSBattleCharacter_C*                   LTargetCharacter;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LBFGroupID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RestartBattleAI_bDummy;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleActionStartAI_bStart;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckLockTargetOutOfBattleField_bLockReleased; // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBeginBattleField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnBeginBattleField");
static_assert(sizeof(RSBattlePlayer_C_OnBeginBattleField) == 0x000010, "Wrong size on RSBattlePlayer_C_OnBeginBattleField");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, LTargetCharacter) == 0x000000, "Member 'RSBattlePlayer_C_OnBeginBattleField::LTargetCharacter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, LBFGroupID) == 0x000008, "Member 'RSBattlePlayer_C_OnBeginBattleField::LBFGroupID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, CallFunc_RestartBattleAI_bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_OnBeginBattleField::CallFunc_RestartBattleAI_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, CallFunc_IsBattleActionStartAI_bStart) == 0x00000D, "Member 'RSBattlePlayer_C_OnBeginBattleField::CallFunc_IsBattleActionStartAI_bStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, CallFunc_IsControlAI_bAI) == 0x00000E, "Member 'RSBattlePlayer_C_OnBeginBattleField::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginBattleField, CallFunc_CheckLockTargetOutOfBattleField_bLockReleased) == 0x00000F, "Member 'RSBattlePlayer_C_OnBeginBattleField::CallFunc_CheckLockTargetOutOfBattleField_bLockReleased' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PsychicComboResetTimer
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_PsychicComboResetTimer final
{
public:
	int32                                         CallFunc_GetFlyingPsychicComboLevel_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPsychicComboLevel_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PsychicComboResetTimer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PsychicComboResetTimer");
static_assert(sizeof(RSBattlePlayer_C_PsychicComboResetTimer) == 0x00000C, "Wrong size on RSBattlePlayer_C_PsychicComboResetTimer");
static_assert(offsetof(RSBattlePlayer_C_PsychicComboResetTimer, CallFunc_GetFlyingPsychicComboLevel_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_PsychicComboResetTimer::CallFunc_GetFlyingPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PsychicComboResetTimer, CallFunc_GetPsychicComboLevel_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_PsychicComboResetTimer::CallFunc_GetPsychicComboLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PsychicComboResetTimer, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_PsychicComboResetTimer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PsychicComboResetTimer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000009, "Member 'RSBattlePlayer_C_PsychicComboResetTimer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PsychicComboResetTimer, CallFunc_IsControlAI_bAI) == 0x00000A, "Member 'RSBattlePlayer_C_PsychicComboResetTimer::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TickPsychicComboResetTimer
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_TickPsychicComboResetTimer final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA5[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TickPsychicComboResetTimer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_TickPsychicComboResetTimer");
static_assert(sizeof(RSBattlePlayer_C_TickPsychicComboResetTimer) == 0x00000C, "Wrong size on RSBattlePlayer_C_TickPsychicComboResetTimer");
static_assert(offsetof(RSBattlePlayer_C_TickPsychicComboResetTimer, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_TickPsychicComboResetTimer::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickPsychicComboResetTimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_TickPsychicComboResetTimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickPsychicComboResetTimer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_TickPsychicComboResetTimer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickPsychicComboResetTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_TickPsychicComboResetTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyPlayerBattle
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnEnemyPlayerBattle final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseBrainField;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnemyPlayerBattle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEnemyPlayerBattle");
static_assert(sizeof(RSBattlePlayer_C_OnEnemyPlayerBattle) == 0x000003, "Wrong size on RSBattlePlayer_C_OnEnemyPlayerBattle");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyPlayerBattle, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_OnEnemyPlayerBattle::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyPlayerBattle, bUseBrainField) == 0x000001, "Member 'RSBattlePlayer_C_OnEnemyPlayerBattle::bUseBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyPlayerBattle, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_OnEnemyPlayerBattle::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialMode
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetTutorialMode final
{
public:
	bool                                          bTutorial;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContentsOpened_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA6[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetTutorialMode) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetTutorialMode");
static_assert(sizeof(RSBattlePlayer_C_SetTutorialMode) == 0x000018, "Wrong size on RSBattlePlayer_C_SetTutorialMode");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialMode, bTutorial) == 0x000000, "Member 'RSBattlePlayer_C_SetTutorialMode::bTutorial' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialMode, CallFunc_IsContentsOpened_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetTutorialMode::CallFunc_IsContentsOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialMode, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'RSBattlePlayer_C_SetTutorialMode::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialMode, CallFunc_GetUserParamManager_UserParamManager) == 0x000010, "Member 'RSBattlePlayer_C_SetTutorialMode::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialRestictPsychic
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetTutorialRestictPsychic final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetTutorialRestictPsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetTutorialRestictPsychic");
static_assert(sizeof(RSBattlePlayer_C_SetTutorialRestictPsychic) == 0x000001, "Wrong size on RSBattlePlayer_C_SetTutorialRestictPsychic");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialRestictPsychic, bRestrict) == 0x000000, "Member 'RSBattlePlayer_C_SetTutorialRestictPsychic::bRestrict' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialRestictAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetTutorialRestictAttack final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetTutorialRestictAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetTutorialRestictAttack");
static_assert(sizeof(RSBattlePlayer_C_SetTutorialRestictAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_SetTutorialRestictAttack");
static_assert(offsetof(RSBattlePlayer_C_SetTutorialRestictAttack, bRestrict) == 0x000000, "Member 'RSBattlePlayer_C_SetTutorialRestictAttack::bRestrict' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.WaitLastKarenEvent
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_WaitLastKarenEvent final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndEventWait_bDummy;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventWait_bDummy;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA7[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy_1;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_WaitLastKarenEvent) == 0x000004, "Wrong alignment on RSBattlePlayer_C_WaitLastKarenEvent");
static_assert(sizeof(RSBattlePlayer_C_WaitLastKarenEvent) == 0x000010, "Wrong size on RSBattlePlayer_C_WaitLastKarenEvent");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, bWait) == 0x000000, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::bWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, CallFunc_EndEventWait_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::CallFunc_EndEventWait_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, CallFunc_SetEventWait_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::CallFunc_SetEventWait_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, CallFunc_SetInvalidDamage_Dummy) == 0x00000C, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_WaitLastKarenEvent, CallFunc_SetInvalidDamage_Dummy_1) == 0x00000D, "Member 'RSBattlePlayer_C_WaitLastKarenEvent::CallFunc_SetInvalidDamage_Dummy_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableLastKarenEvent
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_IsEnableLastKarenEvent final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyEnableAction_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_bEnable;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableLastKarenEvent) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableLastKarenEvent");
static_assert(sizeof(RSBattlePlayer_C_IsEnableLastKarenEvent) == 0x000005, "Wrong size on RSBattlePlayer_C_IsEnableLastKarenEvent");
static_assert(offsetof(RSBattlePlayer_C_IsEnableLastKarenEvent, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableLastKarenEvent::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableLastKarenEvent, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableLastKarenEvent::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableLastKarenEvent, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableLastKarenEvent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableLastKarenEvent, CallFunc_IsNotifyEnableAction_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableLastKarenEvent::CallFunc_IsNotifyEnableAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableLastKarenEvent, CallFunc_IsEnableActionCommon_bEnable) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableLastKarenEvent::CallFunc_IsEnableActionCommon_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequenceBadStatusEffectOff
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_BattleSequenceBadStatusEffectOff final
{
public:
	bool                                          CallFunc_BadStateEffectOffCable_bDummy;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStateCableDamage_CableDamage;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFrame_bBadStatus;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFlooded_bBadStatus;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusOil_bBadStatus;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffConfusion_bDummy;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffElec_bDummy;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlame_bDummy;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlooded_bDummy;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffOil_bDummy;              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BattleSequenceBadStatusEffectOff");
static_assert(sizeof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff) == 0x00000C, "Wrong size on RSBattlePlayer_C_BattleSequenceBadStatusEffectOff");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffCable_bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffCable_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStateCableDamage_CableDamage) == 0x000001, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStateCableDamage_CableDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000002, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000003, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStatusFrame_bBadStatus) == 0x000004, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStatusFrame_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStatusFlooded_bBadStatus) == 0x000005, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStatusFlooded_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_IsBadStatusOil_bBadStatus) == 0x000006, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_IsBadStatusOil_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffConfusion_bDummy) == 0x000007, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffConfusion_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffElec_bDummy) == 0x000008, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffElec_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffFlame_bDummy) == 0x000009, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffFlame_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffFlooded_bDummy) == 0x00000A, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceBadStatusEffectOff, CallFunc_BadStateEffectOffOil_bDummy) == 0x00000B, "Member 'RSBattlePlayer_C_BattleSequenceBadStatusEffectOff::CallFunc_BadStateEffectOffOil_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequenceEndBadStatusEffectOn
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn final
{
public:
	bool                                          CallFunc_BadStateEffectOnCable_bDummy;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStateCableDamage_CableDamage;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnConfusion_bDummy;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnElec_bDummy;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlame_bDummy;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlooded_bDummy;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnOil_bDummy;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFrame_bBadStatus;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFlooded_bBadStatus;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusOil_bBadStatus;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn");
static_assert(sizeof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn) == 0x00000C, "Wrong size on RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnCable_bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnCable_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStateCableDamage_CableDamage) == 0x000001, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStateCableDamage_CableDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnConfusion_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnConfusion_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnElec_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnElec_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnFlame_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnFlame_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnFlooded_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_BadStateEffectOnOil_bDummy) == 0x000006, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_BadStateEffectOnOil_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000007, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000008, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStatusFrame_bBadStatus) == 0x000009, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStatusFrame_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStatusFlooded_bBadStatus) == 0x00000A, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStatusFlooded_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn, CallFunc_IsBadStatusOil_bBadStatus) == 0x00000B, "Member 'RSBattlePlayer_C_BattleSequenceEndBadStatusEffectOn::CallFunc_IsBadStatusOil_bBadStatus' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UniqueAttackHitEffect
// 0x0260 (0x0260 - 0x0000)
struct RSBattlePlayer_C_UniqueAttackHitEffect final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA8[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LRot;                                              // 0x01C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01EC(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA9[0x1];                                     // 0x01EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BAA[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0210(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BAB[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BAC[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UniqueAttackHitEffect) == 0x000008, "Wrong alignment on RSBattlePlayer_C_UniqueAttackHitEffect");
static_assert(sizeof(RSBattlePlayer_C_UniqueAttackHitEffect) == 0x000260, "Wrong size on RSBattlePlayer_C_UniqueAttackHitEffect");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, bDummy) == 0x0001C0, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, LRot) == 0x0001C4, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::LRot' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, LExtraType) == 0x0001D0, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_MakeVector_ReturnValue) == 0x0001E0, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, Temp_byte_Variable) == 0x0001EC, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, Temp_byte_Variable_1) == 0x0001ED, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001EE, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_Array_Find_ReturnValue) == 0x0001F0, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001F4, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000200, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000208, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000210, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, K2Node_DynamicCast_AsPlayer_Interface) == 0x000218, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, K2Node_DynamicCast_bSuccess) == 0x000228, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00022C, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_GetPlayerID_ReturnValue) == 0x000238, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x00023C, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_BreakRotator_Roll) == 0x000248, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_BreakRotator_Pitch) == 0x00024C, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_BreakRotator_Yaw) == 0x000250, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UniqueAttackHitEffect, CallFunc_MakeRotator_ReturnValue) == 0x000254, "Member 'RSBattlePlayer_C_UniqueAttackHitEffect::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateParameter
// 0x02E0 (0x02E0 - 0x0000)
struct RSBattlePlayer_C_OnUpdateParameter final
{
public:
	struct FCharactersParameterTable              Table;                                             // 0x0000(0x01F8)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         LPrevMaxHP;                                        // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BAD[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0200(0x00D0)(NoDestructor)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x02D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BAE[0x2];                                     // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHP_MaxHP_1;                         // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnUpdateParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnUpdateParameter");
static_assert(sizeof(RSBattlePlayer_C_OnUpdateParameter) == 0x0002E0, "Wrong size on RSBattlePlayer_C_OnUpdateParameter");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, Table) == 0x000000, "Member 'RSBattlePlayer_C_OnUpdateParameter::Table' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, LPrevMaxHP) == 0x0001F8, "Member 'RSBattlePlayer_C_OnUpdateParameter::LPrevMaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_GetPlayerID_ReturnValue) == 0x0001FC, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000200, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_GetMaxHP_MaxHP) == 0x0002D0, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0002D4, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_SetHP_bDummy) == 0x0002D5, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateParameter, CallFunc_GetMaxHP_MaxHP_1) == 0x0002D8, "Member 'RSBattlePlayer_C_OnUpdateParameter::CallFunc_GetMaxHP_MaxHP_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.MeshFitGround
// 0x0288 (0x0288 - 0x0000)
struct RSBattlePlayer_C_MeshFitGround final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleLimit;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndFit;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BAF[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LMeshOffset;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MeshFitGround_bDummy;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDisableMeshFitGround_bDisable;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB1[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BB2[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0090(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00AC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB3[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorDeltaSeconds_ReturnValue;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB4[0x2];                                     // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB5[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_MeshFitGround) == 0x000008, "Wrong alignment on RSBattlePlayer_C_MeshFitGround");
static_assert(sizeof(RSBattlePlayer_C_MeshFitGround) == 0x000288, "Wrong size on RSBattlePlayer_C_MeshFitGround");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, InterpSpeed) == 0x000000, "Member 'RSBattlePlayer_C_MeshFitGround::InterpSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, AngleLimit) == 0x000004, "Member 'RSBattlePlayer_C_MeshFitGround::AngleLimit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, bEndFit) == 0x000008, "Member 'RSBattlePlayer_C_MeshFitGround::bEndFit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, bDummy) == 0x000009, "Member 'RSBattlePlayer_C_MeshFitGround::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, LMeshOffset) == 0x00000C, "Member 'RSBattlePlayer_C_MeshFitGround::LMeshOffset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_MeshFitGround_bDummy) == 0x000010, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_MeshFitGround_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, Temp_int_Array_Index_Variable) == 0x000014, "Member 'RSBattlePlayer_C_MeshFitGround::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'RSBattlePlayer_C_MeshFitGround::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_IsDisableMeshFitGround_bDisable) == 0x00001C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_IsDisableMeshFitGround_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00003C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_X) == 0x000040, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Y) == 0x000044, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Z) == 0x000048, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, K2Node_MakeArray_Array) == 0x000050, "Member 'RSBattlePlayer_C_MeshFitGround::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000064, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000070, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_X_1) == 0x000074, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Y_1) == 0x000078, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Z_1) == 0x00007C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00008C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, Temp_object_Variable) == 0x000090, "Member 'RSBattlePlayer_C_MeshFitGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_MakeVector_ReturnValue_1) == 0x0000A0, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000AC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000134, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_GetActorDeltaSeconds_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_GetActorDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_bBlockingHit) == 0x00013C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x00013D, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_Time) == 0x000140, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_Distance) == 0x000144, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_Location) == 0x000148, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_ImpactPoint) == 0x000154, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_ImpactNormal) == 0x00016C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_FaceIndex) == 0x00019C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakHitResult_TraceEnd) == 0x0001AC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_X_2) == 0x0001B8, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Y_2) == 0x0001BC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Z_2) == 0x0001C0, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001C4, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_X_3) == 0x0001C8, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Y_3) == 0x0001CC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_BreakVector_Z_3) == 0x0001D0, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_FClamp_ReturnValue) == 0x0001D4, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_FInterpTo_ReturnValue) == 0x0001D8, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_MakeVector_ReturnValue_2) == 0x0001DC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, Temp_int_Loop_Counter_Variable) == 0x0001E8, "Member 'RSBattlePlayer_C_MeshFitGround::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001EC, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Less_IntInt_ReturnValue) == 0x000274, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Add_IntInt_ReturnValue) == 0x000278, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2) == 0x00027C, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_MeshFitGround, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000280, "Member 'RSBattlePlayer_C_MeshFitGround::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CancelMeshFitGround
// 0x00D8 (0x00D8 - 0x0000)
struct RSBattlePlayer_C_CancelMeshFitGround final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDisableMeshFitGround_bDisable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB8[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_CancelMeshFitGround_self_CastInput;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelMeshFitGround_bDummy;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BB9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CancelMeshFitGround_bDummy_1;             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CancelMeshFitGround) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CancelMeshFitGround");
static_assert(sizeof(RSBattlePlayer_C_CancelMeshFitGround) == 0x0000D8, "Wrong size on RSBattlePlayer_C_CancelMeshFitGround");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_CancelMeshFitGround::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_CancelMeshFitGround::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_CancelMeshFitGround::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_IsDisableMeshFitGround_bDisable) == 0x00000C, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_IsDisableMeshFitGround_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_CancelMeshFitGround::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_CancelMeshFitGround_self_CastInput) == 0x000020, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_CancelMeshFitGround_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_CancelMeshFitGround_bDummy) == 0x000030, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_CancelMeshFitGround_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000048, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CancelMeshFitGround, CallFunc_CancelMeshFitGround_bDummy_1) == 0x0000D0, "Member 'RSBattlePlayer_C_CancelMeshFitGround::CallFunc_CancelMeshFitGround_bDummy_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TickJustDodgeAttackSlow
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_TickJustDodgeAttackSlow final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BBA[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TickJustDodgeAttackSlow) == 0x000004, "Wrong alignment on RSBattlePlayer_C_TickJustDodgeAttackSlow");
static_assert(sizeof(RSBattlePlayer_C_TickJustDodgeAttackSlow) == 0x000010, "Wrong size on RSBattlePlayer_C_TickJustDodgeAttackSlow");
static_assert(offsetof(RSBattlePlayer_C_TickJustDodgeAttackSlow, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_TickJustDodgeAttackSlow::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickJustDodgeAttackSlow, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'RSBattlePlayer_C_TickJustDodgeAttackSlow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickJustDodgeAttackSlow, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_TickJustDodgeAttackSlow::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickJustDodgeAttackSlow, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_TickJustDodgeAttackSlow::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickJustDodgeAttackSlow, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_TickJustDodgeAttackSlow::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginJustDodgeAttackSlow
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_BeginJustDodgeAttackSlow final
{
public:
	bool                                          bWeaponAttack;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCutIn;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BBB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlowTimeDilation;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowTime;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BBC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BBD[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginJustDodgeAttackSlow) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BeginJustDodgeAttackSlow");
static_assert(sizeof(RSBattlePlayer_C_BeginJustDodgeAttackSlow) == 0x000030, "Wrong size on RSBattlePlayer_C_BeginJustDodgeAttackSlow");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, bWeaponAttack) == 0x000000, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::bWeaponAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, bCutIn) == 0x000001, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::bCutIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, SlowTimeDilation) == 0x000004, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::SlowTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, SlowTime) == 0x000008, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::SlowTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_GetSASManager_SAS_Manager) == 0x000010, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_GetGameSystemManager_Manager) == 0x000018, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_IsCutInPlaying_Playing) == 0x000020, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000024, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginJustDodgeAttackSlow, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'RSBattlePlayer_C_BeginJustDodgeAttackSlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndJustDodgeAttackSlow
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_EndJustDodgeAttackSlow final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BBE[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BBF[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC0[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndJustDodgeAttackSlow) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EndJustDodgeAttackSlow");
static_assert(sizeof(RSBattlePlayer_C_EndJustDodgeAttackSlow) == 0x000048, "Wrong size on RSBattlePlayer_C_EndJustDodgeAttackSlow");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_GetSASCodeActorList_CodeList) == 0x000008, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_GetGameSystemManager_Manager) == 0x000038, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000040, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndJustDodgeAttackSlow, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000041, "Member 'RSBattlePlayer_C_EndJustDodgeAttackSlow::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.JustDodgeAttackSlowWeaponAttackSetting
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC2[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentCustomTimeDilation_CustomTimeDilation; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC3[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting) == 0x000008, "Wrong alignment on RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting");
static_assert(sizeof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting) == 0x000058, "Wrong size on RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_GetGameSystemManager_Manager) == 0x000018, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_GetCurrentCustomTimeDilation_CustomTimeDilation) == 0x000024, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_GetCurrentCustomTimeDilation_CustomTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x00002C, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_FMax_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_GetSASCodeActorList_CodeList) == 0x000038, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x000048, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_JustDodgeAttackSlowWeaponAttackSetting::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetActorAllTickEnabled
// 0x0060 (0x0060 - 0x0000)
struct RSBattlePlayer_C_SetActorAllTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC4[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BulletManageComponent_C*            LBulletComponent;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_BulletManageComponent_C*>    LComponentList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC5[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ResetAnimLeftStickPower_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC6[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC7[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BulletManageComponent_C*            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BC8[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_BulletManageComponent_C*>    CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetActorAllTickEnabled) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetActorAllTickEnabled");
static_assert(sizeof(RSBattlePlayer_C_SetActorAllTickEnabled) == 0x000060, "Wrong size on RSBattlePlayer_C_SetActorAllTickEnabled");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, bEnabled) == 0x000000, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, LBulletComponent) == 0x000008, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::LBulletComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, LComponentList) == 0x000010, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::LComponentList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000021, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, Temp_int_Array_Index_Variable) == 0x000024, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_ResetAnimLeftStickPower_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_ResetAnimLeftStickPower_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetActorAllTickEnabled, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_SetActorAllTickEnabled::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FinishBattleStartTimer
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_FinishBattleStartTimer final
{
public:
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_FinishBattleStartTimer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_FinishBattleStartTimer");
static_assert(sizeof(RSBattlePlayer_C_FinishBattleStartTimer) == 0x000010, "Wrong size on RSBattlePlayer_C_FinishBattleStartTimer");
static_assert(offsetof(RSBattlePlayer_C_FinishBattleStartTimer, CallFunc_GetEnpcComp_ReturnComp) == 0x000000, "Member 'RSBattlePlayer_C_FinishBattleStartTimer::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FinishBattleStartTimer, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_FinishBattleStartTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetNoCollisionAndStopAiFade
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_SetNoCollisionAndStopAiFade final
{
public:
	bool                                          bNoColAndStopAi;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNoCollisionAndStopAiFade_dummy;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetNoCollisionAndStopAiFade");
static_assert(sizeof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade) == 0x000007, "Wrong size on RSBattlePlayer_C_SetNoCollisionAndStopAiFade");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, bNoColAndStopAi) == 0x000000, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::bNoColAndStopAi' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, CallFunc_SetNoCollisionAndStopAiFade_dummy) == 0x000005, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::CallFunc_SetNoCollisionAndStopAiFade_dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNoCollisionAndStopAiFade, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_SetNoCollisionAndStopAiFade::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcAccumulationByAttack
// 0x0138 (0x0138 - 0x0000)
struct RSBattlePlayer_C_CalcAccumulationByAttack final
{
public:
	float                                         RefWince;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefKnockback;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefDown;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLaunch;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlame;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectric;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlooded;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefOil;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefConfusion;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashScale;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashCapCheckRate;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BC9[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefenseActor;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttackType                            AttackType;                                        // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyActor;                                        // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BCA[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0040(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccumulationByAttack_ReturnValue;     // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccumulationByAttack_ForPlayer_ReturnValue; // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CalcAccumulationByAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcAccumulationByAttack");
static_assert(sizeof(RSBattlePlayer_C_CalcAccumulationByAttack) == 0x000138, "Wrong size on RSBattlePlayer_C_CalcAccumulationByAttack");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefWince) == 0x000000, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefWince' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefKnockback) == 0x000004, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefKnockback' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefDown) == 0x000008, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefLaunch) == 0x00000C, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefLaunch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefFlame) == 0x000010, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefFlame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefElectric) == 0x000014, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefElectric' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefFlooded) == 0x000018, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefFlooded' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefOil) == 0x00001C, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefOil' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefConfusion) == 0x000020, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefConfusion' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefCrashScale) == 0x000024, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, RefCrashCapCheckRate) == 0x000028, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::RefCrashCapCheckRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, DefenseActor) == 0x000030, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::DefenseActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, AttackType) == 0x000038, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::AttackType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, bCopyActor) == 0x000039, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::bCopyActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, SkillInfo) == 0x000040, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, ReturnValue) == 0x000130, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, CallFunc_CalcAccumulationByAttack_ReturnValue) == 0x000131, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::CallFunc_CalcAccumulationByAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcAccumulationByAttack, CallFunc_CalcAccumulationByAttack_ForPlayer_ReturnValue) == 0x000132, "Member 'RSBattlePlayer_C_CalcAccumulationByAttack::CallFunc_CalcAccumulationByAttack_ForPlayer_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FrameDamage
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_FrameDamage final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_FrameDamage) == 0x000004, "Wrong alignment on RSBattlePlayer_C_FrameDamage");
static_assert(sizeof(RSBattlePlayer_C_FrameDamage) == 0x000008, "Wrong size on RSBattlePlayer_C_FrameDamage");
static_assert(offsetof(RSBattlePlayer_C_FrameDamage, Sec) == 0x000000, "Member 'RSBattlePlayer_C_FrameDamage::Sec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FrameDamage, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000004, "Member 'RSBattlePlayer_C_FrameDamage::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FrameDamage, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_FrameDamage::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayVibrationByDamageReaction
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_PlayVibrationByDamageReaction final
{
public:
	EPlayerDamageKind                             DamageKind;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BCB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BCC[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PlayVibrationByDamageReaction) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlayVibrationByDamageReaction");
static_assert(sizeof(RSBattlePlayer_C_PlayVibrationByDamageReaction) == 0x000020, "Wrong size on RSBattlePlayer_C_PlayVibrationByDamageReaction");
static_assert(offsetof(RSBattlePlayer_C_PlayVibrationByDamageReaction, DamageKind) == 0x000000, "Member 'RSBattlePlayer_C_PlayVibrationByDamageReaction::DamageKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayVibrationByDamageReaction, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_PlayVibrationByDamageReaction::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayVibrationByDamageReaction, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'RSBattlePlayer_C_PlayVibrationByDamageReaction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayVibrationByDamageReaction, CallFunc_GetGameSystemManager_Manager_1) == 0x000018, "Member 'RSBattlePlayer_C_PlayVibrationByDamageReaction::CallFunc_GetGameSystemManager_Manager_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCharacterMovementPerchRadiusThreshold
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold final
{
public:
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BCD[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold");
static_assert(sizeof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold) == 0x000010, "Wrong size on RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold, CallFunc_IsPlayerStatus_Result) == 0x000000, "Member 'RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold, CallFunc_IsPlayerStatus_Result_1) == 0x000001, "Member 'RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetCharacterMovementPerchRadiusThreshold::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckNeedItemUse
// 0x00C0 (0x00C0 - 0x0000)
struct RSBattlePlayer_C_CheckNeedItemUse final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BCE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          LbOK;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BCF[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContentsOpened_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD0[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveSASNum_Num;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckOperationRestrictionFlag_ReturnValue; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD1[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue_1;              // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD2[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBrainFieldCount_ReturnValue;           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD3[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusAny_bBadStatus;                // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD4[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStatusAny_bBadStatus_1;              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD5[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD6[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_1;    // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD7[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_Percent_1;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD8[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckNeedItemUse) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckNeedItemUse");
static_assert(sizeof(RSBattlePlayer_C_CheckNeedItemUse) == 0x0000C0, "Wrong size on RSBattlePlayer_C_CheckNeedItemUse");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, ItemId) == 0x000000, "Member 'RSBattlePlayer_C_CheckNeedItemUse::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, bOK) == 0x000001, "Member 'RSBattlePlayer_C_CheckNeedItemUse::bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, LPlayerList) == 0x000008, "Member 'RSBattlePlayer_C_CheckNeedItemUse::LPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, LbOK) == 0x000018, "Member 'RSBattlePlayer_C_CheckNeedItemUse::LbOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Array_Index_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsContentsOpened_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsContentsOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetActiveSASNum_Num) == 0x000034, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetActiveSASNum_Num' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_CheckOperationRestrictionFlag_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_CheckOperationRestrictionFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Greater_IntInt_ReturnValue) == 0x000039, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetPlayerList_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetPlayerList_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetPlayerList_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetBrainFieldCount_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetBrainFieldCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000070, "Member 'RSBattlePlayer_C_CheckNeedItemUse::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'RSBattlePlayer_C_CheckNeedItemUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsBadStatusAny_bBadStatus) == 0x000082, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsBadStatusAny_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsBadStatusAny_bBadStatus_1) == 0x00008C, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsBadStatusAny_bBadStatus_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetHPPercent_Percent) == 0x000090, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Less_FloatFloat_ReturnValue) == 0x000094, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, K2Node_DynamicCast_AsBPI_Character_Paramater_1) == 0x000098, "Member 'RSBattlePlayer_C_CheckNeedItemUse::K2Node_DynamicCast_AsBPI_Character_Paramater_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'RSBattlePlayer_C_CheckNeedItemUse::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_GetHPPercent_Percent_1) == 0x0000AC, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_GetHPPercent_Percent_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000B1, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Array_Length_ReturnValue_1) == 0x0000B4, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, Temp_int_Loop_Num_Variable_1) == 0x0000B8, "Member 'RSBattlePlayer_C_CheckNeedItemUse::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000BC, "Member 'RSBattlePlayer_C_CheckNeedItemUse::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNeedItemUse, K2Node_SwitchEnum_CmpSuccess) == 0x0000BD, "Member 'RSBattlePlayer_C_CheckNeedItemUse::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerHitEffectPriority
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetPlayerHitEffectPriority final
{
public:
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerHitEffectPriority) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetPlayerHitEffectPriority");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerHitEffectPriority) == 0x000002, "Wrong size on RSBattlePlayer_C_SetPlayerHitEffectPriority");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHitEffectPriority, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerHitEffectPriority::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerHitEffectPriority, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerHitEffectPriority::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginUseItem
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnBeginUseItem final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNpc;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBeginUseItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnBeginUseItem");
static_assert(sizeof(RSBattlePlayer_C_OnBeginUseItem) == 0x000003, "Wrong size on RSBattlePlayer_C_OnBeginUseItem");
static_assert(offsetof(RSBattlePlayer_C_OnBeginUseItem, ItemId) == 0x000000, "Member 'RSBattlePlayer_C_OnBeginUseItem::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginUseItem, bIsNpc) == 0x000001, "Member 'RSBattlePlayer_C_OnBeginUseItem::bIsNpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBeginUseItem, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'RSBattlePlayer_C_OnBeginUseItem::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleDamage3D
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_SetBattleDamage3D final
{
public:
	class AHUDMainGame_C*                         HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position3D;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsPlayer;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCritical;                                        // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSasCritical;                                     // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBrainCrashCritical;                              // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHeal;                                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeak;                                            // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNoDamage;                                        // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD9[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   CrushTarget;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CrushBonus;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbNoDamage;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage;     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBattleDamage3D) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBattleDamage3D");
static_assert(sizeof(RSBattlePlayer_C_SetBattleDamage3D) == 0x000040, "Wrong size on RSBattlePlayer_C_SetBattleDamage3D");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, HUD) == 0x000000, "Member 'RSBattlePlayer_C_SetBattleDamage3D::HUD' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, Damage) == 0x000008, "Member 'RSBattlePlayer_C_SetBattleDamage3D::Damage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, Position3D) == 0x00000C, "Member 'RSBattlePlayer_C_SetBattleDamage3D::Position3D' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, Param_IsPlayer) == 0x000018, "Member 'RSBattlePlayer_C_SetBattleDamage3D::Param_IsPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsCritical) == 0x000019, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsCritical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsSasCritical) == 0x00001A, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsSasCritical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsBrainCrashCritical) == 0x00001B, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsBrainCrashCritical' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsHeal) == 0x00001C, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsHeal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsWeak) == 0x00001D, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsWeak' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, IsNoDamage) == 0x00001E, "Member 'RSBattlePlayer_C_SetBattleDamage3D::IsNoDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CrushTarget) == 0x000020, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CrushTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CrushBonus) == 0x000028, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CrushBonus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, Offset) == 0x00002C, "Member 'RSBattlePlayer_C_SetBattleDamage3D::Offset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, LbNoDamage) == 0x000034, "Member 'RSBattlePlayer_C_SetBattleDamage3D::LbNoDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000035, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CallFunc_IsControlAI_bAI) == 0x000036, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CallFunc_Not_PreBool_ReturnValue) == 0x000037, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleDamage3D, CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage) == 0x000038, "Member 'RSBattlePlayer_C_SetBattleDamage3D::CallFunc_NeedsDispNoDamage_bNeedsDipsNoDamage' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplyNpcDrive
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_ApplyNpcDrive final
{
public:
	bool                                          CallFunc_IsReservedNpcDrive_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDriveNpc_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveReadyAble_bOK;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ApplyNpcDrive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ApplyNpcDrive");
static_assert(sizeof(RSBattlePlayer_C_ApplyNpcDrive) == 0x000003, "Wrong size on RSBattlePlayer_C_ApplyNpcDrive");
static_assert(offsetof(RSBattlePlayer_C_ApplyNpcDrive, CallFunc_IsReservedNpcDrive_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ApplyNpcDrive::CallFunc_IsReservedNpcDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyNpcDrive, CallFunc_IsEnableDriveNpc_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_ApplyNpcDrive::CallFunc_IsEnableDriveNpc_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyNpcDrive, CallFunc_IsDriveReadyAble_bOK) == 0x000002, "Member 'RSBattlePlayer_C_ApplyNpcDrive::CallFunc_IsDriveReadyAble_bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputSasReady
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputSasReady final
{
public:
	EPlayerInputSASReadyType                      ReadyType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputSasReady) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputSasReady");
static_assert(sizeof(RSBattlePlayer_C_OnInputSasReady) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputSasReady");
static_assert(offsetof(RSBattlePlayer_C_OnInputSasReady, ReadyType) == 0x000000, "Member 'RSBattlePlayer_C_OnInputSasReady::ReadyType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionLeft
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft final
{
public:
	E_SASButton                                   CallFunc_GetButtonLeft_Button;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASFromButton_Kind;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft) == 0x000002, "Wrong size on RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft, CallFunc_GetButtonLeft_Button) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft::CallFunc_GetButtonLeft_Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft, CallFunc_GetSASFromButton_Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionLeft::CallFunc_GetSASFromButton_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionRight
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerCombinationVisionRight final
{
public:
	E_SASButton                                   CallFunc_GetButtonRight_Button;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASFromButton_Kind;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerCombinationVisionRight) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerCombinationVisionRight");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerCombinationVisionRight) == 0x000002, "Wrong size on RSBattlePlayer_C_OnInputTriggerCombinationVisionRight");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionRight, CallFunc_GetButtonRight_Button) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionRight::CallFunc_GetButtonRight_Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionRight, CallFunc_GetSASFromButton_Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionRight::CallFunc_GetSASFromButton_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionUp
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerCombinationVisionUp final
{
public:
	E_SASButton                                   CallFunc_GetButtonUp_Button;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASFromButton_Kind;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerCombinationVisionUp) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerCombinationVisionUp");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerCombinationVisionUp) == 0x000002, "Wrong size on RSBattlePlayer_C_OnInputTriggerCombinationVisionUp");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionUp, CallFunc_GetButtonUp_Button) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionUp::CallFunc_GetButtonUp_Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionUp, CallFunc_GetSASFromButton_Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionUp::CallFunc_GetSASFromButton_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionDown
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerCombinationVisionDown final
{
public:
	E_SASButton                                   CallFunc_GetButtonDown_Button;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     CallFunc_GetSASFromButton_Kind;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerCombinationVisionDown) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerCombinationVisionDown");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerCombinationVisionDown) == 0x000002, "Wrong size on RSBattlePlayer_C_OnInputTriggerCombinationVisionDown");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionDown, CallFunc_GetButtonDown_Button) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionDown::CallFunc_GetButtonDown_Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerCombinationVisionDown, CallFunc_GetSASFromButton_Kind) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerCombinationVisionDown::CallFunc_GetSASFromButton_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputCombinationVision
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_InputCombinationVision final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               Temp_byte_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_12;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_13;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_14;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_15;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_16;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_17;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_18;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_19;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_20;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_21;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSAS_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               Temp_byte_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackedFlyingCombo_ReturnValue;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActionStateObstructPsychic_bDummy;     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKindNative                               K2Node_Select_Default;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseAbleCombinationVision_ReturnValue;   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            K2Node_Select_Default_1;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputCombinationVision) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputCombinationVision");
static_assert(sizeof(RSBattlePlayer_C_InputCombinationVision) == 0x000024, "Wrong size on RSBattlePlayer_C_InputCombinationVision");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Kind) == 0x000000, "Member 'RSBattlePlayer_C_InputCombinationVision::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable) == 0x000001, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_1) == 0x000002, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_2) == 0x000003, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_3) == 0x000004, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_4) == 0x000005, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_5) == 0x000006, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_6) == 0x000007, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_7) == 0x000008, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_8) == 0x000009, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_9) == 0x00000A, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_10) == 0x00000B, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_11) == 0x00000C, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_12) == 0x00000D, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_13) == 0x00000E, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_14) == 0x00000F, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_15) == 0x000010, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_16) == 0x000011, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_17) == 0x000012, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_18) == 0x000013, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_19) == 0x000014, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_20) == 0x000015, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_21) == 0x000016, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsActionStatus_Result) == 0x000017, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsEnableSAS_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsEnableSAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_22) == 0x000019, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, Temp_byte_Variable_23) == 0x00001A, "Member 'RSBattlePlayer_C_InputCombinationVision::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsPlayerInAerial_ReturnValue) == 0x00001B, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsAttackedFlyingCombo_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsAttackedFlyingCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsEnableActionAttack_bEnable) == 0x00001D, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_SetActionStateObstructPsychic_bDummy) == 0x00001E, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_SetActionStateObstructPsychic_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, K2Node_Select_Default) == 0x00001F, "Member 'RSBattlePlayer_C_InputCombinationVision::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_IsUseAbleCombinationVision_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_IsUseAbleCombinationVision_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, K2Node_Select_Default_1) == 0x000021, "Member 'RSBattlePlayer_C_InputCombinationVision::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_InputAttack_return) == 0x000022, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputCombinationVision, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000023, "Member 'RSBattlePlayer_C_InputCombinationVision::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckExecuteNotifyKind
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckExecuteNotifyKind final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharaExecuteNotifyKind                       ExecuteKind;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExecute;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbExecute;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSASAcceleTelepo_IsActive;     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_2;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_3;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_4;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckExecuteNotifyKind) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckExecuteNotifyKind");
static_assert(sizeof(RSBattlePlayer_C_CheckExecuteNotifyKind) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckExecuteNotifyKind");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, Param_Owner) == 0x000000, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, ExecuteKind) == 0x000008, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::ExecuteKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, IsExecute) == 0x000009, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::IsExecute' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, LbExecute) == 0x00000A, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::LbExecute' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsActiveEnpcSASAcceleTelepo_IsActive) == 0x00000C, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsActiveEnpcSASAcceleTelepo_IsActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00000D, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x00000F, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsEnemyPlayer_bEnemyPlayer_2) == 0x000010, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsEnemyPlayer_bEnemyPlayer_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsEnemyPlayer_bEnemyPlayer_3) == 0x000011, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsEnemyPlayer_bEnemyPlayer_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_IsEnemyPlayer_bEnemyPlayer_4) == 0x000012, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_IsEnemyPlayer_bEnemyPlayer_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExecuteNotifyKind, CallFunc_Not_PreBool_ReturnValue_1) == 0x000013, "Member 'RSBattlePlayer_C_CheckExecuteNotifyKind::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckCombinationVisionCost
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_CheckCombinationVisionCost final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbOK;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetButtonFromSAS_bFind;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASButton                                   CallFunc_GetButtonFromSAS_Button;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BDA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCombinationVisionCost_Cost;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSASRecastAndActiveGaugeRate_SASGaugeRate; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSASRecastAndActiveGaugeRate_isActive;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckCombinationVisionCost) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckCombinationVisionCost");
static_assert(sizeof(RSBattlePlayer_C_CheckCombinationVisionCost) == 0x000014, "Wrong size on RSBattlePlayer_C_CheckCombinationVisionCost");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, Kind) == 0x000000, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, bOK) == 0x000001, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, LbOK) == 0x000002, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::LbOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GetButtonFromSAS_bFind) == 0x000003, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GetButtonFromSAS_bFind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GetButtonFromSAS_Button) == 0x000004, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GetButtonFromSAS_Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GetCombinationVisionCost_Cost) == 0x000008, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GetCombinationVisionCost_Cost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GetSASRecastAndActiveGaugeRate_SASGaugeRate) == 0x00000C, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GetSASRecastAndActiveGaugeRate_SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GetSASRecastAndActiveGaugeRate_isActive) == 0x000010, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GetSASRecastAndActiveGaugeRate_isActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckCombinationVisionCost, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_CheckCombinationVisionCost::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCombinationVisionCost
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_GetCombinationVisionCost final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BDB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cost;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCost;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LParam;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BDC[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BDD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INexusDriveInterface>  K2Node_DynamicCast_AsNexus_Drive_Interface;        // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BDE[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNexusDriveCombinationVisionCost_OutCost; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNexusDriveCombinationVisionCost_ReturnValue; // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BDF[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE0[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCombinationVisionCost) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCombinationVisionCost");
static_assert(sizeof(RSBattlePlayer_C_GetCombinationVisionCost) == 0x000050, "Wrong size on RSBattlePlayer_C_GetCombinationVisionCost");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, Kind) == 0x000000, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, Cost) == 0x000004, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::Cost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, LCost) == 0x000008, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::LCost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, LParam) == 0x00000C, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::LParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, Temp_byte_Variable) == 0x000010, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, Temp_float_Variable) == 0x000014, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_Conv_IntToByte_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, K2Node_DynamicCast_AsNexus_Drive_Interface) == 0x000020, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::K2Node_DynamicCast_AsNexus_Drive_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_GetValidValue_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, K2Node_MathExpression_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_GetNexusDriveCombinationVisionCost_OutCost) == 0x000038, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_GetNexusDriveCombinationVisionCost_OutCost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_GetNexusDriveCombinationVisionCost_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_GetNexusDriveCombinationVisionCost_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_IsDriveMode_bDrive) == 0x000044, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000045, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, CallFunc_GetPlayerAccessoryEffect_Param) == 0x000048, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCombinationVisionCost, K2Node_Select_Default) == 0x00004C, "Member 'RSBattlePlayer_C_GetCombinationVisionCost::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAttractSelf
// 0x01D8 (0x01D8 - 0x0000)
struct RSBattlePlayer_C_CheckAttractSelf final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuperArmor_bSuperArmor;                 // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttractSelf_ReturnValue;             // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageCollisionInvincible_bInvincible;  // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerSuperArmor_bSuperArmor;           // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01C7(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnemyAttractType                             CallFunc_GetAttractType_ReturnValue;               // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE1[0x2];                                     // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         CallFunc_GetCharacterHitPriorityInterface_ReturnValue; // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAttractSelf) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckAttractSelf");
static_assert(sizeof(RSBattlePlayer_C_CheckAttractSelf) == 0x0001D8, "Wrong size on RSBattlePlayer_C_CheckAttractSelf");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_CheckAttractSelf::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, ReturnValue) == 0x0001C0, "Member 'RSBattlePlayer_C_CheckAttractSelf::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_IsSuperArmor_bSuperArmor) == 0x0001C1, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_IsSuperArmor_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_CheckAttractSelf_ReturnValue) == 0x0001C2, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_CheckAttractSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_IsMetalMode_bMetal) == 0x0001C3, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0001C4, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_IsDamageCollisionInvincible_bInvincible) == 0x0001C5, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_IsDamageCollisionInvincible_bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_IsPlayerSuperArmor_bSuperArmor) == 0x0001C6, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_IsPlayerSuperArmor_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, Temp_byte_Variable) == 0x0001C7, "Member 'RSBattlePlayer_C_CheckAttractSelf::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_GetAttractType_ReturnValue) == 0x0001C8, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_GetAttractType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001C9, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_Array_Find_ReturnValue) == 0x0001CC, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001D0, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_GetCharacterHitPriorityInterface_ReturnValue) == 0x0001D1, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_GetCharacterHitPriorityInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAttractSelf, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0001D2, "Member 'RSBattlePlayer_C_CheckAttractSelf::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetNeonNotifyActionFailed
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetNeonNotifyActionFailed final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BE2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   CallFunc_SpawnSoundAtLocationRS_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetNeonNotifyActionFailed) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetNeonNotifyActionFailed");
static_assert(sizeof(RSBattlePlayer_C_SetNeonNotifyActionFailed) == 0x000018, "Wrong size on RSBattlePlayer_C_SetNeonNotifyActionFailed");
static_assert(offsetof(RSBattlePlayer_C_SetNeonNotifyActionFailed, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SetNeonNotifyActionFailed::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNeonNotifyActionFailed, CallFunc_SpawnSoundAtLocationRS_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetNeonNotifyActionFailed::CallFunc_SpawnSoundAtLocationRS_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SubCombinationVisionCost
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SubCombinationVisionCost final
{
public:
	EPlayerID                                     HologramPlayerID;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SubCombinationVisionCost) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SubCombinationVisionCost");
static_assert(sizeof(RSBattlePlayer_C_SubCombinationVisionCost) == 0x000002, "Wrong size on RSBattlePlayer_C_SubCombinationVisionCost");
static_assert(offsetof(RSBattlePlayer_C_SubCombinationVisionCost, HologramPlayerID) == 0x000000, "Member 'RSBattlePlayer_C_SubCombinationVisionCost::HologramPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SubCombinationVisionCost, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SubCombinationVisionCost::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableDispNoDamage
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnableDispNoDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnableDispNoDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnableDispNoDamage");
static_assert(sizeof(RSBattlePlayer_C_SetEnableDispNoDamage) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnableDispNoDamage");
static_assert(offsetof(RSBattlePlayer_C_SetEnableDispNoDamage, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEnableDispNoDamage::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnableDispNoDamage, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEnableDispNoDamage::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSasStealth
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_InitializeSasStealth final
{
public:
	class ARSBattlePlayer_C*                      LMainPlayer;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    LPlayerManager;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStealth_return;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthFromEvent_bFromEvent;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE3[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE4[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitializeSasStealth) == 0x000008, "Wrong alignment on RSBattlePlayer_C_InitializeSasStealth");
static_assert(sizeof(RSBattlePlayer_C_InitializeSasStealth) == 0x000038, "Wrong size on RSBattlePlayer_C_InitializeSasStealth");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, LMainPlayer) == 0x000000, "Member 'RSBattlePlayer_C_InitializeSasStealth::LMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, LPlayerManager) == 0x000008, "Member 'RSBattlePlayer_C_InitializeSasStealth::LPlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsStealth_return) == 0x000010, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsStealth_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsStealthFromEvent_bFromEvent) == 0x000011, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsStealthFromEvent_bFromEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_GetMainPlayer_Player) == 0x000018, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsActiveSAS_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsActiveSAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_SetSasStealth_dummy) == 0x000021, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_SetSasStealth_dummy_1) == 0x000022, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_SetSasStealth_dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000031, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitializeSasStealth, CallFunc_IsMainPlayer_bMainPlayer) == 0x000032, "Member 'RSBattlePlayer_C_InitializeSasStealth::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestartFootIK
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_RestartFootIK final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetFootIKEnable_Dummy;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFootIKEnable_Dummy_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestartFootIK) == 0x000004, "Wrong alignment on RSBattlePlayer_C_RestartFootIK");
static_assert(sizeof(RSBattlePlayer_C_RestartFootIK) == 0x000008, "Wrong size on RSBattlePlayer_C_RestartFootIK");
static_assert(offsetof(RSBattlePlayer_C_RestartFootIK, BlendTime) == 0x000000, "Member 'RSBattlePlayer_C_RestartFootIK::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestartFootIK, CallFunc_SetFootIKEnable_Dummy) == 0x000004, "Member 'RSBattlePlayer_C_RestartFootIK::CallFunc_SetFootIKEnable_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestartFootIK, CallFunc_SetFootIKEnable_Dummy_1) == 0x000005, "Member 'RSBattlePlayer_C_RestartFootIK::CallFunc_SetFootIKEnable_Dummy_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDirectAttackWpPrimitive
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetDirectAttackWpPrimitive final
{
public:
	class UPrimitiveComponent*                    OutPrimitive;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetDirectAttackWpPrimitive) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetDirectAttackWpPrimitive");
static_assert(sizeof(RSBattlePlayer_C_GetDirectAttackWpPrimitive) == 0x000010, "Wrong size on RSBattlePlayer_C_GetDirectAttackWpPrimitive");
static_assert(offsetof(RSBattlePlayer_C_GetDirectAttackWpPrimitive, OutPrimitive) == 0x000000, "Member 'RSBattlePlayer_C_GetDirectAttackWpPrimitive::OutPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDirectAttackWpPrimitive, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetDirectAttackWpPrimitive::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetHiddenCharacterAttachment
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetHiddenCharacterAttachment final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetHiddenCharacterAttachment) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetHiddenCharacterAttachment");
static_assert(sizeof(RSBattlePlayer_C_SetHiddenCharacterAttachment) == 0x000002, "Wrong size on RSBattlePlayer_C_SetHiddenCharacterAttachment");
static_assert(offsetof(RSBattlePlayer_C_SetHiddenCharacterAttachment, NewHidden) == 0x000000, "Member 'RSBattlePlayer_C_SetHiddenCharacterAttachment::NewHidden' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHiddenCharacterAttachment, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetHiddenCharacterAttachment::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableBehaviorTreeByClaimantName
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisable;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName");
static_assert(sizeof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName) == 0x000018, "Wrong size on RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, bDisable) == 0x000008, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, CallFunc_Array_RemoveItem_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000015, "Member 'RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopBehaviorTree
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_StopBehaviorTree final
{
public:
	bool                                          bTickDisable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StopBehaviorTree) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StopBehaviorTree");
static_assert(sizeof(RSBattlePlayer_C_StopBehaviorTree) == 0x000002, "Wrong size on RSBattlePlayer_C_StopBehaviorTree");
static_assert(offsetof(RSBattlePlayer_C_StopBehaviorTree, bTickDisable) == 0x000000, "Member 'RSBattlePlayer_C_StopBehaviorTree::bTickDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopBehaviorTree, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_StopBehaviorTree::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestartBehaviorTree
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_RestartBehaviorTree final
{
public:
	bool                                          bTickEnable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestartBehaviorTree) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RestartBehaviorTree");
static_assert(sizeof(RSBattlePlayer_C_RestartBehaviorTree) == 0x000002, "Wrong size on RSBattlePlayer_C_RestartBehaviorTree");
static_assert(offsetof(RSBattlePlayer_C_RestartBehaviorTree, bTickEnable) == 0x000000, "Member 'RSBattlePlayer_C_RestartBehaviorTree::bTickEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestartBehaviorTree, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_RestartBehaviorTree::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackSub
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerAttackSub final
{
public:
	ERSAttackInputKind                            LPsychicToWeapon;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerAttackSub) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerAttackSub");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerAttackSub) == 0x000001, "Wrong size on RSBattlePlayer_C_OnInputTriggerAttackSub");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackSub, LPsychicToWeapon) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerAttackSub::LPsychicToWeapon' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackLongPressSub
// 0x006F (0x006F - 0x0000)
struct RSBattlePlayer_C_OnInputTriggerAttackLongPressSub final
{
public:
	bool                                          bInAerial;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_89;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_92;                             // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_94;                             // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_GetComboAttackInputKind_ReturnValue_1;    // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputAttack_return;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackInputAccept_ReturnValue;          // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputTriggerAttackLongPressSub");
static_assert(sizeof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub) == 0x00006F, "Wrong size on RSBattlePlayer_C_OnInputTriggerAttackLongPressSub");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, bInAerial) == 0x000000, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::bInAerial' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_1) == 0x000002, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_2) == 0x000003, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_3) == 0x000004, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_4) == 0x000005, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_5) == 0x000006, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_6) == 0x000007, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_7) == 0x000008, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_8) == 0x000009, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_9) == 0x00000A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_10) == 0x00000B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_11) == 0x00000C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_12) == 0x00000D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_13) == 0x00000E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_14) == 0x00000F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_15) == 0x000010, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_16) == 0x000011, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_17) == 0x000012, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_18) == 0x000013, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_19) == 0x000014, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_20) == 0x000015, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_21) == 0x000016, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_22) == 0x000017, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_23) == 0x000018, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_24) == 0x000019, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_25) == 0x00001A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_26) == 0x00001B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_27) == 0x00001C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_28) == 0x00001D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_29) == 0x00001E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_30) == 0x00001F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_31) == 0x000020, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_32) == 0x000021, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_33) == 0x000022, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_34) == 0x000023, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_35) == 0x000024, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_36) == 0x000025, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_37) == 0x000026, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_38) == 0x000027, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_39) == 0x000028, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_40) == 0x000029, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_41) == 0x00002A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_42) == 0x00002B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_43) == 0x00002C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_44) == 0x00002D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_45) == 0x00002E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_46) == 0x00002F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_47) == 0x000030, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_48) == 0x000031, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_49) == 0x000032, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_50) == 0x000033, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_51) == 0x000034, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_52) == 0x000035, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_53) == 0x000036, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_54) == 0x000037, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_55) == 0x000038, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_56) == 0x000039, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_57) == 0x00003A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_58) == 0x00003B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_59) == 0x00003C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_60) == 0x00003D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_61) == 0x00003E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_62) == 0x00003F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_63) == 0x000040, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_64) == 0x000041, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_65) == 0x000042, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_66) == 0x000043, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_67) == 0x000044, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_68) == 0x000045, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_69) == 0x000046, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_70) == 0x000047, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_71) == 0x000048, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_72) == 0x000049, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_73) == 0x00004A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_74) == 0x00004B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_75) == 0x00004C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_76) == 0x00004D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_77) == 0x00004E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_78) == 0x00004F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_79) == 0x000050, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_80) == 0x000051, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_81) == 0x000052, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_82) == 0x000053, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_83) == 0x000054, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_84) == 0x000055, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_85) == 0x000056, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_86) == 0x000057, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_87) == 0x000058, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_88) == 0x000059, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_89) == 0x00005A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_90) == 0x00005B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsPlayerStatus_Result) == 0x00005C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_Not_PreBool_ReturnValue) == 0x00005D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_91) == 0x00005E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_92) == 0x00005F, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_GetComboAttackInputKind_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_GetComboAttackInputKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000061, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsActionStatus_Result) == 0x000062, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_93) == 0x000063, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_byte_Variable) == 0x000065, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_94) == 0x000066, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_GetComboAttackInputKind_ReturnValue_1) == 0x000067, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_GetComboAttackInputKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_InputAttack_return) == 0x000068, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_InputAttack_return_1) == 0x000069, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, Temp_bool_Variable_95) == 0x00006A, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsActionStatus_Result_1) == 0x00006B, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, K2Node_Select_Default) == 0x00006C, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsEnableActionAttack_bEnable) == 0x00006D, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputTriggerAttackLongPressSub, CallFunc_IsAttackInputAccept_ReturnValue) == 0x00006E, "Member 'RSBattlePlayer_C_OnInputTriggerAttackLongPressSub::CallFunc_IsAttackInputAccept_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseAttackSub
// 0x000B (0x000B - 0x0000)
struct RSBattlePlayer_C_OnInputReleaseAttackSub final
{
public:
	bool                                          CallFunc_IsAttackedFlyingCombo_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_1;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_2;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_3;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackInputAccept_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InputAttack_return_4;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInputReleaseAttackSub) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnInputReleaseAttackSub");
static_assert(sizeof(RSBattlePlayer_C_OnInputReleaseAttackSub) == 0x00000B, "Wrong size on RSBattlePlayer_C_OnInputReleaseAttackSub");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsAttackedFlyingCombo_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsAttackedFlyingCombo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_InputAttack_return) == 0x000001, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_InputAttack_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_InputAttack_return_1) == 0x000002, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_InputAttack_return_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_InputAttack_return_2) == 0x000004, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_InputAttack_return_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_InputAttack_return_3) == 0x000005, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_InputAttack_return_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsControlAI_bAI) == 0x000006, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsActionStatus_Result) == 0x000007, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsEnableActionAttack_bEnable) == 0x000008, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_IsAttackInputAccept_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_IsAttackInputAccept_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInputReleaseAttackSub, CallFunc_InputAttack_return_4) == 0x00000A, "Member 'RSBattlePlayer_C_OnInputReleaseAttackSub::CallFunc_InputAttack_return_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckNoDamagePopUpFromAttacker
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker final
{
public:
	bool                                          bNoPopUp;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker");
static_assert(sizeof(RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker) == 0x000003, "Wrong size on RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker");
static_assert(offsetof(RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker, bNoPopUp) == 0x000000, "Member 'RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker::bNoPopUp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearLockTarget
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ClearLockTarget final
{
public:
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearLockTarget) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ClearLockTarget");
static_assert(sizeof(RSBattlePlayer_C_ClearLockTarget) == 0x000001, "Wrong size on RSBattlePlayer_C_ClearLockTarget");
static_assert(offsetof(RSBattlePlayer_C_ClearLockTarget, CallFunc_IsMainPlayer_bMainPlayer) == 0x000000, "Member 'RSBattlePlayer_C_ClearLockTarget::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckLockTargetOutOfBattleField
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_CheckLockTargetOutOfBattleField final
{
public:
	bool                                          bLockReleased;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbLockReleased;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE6[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   LTargetCharacter;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattlefieldManager*                    CallFunc_GetBattleFieldManager_BattleFieldManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterInCurrentBattleField_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckLockTargetOutOfBattleField");
static_assert(sizeof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField) == 0x000040, "Wrong size on RSBattlePlayer_C_CheckLockTargetOutOfBattleField");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, bLockReleased) == 0x000000, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::bLockReleased' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, LbLockReleased) == 0x000001, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::LbLockReleased' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, LTargetCharacter) == 0x000008, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::LTargetCharacter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, CallFunc_GetBattleFieldManager_BattleFieldManager) == 0x000018, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::CallFunc_GetBattleFieldManager_BattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, CallFunc_IsCharacterInCurrentBattleField_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::CallFunc_IsCharacterInCurrentBattleField_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000028, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, K2Node_DynamicCast_AsRSBattle_Character) == 0x000030, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckLockTargetOutOfBattleField, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattlePlayer_C_CheckLockTargetOutOfBattleField::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckNpcDrive_EnpcDamageReaction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction final
{
public:
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction");
static_assert(sizeof(RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction");
static_assert(offsetof(RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_CheckNpcDrive_EnpcDamageReaction::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetUseDirectionControlForAI
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetUseDirectionControlForAI final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetUseDirectionControlForAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetUseDirectionControlForAI");
static_assert(sizeof(RSBattlePlayer_C_SetUseDirectionControlForAI) == 0x000002, "Wrong size on RSBattlePlayer_C_SetUseDirectionControlForAI");
static_assert(offsetof(RSBattlePlayer_C_SetUseDirectionControlForAI, bUse) == 0x000000, "Member 'RSBattlePlayer_C_SetUseDirectionControlForAI::bUse' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetUseDirectionControlForAI, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_SetUseDirectionControlForAI::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateWeaponVisibilityForEventEnd
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd final
{
public:
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NeedsWeaponVisibility_bNeedsVisibility;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd");
static_assert(sizeof(RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd) == 0x000002, "Wrong size on RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd");
static_assert(offsetof(RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd, CallFunc_IsBattling_bBatting) == 0x000000, "Member 'RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd, CallFunc_NeedsWeaponVisibility_bNeedsVisibility) == 0x000001, "Member 'RSBattlePlayer_C_UpdateWeaponVisibilityForEventEnd::CallFunc_NeedsWeaponVisibility_bNeedsVisibility' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventManagerEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_EventManagerEnd final
{
public:
	bool                                          RestoreEnableTick;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RestoreVisibility;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerEnd_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EventManagerEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EventManagerEnd");
static_assert(sizeof(RSBattlePlayer_C_EventManagerEnd) == 0x000004, "Wrong size on RSBattlePlayer_C_EventManagerEnd");
static_assert(offsetof(RSBattlePlayer_C_EventManagerEnd, RestoreEnableTick) == 0x000000, "Member 'RSBattlePlayer_C_EventManagerEnd::RestoreEnableTick' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventManagerEnd, RestoreVisibility) == 0x000001, "Member 'RSBattlePlayer_C_EventManagerEnd::RestoreVisibility' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventManagerEnd, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_EventManagerEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventManagerEnd, CallFunc_EventManagerEnd_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_EventManagerEnd::CallFunc_EventManagerEnd_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicFieldDamageRateToBoss
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss");
static_assert(sizeof(RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss) == 0x000002, "Wrong size on RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000001, "Member 'RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ChargeSASRemainTime
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_ChargeSASRemainTime final
{
public:
	float                                         ChargeRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ChargeSASRemainTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ChargeSASRemainTime");
static_assert(sizeof(RSBattlePlayer_C_ChargeSASRemainTime) == 0x000004, "Wrong size on RSBattlePlayer_C_ChargeSASRemainTime");
static_assert(offsetof(RSBattlePlayer_C_ChargeSASRemainTime, ChargeRate) == 0x000000, "Member 'RSBattlePlayer_C_ChargeSASRemainTime::ChargeRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetStopEndDriveMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetStopEndDriveMode final
{
public:
	bool                                          FlagIn;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetStopEndDriveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetStopEndDriveMode");
static_assert(sizeof(RSBattlePlayer_C_SetStopEndDriveMode) == 0x000001, "Wrong size on RSBattlePlayer_C_SetStopEndDriveMode");
static_assert(offsetof(RSBattlePlayer_C_SetStopEndDriveMode, FlagIn) == 0x000000, "Member 'RSBattlePlayer_C_SetStopEndDriveMode::FlagIn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnInitializeHUD
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattlePlayer_C_OnInitializeHUD final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BE9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            LPlayerInfo;                                       // 0x0004(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	float                                         CallFunc_GetCurrentParameterRate_ReturnValue;      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BEA[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x00DC(0x00D0)(NoDestructor)
	uint8                                         Pad_7BEB[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnInitializeHUD) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnInitializeHUD");
static_assert(sizeof(RSBattlePlayer_C_OnInitializeHUD) == 0x0001C0, "Wrong size on RSBattlePlayer_C_OnInitializeHUD");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnInitializeHUD::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, LPlayerInfo) == 0x000004, "Member 'RSBattlePlayer_C_OnInitializeHUD::LPlayerInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_GetCurrentParameterRate_ReturnValue) == 0x0000D4, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_GetCurrentParameterRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_GetPlayerID_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000D9, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x0000DC, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0001B0, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnInitializeHUD, CallFunc_IsValid_ReturnValue) == 0x0001B8, "Member 'RSBattlePlayer_C_OnInitializeHUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReserveInitializeDriveMode
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattlePlayer_C_ReserveInitializeDriveMode final
{
public:
	struct FPlayerInfo                            LPlayerInfo;                                       // 0x0000(0x00D0)(Edit, BlueprintVisible, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReserveInitializeDriveMode) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ReserveInitializeDriveMode");
static_assert(sizeof(RSBattlePlayer_C_ReserveInitializeDriveMode) == 0x0000D0, "Wrong size on RSBattlePlayer_C_ReserveInitializeDriveMode");
static_assert(offsetof(RSBattlePlayer_C_ReserveInitializeDriveMode, LPlayerInfo) == 0x000000, "Member 'RSBattlePlayer_C_ReserveInitializeDriveMode::LPlayerInfo' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TelepoFadeOut
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_TelepoFadeOut final
{
public:
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TelepoFadeOut) == 0x000008, "Wrong alignment on RSBattlePlayer_C_TelepoFadeOut");
static_assert(sizeof(RSBattlePlayer_C_TelepoFadeOut) == 0x000008, "Wrong size on RSBattlePlayer_C_TelepoFadeOut");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeOut, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000000, "Member 'RSBattlePlayer_C_TelepoFadeOut::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TelepoFadeIn
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_TelepoFadeIn final
{
public:
	bool                                          bInterrupt;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BEC[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerCameraReset_Dummy;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BED[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TelepoFadeIn) == 0x000008, "Wrong alignment on RSBattlePlayer_C_TelepoFadeIn");
static_assert(sizeof(RSBattlePlayer_C_TelepoFadeIn) == 0x000020, "Wrong size on RSBattlePlayer_C_TelepoFadeIn");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, bInterrupt) == 0x000000, "Member 'RSBattlePlayer_C_TelepoFadeIn::bInterrupt' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_TelepoFadeIn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, Temp_float_Variable) == 0x000004, "Member 'RSBattlePlayer_C_TelepoFadeIn::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, Temp_float_Variable_1) == 0x000008, "Member 'RSBattlePlayer_C_TelepoFadeIn::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, CallFunc_PlayerCameraReset_Dummy) == 0x00000C, "Member 'RSBattlePlayer_C_TelepoFadeIn::CallFunc_PlayerCameraReset_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'RSBattlePlayer_C_TelepoFadeIn::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TelepoFadeIn, K2Node_Select_Default) == 0x000018, "Member 'RSBattlePlayer_C_TelepoFadeIn::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckTelepoFade
// 0x00E8 (0x00E8 - 0x0000)
struct RSBattlePlayer_C_IsCheckTelepoFade final
{
public:
	bool                                          bFade;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BEE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTarget;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbFade;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BEF[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckTelepoFade) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsCheckTelepoFade");
static_assert(sizeof(RSBattlePlayer_C_IsCheckTelepoFade) == 0x0000E8, "Wrong size on RSBattlePlayer_C_IsCheckTelepoFade");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, bFade) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::bFade' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, LTarget) == 0x000008, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::LTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, LbFade) == 0x000010, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::LbFade' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, K2Node_MakeArray_Array) == 0x000018, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, Temp_object_Variable) == 0x000040, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000050, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000058, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckTelepoFade, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_IsCheckTelepoFade::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RegisterEventEndParticle
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_RegisterEventEndParticle final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_RegisterEventEndParticle) == 0x000008, "Wrong alignment on RSBattlePlayer_C_RegisterEventEndParticle");
static_assert(sizeof(RSBattlePlayer_C_RegisterEventEndParticle) == 0x000010, "Wrong size on RSBattlePlayer_C_RegisterEventEndParticle");
static_assert(offsetof(RSBattlePlayer_C_RegisterEventEndParticle, Particle) == 0x000000, "Member 'RSBattlePlayer_C_RegisterEventEndParticle::Particle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterEventEndParticle, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_RegisterEventEndParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RegisterEventEndParticle, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_RegisterEventEndParticle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopEventEndParticle
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_StopEventEndParticle final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF1[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StopEventEndParticle) == 0x000004, "Wrong alignment on RSBattlePlayer_C_StopEventEndParticle");
static_assert(sizeof(RSBattlePlayer_C_StopEventEndParticle) == 0x00001C, "Wrong size on RSBattlePlayer_C_StopEventEndParticle");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_StopEventEndParticle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_StopEventEndParticle::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_StopEventEndParticle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_StopEventEndParticle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_StopEventEndParticle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_StopEventEndParticle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopEventEndParticle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_StopEventEndParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateBattleParticleForEventEnd
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_UpdateBattleParticleForEventEnd final
{
public:
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleParticleType_ReturnValue_1;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainFieldUser_bIsUser;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateBattleParticleForEventEnd");
static_assert(sizeof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd) == 0x000006, "Wrong size on RSBattlePlayer_C_UpdateBattleParticleForEventEnd");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_IsControlPlayer_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_SetBattleParticleType_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_SetBattleParticleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_IsDriveMode_bDrive) == 0x000002, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_SetBattleParticleType_ReturnValue_1) == 0x000003, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_SetBattleParticleType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_IsBrainFieldUser_bIsUser) == 0x000004, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_IsBrainFieldUser_bIsUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateBattleParticleForEventEnd, CallFunc_IsPlayerStatus_Result) == 0x000005, "Member 'RSBattlePlayer_C_UpdateBattleParticleForEventEnd::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateIgnoreCheckFallFlag
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_UpdateIgnoreCheckFallFlag final
{
public:
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateIgnoreCheckFallFlag) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateIgnoreCheckFallFlag");
static_assert(sizeof(RSBattlePlayer_C_UpdateIgnoreCheckFallFlag) == 0x000003, "Wrong size on RSBattlePlayer_C_UpdateIgnoreCheckFallFlag");
static_assert(offsetof(RSBattlePlayer_C_UpdateIgnoreCheckFallFlag, CallFunc_IsPlayerStatus_Result) == 0x000000, "Member 'RSBattlePlayer_C_UpdateIgnoreCheckFallFlag::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateIgnoreCheckFallFlag, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_UpdateIgnoreCheckFallFlag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateIgnoreCheckFallFlag, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_UpdateIgnoreCheckFallFlag::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetExecCombinationAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetExecCombinationAttack final
{
public:
	bool                                          bExecute;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetExecCombinationAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetExecCombinationAttack");
static_assert(sizeof(RSBattlePlayer_C_SetExecCombinationAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_SetExecCombinationAttack");
static_assert(offsetof(RSBattlePlayer_C_SetExecCombinationAttack, bExecute) == 0x000000, "Member 'RSBattlePlayer_C_SetExecCombinationAttack::bExecute' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetOverwriteSasAttackTelepo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetOverwriteSasAttackTelepo final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetOverwriteSasAttackTelepo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetOverwriteSasAttackTelepo");
static_assert(sizeof(RSBattlePlayer_C_SetOverwriteSasAttackTelepo) == 0x000001, "Wrong size on RSBattlePlayer_C_SetOverwriteSasAttackTelepo");
static_assert(offsetof(RSBattlePlayer_C_SetOverwriteSasAttackTelepo, bOverwrite) == 0x000000, "Member 'RSBattlePlayer_C_SetOverwriteSasAttackTelepo::bOverwrite' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCanDrop
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetCanDrop final
{
public:
	bool                                          IsCanDrop;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCanDrop) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetCanDrop");
static_assert(sizeof(RSBattlePlayer_C_SetCanDrop) == 0x000001, "Wrong size on RSBattlePlayer_C_SetCanDrop");
static_assert(offsetof(RSBattlePlayer_C_SetCanDrop, IsCanDrop) == 0x000000, "Member 'RSBattlePlayer_C_SetCanDrop::IsCanDrop' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTelepoCapsuleCollisionPreset
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset final
{
public:
	bool                                          bAttack;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset");
static_assert(sizeof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset) == 0x00001C, "Wrong size on RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset");
static_assert(offsetof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset, bAttack) == 0x000000, "Member 'RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset::bAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset, Temp_name_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset, Temp_name_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset, K2Node_Select_Default) == 0x000014, "Member 'RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.On Sas Select Slow
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_On_Sas_Select_Slow final
{
public:
	bool                                          bSlow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager_1;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF4[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_On_Sas_Select_Slow) == 0x000008, "Wrong alignment on RSBattlePlayer_C_On_Sas_Select_Slow");
static_assert(sizeof(RSBattlePlayer_C_On_Sas_Select_Slow) == 0x000020, "Wrong size on RSBattlePlayer_C_On_Sas_Select_Slow");
static_assert(offsetof(RSBattlePlayer_C_On_Sas_Select_Slow, bSlow) == 0x000000, "Member 'RSBattlePlayer_C_On_Sas_Select_Slow::bSlow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_On_Sas_Select_Slow, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_On_Sas_Select_Slow::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_On_Sas_Select_Slow, CallFunc_GetGameSystemManager_Manager_1) == 0x000010, "Member 'RSBattlePlayer_C_On_Sas_Select_Slow::CallFunc_GetGameSystemManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_On_Sas_Select_Slow, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000018, "Member 'RSBattlePlayer_C_On_Sas_Select_Slow::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_On_Sas_Select_Slow, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x00001C, "Member 'RSBattlePlayer_C_On_Sas_Select_Slow::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnCancelSASCutin
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnCancelSASCutin final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnCancelSASCutin) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnCancelSASCutin");
static_assert(sizeof(RSBattlePlayer_C_OnCancelSASCutin) == 0x000001, "Wrong size on RSBattlePlayer_C_OnCancelSASCutin");
static_assert(offsetof(RSBattlePlayer_C_OnCancelSASCutin, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_OnCancelSASCutin::SasKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventDownParam
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEventDownParam final
{
public:
	EPlayerDownType                               InDownType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetEventDownParam) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEventDownParam");
static_assert(sizeof(RSBattlePlayer_C_SetEventDownParam) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEventDownParam");
static_assert(offsetof(RSBattlePlayer_C_SetEventDownParam, InDownType) == 0x000000, "Member 'RSBattlePlayer_C_SetEventDownParam::InDownType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequencerEnd
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_BattleSequencerEnd final
{
public:
	bool                                          IsRestoreTransform;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSetEnemyEvent;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerEnd_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BattleSequencerEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BattleSequencerEnd");
static_assert(sizeof(RSBattlePlayer_C_BattleSequencerEnd) == 0x000006, "Wrong size on RSBattlePlayer_C_BattleSequencerEnd");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, IsRestoreTransform) == 0x000000, "Member 'RSBattlePlayer_C_BattleSequencerEnd::IsRestoreTransform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, IsSetEnemyEvent) == 0x000001, "Member 'RSBattlePlayer_C_BattleSequencerEnd::IsSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, bDriveSequence) == 0x000002, "Member 'RSBattlePlayer_C_BattleSequencerEnd::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_BattleSequencerEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, CallFunc_BattleSequencerEnd_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_BattleSequencerEnd::CallFunc_BattleSequencerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSequencerEnd, CallFunc_IsControlAI_bAI) == 0x000005, "Member 'RSBattlePlayer_C_BattleSequencerEnd::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayingSasSeeThroughCutin
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsPlayingSasSeeThroughCutin final
{
public:
	bool                                          bPlaying;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingCutin_bPlaying;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayingSasSeeThroughCutin) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayingSasSeeThroughCutin");
static_assert(sizeof(RSBattlePlayer_C_IsPlayingSasSeeThroughCutin) == 0x000003, "Wrong size on RSBattlePlayer_C_IsPlayingSasSeeThroughCutin");
static_assert(offsetof(RSBattlePlayer_C_IsPlayingSasSeeThroughCutin, bPlaying) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayingSasSeeThroughCutin::bPlaying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayingSasSeeThroughCutin, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayingSasSeeThroughCutin::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayingSasSeeThroughCutin, CallFunc_IsPlayingCutin_bPlaying) == 0x000002, "Member 'RSBattlePlayer_C_IsPlayingSasSeeThroughCutin::CallFunc_IsPlayingCutin_bPlaying' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPsychicObjectThrowParameter
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_GetPsychicObjectThrowParameter final
{
public:
	bool                                          Apply;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Directshot_throw_speed;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Directshot_homing_speed;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_throw_speed;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combo_homing_speed;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_throw_speed;                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainfield_homing_speed;                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_throw_speed;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intercept_homing_speed;                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BF6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnpcPsychicObjectThrowParameter_IsApply; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF7[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotThrowSpeed; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotHomingSpeed; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_ComboThrowSpeed; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_ComboHomingSpeed; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldThrowSpeed; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldHomingSpeed; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptThrowSpeed; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptHomingSpeed; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPsychicObjectThrowParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPsychicObjectThrowParameter");
static_assert(sizeof(RSBattlePlayer_C_GetPsychicObjectThrowParameter) == 0x000058, "Wrong size on RSBattlePlayer_C_GetPsychicObjectThrowParameter");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Apply) == 0x000000, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Apply' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Directshot_throw_speed) == 0x000004, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Directshot_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Directshot_homing_speed) == 0x000008, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Directshot_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Combo_throw_speed) == 0x00000C, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Combo_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Combo_homing_speed) == 0x000010, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Combo_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, brainfield_throw_speed) == 0x000014, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::brainfield_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, brainfield_homing_speed) == 0x000018, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::brainfield_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Intercept_throw_speed) == 0x00001C, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Intercept_throw_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, Intercept_homing_speed) == 0x000020, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::Intercept_homing_speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcComp_ReturnComp) == 0x000028, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_IsApply) == 0x000031, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_IsApply' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotThrowSpeed) == 0x000034, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotThrowSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotHomingSpeed) == 0x000038, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_DirectshotHomingSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_ComboThrowSpeed) == 0x00003C, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_ComboThrowSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_ComboHomingSpeed) == 0x000040, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_ComboHomingSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldThrowSpeed) == 0x000044, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldThrowSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldHomingSpeed) == 0x000048, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_BrainfieldHomingSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptThrowSpeed) == 0x00004C, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptThrowSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicObjectThrowParameter, CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptHomingSpeed) == 0x000050, "Member 'RSBattlePlayer_C_GetPsychicObjectThrowParameter::CallFunc_GetEnpcPsychicObjectThrowParameter_InterceptHomingSpeed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMeshFitGroundFromFoot
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetMeshFitGroundFromFoot final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetMeshFitGroundFromFoot) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetMeshFitGroundFromFoot");
static_assert(sizeof(RSBattlePlayer_C_SetMeshFitGroundFromFoot) == 0x000001, "Wrong size on RSBattlePlayer_C_SetMeshFitGroundFromFoot");
static_assert(offsetof(RSBattlePlayer_C_SetMeshFitGroundFromFoot, bUse) == 0x000000, "Member 'RSBattlePlayer_C_SetMeshFitGroundFromFoot::bUse' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcMeshFitGroundVector
// 0x03A0 (0x03A0 - 0x0000)
struct RSBattlePlayer_C_CalcMeshFitGroundVector final
{
public:
	struct FVector                                UpVector;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LBaseZ;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LRightLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LLeftLocation;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDistance;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LUpVector;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF8[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0060(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0070(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BF9[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0128(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0144(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFA[0x1];                                     // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x0248(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFB[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFC[0x2];                                     // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x02F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x02FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0314(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0330(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcMeshFitGroundVector_UpVector;         // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CalcMeshFitGroundVector) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcMeshFitGroundVector");
static_assert(sizeof(RSBattlePlayer_C_CalcMeshFitGroundVector) == 0x0003A0, "Wrong size on RSBattlePlayer_C_CalcMeshFitGroundVector");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, UpVector) == 0x000000, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::UpVector' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, LBaseZ) == 0x00000C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::LBaseZ' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, LRightLocation) == 0x000010, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::LRightLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, LLeftLocation) == 0x00001C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::LLeftLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, LDistance) == 0x000028, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::LDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, LUpVector) == 0x00002C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::LUpVector' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X) == 0x000038, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y) == 0x00003C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z) == 0x000040, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X_1) == 0x000044, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y_1) == 0x000048, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z_1) == 0x00004C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Less_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X_2) == 0x000054, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y_2) == 0x000058, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z_2) == 0x00005C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, Temp_object_Variable) == 0x000060, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, Temp_object_Variable_1) == 0x000070, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Add_FloatFloat_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000084, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000088, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00008C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000090, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000094, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue_1) == 0x0000A4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0000B0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue_2) == 0x0000C0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X_3) == 0x0000CC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y_3) == 0x0000D0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z_3) == 0x0000D4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue_3) == 0x0000D8, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000E4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_NegateVector_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_GetSocketLocation_ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Normal_ReturnValue) == 0x00010C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_Cross_VectorVector_ReturnValue) == 0x000118, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, K2Node_MakeArray_Array) == 0x000128, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_RotateAngleAxis_ReturnValue) == 0x000138, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000144, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001CC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bBlockingHit) == 0x0001CD, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001CE, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Time) == 0x0001D0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Distance) == 0x0001D4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Location) == 0x0001D8, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactPoint) == 0x0001E4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Normal) == 0x0001F0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactNormal) == 0x0001FC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_PhysMat) == 0x000208, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitActor) == 0x000210, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitComponent) == 0x000218, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitBoneName) == 0x000220, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitItem) == 0x000228, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_FaceIndex) == 0x00022C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceStart) == 0x000230, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceEnd) == 0x00023C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x000248, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x0002D0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X_4) == 0x0002D4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y_4) == 0x0002D8, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z_4) == 0x0002DC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_FClamp_ReturnValue) == 0x0002E0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002E4, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002E5, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Time_1) == 0x0002E8, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Distance_1) == 0x0002EC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Location_1) == 0x0002F0, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0002FC, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_Normal_1) == 0x000308, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000314, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_PhysMat_1) == 0x000320, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitActor_1) == 0x000328, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitComponent_1) == 0x000330, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitBoneName_1) == 0x000338, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_HitItem_1) == 0x000340, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_FaceIndex_1) == 0x000344, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceStart_1) == 0x000348, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakHitResult_TraceEnd_1) == 0x000354, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue_4) == 0x000360, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_X_5) == 0x00036C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Y_5) == 0x000370, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_BreakVector_Z_5) == 0x000374, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_FClamp_ReturnValue_1) == 0x000378, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_MakeVector_ReturnValue_5) == 0x00037C, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000388, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcMeshFitGroundVector, CallFunc_CalcMeshFitGroundVector_UpVector) == 0x000394, "Member 'RSBattlePlayer_C_CalcMeshFitGroundVector::CallFunc_CalcMeshFitGroundVector_UpVector' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InitSpawnEnpc
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_InitSpawnEnpc final
{
public:
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InitSpawnEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InitSpawnEnpc");
static_assert(sizeof(RSBattlePlayer_C_InitSpawnEnpc) == 0x000005, "Wrong size on RSBattlePlayer_C_InitSpawnEnpc");
static_assert(offsetof(RSBattlePlayer_C_InitSpawnEnpc, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_InitSpawnEnpc::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitSpawnEnpc, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InitSpawnEnpc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitSpawnEnpc, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_InitSpawnEnpc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitSpawnEnpc, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattlePlayer_C_InitSpawnEnpc::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InitSpawnEnpc, CallFunc_IsValid_ReturnValue_3) == 0x000004, "Member 'RSBattlePlayer_C_InitSpawnEnpc::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateSpawnEnpc
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_UpdateSpawnEnpc final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LSpawnRotation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbOver;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateSpawnEnpc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateSpawnEnpc");
static_assert(sizeof(RSBattlePlayer_C_UpdateSpawnEnpc) == 0x000018, "Wrong size on RSBattlePlayer_C_UpdateSpawnEnpc");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, DeltaSec) == 0x000000, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, LSpawnRotation) == 0x000004, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::LSpawnRotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, LbOver) == 0x000010, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::LbOver' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, CallFunc_IsOver_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, CallFunc_IsEnable_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateSpawnEnpc, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'RSBattlePlayer_C_UpdateSpawnEnpc::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnWaitSpawnStateEnpc
// 0x0090 (0x0090 - 0x0000)
struct RSBattlePlayer_C_OnWaitSpawnStateEnpc final
{
public:
	bool                                          bOver;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LSpawnRotation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BFF[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C00[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C01[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C02[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnWaitSpawnStateEnpc) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnWaitSpawnStateEnpc");
static_assert(sizeof(RSBattlePlayer_C_OnWaitSpawnStateEnpc) == 0x000090, "Wrong size on RSBattlePlayer_C_OnWaitSpawnStateEnpc");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, bOver) == 0x000000, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::bOver' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, LSpawnRotation) == 0x000004, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::LSpawnRotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_ComposeRotators_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_GetSocketLocation_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_GetPlayerPawn_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_IsValid_ReturnValue_2) == 0x000058, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_IsValid_ReturnValue_3) == 0x000059, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00005C, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnWaitSpawnStateEnpc, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_OnWaitSpawnStateEnpc::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStartSpawnStateEnpc
// 0x0088 (0x0088 - 0x0000)
struct RSBattlePlayer_C_OnStartSpawnStateEnpc final
{
public:
	bool                                          bOver;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C03[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C04[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C05[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C06[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnStartSpawnStateEnpc) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnStartSpawnStateEnpc");
static_assert(sizeof(RSBattlePlayer_C_OnStartSpawnStateEnpc) == 0x000088, "Wrong size on RSBattlePlayer_C_OnStartSpawnStateEnpc");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, bOver) == 0x000000, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::bOver' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_ComposeRotators_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_2) == 0x00002C, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00002D, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_3) == 0x00002E, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_4) == 0x00002F, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_5) == 0x000030, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_6) == 0x000031, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_GetPlayerPawn_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_IsValid_ReturnValue_7) == 0x00004C, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_FindLookAtRotation_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_BreakRotator_Roll) == 0x000068, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_BreakRotator_Pitch) == 0x00006C, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_BreakRotator_Yaw) == 0x000070, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_MakeRotator_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnStartSpawnStateEnpc, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_OnStartSpawnStateEnpc::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateSpawnStateEnpc
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_OnUpdateSpawnStateEnpc final
{
public:
	bool                                          bOver;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnUpdateSpawnStateEnpc");
static_assert(sizeof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc) == 0x000006, "Wrong size on RSBattlePlayer_C_OnUpdateSpawnStateEnpc");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, bOver) == 0x000000, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::bOver' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, CallFunc_IsValid_ReturnValue_3) == 0x000004, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnUpdateSpawnStateEnpc, CallFunc_IsValid_ReturnValue_4) == 0x000005, "Member 'RSBattlePlayer_C_OnUpdateSpawnStateEnpc::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDeadBeforeHitResultByDirectAttack
// 0x01D0 (0x01D0 - 0x0000)
struct RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(sizeof(RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack) == 0x0001D0, "Wrong size on RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(offsetof(RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_GetEnpcComp_ReturnComp) == 0x0001C0, "Member 'RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_IsValid_ReturnValue) == 0x0001C8, "Member 'RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCastShadowDeadStaging
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetCastShadowDeadStaging final
{
public:
	bool                                          InNewCastShadow;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCastShadowDeadStaging) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetCastShadowDeadStaging");
static_assert(sizeof(RSBattlePlayer_C_SetCastShadowDeadStaging) == 0x000002, "Wrong size on RSBattlePlayer_C_SetCastShadowDeadStaging");
static_assert(offsetof(RSBattlePlayer_C_SetCastShadowDeadStaging, InNewCastShadow) == 0x000000, "Member 'RSBattlePlayer_C_SetCastShadowDeadStaging::InNewCastShadow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCastShadowDeadStaging, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetCastShadowDeadStaging::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateDeadStaging
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_UpdateDeadStaging final
{
public:
	float                                         ParamValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroy;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateDeadStaging) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateDeadStaging");
static_assert(sizeof(RSBattlePlayer_C_UpdateDeadStaging) == 0x000008, "Wrong size on RSBattlePlayer_C_UpdateDeadStaging");
static_assert(offsetof(RSBattlePlayer_C_UpdateDeadStaging, ParamValue) == 0x000000, "Member 'RSBattlePlayer_C_UpdateDeadStaging::ParamValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateDeadStaging, bDestroy) == 0x000004, "Member 'RSBattlePlayer_C_UpdateDeadStaging::bDestroy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'RSBattlePlayer_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.HealHP
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattlePlayer_C_HealHP final
{
public:
	float                                         HealRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPopupUI;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C07[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Effect;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EffectScale;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C08[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Sound;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRevive;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRandomLocation;                                   // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C09[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LLocation;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LRecoverHP;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C0A[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_HealHP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_HealHP");
static_assert(sizeof(RSBattlePlayer_C_HealHP) == 0x0000F8, "Wrong size on RSBattlePlayer_C_HealHP");
static_assert(offsetof(RSBattlePlayer_C_HealHP, HealRate) == 0x000000, "Member 'RSBattlePlayer_C_HealHP::HealRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, bPopupUI) == 0x000004, "Member 'RSBattlePlayer_C_HealHP::bPopupUI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, Effect) == 0x000008, "Member 'RSBattlePlayer_C_HealHP::Effect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, EffectScale) == 0x000010, "Member 'RSBattlePlayer_C_HealHP::EffectScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, Sound) == 0x000020, "Member 'RSBattlePlayer_C_HealHP::Sound' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, bRevive) == 0x000028, "Member 'RSBattlePlayer_C_HealHP::bRevive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, bRandomLocation) == 0x000029, "Member 'RSBattlePlayer_C_HealHP::bRandomLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, LLocation) == 0x00002C, "Member 'RSBattlePlayer_C_HealHP::LLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, LRecoverHP) == 0x000038, "Member 'RSBattlePlayer_C_HealHP::LRecoverHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_RandomFloatInRange_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_HealHP::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_HealHP::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_HealHP::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000058, "Member 'RSBattlePlayer_C_HealHP::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000064, "Member 'RSBattlePlayer_C_HealHP::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_MakeRotator_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_HealHP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_HealHP::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_MakeVector_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_HealHP::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_HealHP::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000090, "Member 'RSBattlePlayer_C_HealHP::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_BreakVector_X) == 0x000098, "Member 'RSBattlePlayer_C_HealHP::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_BreakVector_Y) == 0x00009C, "Member 'RSBattlePlayer_C_HealHP::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_BreakVector_Z) == 0x0000A0, "Member 'RSBattlePlayer_C_HealHP::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_MakeVector_ReturnValue_1) == 0x0000A4, "Member 'RSBattlePlayer_C_HealHP::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B0, "Member 'RSBattlePlayer_C_HealHP::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000BC, "Member 'RSBattlePlayer_C_HealHP::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_IsValid_ReturnValue) == 0x0000C8, "Member 'RSBattlePlayer_C_HealHP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_IsValid_ReturnValue_1) == 0x0000C9, "Member 'RSBattlePlayer_C_HealHP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_HealHP::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_FClamp_ReturnValue) == 0x0000D8, "Member 'RSBattlePlayer_C_HealHP::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_GetHP_HP) == 0x0000DC, "Member 'RSBattlePlayer_C_HealHP::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_GetMaxHP_MaxHP) == 0x0000E0, "Member 'RSBattlePlayer_C_HealHP::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'RSBattlePlayer_C_HealHP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000E8, "Member 'RSBattlePlayer_C_HealHP::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_Min_ReturnValue) == 0x0000EC, "Member 'RSBattlePlayer_C_HealHP::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_FCeil_ReturnValue) == 0x0000F0, "Member 'RSBattlePlayer_C_HealHP::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_SetHP_bDummy) == 0x0000F4, "Member 'RSBattlePlayer_C_HealHP::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_HealHP, CallFunc_IsDead_bDead) == 0x0000F5, "Member 'RSBattlePlayer_C_HealHP::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReserveBrainCrashHeal
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_ReserveBrainCrashHeal final
{
public:
	float                                         HealRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C0B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Effect;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Sound;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C0C[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ReserveBrainCrashHeal) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReserveBrainCrashHeal");
static_assert(sizeof(RSBattlePlayer_C_ReserveBrainCrashHeal) == 0x000028, "Wrong size on RSBattlePlayer_C_ReserveBrainCrashHeal");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, HealRate) == 0x000000, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::HealRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, Effect) == 0x000008, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::Effect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, Sound) == 0x000010, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::Sound' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, CallFunc_Array_Add_ReturnValue_1) == 0x00001C, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, CallFunc_IsPlayerStatus_Result) == 0x000020, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReserveBrainCrashHeal, CallFunc_Array_Add_ReturnValue_2) == 0x000024, "Member 'RSBattlePlayer_C_ReserveBrainCrashHeal::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginBrainCrashHeal
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BeginBrainCrashHeal final
{
public:
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginBrainCrashHeal) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginBrainCrashHeal");
static_assert(sizeof(RSBattlePlayer_C_BeginBrainCrashHeal) == 0x000001, "Wrong size on RSBattlePlayer_C_BeginBrainCrashHeal");
static_assert(offsetof(RSBattlePlayer_C_BeginBrainCrashHeal, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_BeginBrainCrashHeal::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TickBrainCrashHeal
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_TickBrainCrashHeal final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C0D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C0E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C0F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TickBrainCrashHeal) == 0x000008, "Wrong alignment on RSBattlePlayer_C_TickBrainCrashHeal");
static_assert(sizeof(RSBattlePlayer_C_TickBrainCrashHeal) == 0x000030, "Wrong size on RSBattlePlayer_C_TickBrainCrashHeal");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_Array_Get_Item) == 0x000008, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_IsPlayerStatus_Result) == 0x000010, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_Array_Get_Item_2) == 0x000020, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickBrainCrashHeal, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_TickBrainCrashHeal::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FlushBrainCrashHeal
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_FlushBrainCrashHeal final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C10[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C11[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_FlushBrainCrashHeal) == 0x000004, "Wrong alignment on RSBattlePlayer_C_FlushBrainCrashHeal");
static_assert(sizeof(RSBattlePlayer_C_FlushBrainCrashHeal) == 0x00001C, "Wrong size on RSBattlePlayer_C_FlushBrainCrashHeal");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, CallFunc_IsCharacterDead_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FlushBrainCrashHeal, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_FlushBrainCrashHeal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxDamageRateLimit
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetMaxDamageRateLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetMaxDamageRateLimit) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetMaxDamageRateLimit");
static_assert(sizeof(RSBattlePlayer_C_GetMaxDamageRateLimit) == 0x000008, "Wrong size on RSBattlePlayer_C_GetMaxDamageRateLimit");
static_assert(offsetof(RSBattlePlayer_C_GetMaxDamageRateLimit, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetMaxDamageRateLimit::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMaxDamageRateLimit, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000004, "Member 'RSBattlePlayer_C_GetMaxDamageRateLimit::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxCrashScaleLimit
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetMaxCrashScaleLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetMaxCrashScaleLimit) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetMaxCrashScaleLimit");
static_assert(sizeof(RSBattlePlayer_C_GetMaxCrashScaleLimit) == 0x000008, "Wrong size on RSBattlePlayer_C_GetMaxCrashScaleLimit");
static_assert(offsetof(RSBattlePlayer_C_GetMaxCrashScaleLimit, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetMaxCrashScaleLimit::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMaxCrashScaleLimit, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000004, "Member 'RSBattlePlayer_C_GetMaxCrashScaleLimit::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetNexusDriveHardenSubTimeRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate");
static_assert(sizeof(RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate) == 0x000004, "Wrong size on RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate");
static_assert(offsetof(RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate, Rate) == 0x000000, "Member 'RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate::Rate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDirectionControl
// 0x0050 (0x0050 - 0x0000)
struct RSBattlePlayer_C_IsEnableDirectionControl final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C12[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTarget;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEnable;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C13[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C14[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDirectionControl_ReturnValue;     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableDirectionControl) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsEnableDirectionControl");
static_assert(sizeof(RSBattlePlayer_C_IsEnableDirectionControl) == 0x000050, "Wrong size on RSBattlePlayer_C_IsEnableDirectionControl");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, LTarget) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::LTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, LbEnable) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::LbEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000024, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000035, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_IsValid_ReturnValue) == 0x000036, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000037, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_IsLockTarget_IsLockTarget) == 0x000038, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000039, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000040, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_IsActionStatus_Result) == 0x000048, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDirectionControl, CallFunc_IsEnableDirectionControl_ReturnValue) == 0x000049, "Member 'RSBattlePlayer_C_IsEnableDirectionControl::CallFunc_IsEnableDirectionControl_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ApplyOptionParameter
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_ApplyOptionParameter final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C15[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCutin                                     Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C16[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveLoadParamClassManager*             CallFunc_GetSaveLoadParamClassManager_SaveLoadParamClassManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C17[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveLoadExSystemParamManager*          CallFunc_GetSaveLoadExSystemParamManager_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetBehindCameraSpeed_ReturnValue;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetCameraSpeedLockon_ReturnValue;         // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_BMax_ReturnValue;                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue_1;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraDistance                               CallFunc_GetCameraDistance_ReturnValue;            // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_BMax_ReturnValue_1;                       // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCutin                                     CallFunc_GetSASCutin_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAttackDirOrthoLockon                         CallFunc_GetAttackDirOrthoLockon_ReturnValue;      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackDirOrtho                               CallFunc_GetAttackDirOrtho_ReturnValue;            // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ApplyOptionParameter) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ApplyOptionParameter");
static_assert(sizeof(RSBattlePlayer_C_ApplyOptionParameter) == 0x000040, "Wrong size on RSBattlePlayer_C_ApplyOptionParameter");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, Temp_bool_Variable) == 0x000000, "Member 'RSBattlePlayer_C_ApplyOptionParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, Temp_bool_Variable_1) == 0x000001, "Member 'RSBattlePlayer_C_ApplyOptionParameter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetSASManager_SAS_Manager) == 0x000008, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, Temp_byte_Variable) == 0x000010, "Member 'RSBattlePlayer_C_ApplyOptionParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetSaveLoadParamClassManager_SaveLoadParamClassManager) == 0x000018, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetSaveLoadParamClassManager_SaveLoadParamClassManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetSaveLoadExSystemParamManager_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetSaveLoadExSystemParamManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetBehindCameraSpeed_ReturnValue) == 0x000031, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetBehindCameraSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000032, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetCameraSpeedLockon_ReturnValue) == 0x000033, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetCameraSpeedLockon_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_BMax_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_BMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_Subtract_ByteByte_ReturnValue_1) == 0x000035, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_Subtract_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetCameraDistance_ReturnValue) == 0x000036, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetCameraDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_BMax_ReturnValue_1) == 0x000037, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_BMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetSASCutin_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetSASCutin_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, K2Node_Select_Default) == 0x000039, "Member 'RSBattlePlayer_C_ApplyOptionParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetAttackDirOrthoLockon_ReturnValue) == 0x00003A, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetAttackDirOrthoLockon_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_GetAttackDirOrtho_ReturnValue) == 0x00003B, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_GetAttackDirOrtho_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ApplyOptionParameter, CallFunc_IsMainPlayer_bMainPlayer) == 0x00003C, "Member 'RSBattlePlayer_C_ApplyOptionParameter::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasCableExColor
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableSasCableExColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSasCableExColor) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSasCableExColor");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSasCableExColor) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableSasCableExColor");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSasCableExColor, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSasCableExColor::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSasCableExColor, bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSasCableExColor::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetChargeLevelForNexusDrive
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetChargeLevelForNexusDrive final
{
public:
	int32                                         ChargeLevel;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetChargeLevelForNexusDrive) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetChargeLevelForNexusDrive");
static_assert(sizeof(RSBattlePlayer_C_SetChargeLevelForNexusDrive) == 0x000008, "Wrong size on RSBattlePlayer_C_SetChargeLevelForNexusDrive");
static_assert(offsetof(RSBattlePlayer_C_SetChargeLevelForNexusDrive, ChargeLevel) == 0x000000, "Member 'RSBattlePlayer_C_SetChargeLevelForNexusDrive::ChargeLevel' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetChargeLevelForNexusDrive, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_SetChargeLevelForNexusDrive::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSimulatorStartDirectionClose
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_OnSimulatorStartDirectionClose final
{
public:
	float                                         MoveDelaySec;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OnSimulatorStartDirectionClose) == 0x000004, "Wrong alignment on RSBattlePlayer_C_OnSimulatorStartDirectionClose");
static_assert(sizeof(RSBattlePlayer_C_OnSimulatorStartDirectionClose) == 0x000004, "Wrong size on RSBattlePlayer_C_OnSimulatorStartDirectionClose");
static_assert(offsetof(RSBattlePlayer_C_OnSimulatorStartDirectionClose, MoveDelaySec) == 0x000000, "Member 'RSBattlePlayer_C_OnSimulatorStartDirectionClose::MoveDelaySec' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrictNative
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_EventInputRestrictNative final
{
public:
	bool                                          Restrict;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventInputRestrict_bDummy;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EventInputRestrictNative) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EventInputRestrictNative");
static_assert(sizeof(RSBattlePlayer_C_EventInputRestrictNative) == 0x000003, "Wrong size on RSBattlePlayer_C_EventInputRestrictNative");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrictNative, Restrict) == 0x000000, "Member 'RSBattlePlayer_C_EventInputRestrictNative::Restrict' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrictNative, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_EventInputRestrictNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrictNative, CallFunc_EventInputRestrict_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_EventInputRestrictNative::CallFunc_EventInputRestrict_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnBackGroundStuck
// 0x00B0 (0x00B0 - 0x0000)
struct RSBattlePlayer_C_OnBackGroundStuck final
{
public:
	struct FVector                                ImpactLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C18[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnBackGroundStuck) == 0x000010, "Wrong alignment on RSBattlePlayer_C_OnBackGroundStuck");
static_assert(sizeof(RSBattlePlayer_C_OnBackGroundStuck) == 0x0000B0, "Wrong size on RSBattlePlayer_C_OnBackGroundStuck");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, ImpactLocation) == 0x000000, "Member 'RSBattlePlayer_C_OnBackGroundStuck::ImpactLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_Array_LastIndex_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_Array_Get_Item) == 0x000024, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_MakeTransform_ReturnValue_1) == 0x000070, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnBackGroundStuck, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_OnBackGroundStuck::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.TickEventBackbodyAttachmentDither
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_TickEventBackbodyAttachmentDither final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C19[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_TickEventBackbodyAttachmentDither");
static_assert(sizeof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither) == 0x000010, "Wrong size on RSBattlePlayer_C_TickEventBackbodyAttachmentDither");
static_assert(offsetof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_TickEventBackbodyAttachmentDither::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_TickEventBackbodyAttachmentDither::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_TickEventBackbodyAttachmentDither::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_TickEventBackbodyAttachmentDither, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_TickEventBackbodyAttachmentDither::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStatusCablePlayVoiceTick
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BadStatusCablePlayVoiceTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStateCableDamage_CableDamage;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1B[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BadStatusCablePlayVoiceTick");
static_assert(sizeof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick) == 0x000018, "Wrong size on RSBattlePlayer_C_BadStatusCablePlayVoiceTick");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_IsBadStateCableDamage_CableDamage) == 0x000004, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_IsBadStateCableDamage_CableDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x000012, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStatusCablePlayVoiceTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_BadStatusCablePlayVoiceTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPhotoModeDitherDataName
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetPhotoModeDitherDataName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPhotoModeDitherDataName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPhotoModeDitherDataName");
static_assert(sizeof(RSBattlePlayer_C_GetPhotoModeDitherDataName) == 0x000008, "Wrong size on RSBattlePlayer_C_GetPhotoModeDitherDataName");
static_assert(offsetof(RSBattlePlayer_C_GetPhotoModeDitherDataName, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPhotoModeDitherDataName::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginPhotoMode
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_BeginPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPrimitiveBoundsScale_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInvokeBrainField_InvokeBrainField;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginPhotoMode_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginPhotoMode) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BeginPhotoMode");
static_assert(sizeof(RSBattlePlayer_C_BeginPhotoMode) == 0x000018, "Wrong size on RSBattlePlayer_C_BeginPhotoMode");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_BeginPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_GetPrimitiveBoundsScale_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_GetPrimitiveBoundsScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_IsInvokeBrainField_InvokeBrainField) == 0x000010, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_IsInvokeBrainField_InvokeBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_IsUserIsPlayer_IsPlayer) == 0x000011, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_IsDriveMode_bDrive) == 0x000012, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000013, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginPhotoMode, CallFunc_BeginPhotoMode_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_BeginPhotoMode::CallFunc_BeginPhotoMode_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndPhotoMode
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_EndPhotoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndPhotoMode_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndPhotoMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndPhotoMode");
static_assert(sizeof(RSBattlePlayer_C_EndPhotoMode) == 0x000004, "Wrong size on RSBattlePlayer_C_EndPhotoMode");
static_assert(offsetof(RSBattlePlayer_C_EndPhotoMode, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_EndPhotoMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndPhotoMode, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_EndPhotoMode::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndPhotoMode, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_EndPhotoMode::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndPhotoMode, CallFunc_EndPhotoMode_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_EndPhotoMode::CallFunc_EndPhotoMode_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPhotoModeHood
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_SetPhotoModeHood final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPhotoModeHood) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPhotoModeHood");
static_assert(sizeof(RSBattlePlayer_C_SetPhotoModeHood) == 0x00001C, "Wrong size on RSBattlePlayer_C_SetPhotoModeHood");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, bVisible) == 0x000000, "Member 'RSBattlePlayer_C_SetPhotoModeHood::bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, CallFunc_SetHoodVisible_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetPhotoModeHood::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetPhotoModeHood::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_SetPhotoModeHood::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetPhotoModeHood::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetPhotoModeHood::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetPhotoModeHood::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPhotoModeHood, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetPhotoModeHood::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsVisiblePhotoModeHood
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsVisiblePhotoModeHood final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsVisiblePhotoModeHood) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsVisiblePhotoModeHood");
static_assert(sizeof(RSBattlePlayer_C_IsVisiblePhotoModeHood) == 0x000001, "Wrong size on RSBattlePlayer_C_IsVisiblePhotoModeHood");
static_assert(offsetof(RSBattlePlayer_C_IsVisiblePhotoModeHood, bVisible) == 0x000000, "Member 'RSBattlePlayer_C_IsVisiblePhotoModeHood::bVisible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RecoverAfterInvalidDamageTick
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_RecoverAfterInvalidDamageTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RecoverAfterInvalidDamageTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_RecoverAfterInvalidDamageTick");
static_assert(sizeof(RSBattlePlayer_C_RecoverAfterInvalidDamageTick) == 0x00000C, "Wrong size on RSBattlePlayer_C_RecoverAfterInvalidDamageTick");
static_assert(offsetof(RSBattlePlayer_C_RecoverAfterInvalidDamageTick, DeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_RecoverAfterInvalidDamageTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RecoverAfterInvalidDamageTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_RecoverAfterInvalidDamageTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RecoverAfterInvalidDamageTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_RecoverAfterInvalidDamageTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetLookAtEnable
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetLookAtEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetLookAtEnable) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetLookAtEnable");
static_assert(sizeof(RSBattlePlayer_C_SetLookAtEnable) == 0x000003, "Wrong size on RSBattlePlayer_C_SetLookAtEnable");
static_assert(offsetof(RSBattlePlayer_C_SetLookAtEnable, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetLookAtEnable::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetLookAtEnable, bResult) == 0x000001, "Member 'RSBattlePlayer_C_SetLookAtEnable::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetLookAtEnable, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetLookAtEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventLookAtLocation
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_SetEventLookAtLocation final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventLookAtLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEventLookAtLocation");
static_assert(sizeof(RSBattlePlayer_C_SetEventLookAtLocation) == 0x000014, "Wrong size on RSBattlePlayer_C_SetEventLookAtLocation");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtLocation, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEventLookAtLocation::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtLocation, LookAtLocation) == 0x000004, "Member 'RSBattlePlayer_C_SetEventLookAtLocation::LookAtLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtLocation, bDummy) == 0x000010, "Member 'RSBattlePlayer_C_SetEventLookAtLocation::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventLookAtActor
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetEventLookAtActor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C20[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LookAtActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventLookAtActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetEventLookAtActor");
static_assert(sizeof(RSBattlePlayer_C_SetEventLookAtActor) == 0x000018, "Wrong size on RSBattlePlayer_C_SetEventLookAtActor");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtActor, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEventLookAtActor::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtActor, LookAtActor) == 0x000008, "Member 'RSBattlePlayer_C_SetEventLookAtActor::LookAtActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventLookAtActor, bDummy) == 0x000010, "Member 'RSBattlePlayer_C_SetEventLookAtActor::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnableRigidBody
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_EnableRigidBody final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C21[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C22[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EnableRigidBody) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EnableRigidBody");
static_assert(sizeof(RSBattlePlayer_C_EnableRigidBody) == 0x000018, "Wrong size on RSBattlePlayer_C_EnableRigidBody");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_EnableRigidBody::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, LerpTime) == 0x000004, "Member 'RSBattlePlayer_C_EnableRigidBody::LerpTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_EnableRigidBody::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, Temp_bool_Variable) == 0x000009, "Member 'RSBattlePlayer_C_EnableRigidBody::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, Temp_float_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_EnableRigidBody::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, Temp_float_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_EnableRigidBody::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableRigidBody, K2Node_Select_Default) == 0x000014, "Member 'RSBattlePlayer_C_EnableRigidBody::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerActionSAS
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetPlayerActionSAS final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C23[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C24[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_1;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerActionSAS) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetPlayerActionSAS");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerActionSAS) == 0x000028, "Wrong size on RSBattlePlayer_C_SetPlayerActionSAS");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_IsPlayerStatus_Result) == 0x000018, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_IsUpperActionStatus_bResult) == 0x000021, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_GetValidValue_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, K2Node_SwitchEnum_CmpSuccess) == 0x000023, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_IsActionStatus_Result) == 0x000024, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionSAS, CallFunc_IsUpperActionStatus_bResult_1) == 0x000025, "Member 'RSBattlePlayer_C_SetPlayerActionSAS::CallFunc_IsUpperActionStatus_bResult_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerBattle
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetPlayerBattle final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattling_Dummy;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerBattle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetPlayerBattle");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerBattle) == 0x000003, "Wrong size on RSBattlePlayer_C_SetPlayerBattle");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerBattle, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerBattle::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerBattle, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerBattle::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerBattle, CallFunc_SetBattling_Dummy) == 0x000002, "Member 'RSBattlePlayer_C_SetPlayerBattle::CallFunc_SetBattling_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSASCodeVisible
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_SetSASCodeVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C25[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C26[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetSASCodeVisible) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetSASCodeVisible");
static_assert(sizeof(RSBattlePlayer_C_SetSASCodeVisible) == 0x000030, "Wrong size on RSBattlePlayer_C_SetSASCodeVisible");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, bVisible) == 0x000000, "Member 'RSBattlePlayer_C_SetSASCodeVisible::bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetSASCodeVisible::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetSASCodeVisible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_SetSASCodeVisible::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetSASCodeVisible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetSASCodeVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetSASCodeVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, CallFunc_GetSASCodeActorList_CodeList) == 0x000018, "Member 'RSBattlePlayer_C_SetSASCodeVisible::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeVisible, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetSASCodeVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCodeVisible
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattlePlayer_C_SetBrainCodeVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDrive;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C27[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C28[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C29[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetAllSasCodeList_NormalCode;             // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetAllSasCodeList_NormalCode_1;           // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C2A[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList_1;         // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2B[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetBrainCodeVisible) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetBrainCodeVisible");
static_assert(sizeof(RSBattlePlayer_C_SetBrainCodeVisible) == 0x0000A8, "Wrong size on RSBattlePlayer_C_SetBrainCodeVisible");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, bVisible) == 0x000000, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, bDrive) == 0x000001, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Counter_Variable_1) == 0x000008, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Array_Index_Variable) == 0x000014, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Counter_Variable_2) == 0x000018, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Add_IntInt_ReturnValue_2) == 0x00001C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Num_Variable_1) == 0x000024, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Less_IntInt_ReturnValue_1) == 0x000029, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Counter_Variable_3) == 0x000030, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Add_IntInt_ReturnValue_3) == 0x000034, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Array_Index_Variable_2) == 0x000038, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Num_Variable_2) == 0x00003C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Less_IntInt_ReturnValue_2) == 0x000040, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_GetAllSasCodeList_NormalCode) == 0x000048, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_GetAllSasCodeList_NormalCode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_GetAllSasCodeList_NormalCode_1) == 0x000058, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_GetAllSasCodeList_NormalCode_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Array_Length_ReturnValue_1) == 0x00006C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Array_Index_Variable_3) == 0x000070, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_GetBrainCodeActorList_CodeList) == 0x000078, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Array_Length_ReturnValue_2) == 0x000088, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, Temp_int_Loop_Num_Variable_3) == 0x00008C, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_GetBrainCodeActorList_CodeList_1) == 0x000090, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_GetBrainCodeActorList_CodeList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000A0, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBrainCodeVisible, CallFunc_Array_Length_ReturnValue_3) == 0x0000A4, "Member 'RSBattlePlayer_C_SetBrainCodeVisible::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartSASCode
// 0x0068 (0x0068 - 0x0000)
struct RSBattlePlayer_C_StartSASCode final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbExColor;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbNexusDrive;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbNoCutin;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2C[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASCutin                                     Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSasCableExColor_bEnable;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2D[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INexusDriveInterface>  K2Node_DynamicCast_AsNexus_Drive_Interface;        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRegisterActiveSasKindAny_ReturnValue;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableNexusDrive_ReturnValue;           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2F[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C30[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C31[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_StartSASCode) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StartSASCode");
static_assert(sizeof(RSBattlePlayer_C_StartSASCode) == 0x000068, "Wrong size on RSBattlePlayer_C_StartSASCode");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_StartSASCode::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_StartSASCode::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, LbExColor) == 0x000002, "Member 'RSBattlePlayer_C_StartSASCode::LbExColor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, LbNexusDrive) == 0x000003, "Member 'RSBattlePlayer_C_StartSASCode::LbNexusDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, LbNoCutin) == 0x000004, "Member 'RSBattlePlayer_C_StartSASCode::LbNoCutin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_bool_Variable) == 0x000005, "Member 'RSBattlePlayer_C_StartSASCode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_bool_Variable_1) == 0x000006, "Member 'RSBattlePlayer_C_StartSASCode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_StartSASCode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_StartSASCode::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_byte_Variable) == 0x000010, "Member 'RSBattlePlayer_C_StartSASCode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_IsEnableSasCableExColor_bEnable) == 0x000011, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_IsEnableSasCableExColor_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, K2Node_DynamicCast_AsNexus_Drive_Interface) == 0x000018, "Member 'RSBattlePlayer_C_StartSASCode::K2Node_DynamicCast_AsNexus_Drive_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattlePlayer_C_StartSASCode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_GetUserParamManager_UserParamManager) == 0x000030, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_IsRegisterActiveSasKindAny_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_IsRegisterActiveSasKindAny_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000039, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_IsEnableNexusDrive_ReturnValue) == 0x00003A, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_IsEnableNexusDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'RSBattlePlayer_C_StartSASCode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, K2Node_Select_Default) == 0x000040, "Member 'RSBattlePlayer_C_StartSASCode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_IsControlAI_bAI) == 0x000048, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_IsPlayerStatus_Result) == 0x000049, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_GetSASCodeActorList_CodeList) == 0x000050, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartSASCode, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_StartSASCode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSASCodeParam
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_SetSASCodeParam final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C32[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C33[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C34[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetSASCodeParam) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetSASCodeParam");
static_assert(sizeof(RSBattlePlayer_C_SetSASCodeParam) == 0x000038, "Wrong size on RSBattlePlayer_C_SetSASCodeParam");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, Param) == 0x000000, "Member 'RSBattlePlayer_C_SetSASCodeParam::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_SetSASCodeParam::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattlePlayer_C_SetSASCodeParam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_SetSASCodeParam::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattlePlayer_C_SetSASCodeParam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_SetSASCodeParam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetSASCodeParam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, CallFunc_GetSASCodeActorList_CodeList) == 0x000020, "Member 'RSBattlePlayer_C_SetSASCodeParam::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSASCodeParam, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_SetSASCodeParam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCodeActorList
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetBrainCodeActorList final
{
public:
	TArray<class ABP_CableBase_C*>                CodeList;                                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainCodeActorList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBrainCodeActorList");
static_assert(sizeof(RSBattlePlayer_C_GetBrainCodeActorList) == 0x000010, "Wrong size on RSBattlePlayer_C_GetBrainCodeActorList");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCodeActorList, CodeList) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainCodeActorList::CodeList' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASCodeActorList
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetSASCodeActorList final
{
public:
	TArray<class ABP_CableBase_C*>                CodeList;                                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASCodeActorList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetSASCodeActorList");
static_assert(sizeof(RSBattlePlayer_C_GetSASCodeActorList) == 0x000010, "Wrong size on RSBattlePlayer_C_GetSASCodeActorList");
static_assert(offsetof(RSBattlePlayer_C_GetSASCodeActorList, CodeList) == 0x000000, "Member 'RSBattlePlayer_C_GetSASCodeActorList::CodeList' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainFieldTimeRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetBrainFieldTimeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainFieldTimeRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetBrainFieldTimeRate");
static_assert(sizeof(RSBattlePlayer_C_GetBrainFieldTimeRate) == 0x000004, "Wrong size on RSBattlePlayer_C_GetBrainFieldTimeRate");
static_assert(offsetof(RSBattlePlayer_C_GetBrainFieldTimeRate, Rate) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainFieldTimeRate::Rate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsOpenBrainField
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsOpenBrainField final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsOpenBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsOpenBrainField");
static_assert(sizeof(RSBattlePlayer_C_IsOpenBrainField) == 0x000002, "Wrong size on RSBattlePlayer_C_IsOpenBrainField");
static_assert(offsetof(RSBattlePlayer_C_IsOpenBrainField, bOpen) == 0x000000, "Member 'RSBattlePlayer_C_IsOpenBrainField::bOpen' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOpenBrainField, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsOpenBrainField::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlaySASCodeDirection
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_PlaySASCodeDirection final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C35[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C36[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C37[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C38[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PlaySASCodeDirection) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlaySASCodeDirection");
static_assert(sizeof(RSBattlePlayer_C_PlaySASCodeDirection) == 0x000058, "Wrong size on RSBattlePlayer_C_PlaySASCodeDirection");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Type) == 0x000000, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_GetBrainCodeActorList_CodeList) == 0x000020, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, Temp_int_Loop_Num_Variable_1) == 0x000038, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_GetSASCodeActorList_CodeList) == 0x000040, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlaySASCodeDirection, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'RSBattlePlayer_C_PlaySASCodeDirection::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopSASCodeDirection
// 0x0058 (0x0058 - 0x0000)
struct RSBattlePlayer_C_StopSASCodeDirection final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C39[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C3A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C3B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C3C[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_StopSASCodeDirection) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StopSASCodeDirection");
static_assert(sizeof(RSBattlePlayer_C_StopSASCodeDirection) == 0x000058, "Wrong size on RSBattlePlayer_C_StopSASCodeDirection");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Type) == 0x000000, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_StopSASCodeDirection::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_GetBrainCodeActorList_CodeList) == 0x000020, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, Temp_int_Loop_Num_Variable_1) == 0x000038, "Member 'RSBattlePlayer_C_StopSASCodeDirection::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_GetSASCodeActorList_CodeList) == 0x000040, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StopSASCodeDirection, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'RSBattlePlayer_C_StopSASCodeDirection::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetSpecialEffects
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetSpecialEffects final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetSpecialEffects) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetSpecialEffects");
static_assert(sizeof(RSBattlePlayer_C_ResetSpecialEffects) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetSpecialEffects");
static_assert(offsetof(RSBattlePlayer_C_ResetSpecialEffects, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ResetSpecialEffects::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerActionAfterEvent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetPlayerActionAfterEvent final
{
public:
	EParamAfterEventAction                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C3D[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerActionAfterEvent) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerActionAfterEvent");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerActionAfterEvent) == 0x000008, "Wrong size on RSBattlePlayer_C_SetPlayerActionAfterEvent");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionAfterEvent, Param) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerActionAfterEvent::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionAfterEvent, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerActionAfterEvent::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionAfterEvent, CallFunc_EventEnd_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetPlayerActionAfterEvent::CallFunc_EventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerActionAfterEvent, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerActionAfterEvent::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSAS_Kind
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetSAS_Kind final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Kind;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               CallFunc_GetSASKindForButton_SASKind;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C3E[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSAS_Kind) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSAS_Kind");
static_assert(sizeof(RSBattlePlayer_C_GetSAS_Kind) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetSAS_Kind");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, Button) == 0x000000, "Member 'RSBattlePlayer_C_GetSAS_Kind::Button' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, Kind) == 0x000001, "Member 'RSBattlePlayer_C_GetSAS_Kind::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, CallFunc_GetSASKindForButton_SASKind) == 0x000002, "Member 'RSBattlePlayer_C_GetSAS_Kind::CallFunc_GetSASKindForButton_SASKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetSAS_Kind::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetSAS_Kind::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_Kind, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_GetSAS_Kind::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayerCameraReset
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_PlayerCameraReset final
{
public:
	float                                         InterpSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PlayerCameraReset) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PlayerCameraReset");
static_assert(sizeof(RSBattlePlayer_C_PlayerCameraReset) == 0x000008, "Wrong size on RSBattlePlayer_C_PlayerCameraReset");
static_assert(offsetof(RSBattlePlayer_C_PlayerCameraReset, InterpSec) == 0x000000, "Member 'RSBattlePlayer_C_PlayerCameraReset::InterpSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayerCameraReset, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_PlayerCameraReset::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp_Interface
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_ForceWarp_Interface final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         IdlingSeconds;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ForceWarp_Interface) == 0x000010, "Wrong alignment on RSBattlePlayer_C_ForceWarp_Interface");
static_assert(sizeof(RSBattlePlayer_C_ForceWarp_Interface) == 0x000040, "Wrong size on RSBattlePlayer_C_ForceWarp_Interface");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_Interface, Transform) == 0x000000, "Member 'RSBattlePlayer_C_ForceWarp_Interface::Transform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_Interface, IdlingSeconds) == 0x000030, "Member 'RSBattlePlayer_C_ForceWarp_Interface::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_Interface, Dummy) == 0x000034, "Member 'RSBattlePlayer_C_ForceWarp_Interface::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPsychicObjectEnableRange
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetPsychicObjectEnableRange final
{
public:
	bool                                          Is_Brain_Field_in;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C3F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPsychicObjectEnableRange) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPsychicObjectEnableRange");
static_assert(sizeof(RSBattlePlayer_C_SetPsychicObjectEnableRange) == 0x000008, "Wrong size on RSBattlePlayer_C_SetPsychicObjectEnableRange");
static_assert(offsetof(RSBattlePlayer_C_SetPsychicObjectEnableRange, Is_Brain_Field_in) == 0x000000, "Member 'RSBattlePlayer_C_SetPsychicObjectEnableRange::Is_Brain_Field_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPsychicObjectEnableRange, Range) == 0x000004, "Member 'RSBattlePlayer_C_SetPsychicObjectEnableRange::Range' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCanAnimOverrideSASColor
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetCanAnimOverrideSASColor final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetCanAnimOverrideSASColor");
static_assert(sizeof(RSBattlePlayer_C_GetCanAnimOverrideSASColor) == 0x000001, "Wrong size on RSBattlePlayer_C_GetCanAnimOverrideSASColor");
static_assert(offsetof(RSBattlePlayer_C_GetCanAnimOverrideSASColor, Enabled) == 0x000000, "Member 'RSBattlePlayer_C_GetCanAnimOverrideSASColor::Enabled' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetCanAnimOverrideSASColor
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetCanAnimOverrideSASColor final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetCanAnimOverrideSASColor) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetCanAnimOverrideSASColor");
static_assert(sizeof(RSBattlePlayer_C_SetCanAnimOverrideSASColor) == 0x000002, "Wrong size on RSBattlePlayer_C_SetCanAnimOverrideSASColor");
static_assert(offsetof(RSBattlePlayer_C_SetCanAnimOverrideSASColor, Enable) == 0x000000, "Member 'RSBattlePlayer_C_SetCanAnimOverrideSASColor::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetCanAnimOverrideSASColor, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetCanAnimOverrideSASColor::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_AddPsychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               FlyObj;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AddPsychicFlyObj) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AddPsychicFlyObj");
static_assert(sizeof(RSBattlePlayer_C_AddPsychicFlyObj) == 0x000010, "Wrong size on RSBattlePlayer_C_AddPsychicFlyObj");
static_assert(offsetof(RSBattlePlayer_C_AddPsychicFlyObj, FlyObj) == 0x000000, "Member 'RSBattlePlayer_C_AddPsychicFlyObj::FlyObj' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AddPsychicFlyObj, Dummy) == 0x000008, "Member 'RSBattlePlayer_C_AddPsychicFlyObj::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetPsychicFlyObj final
{
public:
	TArray<class AActor*>                         FlyObj;                                            // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPsychicFlyObj) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPsychicFlyObj");
static_assert(sizeof(RSBattlePlayer_C_GetPsychicFlyObj) == 0x000010, "Wrong size on RSBattlePlayer_C_GetPsychicFlyObj");
static_assert(offsetof(RSBattlePlayer_C_GetPsychicFlyObj, FlyObj) == 0x000000, "Member 'RSBattlePlayer_C_GetPsychicFlyObj::FlyObj' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddHitPsychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_AddHitPsychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               HitFlyObj;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAdd;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AddHitPsychicFlyObj) == 0x000008, "Wrong alignment on RSBattlePlayer_C_AddHitPsychicFlyObj");
static_assert(sizeof(RSBattlePlayer_C_AddHitPsychicFlyObj) == 0x000010, "Wrong size on RSBattlePlayer_C_AddHitPsychicFlyObj");
static_assert(offsetof(RSBattlePlayer_C_AddHitPsychicFlyObj, HitFlyObj) == 0x000000, "Member 'RSBattlePlayer_C_AddHitPsychicFlyObj::HitFlyObj' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AddHitPsychicFlyObj, IsAdd) == 0x000008, "Member 'RSBattlePlayer_C_AddHitPsychicFlyObj::IsAdd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUseFog
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUseFog final
{
public:
	bool                                          IsFog;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUseFog) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUseFog");
static_assert(sizeof(RSBattlePlayer_C_IsUseFog) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUseFog");
static_assert(offsetof(RSBattlePlayer_C_IsUseFog, IsFog) == 0x000000, "Member 'RSBattlePlayer_C_IsUseFog::IsFog' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnpcBarrier
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnpcBarrier final
{
public:
	bool                                          IsBarrier;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnpcBarrier) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnpcBarrier");
static_assert(sizeof(RSBattlePlayer_C_IsEnpcBarrier) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnpcBarrier");
static_assert(offsetof(RSBattlePlayer_C_IsEnpcBarrier, IsBarrier) == 0x000000, "Member 'RSBattlePlayer_C_IsEnpcBarrier::IsBarrier' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CanBattleAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CanBattleAction final
{
public:
	EPlayerAIBattleThinkType                      ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAction;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CanBattleAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CanBattleAction");
static_assert(sizeof(RSBattlePlayer_C_CanBattleAction) == 0x000002, "Wrong size on RSBattlePlayer_C_CanBattleAction");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction, ThinkType) == 0x000000, "Member 'RSBattlePlayer_C_CanBattleAction::ThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction, CanAction) == 0x000001, "Member 'RSBattlePlayer_C_CanBattleAction::CanAction' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetENpcKind
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetENpcKind final
{
public:
	ENpcKind                                      ENpcKind;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetENpcKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetENpcKind");
static_assert(sizeof(RSBattlePlayer_C_GetENpcKind) == 0x000001, "Wrong size on RSBattlePlayer_C_GetENpcKind");
static_assert(offsetof(RSBattlePlayer_C_GetENpcKind, ENpcKind) == 0x000000, "Member 'RSBattlePlayer_C_GetENpcKind::ENpcKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeTargetRot
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsDodgeTargetRot final
{
public:
	bool                                          Param_IsDodgeTargetRot;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C40[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDodgeTargetRot) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsDodgeTargetRot");
static_assert(sizeof(RSBattlePlayer_C_IsDodgeTargetRot) == 0x000018, "Wrong size on RSBattlePlayer_C_IsDodgeTargetRot");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeTargetRot, Param_IsDodgeTargetRot) == 0x000000, "Member 'RSBattlePlayer_C_IsDodgeTargetRot::Param_IsDodgeTargetRot' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeTargetRot, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsDodgeTargetRot::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeTargetRot, CallFunc_IsControlAI_bAI) == 0x000010, "Member 'RSBattlePlayer_C_IsDodgeTargetRot::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeTargetRot, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_IsDodgeTargetRot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeTargetRot, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_IsDodgeTargetRot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDodgeScale
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetDodgeScale final
{
public:
	float                                         DodgeScale;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetDodgeScale) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDodgeScale");
static_assert(sizeof(RSBattlePlayer_C_GetDodgeScale) == 0x000004, "Wrong size on RSBattlePlayer_C_GetDodgeScale");
static_assert(offsetof(RSBattlePlayer_C_GetDodgeScale, DodgeScale) == 0x000000, "Member 'RSBattlePlayer_C_GetDodgeScale::DodgeScale' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSpecialDown
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_IsSpecialDown final
{
public:
	bool                                          IsSpDown;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C41[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpDownWince;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsSpecialDown) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsSpecialDown");
static_assert(sizeof(RSBattlePlayer_C_IsSpecialDown) == 0x000008, "Wrong size on RSBattlePlayer_C_IsSpecialDown");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown, IsSpDown) == 0x000000, "Member 'RSBattlePlayer_C_IsSpecialDown::IsSpDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown, SpDownWince) == 0x000004, "Member 'RSBattlePlayer_C_IsSpecialDown::SpDownWince' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSpecialDownTimer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetSpecialDownTimer final
{
public:
	float                                         SpDownTimer;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSpecialDownTimer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSpecialDownTimer");
static_assert(sizeof(RSBattlePlayer_C_GetSpecialDownTimer) == 0x000004, "Wrong size on RSBattlePlayer_C_GetSpecialDownTimer");
static_assert(offsetof(RSBattlePlayer_C_GetSpecialDownTimer, SpDownTimer) == 0x000000, "Member 'RSBattlePlayer_C_GetSpecialDownTimer::SpDownTimer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ChangeENpcKind
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ChangeENpcKind final
{
public:
	ENpcKind                                      ENpcKind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ChangeENpcKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ChangeENpcKind");
static_assert(sizeof(RSBattlePlayer_C_ChangeENpcKind) == 0x000002, "Wrong size on RSBattlePlayer_C_ChangeENpcKind");
static_assert(offsetof(RSBattlePlayer_C_ChangeENpcKind, ENpcKind) == 0x000000, "Member 'RSBattlePlayer_C_ChangeENpcKind::ENpcKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeENpcKind, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_ChangeENpcKind::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSkillCoreDropProbability
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetSkillCoreDropProbability final
{
public:
	float                                         Probability;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSkillCoreDropProbability) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSkillCoreDropProbability");
static_assert(sizeof(RSBattlePlayer_C_GetSkillCoreDropProbability) == 0x000004, "Wrong size on RSBattlePlayer_C_GetSkillCoreDropProbability");
static_assert(offsetof(RSBattlePlayer_C_GetSkillCoreDropProbability, Probability) == 0x000000, "Member 'RSBattlePlayer_C_GetSkillCoreDropProbability::Probability' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CanSpecialMoveTrigger
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CanSpecialMoveTrigger final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CanSpecialMoveTrigger) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CanSpecialMoveTrigger");
static_assert(sizeof(RSBattlePlayer_C_CanSpecialMoveTrigger) == 0x000001, "Wrong size on RSBattlePlayer_C_CanSpecialMoveTrigger");
static_assert(offsetof(RSBattlePlayer_C_CanSpecialMoveTrigger, CanDo) == 0x000000, "Member 'RSBattlePlayer_C_CanSpecialMoveTrigger::CanDo' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReturnMetamorphosis
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_ReturnMetamorphosis final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ARSBattlePlayer_C*                      SpecifyPlayer;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReturnMetamorphosis) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ReturnMetamorphosis");
static_assert(sizeof(RSBattlePlayer_C_ReturnMetamorphosis) == 0x000028, "Wrong size on RSBattlePlayer_C_ReturnMetamorphosis");
static_assert(offsetof(RSBattlePlayer_C_ReturnMetamorphosis, Location) == 0x000000, "Member 'RSBattlePlayer_C_ReturnMetamorphosis::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReturnMetamorphosis, Rotation) == 0x00000C, "Member 'RSBattlePlayer_C_ReturnMetamorphosis::Rotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReturnMetamorphosis, SpecifyPlayer) == 0x000018, "Member 'RSBattlePlayer_C_ReturnMetamorphosis::SpecifyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ReturnMetamorphosis, Dummy) == 0x000020, "Member 'RSBattlePlayer_C_ReturnMetamorphosis::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackedEnemyDead
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_OnAttackedEnemyDead final
{
public:
	ECharaDeadType                                DeadType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C42[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C43[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAttackedEnemyDead) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnAttackedEnemyDead");
static_assert(sizeof(RSBattlePlayer_C_OnAttackedEnemyDead) == 0x000028, "Wrong size on RSBattlePlayer_C_OnAttackedEnemyDead");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, DeadType) == 0x000000, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::DeadType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, CallFunc_GetMainPlayer_Player) == 0x000018, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000020, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAttackedEnemyDead, CallFunc_IsControlAI_bAI) == 0x000021, "Member 'RSBattlePlayer_C_OnAttackedEnemyDead::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CanEnpcOpenBrainField
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_CanEnpcOpenBrainField final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayCutScene_OK;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseBrainField_bUseBrainField;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAbleTransitionBrainField_bOK;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C44[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetENPCBrainFieldRate_Rate;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C45[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CanEnpcOpenBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CanEnpcOpenBrainField");
static_assert(sizeof(RSBattlePlayer_C_CanEnpcOpenBrainField) == 0x000030, "Wrong size on RSBattlePlayer_C_CanEnpcOpenBrainField");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CanDo) == 0x000000, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CanDo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsBrainCrashAccessInterface_bAccess) == 0x000001, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsBrainCrashAccessInterface_bAccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_CanPlayCutScene_OK) == 0x000003, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_CanPlayCutScene_OK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsUseBrainField_bUseBrainField) == 0x000005, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsUseBrainField_bUseBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsDead_bDead) == 0x000006, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsAbleTransitionBrainField_bOK) == 0x000007, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsAbleTransitionBrainField_bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_GetENPCBrainFieldRate_Rate) == 0x000014, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_GetENPCBrainFieldRate_Rate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_GetBrainFieldManager_Manager) == 0x000020, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanEnpcOpenBrainField, CallFunc_InBranField_InBrainDield) == 0x000029, "Member 'RSBattlePlayer_C_CanEnpcOpenBrainField::CallFunc_InBranField_InBrainDield' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnpcBarrierHitNotify
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattlePlayer_C_EnpcBarrierHitNotify final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dammy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnpcBarrierHitNotify) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EnpcBarrierHitNotify");
static_assert(sizeof(RSBattlePlayer_C_EnpcBarrierHitNotify) == 0x0001C8, "Wrong size on RSBattlePlayer_C_EnpcBarrierHitNotify");
static_assert(offsetof(RSBattlePlayer_C_EnpcBarrierHitNotify, Result) == 0x000000, "Member 'RSBattlePlayer_C_EnpcBarrierHitNotify::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnpcBarrierHitNotify, Dammy) == 0x0001C0, "Member 'RSBattlePlayer_C_EnpcBarrierHitNotify::Dammy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CreateRedCode
// 0x0190 (0x0190 - 0x0000)
struct RSBattlePlayer_C_CreateRedCode final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C46[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LIndex;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LSocketName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LSocketNameList;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C47[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_co0101_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C48[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C49[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue_1;                      // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EREDActorStatType                             CallFunc_GetActorStatType_ReturnValue;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C4A[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_1;           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_2;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesWildcard_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C4B[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCableAdditiveBoneParam                CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x0028)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EREDActorStatType                             CallFunc_GetActorStatType_ReturnValue_1;           // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C4C[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_3;          // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesWildcard_ReturnValue_1;            // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C4D[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_co0100_C*                           CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x0178(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CreateRedCode) == 0x000010, "Wrong alignment on RSBattlePlayer_C_CreateRedCode");
static_assert(sizeof(RSBattlePlayer_C_CreateRedCode) == 0x000190, "Wrong size on RSBattlePlayer_C_CreateRedCode");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_CreateRedCode::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, LIndex) == 0x000004, "Member 'RSBattlePlayer_C_CreateRedCode::LIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, LSocketName) == 0x000008, "Member 'RSBattlePlayer_C_CreateRedCode::LSocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, LSocketNameList) == 0x000010, "Member 'RSBattlePlayer_C_CreateRedCode::LSocketNameList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, Temp_int_Array_Index_Variable) == 0x000050, "Member 'RSBattlePlayer_C_CreateRedCode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, Temp_int_Loop_Num_Variable) == 0x000054, "Member 'RSBattlePlayer_C_CreateRedCode::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'RSBattlePlayer_C_CreateRedCode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000065, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetPlayerID_ReturnValue) == 0x000066, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000067, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_FinishSpawningActor_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_NameToString_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Right_ReturnValue) == 0x000090, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_StringToInt_ReturnValue) == 0x0000A0, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0000A8, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Right_ReturnValue_1) == 0x0000B8, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Right_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetActorStatType_ReturnValue) == 0x0000C8, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetActorStatType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_StringToInt_ReturnValue_1) == 0x0000CC, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_StringToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_NameToString_ReturnValue_2) == 0x0000D0, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_NameToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_MatchesWildcard_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_MatchesWildcard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000110, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetActorStatType_ReturnValue_1) == 0x000111, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetActorStatType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Conv_NameToString_ReturnValue_3) == 0x000118, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Conv_NameToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_MatchesWildcard_ReturnValue_1) == 0x000128, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_MatchesWildcard_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Array_Add_ReturnValue) == 0x00012C, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_MakeTransform_ReturnValue_1) == 0x000130, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000160, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000168, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Array_Length_ReturnValue) == 0x000170, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_Array_Add_ReturnValue_1) == 0x000174, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CreateRedCode, CallFunc_GetAllSocketNames_ReturnValue) == 0x000178, "Member 'RSBattlePlayer_C_CreateRedCode::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DestroyRedCode
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_DestroyRedCode final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C4E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C4F[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C50[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DestroyRedCode) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DestroyRedCode");
static_assert(sizeof(RSBattlePlayer_C_DestroyRedCode) == 0x000030, "Wrong size on RSBattlePlayer_C_DestroyRedCode");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_DestroyRedCode::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_DestroyRedCode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattlePlayer_C_DestroyRedCode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_DestroyRedCode::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_DestroyRedCode::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_IsValid_ReturnValue_1) == 0x00001D, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyRedCode, CallFunc_Less_IntInt_ReturnValue_1) == 0x00002C, "Member 'RSBattlePlayer_C_DestroyRedCode::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckStickInputTurn
// 0x002C (0x002C - 0x0000)
struct RSBattlePlayer_C_CheckStickInputTurn final
{
public:
	bool                                          bTurn;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTurn;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C51[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcInputWorldVector_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLeftStickZero_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckStickInputTurn) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckStickInputTurn");
static_assert(sizeof(RSBattlePlayer_C_CheckStickInputTurn) == 0x00002C, "Wrong size on RSBattlePlayer_C_CheckStickInputTurn");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, bTurn) == 0x000000, "Member 'RSBattlePlayer_C_CheckStickInputTurn::bTurn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, LbTurn) == 0x000001, "Member 'RSBattlePlayer_C_CheckStickInputTurn::LbTurn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_DegCos_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_GetActorForwardVector_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_CalcInputWorldVector_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_CalcInputWorldVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_Dot_VectorVector_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_IsLeftStickZero_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_IsLeftStickZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000029, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckStickInputTurn, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'RSBattlePlayer_C_CheckStickInputTurn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnableRigidBody
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetEnableRigidBody final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C52[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRigidbodyAlpha_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetEnableRigidBody) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetEnableRigidBody");
static_assert(sizeof(RSBattlePlayer_C_GetEnableRigidBody) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetEnableRigidBody");
static_assert(offsetof(RSBattlePlayer_C_GetEnableRigidBody, Enable) == 0x000000, "Member 'RSBattlePlayer_C_GetEnableRigidBody::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnableRigidBody, CallFunc_GetRigidbodyAlpha_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetEnableRigidBody::CallFunc_GetRigidbodyAlpha_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnableRigidBody, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetEnableRigidBody::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerInputRestriction
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetPlayerInputRestriction final
{
public:
	EPlayerInputRestrictionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRestriction;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerInputRestriction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetPlayerInputRestriction");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerInputRestriction) == 0x000003, "Wrong size on RSBattlePlayer_C_SetPlayerInputRestriction");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction, Type) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction, bRestriction) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction::bRestriction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAreaAble
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_IsJumpAreaAble final
{
public:
	bool                                          bAble;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C53[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingSequence_IsPlaying;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C54[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SASManager_C>     CallFunc_IsAnyCutInReserved_self_CastInput;        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyCutInReserved_Reserved;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C55[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsJumpAreaAble) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsJumpAreaAble");
static_assert(sizeof(RSBattlePlayer_C_IsJumpAreaAble) == 0x000040, "Wrong size on RSBattlePlayer_C_IsJumpAreaAble");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, bAble) == 0x000000, "Member 'RSBattlePlayer_C_IsJumpAreaAble::bAble' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_GetSASManager_SAS_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsPlayingSequence_IsPlaying) == 0x000010, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsPlayingSequence_IsPlaying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsAnyCutInReserved_self_CastInput) == 0x000018, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsAnyCutInReserved_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsAnyCutInReserved_Reserved) == 0x000028, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsAnyCutInReserved_Reserved' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsCutInPlaying_Playing) == 0x000029, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_GetBrainFieldManager_Manager) == 0x000030, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x000038, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAreaAble, CallFunc_IsDisableAction_ReturnValue) == 0x000039, "Member 'RSBattlePlayer_C_IsJumpAreaAble::CallFunc_IsDisableAction_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableInputPsychicCombo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableInputPsychicCombo final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableInputPsychicCombo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableInputPsychicCombo");
static_assert(sizeof(RSBattlePlayer_C_IsEnableInputPsychicCombo) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableInputPsychicCombo");
static_assert(offsetof(RSBattlePlayer_C_IsEnableInputPsychicCombo, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableInputPsychicCombo::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsIntense
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsIntense final
{
public:
	bool                                          bIntense;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsIntense) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsIntense");
static_assert(sizeof(RSBattlePlayer_C_IsIntense) == 0x000001, "Wrong size on RSBattlePlayer_C_IsIntense");
static_assert(offsetof(RSBattlePlayer_C_IsIntense, bIntense) == 0x000000, "Member 'RSBattlePlayer_C_IsIntense::bIntense' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableSeeThrough final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSeeThrough) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSeeThrough");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSeeThrough) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableSeeThrough");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSeeThrough, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSeeThrough::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTalkLookAtTurn
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_SetTalkLookAtTurn final
{
public:
	struct FVector                                LookAtLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C56[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LLookAtAngle;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEventLookAtLocation_bDummy;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C57[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C58[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetTalkLookAtTurn) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetTalkLookAtTurn");
static_assert(sizeof(RSBattlePlayer_C_SetTalkLookAtTurn) == 0x000070, "Wrong size on RSBattlePlayer_C_SetTalkLookAtTurn");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, LookAtLocation) == 0x000000, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::LookAtLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, LLookAtAngle) == 0x000010, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::LLookAtAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_SetEventLookAtLocation_bDummy) == 0x000014, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_SetEventLookAtLocation_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_GetActorForwardVector_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_BreakVector_X) == 0x000044, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_BreakVector_Y) == 0x000048, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_BreakVector_Z) == 0x00004C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_Normal_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x000068, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTalkLookAtTurn, CallFunc_IsPlayerStatus_Result) == 0x00006C, "Member 'RSBattlePlayer_C_SetTalkLookAtTurn::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndTalkLookAtTurn
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EndTalkLookAtTurn final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventLookAtLocation_bDummy;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndTalkLookAtTurn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndTalkLookAtTurn");
static_assert(sizeof(RSBattlePlayer_C_EndTalkLookAtTurn) == 0x000002, "Wrong size on RSBattlePlayer_C_EndTalkLookAtTurn");
static_assert(offsetof(RSBattlePlayer_C_EndTalkLookAtTurn, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_EndTalkLookAtTurn::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndTalkLookAtTurn, CallFunc_SetEventLookAtLocation_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EndTalkLookAtTurn::CallFunc_SetEventLookAtLocation_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnableUseSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EnableUseSeeThrough final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnableUseSeeThrough) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnableUseSeeThrough");
static_assert(sizeof(RSBattlePlayer_C_EnableUseSeeThrough) == 0x000001, "Wrong size on RSBattlePlayer_C_EnableUseSeeThrough");
static_assert(offsetof(RSBattlePlayer_C_EnableUseSeeThrough, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_EnableUseSeeThrough::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckTargetableCharacterENPC
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_CheckTargetableCharacterENPC final
{
public:
	class ARSCharacterBase*                       Chara;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetableCharacter_ReturnValue;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckTargetableCharacterENPC) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckTargetableCharacterENPC");
static_assert(sizeof(RSBattlePlayer_C_CheckTargetableCharacterENPC) == 0x000010, "Wrong size on RSBattlePlayer_C_CheckTargetableCharacterENPC");
static_assert(offsetof(RSBattlePlayer_C_CheckTargetableCharacterENPC, Chara) == 0x000000, "Member 'RSBattlePlayer_C_CheckTargetableCharacterENPC::Chara' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTargetableCharacterENPC, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_CheckTargetableCharacterENPC::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckTargetableCharacterENPC, CallFunc_CheckTargetableCharacter_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_CheckTargetableCharacterENPC::CallFunc_CheckTargetableCharacter_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RequestBrainFieldHelp
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_RequestBrainFieldHelp final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RequestBrainFieldHelp) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RequestBrainFieldHelp");
static_assert(sizeof(RSBattlePlayer_C_RequestBrainFieldHelp) == 0x000001, "Wrong size on RSBattlePlayer_C_RequestBrainFieldHelp");
static_assert(offsetof(RSBattlePlayer_C_RequestBrainFieldHelp, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_RequestBrainFieldHelp::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetNpcBrainFieldDrive
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetNpcBrainFieldDrive final
{
public:
	bool                                          bDrive;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetNpcBrainFieldDrive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetNpcBrainFieldDrive");
static_assert(sizeof(RSBattlePlayer_C_SetNpcBrainFieldDrive) == 0x000002, "Wrong size on RSBattlePlayer_C_SetNpcBrainFieldDrive");
static_assert(offsetof(RSBattlePlayer_C_SetNpcBrainFieldDrive, bDrive) == 0x000000, "Member 'RSBattlePlayer_C_SetNpcBrainFieldDrive::bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetNpcBrainFieldDrive, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetNpcBrainFieldDrive::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotify_EnpcSAS
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnAnimNotify_EnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAnimNotify_EnpcSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnAnimNotify_EnpcSAS");
static_assert(sizeof(RSBattlePlayer_C_OnAnimNotify_EnpcSAS) == 0x000002, "Wrong size on RSBattlePlayer_C_OnAnimNotify_EnpcSAS");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotify_EnpcSAS, Kind) == 0x000000, "Member 'RSBattlePlayer_C_OnAnimNotify_EnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotify_EnpcSAS, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_OnAnimNotify_EnpcSAS::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnpcSAS
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BeginEnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginEnpcSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginEnpcSAS");
static_assert(sizeof(RSBattlePlayer_C_BeginEnpcSAS) == 0x000002, "Wrong size on RSBattlePlayer_C_BeginEnpcSAS");
static_assert(offsetof(RSBattlePlayer_C_BeginEnpcSAS, Kind) == 0x000000, "Member 'RSBattlePlayer_C_BeginEnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginEnpcSAS, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_BeginEnpcSAS::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAssassinAttack
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckAssassinAttack final
{
public:
	EAssassinAttackHit                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C59[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   DamagedActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bArmorBreak;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAssassinAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckAssassinAttack");
static_assert(sizeof(RSBattlePlayer_C_CheckAssassinAttack) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckAssassinAttack");
static_assert(offsetof(RSBattlePlayer_C_CheckAssassinAttack, Type) == 0x000000, "Member 'RSBattlePlayer_C_CheckAssassinAttack::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAssassinAttack, DamagedActor) == 0x000008, "Member 'RSBattlePlayer_C_CheckAssassinAttack::DamagedActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAssassinAttack, bSuccess) == 0x000010, "Member 'RSBattlePlayer_C_CheckAssassinAttack::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAssassinAttack, bArmorBreak) == 0x000011, "Member 'RSBattlePlayer_C_CheckAssassinAttack::bArmorBreak' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetCollisionOverlap
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ResetCollisionOverlap final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetCollisionOverlap) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetCollisionOverlap");
static_assert(sizeof(RSBattlePlayer_C_ResetCollisionOverlap) == 0x000002, "Wrong size on RSBattlePlayer_C_ResetCollisionOverlap");
static_assert(offsetof(RSBattlePlayer_C_ResetCollisionOverlap, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_ResetCollisionOverlap::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCollisionOverlap, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_ResetCollisionOverlap::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayBrainFieldBattleTalk
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_PlayBrainFieldBattleTalk final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_PlayBrainFieldBattleTalk) == 0x000008, "Wrong alignment on RSBattlePlayer_C_PlayBrainFieldBattleTalk");
static_assert(sizeof(RSBattlePlayer_C_PlayBrainFieldBattleTalk) == 0x000028, "Wrong size on RSBattlePlayer_C_PlayBrainFieldBattleTalk");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, K2Node_MakeArray_Array) == 0x000008, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayBrainFieldBattleTalk, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_PlayBrainFieldBattleTalk::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDriveMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDriveMode final
{
public:
	bool                                          bDrive;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDriveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDriveMode");
static_assert(sizeof(RSBattlePlayer_C_IsDriveMode) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDriveMode");
static_assert(offsetof(RSBattlePlayer_C_IsDriveMode, bDrive) == 0x000000, "Member 'RSBattlePlayer_C_IsDriveMode::bDrive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDriveMode, CallFunc_IsDriveMode_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsDriveMode::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrict
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EventInputRestrict final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EventInputRestrict) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EventInputRestrict");
static_assert(sizeof(RSBattlePlayer_C_EventInputRestrict) == 0x000002, "Wrong size on RSBattlePlayer_C_EventInputRestrict");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrict, bRestrict) == 0x000000, "Member 'RSBattlePlayer_C_EventInputRestrict::bRestrict' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrict, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EventInputRestrict::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrictAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EventInputRestrictAction final
{
public:
	bool                                          bRestrict;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EventInputRestrictAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EventInputRestrictAction");
static_assert(sizeof(RSBattlePlayer_C_EventInputRestrictAction) == 0x000002, "Wrong size on RSBattlePlayer_C_EventInputRestrictAction");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrictAction, bRestrict) == 0x000000, "Member 'RSBattlePlayer_C_EventInputRestrictAction::bRestrict' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EventInputRestrictAction, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EventInputRestrictAction::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SuspendPlayer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SuspendPlayer final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAnimLeftStickPower_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerHidden_bDummy;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SuspendPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SuspendPlayer");
static_assert(sizeof(RSBattlePlayer_C_SuspendPlayer) == 0x000004, "Wrong size on RSBattlePlayer_C_SuspendPlayer");
static_assert(offsetof(RSBattlePlayer_C_SuspendPlayer, bSuspend) == 0x000000, "Member 'RSBattlePlayer_C_SuspendPlayer::bSuspend' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SuspendPlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_SuspendPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SuspendPlayer, CallFunc_ResetAnimLeftStickPower_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SuspendPlayer::CallFunc_ResetAnimLeftStickPower_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SuspendPlayer, CallFunc_SetPlayerHidden_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_SuspendPlayer::CallFunc_SetPlayerHidden_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResumePlayer
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_ResumePlayer final
{
public:
	bool                                          bResume;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerHidden_bDummy;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResumePlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResumePlayer");
static_assert(sizeof(RSBattlePlayer_C_ResumePlayer) == 0x000004, "Wrong size on RSBattlePlayer_C_ResumePlayer");
static_assert(offsetof(RSBattlePlayer_C_ResumePlayer, bResume) == 0x000000, "Member 'RSBattlePlayer_C_ResumePlayer::bResume' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResumePlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_ResumePlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResumePlayer, CallFunc_IsVisible_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_ResumePlayer::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResumePlayer, CallFunc_SetPlayerHidden_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_ResumePlayer::CallFunc_SetPlayerHidden_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FinishMetamorphosisLastAttack
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_FinishMetamorphosisLastAttack final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_NPCMetamorphosisComponent_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishLastAttack_bResult;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_FinishMetamorphosisLastAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_FinishMetamorphosisLastAttack");
static_assert(sizeof(RSBattlePlayer_C_FinishMetamorphosisLastAttack) == 0x000018, "Wrong size on RSBattlePlayer_C_FinishMetamorphosisLastAttack");
static_assert(offsetof(RSBattlePlayer_C_FinishMetamorphosisLastAttack, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_FinishMetamorphosisLastAttack::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FinishMetamorphosisLastAttack, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_FinishMetamorphosisLastAttack::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FinishMetamorphosisLastAttack, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_FinishMetamorphosisLastAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FinishMetamorphosisLastAttack, CallFunc_FinishLastAttack_bResult) == 0x000011, "Member 'RSBattlePlayer_C_FinishMetamorphosisLastAttack::CallFunc_FinishLastAttack_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCreateCopy
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableCreateCopy final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableCreateCopy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableCreateCopy");
static_assert(sizeof(RSBattlePlayer_C_IsEnableCreateCopy) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableCreateCopy");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCreateCopy, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableCreateCopy::Enable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStartReactionChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnStartReactionChance final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnStartReactionChance) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnStartReactionChance");
static_assert(sizeof(RSBattlePlayer_C_OnStartReactionChance) == 0x000001, "Wrong size on RSBattlePlayer_C_OnStartReactionChance");
static_assert(offsetof(RSBattlePlayer_C_OnStartReactionChance, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnStartReactionChance::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStartEnpcDrive
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnStartEnpcDrive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnStartEnpcDrive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnStartEnpcDrive");
static_assert(sizeof(RSBattlePlayer_C_OnStartEnpcDrive) == 0x000001, "Wrong size on RSBattlePlayer_C_OnStartEnpcDrive");
static_assert(offsetof(RSBattlePlayer_C_OnStartEnpcDrive, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnStartEnpcDrive::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetReactionChanceEndAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetReactionChanceEndAction final
{
public:
	EPlayerAIBattleThinkType                      EndAction;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetReactionChanceEndAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetReactionChanceEndAction");
static_assert(sizeof(RSBattlePlayer_C_GetReactionChanceEndAction) == 0x000001, "Wrong size on RSBattlePlayer_C_GetReactionChanceEndAction");
static_assert(offsetof(RSBattlePlayer_C_GetReactionChanceEndAction, EndAction) == 0x000000, "Member 'RSBattlePlayer_C_GetReactionChanceEndAction::EndAction' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SelectReactionChanceEndAction
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SelectReactionChanceEndAction final
{
public:
	TArray<EPlayerAIBattleThinkType>              InEndAction;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      OutEndAction;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      LOutEndAction;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_Array_Get_Item;                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SelectReactionChanceEndAction) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SelectReactionChanceEndAction");
static_assert(sizeof(RSBattlePlayer_C_SelectReactionChanceEndAction) == 0x000018, "Wrong size on RSBattlePlayer_C_SelectReactionChanceEndAction");
static_assert(offsetof(RSBattlePlayer_C_SelectReactionChanceEndAction, InEndAction) == 0x000000, "Member 'RSBattlePlayer_C_SelectReactionChanceEndAction::InEndAction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SelectReactionChanceEndAction, OutEndAction) == 0x000010, "Member 'RSBattlePlayer_C_SelectReactionChanceEndAction::OutEndAction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SelectReactionChanceEndAction, LOutEndAction) == 0x000011, "Member 'RSBattlePlayer_C_SelectReactionChanceEndAction::LOutEndAction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SelectReactionChanceEndAction, CallFunc_Array_Get_Item) == 0x000012, "Member 'RSBattlePlayer_C_SelectReactionChanceEndAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SelectReactionChanceEndAction, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_SelectReactionChanceEndAction::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetNpcWarpDither
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetNpcWarpDither final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetNpcWarpDither) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetNpcWarpDither");
static_assert(sizeof(RSBattlePlayer_C_SetNpcWarpDither) == 0x000001, "Wrong size on RSBattlePlayer_C_SetNpcWarpDither");
static_assert(offsetof(RSBattlePlayer_C_SetNpcWarpDither, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_SetNpcWarpDither::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsExecNpcRevive
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsExecNpcRevive final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsExecNpcRevive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsExecNpcRevive");
static_assert(sizeof(RSBattlePlayer_C_IsExecNpcRevive) == 0x000001, "Wrong size on RSBattlePlayer_C_IsExecNpcRevive");
static_assert(offsetof(RSBattlePlayer_C_IsExecNpcRevive, bExec) == 0x000000, "Member 'RSBattlePlayer_C_IsExecNpcRevive::bExec' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMainPlayer
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsMainPlayer final
{
public:
	bool                                          bMainPlayer;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMainPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMainPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsMainPlayer) == 0x000003, "Wrong size on RSBattlePlayer_C_IsMainPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsMainPlayer, bMainPlayer) == 0x000000, "Member 'RSBattlePlayer_C_IsMainPlayer::bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMainPlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsMainPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMainPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsMainPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NotifyKillEnemy
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_NotifyKillEnemy final
{
public:
	class ARSBattleCharacter_C*                   KillActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NotifyKillEnemy) == 0x000008, "Wrong alignment on RSBattlePlayer_C_NotifyKillEnemy");
static_assert(sizeof(RSBattlePlayer_C_NotifyKillEnemy) == 0x000010, "Wrong size on RSBattlePlayer_C_NotifyKillEnemy");
static_assert(offsetof(RSBattlePlayer_C_NotifyKillEnemy, KillActor) == 0x000000, "Member 'RSBattlePlayer_C_NotifyKillEnemy::KillActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NotifyKillEnemy, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_NotifyKillEnemy::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DisablePlayerFootIK
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_DisablePlayerFootIK final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFootIKEnable_Dummy;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFootIKEnable_Dummy_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DisablePlayerFootIK) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DisablePlayerFootIK");
static_assert(sizeof(RSBattlePlayer_C_DisablePlayerFootIK) == 0x000020, "Wrong size on RSBattlePlayer_C_DisablePlayerFootIK");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, BlendTime) == 0x00000C, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, bDummy) == 0x000010, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_SetFootIKEnable_Dummy) == 0x000011, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_SetFootIKEnable_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_SetFootIKEnable_Dummy_1) == 0x000013, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_SetFootIKEnable_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_Array_RemoveItem_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_Array_AddUnique_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DisablePlayerFootIK, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_DisablePlayerFootIK::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ElevatorSetting
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_ElevatorSetting final
{
public:
	bool                                          bInElevator;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerInputRestrictionType                   Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DisablePlayerFootIK_bDummy;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5E[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerInputRestrictionType                   Temp_byte_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerInputRestrictionType                   K2Node_Select_Default_1;                           // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEnableInputStick_Dummy;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ElevatorSetting) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ElevatorSetting");
static_assert(sizeof(RSBattlePlayer_C_ElevatorSetting) == 0x00001C, "Wrong size on RSBattlePlayer_C_ElevatorSetting");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, bInElevator) == 0x000000, "Member 'RSBattlePlayer_C_ElevatorSetting::bInElevator' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_ElevatorSetting::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_byte_Variable) == 0x000002, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_ElevatorSetting::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, CallFunc_DisablePlayerFootIK_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_ElevatorSetting::CallFunc_DisablePlayerFootIK_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_bool_Variable) == 0x000005, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_float_Variable) == 0x000008, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_float_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, K2Node_Select_Default) == 0x000010, "Member 'RSBattlePlayer_C_ElevatorSetting::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, CallFunc_IsControlAI_bAI) == 0x000014, "Member 'RSBattlePlayer_C_ElevatorSetting::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_byte_Variable_1) == 0x000015, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, Temp_bool_Variable_1) == 0x000016, "Member 'RSBattlePlayer_C_ElevatorSetting::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, K2Node_Select_Default_1) == 0x000017, "Member 'RSBattlePlayer_C_ElevatorSetting::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ElevatorSetting, CallFunc_SetEnableInputStick_Dummy) == 0x000018, "Member 'RSBattlePlayer_C_ElevatorSetting::CallFunc_SetEnableInputStick_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDrive
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsEnableDrive final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReadyDrive_bReady;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableDrive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableDrive");
static_assert(sizeof(RSBattlePlayer_C_IsEnableDrive) == 0x000004, "Wrong size on RSBattlePlayer_C_IsEnableDrive");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDrive, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableDrive::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDrive, L_result) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableDrive::L_result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDrive, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableDrive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDrive, CallFunc_IsReadyDrive_bReady) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableDrive::CallFunc_IsReadyDrive_bReady' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableRegistSAS
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableRegistSAS final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableRegistSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableRegistSAS");
static_assert(sizeof(RSBattlePlayer_C_IsEnableRegistSAS) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableRegistSAS");
static_assert(offsetof(RSBattlePlayer_C_IsEnableRegistSAS, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableRegistSAS::Enable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasFire
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsActiveEnpcSasFire final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveEnpcSasFire) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveEnpcSasFire");
static_assert(sizeof(RSBattlePlayer_C_IsActiveEnpcSasFire) == 0x000001, "Wrong size on RSBattlePlayer_C_IsActiveEnpcSasFire");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSasFire, IsActive) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveEnpcSasFire::IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasElectric
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsActiveEnpcSasElectric final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveEnpcSasElectric) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveEnpcSasElectric");
static_assert(sizeof(RSBattlePlayer_C_IsActiveEnpcSasElectric) == 0x000001, "Wrong size on RSBattlePlayer_C_IsActiveEnpcSasElectric");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSasElectric, IsActive) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveEnpcSasElectric::IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasTeleport
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsActiveEnpcSasTeleport final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveEnpcSasTeleport) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveEnpcSasTeleport");
static_assert(sizeof(RSBattlePlayer_C_IsActiveEnpcSasTeleport) == 0x000001, "Wrong size on RSBattlePlayer_C_IsActiveEnpcSasTeleport");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSasTeleport, IsActive) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveEnpcSasTeleport::IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableActionBoringIdle
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetDisableActionBoringIdle final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDisableActionBoringIdle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetDisableActionBoringIdle");
static_assert(sizeof(RSBattlePlayer_C_SetDisableActionBoringIdle) == 0x000002, "Wrong size on RSBattlePlayer_C_SetDisableActionBoringIdle");
static_assert(offsetof(RSBattlePlayer_C_SetDisableActionBoringIdle, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_SetDisableActionBoringIdle::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDisableActionBoringIdle, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetDisableActionBoringIdle::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdatePlayerActionAfterEvent
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_UpdatePlayerActionAfterEvent final
{
public:
	EParamAfterEventAction                        EventAction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdatePlayerActionAfterEvent) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdatePlayerActionAfterEvent");
static_assert(sizeof(RSBattlePlayer_C_UpdatePlayerActionAfterEvent) == 0x000002, "Wrong size on RSBattlePlayer_C_UpdatePlayerActionAfterEvent");
static_assert(offsetof(RSBattlePlayer_C_UpdatePlayerActionAfterEvent, EventAction) == 0x000000, "Member 'RSBattlePlayer_C_UpdatePlayerActionAfterEvent::EventAction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdatePlayerActionAfterEvent, Return) == 0x000001, "Member 'RSBattlePlayer_C_UpdatePlayerActionAfterEvent::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnablePlaySpTrigger
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EnablePlaySpTrigger final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return_;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnablePlaySpTrigger) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnablePlaySpTrigger");
static_assert(sizeof(RSBattlePlayer_C_EnablePlaySpTrigger) == 0x000002, "Wrong size on RSBattlePlayer_C_EnablePlaySpTrigger");
static_assert(offsetof(RSBattlePlayer_C_EnablePlaySpTrigger, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_EnablePlaySpTrigger::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnablePlaySpTrigger, Return_) == 0x000001, "Member 'RSBattlePlayer_C_EnablePlaySpTrigger::Return_' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnpcSasStealthStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEnpcSasStealthStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnpcSasStealthStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnpcSasStealthStart");
static_assert(sizeof(RSBattlePlayer_C_SetEnpcSasStealthStart) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEnpcSasStealthStart");
static_assert(offsetof(RSBattlePlayer_C_SetEnpcSasStealthStart, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetEnpcSasStealthStart::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnpcSasStealthEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEnpcSasStealthEnd final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnpcSasStealthEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnpcSasStealthEnd");
static_assert(sizeof(RSBattlePlayer_C_SetEnpcSasStealthEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEnpcSasStealthEnd");
static_assert(offsetof(RSBattlePlayer_C_SetEnpcSasStealthEnd, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetEnpcSasStealthEnd::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BattleSettingEm1500
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_BattleSettingEm1500 final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BattleSettingEm1500) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BattleSettingEm1500");
static_assert(sizeof(RSBattlePlayer_C_BattleSettingEm1500) == 0x000006, "Wrong size on RSBattlePlayer_C_BattleSettingEm1500");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_BattleSettingEm1500::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_BattleSettingEm1500::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, CallFunc_SetPlayerInputRestriction_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_BattleSettingEm1500::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, CallFunc_IsPlayerStatus_Result) == 0x000003, "Member 'RSBattlePlayer_C_BattleSettingEm1500::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, CallFunc_GetPlayerID_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_BattleSettingEm1500::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BattleSettingEm1500, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'RSBattlePlayer_C_BattleSettingEm1500::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAttackHitStop
// 0x0218 (0x0218 - 0x0000)
struct RSBattlePlayer_C_SetAttackHitStop final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           HitResult;                                         // 0x0008(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          bDummy;                                            // 0x01C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5F[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C60[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartCriticalHitSlow_Return;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C61[0x6];                                     // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHitStopInterface_bDummy;               // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHitStopInterface_bDummy_1;             // 0x0216(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0217(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetAttackHitStop) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetAttackHitStop");
static_assert(sizeof(RSBattlePlayer_C_SetAttackHitStop) == 0x000218, "Wrong size on RSBattlePlayer_C_SetAttackHitStop");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, DamagedActor) == 0x000000, "Member 'RSBattlePlayer_C_SetAttackHitStop::DamagedActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, HitResult) == 0x000008, "Member 'RSBattlePlayer_C_SetAttackHitStop::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, bDummy) == 0x0001C8, "Member 'RSBattlePlayer_C_SetAttackHitStop::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x0001D0, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0001E8, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_bSuccess_1) == 0x0001F8, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_StartCriticalHitSlow_Return) == 0x0001F9, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_StartCriticalHitSlow_Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x000200, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, K2Node_DynamicCast_bSuccess_2) == 0x000210, "Member 'RSBattlePlayer_C_SetAttackHitStop::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_IsValid_ReturnValue) == 0x000211, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_IsEnemy_bEnemy) == 0x000212, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_IsControlAI_bAI) == 0x000213, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000214, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_SetHitStopInterface_bDummy) == 0x000215, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_SetHitStopInterface_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_SetHitStopInterface_bDummy_1) == 0x000216, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_SetHitStopInterface_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackHitStop, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000217, "Member 'RSBattlePlayer_C_SetAttackHitStop::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeforeCutSceneEventManagerStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BeforeCutSceneEventManagerStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeforeCutSceneEventManagerStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeforeCutSceneEventManagerStart");
static_assert(sizeof(RSBattlePlayer_C_BeforeCutSceneEventManagerStart) == 0x000001, "Wrong size on RSBattlePlayer_C_BeforeCutSceneEventManagerStart");
static_assert(offsetof(RSBattlePlayer_C_BeforeCutSceneEventManagerStart, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_BeforeCutSceneEventManagerStart::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckBattleStartTimer
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckBattleStartTimer final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C62[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStartBattleTimer_IsEffective;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckBattleStartTimer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckBattleStartTimer");
static_assert(sizeof(RSBattlePlayer_C_CheckBattleStartTimer) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckBattleStartTimer");
static_assert(offsetof(RSBattlePlayer_C_CheckBattleStartTimer, Enable) == 0x000000, "Member 'RSBattlePlayer_C_CheckBattleStartTimer::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckBattleStartTimer, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_CheckBattleStartTimer::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckBattleStartTimer, CallFunc_IsStartBattleTimer_IsEffective) == 0x000010, "Member 'RSBattlePlayer_C_CheckBattleStartTimer::CallFunc_IsStartBattleTimer_IsEffective' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckBattleStartTimer, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_CheckBattleStartTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StoreLockTargetInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StoreLockTargetInterface final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StoreLockTargetInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StoreLockTargetInterface");
static_assert(sizeof(RSBattlePlayer_C_StoreLockTargetInterface) == 0x000001, "Wrong size on RSBattlePlayer_C_StoreLockTargetInterface");
static_assert(offsetof(RSBattlePlayer_C_StoreLockTargetInterface, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_StoreLockTargetInterface::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestoreLockTargetInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_RestoreLockTargetInterface final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestoreLockTargetInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RestoreLockTargetInterface");
static_assert(sizeof(RSBattlePlayer_C_RestoreLockTargetInterface) == 0x000001, "Wrong size on RSBattlePlayer_C_RestoreLockTargetInterface");
static_assert(offsetof(RSBattlePlayer_C_RestoreLockTargetInterface, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_RestoreLockTargetInterface::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ProcEndBrainCrash
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_ProcEndBrainCrash final
{
public:
	int32                                         CrashTargetNum;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C63[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C64[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ProcEndBrainCrash) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ProcEndBrainCrash");
static_assert(sizeof(RSBattlePlayer_C_ProcEndBrainCrash) == 0x000014, "Wrong size on RSBattlePlayer_C_ProcEndBrainCrash");
static_assert(offsetof(RSBattlePlayer_C_ProcEndBrainCrash, CrashTargetNum) == 0x000000, "Member 'RSBattlePlayer_C_ProcEndBrainCrash::CrashTargetNum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcEndBrainCrash, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_ProcEndBrainCrash::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcEndBrainCrash, Temp_int_Variable) == 0x000008, "Member 'RSBattlePlayer_C_ProcEndBrainCrash::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcEndBrainCrash, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ProcEndBrainCrash::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ProcEndBrainCrash, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ProcEndBrainCrash::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AddBattleBonusInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_AddBattleBonusInterface final
{
public:
	EBattleBonusAddType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AddBattleBonusInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AddBattleBonusInterface");
static_assert(sizeof(RSBattlePlayer_C_AddBattleBonusInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_AddBattleBonusInterface");
static_assert(offsetof(RSBattlePlayer_C_AddBattleBonusInterface, Type) == 0x000000, "Member 'RSBattlePlayer_C_AddBattleBonusInterface::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AddBattleBonusInterface, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_AddBattleBonusInterface::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDriveAttack
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsEnableDriveAttack final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C65[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDriveAttacked_IsAttacked;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableDriveAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsEnableDriveAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnableDriveAttack) == 0x000018, "Wrong size on RSBattlePlayer_C_IsEnableDriveAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDriveAttack, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableDriveAttack::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDriveAttack, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableDriveAttack::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDriveAttack, CallFunc_IsDriveAttacked_IsAttacked) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableDriveAttack::CallFunc_IsDriveAttacked_IsAttacked' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDriveAttack, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_IsEnableDriveAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDriveAttack, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_IsEnableDriveAttack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDriveAttacked
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetDriveAttacked final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C66[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveAttacked_IsAttacked;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDriveAttacked) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetDriveAttacked");
static_assert(sizeof(RSBattlePlayer_C_SetDriveAttacked) == 0x000018, "Wrong size on RSBattlePlayer_C_SetDriveAttacked");
static_assert(offsetof(RSBattlePlayer_C_SetDriveAttacked, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetDriveAttacked::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDriveAttacked, CallFunc_IsDriveMode_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetDriveAttacked::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDriveAttacked, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_SetDriveAttacked::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDriveAttacked, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetDriveAttacked::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDriveAttacked, CallFunc_IsDriveAttacked_IsAttacked) == 0x000011, "Member 'RSBattlePlayer_C_SetDriveAttacked::CallFunc_IsDriveAttacked_IsAttacked' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAttackCollisionDelayTime
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetAttackCollisionDelayTime final
{
public:
	TArray<float>                                 AttackDelayTime;                                   // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetAttackCollisionDelayTime) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetAttackCollisionDelayTime");
static_assert(sizeof(RSBattlePlayer_C_SetAttackCollisionDelayTime) == 0x000018, "Wrong size on RSBattlePlayer_C_SetAttackCollisionDelayTime");
static_assert(offsetof(RSBattlePlayer_C_SetAttackCollisionDelayTime, AttackDelayTime) == 0x000000, "Member 'RSBattlePlayer_C_SetAttackCollisionDelayTime::AttackDelayTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAttackCollisionDelayTime, Dummy) == 0x000010, "Member 'RSBattlePlayer_C_SetAttackCollisionDelayTime::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugNextBattleThinkLog
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_DebugNextBattleThinkLog final
{
public:
	struct FFPlayerAIBattleThinkTransitionData    InTransitionData;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DebugNextBattleThinkLog) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DebugNextBattleThinkLog");
static_assert(sizeof(RSBattlePlayer_C_DebugNextBattleThinkLog) == 0x000010, "Wrong size on RSBattlePlayer_C_DebugNextBattleThinkLog");
static_assert(offsetof(RSBattlePlayer_C_DebugNextBattleThinkLog, InTransitionData) == 0x000000, "Member 'RSBattlePlayer_C_DebugNextBattleThinkLog::InTransitionData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugNextBattleThinkLog, Return) == 0x00000C, "Member 'RSBattlePlayer_C_DebugNextBattleThinkLog::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SASCancelEffectAndSEInterface
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SASCancelEffectAndSEInterface final
{
public:
	bool                                          bEffect;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSE;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SASCancelEffectAndSEInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SASCancelEffectAndSEInterface");
static_assert(sizeof(RSBattlePlayer_C_SASCancelEffectAndSEInterface) == 0x000003, "Wrong size on RSBattlePlayer_C_SASCancelEffectAndSEInterface");
static_assert(offsetof(RSBattlePlayer_C_SASCancelEffectAndSEInterface, bEffect) == 0x000000, "Member 'RSBattlePlayer_C_SASCancelEffectAndSEInterface::bEffect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelEffectAndSEInterface, bSE) == 0x000001, "Member 'RSBattlePlayer_C_SASCancelEffectAndSEInterface::bSE' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SASCancelEffectAndSEInterface, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SASCancelEffectAndSEInterface::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsOverwriteAttackAutoAimSpeed
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C67[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverwriteAttackAutoAim_ReturnValue;     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed");
static_assert(sizeof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed) == 0x00000C, "Wrong size on RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, bOverwrite) == 0x000000, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::bOverwrite' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, Speed) == 0x000004, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::Speed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, CallFunc_IsLockTarget_IsLockTarget) == 0x00000A, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed, CallFunc_IsOverwriteAttackAutoAim_ReturnValue) == 0x00000B, "Member 'RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed::CallFunc_IsOverwriteAttackAutoAim_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAllSasCodeList
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetAllSasCodeList final
{
public:
	TArray<class ABP_CableBase_C*>                NormalCode;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAllSasCodeList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetAllSasCodeList");
static_assert(sizeof(RSBattlePlayer_C_GetAllSasCodeList) == 0x000010, "Wrong size on RSBattlePlayer_C_GetAllSasCodeList");
static_assert(offsetof(RSBattlePlayer_C_GetAllSasCodeList, NormalCode) == 0x000000, "Member 'RSBattlePlayer_C_GetAllSasCodeList::NormalCode' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsNexusDriveSeeThroughBestJustDodge
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge final
{
public:
	bool                                          bBestJustDodge;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(sizeof(RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge) == 0x000001, "Wrong size on RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge");
static_assert(offsetof(RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge, bBestJustDodge) == 0x000000, "Member 'RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge::bBestJustDodge' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerPhysicsIdlingInterface
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface final
{
public:
	float                                         IdlingSeconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRefreshSkin;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface) == 0x000008, "Wrong size on RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface, IdlingSeconds) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface, bRefreshSkin) == 0x000004, "Member 'RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface::bRefreshSkin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface, bDummy) == 0x000005, "Member 'RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveMode
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetMoveMode final
{
public:
	EPlayerAIMoveMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIMoveModeCPP                          CallFunc_ConvertEnumBPtoCPP_PlayerAIMoveMode_CPPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetMoveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetMoveMode");
static_assert(sizeof(RSBattlePlayer_C_SetMoveMode) == 0x000003, "Wrong size on RSBattlePlayer_C_SetMoveMode");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode, Mode) == 0x000000, "Member 'RSBattlePlayer_C_SetMoveMode::Mode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetMoveMode::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode, CallFunc_ConvertEnumBPtoCPP_PlayerAIMoveMode_CPPEnum) == 0x000002, "Member 'RSBattlePlayer_C_SetMoveMode::CallFunc_ConvertEnumBPtoCPP_PlayerAIMoveMode_CPPEnum' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableInputStick
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetEnableInputStick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C68[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetEnableInputStick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEnableInputStick");
static_assert(sizeof(RSBattlePlayer_C_SetEnableInputStick) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetEnableInputStick");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEnableInputStick::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEnableInputStick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetEnableInputStick::ClaimantName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetBattleThink
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetBattleThink final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetBattleThink) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetBattleThink");
static_assert(sizeof(RSBattlePlayer_C_ResetBattleThink) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetBattleThink");
static_assert(offsetof(RSBattlePlayer_C_ResetBattleThink, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_ResetBattleThink::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NextBattleThink
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_NextBattleThink final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NextBattleThink) == 0x000001, "Wrong alignment on RSBattlePlayer_C_NextBattleThink");
static_assert(sizeof(RSBattlePlayer_C_NextBattleThink) == 0x000001, "Wrong size on RSBattlePlayer_C_NextBattleThink");
static_assert(offsetof(RSBattlePlayer_C_NextBattleThink, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_NextBattleThink::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleThink
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnChangeBattleThink final
{
public:
	EPlayerAIBattleThinkType                      NextThinkType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      PrevThinkType;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeBattleThink) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeBattleThink");
static_assert(sizeof(RSBattlePlayer_C_OnChangeBattleThink) == 0x000003, "Wrong size on RSBattlePlayer_C_OnChangeBattleThink");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink, NextThinkType) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeBattleThink::NextThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink, PrevThinkType) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeBattleThink::PrevThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeBattleThink::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAIMoveStick
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetAIMoveStick final
{
public:
	bool                                          bMoveStick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetAIMoveStick) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetAIMoveStick");
static_assert(sizeof(RSBattlePlayer_C_SetAIMoveStick) == 0x000002, "Wrong size on RSBattlePlayer_C_SetAIMoveStick");
static_assert(offsetof(RSBattlePlayer_C_SetAIMoveStick, bMoveStick) == 0x000000, "Member 'RSBattlePlayer_C_SetAIMoveStick::bMoveStick' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAIMoveStick, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetAIMoveStick::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AimEndAI
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_AimEndAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AimEndAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AimEndAI");
static_assert(sizeof(RSBattlePlayer_C_AimEndAI) == 0x000001, "Wrong size on RSBattlePlayer_C_AimEndAI");
static_assert(offsetof(RSBattlePlayer_C_AimEndAI, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_AimEndAI::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AimStartAI
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_AimStartAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AimStartAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AimStartAI");
static_assert(sizeof(RSBattlePlayer_C_AimStartAI) == 0x000001, "Wrong size on RSBattlePlayer_C_AimStartAI");
static_assert(offsetof(RSBattlePlayer_C_AimStartAI, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_AimStartAI::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUseItemThink
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsUseItemThink final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseItemThink_return;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUseItemThink) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUseItemThink");
static_assert(sizeof(RSBattlePlayer_C_IsUseItemThink) == 0x000002, "Wrong size on RSBattlePlayer_C_IsUseItemThink");
static_assert(offsetof(RSBattlePlayer_C_IsUseItemThink, Result) == 0x000000, "Member 'RSBattlePlayer_C_IsUseItemThink::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseItemThink, CallFunc_IsUseItemThink_return) == 0x000001, "Member 'RSBattlePlayer_C_IsUseItemThink::CallFunc_IsUseItemThink_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_UseItem
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_UseItem final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_UseItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_UseItem");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_UseItem) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_UseItem");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_UseItem, bON) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_UseItem::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_UseItem, CallFunc_IsOn_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_UseItem::CallFunc_IsOn_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventMove
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_SetEventMove final
{
public:
	TArray<struct FVector>                        Pos_list_in;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<float>                                 Radius_list_in;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Walk;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterWait;                                        // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C69[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMoveTime;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventMove) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetEventMove");
static_assert(sizeof(RSBattlePlayer_C_SetEventMove) == 0x000030, "Wrong size on RSBattlePlayer_C_SetEventMove");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, Pos_list_in) == 0x000000, "Member 'RSBattlePlayer_C_SetEventMove::Pos_list_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, Radius_list_in) == 0x000010, "Member 'RSBattlePlayer_C_SetEventMove::Radius_list_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, Walk) == 0x000020, "Member 'RSBattlePlayer_C_SetEventMove::Walk' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, bAfterWait) == 0x000021, "Member 'RSBattlePlayer_C_SetEventMove::bAfterWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, MaxMoveTime) == 0x000024, "Member 'RSBattlePlayer_C_SetEventMove::MaxMoveTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove, Dummy) == 0x000028, "Member 'RSBattlePlayer_C_SetEventMove::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEventMovePosActor
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_GetEventMovePosActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C6A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEventMovePosActor_pos_actor;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMovePosActor_accept_Radius;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEventMovePosActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEventMovePosActor");
static_assert(sizeof(RSBattlePlayer_C_GetEventMovePosActor) == 0x000020, "Wrong size on RSBattlePlayer_C_GetEventMovePosActor");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor, Actor) == 0x000000, "Member 'RSBattlePlayer_C_GetEventMovePosActor::Actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor, Radius) == 0x000008, "Member 'RSBattlePlayer_C_GetEventMovePosActor::Radius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor, CallFunc_GetEventMovePosActor_pos_actor) == 0x000010, "Member 'RSBattlePlayer_C_GetEventMovePosActor::CallFunc_GetEventMovePosActor_pos_actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor, CallFunc_GetEventMovePosActor_accept_Radius) == 0x000018, "Member 'RSBattlePlayer_C_GetEventMovePosActor::CallFunc_GetEventMovePosActor_accept_Radius' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckEventMovePos
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CheckEventMovePos final
{
public:
	bool                                          Goal;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventMovePos_Goal;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckEventMovePos) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckEventMovePos");
static_assert(sizeof(RSBattlePlayer_C_CheckEventMovePos) == 0x000002, "Wrong size on RSBattlePlayer_C_CheckEventMovePos");
static_assert(offsetof(RSBattlePlayer_C_CheckEventMovePos, Goal) == 0x000000, "Member 'RSBattlePlayer_C_CheckEventMovePos::Goal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEventMovePos, CallFunc_CheckEventMovePos_Goal) == 0x000001, "Member 'RSBattlePlayer_C_CheckEventMovePos::CallFunc_CheckEventMovePos_Goal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSelfRecovery
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsSelfRecovery final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelfRecovery_bRecovery;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSelfRecovery) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSelfRecovery");
static_assert(sizeof(RSBattlePlayer_C_IsSelfRecovery) == 0x000002, "Wrong size on RSBattlePlayer_C_IsSelfRecovery");
static_assert(offsetof(RSBattlePlayer_C_IsSelfRecovery, bResult) == 0x000000, "Member 'RSBattlePlayer_C_IsSelfRecovery::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSelfRecovery, CallFunc_IsSelfRecovery_bRecovery) == 0x000001, "Member 'RSBattlePlayer_C_IsSelfRecovery::CallFunc_IsSelfRecovery_bRecovery' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NotifyResetBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_NotifyResetBehaviorTree final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NotifyResetBehaviorTree) == 0x000001, "Wrong alignment on RSBattlePlayer_C_NotifyResetBehaviorTree");
static_assert(sizeof(RSBattlePlayer_C_NotifyResetBehaviorTree) == 0x000001, "Wrong size on RSBattlePlayer_C_NotifyResetBehaviorTree");
static_assert(offsetof(RSBattlePlayer_C_NotifyResetBehaviorTree, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_NotifyResetBehaviorTree::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SearchAIPsychicObject
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SearchAIPsychicObject final
{
public:
	bool                                          bFiound;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SearchAIPsychicObject) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SearchAIPsychicObject");
static_assert(sizeof(RSBattlePlayer_C_SearchAIPsychicObject) == 0x000001, "Wrong size on RSBattlePlayer_C_SearchAIPsychicObject");
static_assert(offsetof(RSBattlePlayer_C_SearchAIPsychicObject, bFiound) == 0x000000, "Member 'RSBattlePlayer_C_SearchAIPsychicObject::bFiound' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAIPsychicObject
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_CheckAIPsychicObject final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOK;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAIPsychicObject) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckAIPsychicObject");
static_assert(sizeof(RSBattlePlayer_C_CheckAIPsychicObject) == 0x000003, "Wrong size on RSBattlePlayer_C_CheckAIPsychicObject");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject, bCapture) == 0x000000, "Member 'RSBattlePlayer_C_CheckAIPsychicObject::bCapture' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject, bAttack) == 0x000001, "Member 'RSBattlePlayer_C_CheckAIPsychicObject::bAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject, bOK) == 0x000002, "Member 'RSBattlePlayer_C_CheckAIPsychicObject::bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Psychic
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Psychic final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Psychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Psychic");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Psychic) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Psychic");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Psychic, bON) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Psychic::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Psychic, CallFunc_IsOn_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Psychic::CallFunc_IsOn_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsPsychicAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicAble_bEnable;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPsychicAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPsychicAble");
static_assert(sizeof(RSBattlePlayer_C_IsPsychicAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsPsychicAble");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicAble, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsPsychicAble::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicAble, CallFunc_IsPsychicAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsPsychicAble::CallFunc_IsPsychicAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveStickBack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetMoveStickBack final
{
public:
	bool                                          bBack;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetMoveStickBack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetMoveStickBack");
static_assert(sizeof(RSBattlePlayer_C_SetMoveStickBack) == 0x000002, "Wrong size on RSBattlePlayer_C_SetMoveStickBack");
static_assert(offsetof(RSBattlePlayer_C_SetMoveStickBack, bBack) == 0x000000, "Member 'RSBattlePlayer_C_SetMoveStickBack::bBack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveStickBack, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetMoveStickBack::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEventWait final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEventWait");
static_assert(sizeof(RSBattlePlayer_C_SetEventWait) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEventWait");
static_assert(offsetof(RSBattlePlayer_C_SetEventWait, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_SetEventWait::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndEventWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EndEventWait final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndEventWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndEventWait");
static_assert(sizeof(RSBattlePlayer_C_EndEventWait) == 0x000001, "Wrong size on RSBattlePlayer_C_EndEventWait");
static_assert(offsetof(RSBattlePlayer_C_EndEventWait, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_EndEventWait::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueConditionTransition
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_IsUniqueConditionTransition final
{
public:
	int32                                         UniqueNo;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueConditionTransition) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsUniqueConditionTransition");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueConditionTransition) == 0x000008, "Wrong size on RSBattlePlayer_C_IsUniqueConditionTransition");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueConditionTransition, UniqueNo) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueConditionTransition::UniqueNo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueConditionTransition, bResult) == 0x000004, "Member 'RSBattlePlayer_C_IsUniqueConditionTransition::bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestartBattleAI
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_RestartBattleAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestartBattleAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RestartBattleAI");
static_assert(sizeof(RSBattlePlayer_C_RestartBattleAI) == 0x000002, "Wrong size on RSBattlePlayer_C_RestartBattleAI");
static_assert(offsetof(RSBattlePlayer_C_RestartBattleAI, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_RestartBattleAI::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestartBattleAI, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_RestartBattleAI::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleActionStartAI
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsBattleActionStartAI final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleActionStart_bStart;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleActionStartAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleActionStartAI");
static_assert(sizeof(RSBattlePlayer_C_IsBattleActionStartAI) == 0x000002, "Wrong size on RSBattlePlayer_C_IsBattleActionStartAI");
static_assert(offsetof(RSBattlePlayer_C_IsBattleActionStartAI, bStart) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleActionStartAI::bStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleActionStartAI, CallFunc_IsBattleActionStart_bStart) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleActionStartAI::CallFunc_IsBattleActionStart_bStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsTargetCanBeAttacked
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattlePlayer_C_IsTargetCanBeAttacked final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsTaget;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LCanDo;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C6B[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LPlayerActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C6C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C6D[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C6E[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C6F[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C70[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_GetBattleTargetActor_self_CastInput;      // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor_1;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_GetCurrentBattleThink_NewParam;           // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C71[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsTargetCanBeAttacked) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsTargetCanBeAttacked");
static_assert(sizeof(RSBattlePlayer_C_IsTargetCanBeAttacked) == 0x0000B8, "Wrong size on RSBattlePlayer_C_IsTargetCanBeAttacked");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CanDo) == 0x000000, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CanDo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, LIsTaget) == 0x000001, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::LIsTaget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, LCanDo) == 0x000002, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::LCanDo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, LPlayerActor) == 0x000008, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::LPlayerActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetPlayer_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetBattleTargetActor_TargetActor) == 0x000038, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsValid_ReturnValue_2) == 0x000041, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetEnemyManager_Manager) == 0x000048, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetEnemyList_ReturnValue) == 0x000050, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsValid_ReturnValue_3) == 0x000060, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_Array_Get_Item) == 0x000068, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, K2Node_DynamicCast_AsRSBattle_Player) == 0x000070, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetBattleTargetActor_self_CastInput) == 0x000080, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetBattleTargetActor_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetBattleTargetActor_TargetActor_1) == 0x000090, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetBattleTargetActor_TargetActor_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000099, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00009A, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_GetCurrentBattleThink_NewParam) == 0x00009B, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_GetCurrentBattleThink_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsEnemyPlayer_self_CastInput) == 0x0000A0, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000B0, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsTargetCanBeAttacked, K2Node_SwitchEnum_CmpSuccess) == 0x0000B1, "Member 'RSBattlePlayer_C_IsTargetCanBeAttacked::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CancelUseItem
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CancelUseItem final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CancelUseItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CancelUseItem");
static_assert(sizeof(RSBattlePlayer_C_CancelUseItem) == 0x000001, "Wrong size on RSBattlePlayer_C_CancelUseItem");
static_assert(offsetof(RSBattlePlayer_C_CancelUseItem, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_CancelUseItem::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BehaviorTreeTaskExit_Attack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BehaviorTreeTaskExit_Attack final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ExitThinkType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BehaviorTreeTaskExit_Attack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BehaviorTreeTaskExit_Attack");
static_assert(sizeof(RSBattlePlayer_C_BehaviorTreeTaskExit_Attack) == 0x000002, "Wrong size on RSBattlePlayer_C_BehaviorTreeTaskExit_Attack");
static_assert(offsetof(RSBattlePlayer_C_BehaviorTreeTaskExit_Attack, ExitThinkType) == 0x000000, "Member 'RSBattlePlayer_C_BehaviorTreeTaskExit_Attack::ExitThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BehaviorTreeTaskExit_Attack, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_BehaviorTreeTaskExit_Attack::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentBattleThinkInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetCurrentBattleThinkInterface final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ThinkType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_GetCurrentBattleThinkCPP_ReturnValue;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentBattleThinkInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetCurrentBattleThinkInterface");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentBattleThinkInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_GetCurrentBattleThinkInterface");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentBattleThinkInterface, ThinkType) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentBattleThinkInterface::ThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentBattleThinkInterface, CallFunc_GetCurrentBattleThinkCPP_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_GetCurrentBattleThinkInterface::CallFunc_GetCurrentBattleThinkCPP_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponMaterialColor_PsychicEmission
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C72[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C73[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission");
static_assert(sizeof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission) == 0x000024, "Wrong size on RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponMaterialAlpha_PsychicEmission
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C74[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C75[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission");
static_assert(sizeof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission) == 0x000024, "Wrong size on RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponMaterialAlpha_PsychicEmission
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C76[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C77[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission");
static_assert(sizeof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission) == 0x000028, "Wrong size on RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, Alpha) == 0x000000, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::Alpha' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, bDummy) == 0x00000C, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponMaterialColor_PsychicEmission
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission final
{
public:
	float                                         R;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         B;                                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C78[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerMaterialInterface_C> K2Node_DynamicCast_AsBPI_Player_Material_Interface; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeaponMaterialColor_PsychicEmission_bDummy; // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C79[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission");
static_assert(sizeof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission) == 0x000040, "Wrong size on RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, R) == 0x000000, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::R' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, G) == 0x000004, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::G' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, B) == 0x000008, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::B' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, ClaimantName) == 0x00000C, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, bDummy) == 0x000014, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, K2Node_DynamicCast_AsBPI_Player_Material_Interface) == 0x000028, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::K2Node_DynamicCast_AsBPI_Player_Material_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, CallFunc_SetWeaponMaterialColor_PsychicEmission_bDummy) == 0x00003A, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::CallFunc_SetWeaponMaterialColor_PsychicEmission_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponEmissive
// 0x0080 (0x0080 - 0x0000)
struct RSBattlePlayer_C_SetWeaponEmissive final
{
public:
	float                                         Emissive;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C7A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SASCopyPlayerActor_C*               LCopyPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C7B[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C7C[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C7D[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCopyVisible_bVisible;                   // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C7E[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetWeaponEmissive) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetWeaponEmissive");
static_assert(sizeof(RSBattlePlayer_C_SetWeaponEmissive) == 0x000080, "Wrong size on RSBattlePlayer_C_SetWeaponEmissive");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Emissive) == 0x000000, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Emissive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_SetWeaponEmissive::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, LCopyPlayer) == 0x000008, "Member 'RSBattlePlayer_C_SetWeaponEmissive::LCopyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Array_Index_Variable_2) == 0x000024, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Num_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_GetWeaponList_WeaponList) == 0x000038, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Counter_Variable_2) == 0x000050, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Less_IntInt_ReturnValue_1) == 0x000054, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Add_IntInt_ReturnValue_2) == 0x000058, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, Temp_int_Loop_Num_Variable_2) == 0x000060, "Member 'RSBattlePlayer_C_SetWeaponEmissive::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Less_IntInt_ReturnValue_2) == 0x000064, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_IsCopyVisible_bVisible) == 0x000065, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_IsCopyVisible_bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_GetWeaponList_WeaponList_1) == 0x000068, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissive, CallFunc_Array_Length_ReturnValue_2) == 0x000078, "Member 'RSBattlePlayer_C_SetWeaponEmissive::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponEmissiveColor
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_SetWeaponEmissiveColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C7F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C80[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C81[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C82[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetWeaponEmissiveColor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetWeaponEmissiveColor");
static_assert(sizeof(RSBattlePlayer_C_SetWeaponEmissiveColor) == 0x000070, "Wrong size on RSBattlePlayer_C_SetWeaponEmissiveColor");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Num_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Array_Index_Variable_2) == 0x00001C, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Num_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_GetWeaponList_WeaponList) == 0x000030, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable_2) == 0x00004C, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_GetWeaponList_WeaponList_1) == 0x000050, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue_2) == 0x000060, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue_2) == 0x000064, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'RSBattlePlayer_C_SetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponEmissiveColor
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_ResetWeaponEmissiveColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C83[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C84[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C85[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C86[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_ResetWeaponEmissiveColor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ResetWeaponEmissiveColor");
static_assert(sizeof(RSBattlePlayer_C_ResetWeaponEmissiveColor) == 0x000070, "Wrong size on RSBattlePlayer_C_ResetWeaponEmissiveColor");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Num_Variable_1) == 0x00000C, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Array_Index_Variable_2) == 0x00001C, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Num_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_GetWeaponList_WeaponList) == 0x000030, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, Temp_int_Loop_Counter_Variable_2) == 0x00004C, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Less_IntInt_ReturnValue_2) == 0x000050, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_GetWeaponList_WeaponList_1) == 0x000058, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetWeaponEmissiveColor, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'RSBattlePlayer_C_ResetWeaponEmissiveColor::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckJumpCount
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckJumpCount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckJumpCount) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckJumpCount");
static_assert(sizeof(RSBattlePlayer_C_CheckJumpCount) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckJumpCount");
static_assert(offsetof(RSBattlePlayer_C_CheckJumpCount, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CheckJumpCount::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Telepo
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Telepo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Telepo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Telepo");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Telepo) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Telepo");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Telepo, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Telepo::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Telepo, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Telepo::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Stealth
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Stealth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Stealth) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Stealth");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Stealth) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Stealth");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Stealth, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Stealth::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Stealth, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Stealth::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_SeeThrough
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_SeeThrough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_SeeThrough) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_SeeThrough");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_SeeThrough) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_SeeThrough");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_SeeThrough, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_SeeThrough::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_SeeThrough, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_SeeThrough::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Psychic
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Psychic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Psychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Psychic");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Psychic) == 0x000008, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Psychic");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, Temp_byte_Variable) == 0x000002, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, Temp_byte_Variable_1) == 0x000003, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, CallFunc_GetPlayerID_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, K2Node_Select_Default) == 0x000006, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Psychic, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000007, "Member 'RSBattlePlayer_C_IsActiveSAS_Psychic::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Metal
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Metal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Metal) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Metal");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Metal) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Metal");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Metal, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Metal::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Metal, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Metal::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Fire
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Fire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Fire) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Fire");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Fire) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Fire");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Fire, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Fire::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Fire, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Fire::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Electric
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Electric final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Electric) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Electric");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Electric) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Electric");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Electric, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Electric::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Electric, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Electric::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Copy
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Copy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Copy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Copy");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Copy) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Copy");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Copy, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Copy::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Copy, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Copy::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Accelerator
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_Accelerator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_ForKind_IsActive;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_Accelerator) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_Accelerator");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_Accelerator) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_Accelerator");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Accelerator, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_Accelerator::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_Accelerator, CallFunc_IsActiveSAS_ForKind_IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_Accelerator::CallFunc_IsActiveSAS_ForKind_IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckRareArrangeItemBySAS
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_CheckRareArrangeItemBySAS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C87[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LProbability;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CheckRareArrangeItemBySAS) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckRareArrangeItemBySAS");
static_assert(sizeof(RSBattlePlayer_C_CheckRareArrangeItemBySAS) == 0x000008, "Wrong size on RSBattlePlayer_C_CheckRareArrangeItemBySAS");
static_assert(offsetof(RSBattlePlayer_C_CheckRareArrangeItemBySAS, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CheckRareArrangeItemBySAS::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckRareArrangeItemBySAS, LProbability) == 0x000004, "Member 'RSBattlePlayer_C_CheckRareArrangeItemBySAS::LProbability' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAIPlayer
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsAIPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAIPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAIPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsAIPlayer) == 0x000002, "Wrong size on RSBattlePlayer_C_IsAIPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsAIPlayer, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsAIPlayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIPlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsAIPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OpenBrainField
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_OpenBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnpc;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbResullt;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C88[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LBattleActorList;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C89[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8A[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8B[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ENpcInterface_C>  CallFunc_Em8000_GetPartner_self_CastInput;         // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Em8000_GetPartner_PartnerActor;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OpenBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OpenBrainField");
static_assert(sizeof(RSBattlePlayer_C_OpenBrainField) == 0x000078, "Wrong size on RSBattlePlayer_C_OpenBrainField");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OpenBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, LbEnpc) == 0x000001, "Member 'RSBattlePlayer_C_OpenBrainField::LbEnpc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, LbResullt) == 0x000002, "Member 'RSBattlePlayer_C_OpenBrainField::LbResullt' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, LBattleActorList) == 0x000008, "Member 'RSBattlePlayer_C_OpenBrainField::LBattleActorList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_PrivateGetMainPlayer_Player) == 0x000028, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000030, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, K2Node_DynamicCast_AsRSBattle_Player) == 0x000038, "Member 'RSBattlePlayer_C_OpenBrainField::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattlePlayer_C_OpenBrainField::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_GetBrainFieldManager_Manager) == 0x000048, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_Em8000_GetPartner_self_CastInput) == 0x000050, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_Em8000_GetPartner_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_Em8000_GetPartner_PartnerActor) == 0x000060, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_Em8000_GetPartner_PartnerActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_GetBrainFieldManager_Manager_1) == 0x000068, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_GetBrainFieldManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, CallFunc_GetPlayerID_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_OpenBrainField::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OpenBrainField, K2Node_SwitchEnum_CmpSuccess) == 0x000071, "Member 'RSBattlePlayer_C_OpenBrainField::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CloseBrainField
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattlePlayer_C_CloseBrainField final
{
public:
	bool                                          bCrash;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LActor;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LBrainCrashSubActor;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LBrainCrashActor;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LBattleActorList;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	EBrainFieldEndType                            LEndType;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbClose;                                           // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8D[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAbleOverwriteENPCBrainField_ReturnValue; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8E[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C8F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C90[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableENPCBrainField_bEnableGauge;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C91[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetBattleActorList_ReturnValue;           // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsForceBrainField_bInfinite;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C92[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_1;           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAbleTransitionBrainField_bOK;           // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C93[0x1];                                     // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CloseBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CloseBrainField");
static_assert(sizeof(RSBattlePlayer_C_CloseBrainField) == 0x0000B8, "Wrong size on RSBattlePlayer_C_CloseBrainField");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, bCrash) == 0x000000, "Member 'RSBattlePlayer_C_CloseBrainField::bCrash' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_CloseBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LActor) == 0x000008, "Member 'RSBattlePlayer_C_CloseBrainField::LActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LBrainCrashSubActor) == 0x000010, "Member 'RSBattlePlayer_C_CloseBrainField::LBrainCrashSubActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LBrainCrashActor) == 0x000018, "Member 'RSBattlePlayer_C_CloseBrainField::LBrainCrashActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LBattleActorList) == 0x000020, "Member 'RSBattlePlayer_C_CloseBrainField::LBattleActorList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LEndType) == 0x000030, "Member 'RSBattlePlayer_C_CloseBrainField::LEndType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, LbClose) == 0x000031, "Member 'RSBattlePlayer_C_CloseBrainField::LbClose' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, K2Node_DynamicCast_AsPlayer_Interface) == 0x000038, "Member 'RSBattlePlayer_C_CloseBrainField::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'RSBattlePlayer_C_CloseBrainField::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_IsAbleOverwriteENPCBrainField_ReturnValue) == 0x000049, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_IsAbleOverwriteENPCBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, Temp_bool_True_if_break_was_hit_Variable) == 0x000050, "Member 'RSBattlePlayer_C_CloseBrainField::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, Temp_int_Array_Index_Variable) == 0x000054, "Member 'RSBattlePlayer_C_CloseBrainField::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_Not_PreBool_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, Temp_int_Loop_Num_Variable) == 0x00005C, "Member 'RSBattlePlayer_C_CloseBrainField::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_GetBattleManager_BattleManager) == 0x000060, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_GetBrainFieldManager_Manager) == 0x000068, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_IsEnableENPCBrainField_bEnableGauge) == 0x000070, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_IsEnableENPCBrainField_bEnableGauge' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_GetBattleActorList_ReturnValue) == 0x000078, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_GetBattleActorList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_IsForceBrainField_bInfinite) == 0x000088, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_IsForceBrainField_bInfinite' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, K2Node_DynamicCast_AsPlayer_Interface_1) == 0x000090, "Member 'RSBattlePlayer_C_CloseBrainField::K2Node_DynamicCast_AsPlayer_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'RSBattlePlayer_C_CloseBrainField::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_GetPlayerID_ReturnValue) == 0x0000A1, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000A2, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_IsAbleTransitionBrainField_bOK) == 0x0000A3, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_IsAbleTransitionBrainField_bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, Temp_int_Loop_Counter_Variable) == 0x0000A4, "Member 'RSBattlePlayer_C_CloseBrainField::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, Temp_byte_Variable) == 0x0000A8, "Member 'RSBattlePlayer_C_CloseBrainField::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A9, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_Less_IntInt_ReturnValue) == 0x0000AA, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CloseBrainField, CallFunc_BooleanAND_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_CloseBrainField::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputOverwriteENPCBrainField
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_IsInputOverwriteENPCBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbInput;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C94[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C95[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTrgBrainField_ReturnValue;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsInputOverwriteENPCBrainField");
static_assert(sizeof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField) == 0x000028, "Wrong size on RSBattlePlayer_C_IsInputOverwriteENPCBrainField");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, LbInput) == 0x000001, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::LbInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, CallFunc_GetPlayer_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, CallFunc_IsPlayerStatus_Result) == 0x000010, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, K2Node_DynamicCast_AsRSBattle_Player) == 0x000018, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000021, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputOverwriteENPCBrainField, CallFunc_IsTrgBrainField_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_IsInputOverwriteENPCBrainField::CallFunc_IsTrgBrainField_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAbleOverwriteENPCBrainField
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_IsAbleOverwriteENPCBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbInput;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAbleOverwriteENPCBrainField");
static_assert(sizeof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField) == 0x000006, "Wrong size on RSBattlePlayer_C_IsAbleOverwriteENPCBrainField");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, LbInput) == 0x000001, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::LbInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, CallFunc_IsDead_bDead) == 0x000003, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, CallFunc_IsPlayerStatus_Result) == 0x000004, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleOverwriteENPCBrainField, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000005, "Member 'RSBattlePlayer_C_IsAbleOverwriteENPCBrainField::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPartyPlayerKind
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetPartyPlayerKind final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C96[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SetPartyPlayerKind) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetPartyPlayerKind");
static_assert(sizeof(RSBattlePlayer_C_SetPartyPlayerKind) == 0x000008, "Wrong size on RSBattlePlayer_C_SetPartyPlayerKind");
static_assert(offsetof(RSBattlePlayer_C_SetPartyPlayerKind, Kind) == 0x000000, "Member 'RSBattlePlayer_C_SetPartyPlayerKind::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPartyPlayerKind, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetPartyPlayerKind::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPartyPlayerKind, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetPartyPlayerKind::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPartyPlayerKind, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetPartyPlayerKind::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnableAction
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_OnAnimNotifyEnableAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputUseItem_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputResurrect_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputJump_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputDodge_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAnimNotifyEnableAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnAnimNotifyEnableAction");
static_assert(sizeof(RSBattlePlayer_C_OnAnimNotifyEnableAction) == 0x000005, "Wrong size on RSBattlePlayer_C_OnAnimNotifyEnableAction");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAction, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAction, CallFunc_IsPrecedeInputUseItem_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAction::CallFunc_IsPrecedeInputUseItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAction, CallFunc_IsPrecedeInputResurrect_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAction::CallFunc_IsPrecedeInputResurrect_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAction, CallFunc_IsPrecedeInputJump_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAction::CallFunc_IsPrecedeInputJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAction, CallFunc_IsPrecedeInputDodge_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAction::CallFunc_IsPrecedeInputDodge_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndControlPsychicObject
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EndControlPsychicObject final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_EndControlPsychicObject) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EndControlPsychicObject");
static_assert(sizeof(RSBattlePlayer_C_EndControlPsychicObject) == 0x000008, "Wrong size on RSBattlePlayer_C_EndControlPsychicObject");
static_assert(offsetof(RSBattlePlayer_C_EndControlPsychicObject, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_EndControlPsychicObject::TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginControlPsychicObject
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_BeginControlPsychicObject final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BeginControlPsychicObject) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BeginControlPsychicObject");
static_assert(sizeof(RSBattlePlayer_C_BeginControlPsychicObject) == 0x000008, "Wrong size on RSBattlePlayer_C_BeginControlPsychicObject");
static_assert(offsetof(RSBattlePlayer_C_BeginControlPsychicObject, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_BeginControlPsychicObject::TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCamera
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_SetPlayerCamera final
{
public:
	class ACameraActor*                           PCameraActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPitch;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C97[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C98[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerCamera) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetPlayerCamera");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerCamera) == 0x000020, "Wrong size on RSBattlePlayer_C_SetPlayerCamera");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, PCameraActor) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerCamera::PCameraActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, bPitch) == 0x000008, "Member 'RSBattlePlayer_C_SetPlayerCamera::bPitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, BlendTime) == 0x00000C, "Member 'RSBattlePlayer_C_SetPlayerCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, BlendFunc) == 0x000010, "Member 'RSBattlePlayer_C_SetPlayerCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, BlendExp) == 0x000014, "Member 'RSBattlePlayer_C_SetPlayerCamera::BlendExp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerCamera, ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_SetPlayerCamera::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckFriendCoverDamage
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_CheckFriendCoverDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckFriendCoverDamage) == 0x000004, "Wrong alignment on RSBattlePlayer_C_CheckFriendCoverDamage");
static_assert(sizeof(RSBattlePlayer_C_CheckFriendCoverDamage) == 0x000008, "Wrong size on RSBattlePlayer_C_CheckFriendCoverDamage");
static_assert(offsetof(RSBattlePlayer_C_CheckFriendCoverDamage, DamageValue) == 0x000000, "Member 'RSBattlePlayer_C_CheckFriendCoverDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFriendCoverDamage, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_CheckFriendCoverDamage::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeforeTakeDamage
// 0x0378 (0x0378 - 0x0000)
struct RSBattlePlayer_C_BeforeTakeDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C99[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           HitResult;                                         // 0x0008(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	float                                         ReturnValue;                                       // 0x01C8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbBrainCrash;                                      // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9A[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LDamageInt;                                        // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHardenSubTimeRate;                                // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHardenCutDamageRate;                              // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHardenCutDamageDiff;                              // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPrevHardenCutDamage;                              // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDamage;                                           // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9B[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9C[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNexusDriveHardenSubTimeRate_Rate;      // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9D[0x2];                                     // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9E[0x6];                                     // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1; // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHarden_return;                          // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9F[0x5];                                     // 0x022B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA0[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA1[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x02D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x02D9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA2[0x2];                                     // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x02E6(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_3;                              // 0x02E7(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBattleSimulatorEnemyDamageAddType            Temp_byte_Variable_4;                              // 0x02F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA3[0x1];                                     // 0x02F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHardenParameter_RateMin;               // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHardenParameter_RateMax;               // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHardenParameter_SubTimeMin;            // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHardenParameter_SubTimeMax;            // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA4[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA5[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0328(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SubHardenTime_bDummy;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA6[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EBattleSimulatorEnemyDamageAddType            Temp_byte_Variable_5;                              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleSimulatorEnemyDamageAddType            K2Node_Select_Default;                             // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA7[0x1];                                     // 0x0353(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddScore_EnemyDamage_ReturnValue;         // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA8[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHardenDamageCutRate_damage_cut_rate;   // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_BeforeTakeDamage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_BeforeTakeDamage");
static_assert(sizeof(RSBattlePlayer_C_BeforeTakeDamage) == 0x000378, "Wrong size on RSBattlePlayer_C_BeforeTakeDamage");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, DamageValue) == 0x000000, "Member 'RSBattlePlayer_C_BeforeTakeDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, HitResult) == 0x000008, "Member 'RSBattlePlayer_C_BeforeTakeDamage::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, ReturnValue) == 0x0001C8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LbBrainCrash) == 0x0001CC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LbBrainCrash' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LDamageInt) == 0x0001D0, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LDamageInt' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LHardenSubTimeRate) == 0x0001D4, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LHardenSubTimeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LHardenCutDamageRate) == 0x0001D8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LHardenCutDamageRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LHardenCutDamageDiff) == 0x0001DC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LHardenCutDamageDiff' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LPrevHardenCutDamage) == 0x0001E0, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LPrevHardenCutDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, LDamage) == 0x0001E4, "Member 'RSBattlePlayer_C_BeforeTakeDamage::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001E8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHPPercent_ReturnValue) == 0x0001EC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsBossEnemy_bBoss) == 0x0001F0, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetNexusDriveHardenSubTimeRate_Rate) == 0x0001F4, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetNexusDriveHardenSubTimeRate_Rate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHP_HP) == 0x0001F8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001FC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_FTrunc_ReturnValue) == 0x000200, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000204, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x000208, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000209, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_FTrunc_ReturnValue_1) == 0x00020C, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000210, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsControlAI_bAI) == 0x000218, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000219, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1) == 0x000220, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_bool_Variable) == 0x000228, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000229, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsHarden_return) == 0x00022A, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsHarden_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Conv_FloatToString_ReturnValue) == 0x000230, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetPlayerID_ReturnValue) == 0x000240, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000248, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000258, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetDebuggingManager_Manager) == 0x000268, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue) == 0x000270, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_IsValid_ReturnValue) == 0x000280, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000288, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000298, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0002A8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0002B8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0002C8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable) == 0x0002D8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable_1) == 0x0002D9, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Array_Find_ReturnValue) == 0x0002DC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Array_Find_ReturnValue_1) == 0x0002E0, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0002E4, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0002E5, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable_2) == 0x0002E6, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable_3) == 0x0002E7, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Array_Find_ReturnValue_2) == 0x0002E8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Array_Find_ReturnValue_3) == 0x0002EC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0002F0, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0002F1, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable_4) == 0x0002F2, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHardenParameter_RateMin) == 0x0002F4, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHardenParameter_RateMin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHardenParameter_RateMax) == 0x0002F8, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHardenParameter_RateMax' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHardenParameter_SubTimeMin) == 0x0002FC, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHardenParameter_SubTimeMin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHardenParameter_SubTimeMax) == 0x000300, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHardenParameter_SubTimeMax' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000304, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, K2Node_MathExpression_ReturnValue) == 0x000308, "Member 'RSBattlePlayer_C_BeforeTakeDamage::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00030C, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, K2Node_MathExpression_ReturnValue_1) == 0x000310, "Member 'RSBattlePlayer_C_BeforeTakeDamage::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000318, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000328, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_SubHardenTime_bDummy) == 0x000338, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_SubHardenTime_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000340, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, Temp_byte_Variable_5) == 0x000350, "Member 'RSBattlePlayer_C_BeforeTakeDamage::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, K2Node_Select_Default) == 0x000351, "Member 'RSBattlePlayer_C_BeforeTakeDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000352, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_AddScore_EnemyDamage_ReturnValue) == 0x000354, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_AddScore_EnemyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetMaxHP_MaxHP) == 0x000358, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00035C, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000360, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000364, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000368, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x00036C, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_GetHardenDamageCutRate_damage_cut_rate) == 0x000370, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_GetHardenDamageCutRate_damage_cut_rate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeforeTakeDamage, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000374, "Member 'RSBattlePlayer_C_BeforeTakeDamage::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentSASGaugeRate
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetCurrentSASGaugeRate final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SASGaugeRate;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentGaugeRate_SASGaugeRate;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentSASGaugeRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCurrentSASGaugeRate");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentSASGaugeRate) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetCurrentSASGaugeRate");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentSASGaugeRate, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentSASGaugeRate::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentSASGaugeRate, SASGaugeRate) == 0x000004, "Member 'RSBattlePlayer_C_GetCurrentSASGaugeRate::SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentSASGaugeRate, CallFunc_GetCurrentGaugeRate_SASGaugeRate) == 0x000008, "Member 'RSBattlePlayer_C_GetCurrentSASGaugeRate::CallFunc_GetCurrentGaugeRate_SASGaugeRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASActiveSeconds
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetSASActiveSeconds final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CAA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingSec;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASActiveSeconds) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSASActiveSeconds");
static_assert(sizeof(RSBattlePlayer_C_GetSASActiveSeconds) == 0x000008, "Wrong size on RSBattlePlayer_C_GetSASActiveSeconds");
static_assert(offsetof(RSBattlePlayer_C_GetSASActiveSeconds, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_GetSASActiveSeconds::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASActiveSeconds, RemainingSec) == 0x000004, "Member 'RSBattlePlayer_C_GetSASActiveSeconds::RemainingSec' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSAS_MaxActiveSeconds
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetSAS_MaxActiveSeconds final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CAB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationSeconds;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSAS_MaxActiveSeconds) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSAS_MaxActiveSeconds");
static_assert(sizeof(RSBattlePlayer_C_GetSAS_MaxActiveSeconds) == 0x000008, "Wrong size on RSBattlePlayer_C_GetSAS_MaxActiveSeconds");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_MaxActiveSeconds, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_GetSAS_MaxActiveSeconds::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSAS_MaxActiveSeconds, ActivationSeconds) == 0x000004, "Member 'RSBattlePlayer_C_GetSAS_MaxActiveSeconds::ActivationSeconds' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventEndDown
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetEventEndDown final
{
public:
	bool                                          bFront;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDownType                               Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDownType                               Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CAC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerDownType                               K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventEndDown) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEventEndDown");
static_assert(sizeof(RSBattlePlayer_C_SetEventEndDown) == 0x000010, "Wrong size on RSBattlePlayer_C_SetEventEndDown");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, bFront) == 0x000000, "Member 'RSBattlePlayer_C_SetEventEndDown::bFront' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEventEndDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, Temp_bool_Variable) == 0x000002, "Member 'RSBattlePlayer_C_SetEventEndDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, Temp_byte_Variable) == 0x000003, "Member 'RSBattlePlayer_C_SetEventEndDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, Temp_byte_Variable_1) == 0x000004, "Member 'RSBattlePlayer_C_SetEventEndDown::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetEventEndDown::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, K2Node_Select_Default) == 0x00000C, "Member 'RSBattlePlayer_C_SetEventEndDown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventEndDown, CallFunc_IsPlayerStatus_Result) == 0x00000D, "Member 'RSBattlePlayer_C_SetEventEndDown::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASHologramAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableSASHologramAttack final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSASHologramAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSASHologramAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSASHologramAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableSASHologramAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASHologramAttack, Timing) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSASHologramAttack::Timing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASHologramAttack, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSASHologramAttack::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffectHologram
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_IsEnableSASEffectHologram final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	E_SASKind                                     CallFunc_GetSASKindFromPlayerID_SAS;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSASEffectHologram) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsEnableSASEffectHologram");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSASEffectHologram) == 0x000014, "Wrong size on RSBattlePlayer_C_IsEnableSASEffectHologram");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, PlayerId) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::PlayerId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_GetSASKindFromPlayerID_SAS) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_GetSASKindFromPlayerID_SAS' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_IsEnableSASEffect_bEnable) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectHologram, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableSASEffectHologram::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionStateInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetCurrentActionStateInterface final
{
public:
	EPlayerActionKind                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentActionStateInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetCurrentActionStateInterface");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentActionStateInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_GetCurrentActionStateInterface");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionStateInterface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentActionStateInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionStateInterface, CallFunc_GetCurrentActionState_Kind) == 0x000001, "Member 'RSBattlePlayer_C_GetCurrentActionStateInterface::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ClearBattleParticle
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ClearBattleParticle final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceClear;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LPrevSpawn;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ClearBattleParticle) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ClearBattleParticle");
static_assert(sizeof(RSBattlePlayer_C_ClearBattleParticle) == 0x000010, "Wrong size on RSBattlePlayer_C_ClearBattleParticle");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_ClearBattleParticle::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, bForceClear) == 0x000008, "Member 'RSBattlePlayer_C_ClearBattleParticle::bForceClear' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_ClearBattleParticle::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, LPrevSpawn) == 0x00000A, "Member 'RSBattlePlayer_C_ClearBattleParticle::LPrevSpawn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000B, "Member 'RSBattlePlayer_C_ClearBattleParticle::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ClearBattleParticle::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_ClearBattleParticle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ClearBattleParticle, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x00000E, "Member 'RSBattlePlayer_C_ClearBattleParticle::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SpawnBattleParticle
// 0x0088 (0x0088 - 0x0000)
struct RSBattlePlayer_C_SpawnBattleParticle final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CAD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPlayerBattleParticleData             LData;                                             // 0x0010(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result_1;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI_1;                        // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CAE[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CAF[0x1];                                     // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_2;       // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SpawnBattleParticle) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SpawnBattleParticle");
static_assert(sizeof(RSBattlePlayer_C_SpawnBattleParticle) == 0x000088, "Wrong size on RSBattlePlayer_C_SpawnBattleParticle");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_SpawnBattleParticle::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SpawnBattleParticle::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, LData) == 0x000010, "Member 'RSBattlePlayer_C_SpawnBattleParticle::LData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsPlayerStatus_Result) == 0x000058, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsPlayerStatus_Result_1) == 0x00005A, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsPlayerStatus_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_1) == 0x00005B, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_2) == 0x00005C, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_3) == 0x00005D, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsControlAI_bAI) == 0x00005E, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsControlAI_bAI_1) == 0x00005F, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsControlAI_bAI_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000065, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_Array_AddUnique_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_4) == 0x00006C, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_5) == 0x00006D, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_IsValid_ReturnValue_6) == 0x00006E, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000078, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnBattleParticle, CallFunc_SpawnEmitterAttached_ReturnValue_2) == 0x000080, "Member 'RSBattlePlayer_C_SpawnBattleParticle::CallFunc_SpawnEmitterAttached_ReturnValue_2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleParticleType
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_SetBattleParticleType final
{
public:
	EPlayerBattleParticleType                     Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerBattleParticleType                     NewType;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBattleParticleType                     PrevType;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue_1;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue_2;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnBattleParticle_ReturnValue;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnBattleParticle_ReturnValue_1;        // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClearBattleParticle_ReturnValue_3;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetBattleParticleType) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetBattleParticleType");
static_assert(sizeof(RSBattlePlayer_C_SetBattleParticleType) == 0x000014, "Wrong size on RSBattlePlayer_C_SetBattleParticleType");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, Type) == 0x000000, "Member 'RSBattlePlayer_C_SetBattleParticleType::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetBattleParticleType::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, NewType) == 0x000002, "Member 'RSBattlePlayer_C_SetBattleParticleType::NewType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, PrevType) == 0x000003, "Member 'RSBattlePlayer_C_SetBattleParticleType::PrevType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'RSBattlePlayer_C_SetBattleParticleType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, K2Node_SwitchEnum_CmpSuccess_1) == 0x000009, "Member 'RSBattlePlayer_C_SetBattleParticleType::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_ClearBattleParticle_ReturnValue) == 0x00000B, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_ClearBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_ClearBattleParticle_ReturnValue_1) == 0x00000C, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_ClearBattleParticle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_ClearBattleParticle_ReturnValue_2) == 0x00000D, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_ClearBattleParticle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_SpawnBattleParticle_ReturnValue) == 0x00000E, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_SpawnBattleParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_SpawnBattleParticle_ReturnValue_1) == 0x00000F, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_SpawnBattleParticle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetBattleParticleType, CallFunc_ClearBattleParticle_ReturnValue_3) == 0x000011, "Member 'RSBattlePlayer_C_SetBattleParticleType::CallFunc_ClearBattleParticle_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnablePsychic
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnAnimNotifyEnablePsychic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputUseItem_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAnimNotifyEnablePsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnAnimNotifyEnablePsychic");
static_assert(sizeof(RSBattlePlayer_C_OnAnimNotifyEnablePsychic) == 0x000002, "Wrong size on RSBattlePlayer_C_OnAnimNotifyEnablePsychic");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnablePsychic, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnAnimNotifyEnablePsychic::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnablePsychic, CallFunc_IsPrecedeInputUseItem_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnAnimNotifyEnablePsychic::CallFunc_IsPrecedeInputUseItem_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnableAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnAnimNotifyEnableAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrecedeInputUseItem_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnAnimNotifyEnableAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnAnimNotifyEnableAttack");
static_assert(sizeof(RSBattlePlayer_C_OnAnimNotifyEnableAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_OnAnimNotifyEnableAttack");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAttack, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAttack::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnAnimNotifyEnableAttack, CallFunc_IsPrecedeInputUseItem_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnAnimNotifyEnableAttack::CallFunc_IsPrecedeInputUseItem_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMenuParameter
// 0x0278 (0x0278 - 0x0000)
struct RSBattlePlayer_C_UpdateMenuParameter final
{
public:
	struct FPlayerInfo                            CurrentParameter;                                  // 0x0000(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FPlayerInfo                            ReturnValue;                                       // 0x00D0(0x00D0)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FPlayerInfo                            LParam;                                            // 0x01A0(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	float                                         CallFunc_GetPsychicGauge_Value;                    // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateMenuParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_UpdateMenuParameter");
static_assert(sizeof(RSBattlePlayer_C_UpdateMenuParameter) == 0x000278, "Wrong size on RSBattlePlayer_C_UpdateMenuParameter");
static_assert(offsetof(RSBattlePlayer_C_UpdateMenuParameter, CurrentParameter) == 0x000000, "Member 'RSBattlePlayer_C_UpdateMenuParameter::CurrentParameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMenuParameter, ReturnValue) == 0x0000D0, "Member 'RSBattlePlayer_C_UpdateMenuParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMenuParameter, LParam) == 0x0001A0, "Member 'RSBattlePlayer_C_UpdateMenuParameter::LParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMenuParameter, CallFunc_GetPsychicGauge_Value) == 0x000270, "Member 'RSBattlePlayer_C_UpdateMenuParameter::CallFunc_GetPsychicGauge_Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateMenuParameter, CallFunc_IsControlAI_bAI) == 0x000274, "Member 'RSBattlePlayer_C_UpdateMenuParameter::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCheckActionIcon
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_IsEnableCheckActionIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyEnableAction_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_bEnable;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInAerial_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableCheckActionIcon) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableCheckActionIcon");
static_assert(sizeof(RSBattlePlayer_C_IsEnableCheckActionIcon) == 0x000007, "Wrong size on RSBattlePlayer_C_IsEnableCheckActionIcon");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, LbEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::LbEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, CallFunc_IsDisableAction_bEnable) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, CallFunc_IsNotifyEnableAction_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::CallFunc_IsNotifyEnableAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, CallFunc_IsEnableActionCommon_bEnable) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::CallFunc_IsEnableActionCommon_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, CallFunc_IsPlayerInAerial_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::CallFunc_IsPlayerInAerial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableCheckActionIcon, CallFunc_IsControlAI_bAI) == 0x000006, "Member 'RSBattlePlayer_C_IsEnableCheckActionIcon::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableBackStepAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableBackStepAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableBackStepAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableBackStepAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnableBackStepAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableBackStepAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnableBackStepAttack, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableBackStepAttack::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASCoverDamageFromPlayerID
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID final
{
public:
	EPlayerID                                     CoverPlayerID;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID, CoverPlayerID) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID::CoverPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveStickBack_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetMoveStickBack_CallFromCPP final
{
public:
	bool                                          bBack;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMoveStickBack_bDummy;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetMoveStickBack_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetMoveStickBack_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetMoveStickBack_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_SetMoveStickBack_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetMoveStickBack_CallFromCPP, bBack) == 0x000000, "Member 'RSBattlePlayer_C_SetMoveStickBack_CallFromCPP::bBack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveStickBack_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetMoveStickBack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveStickBack_CallFromCPP, CallFunc_SetMoveStickBack_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetMoveStickBack_CallFromCPP::CallFunc_SetMoveStickBack_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveMode_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetMoveMode_CallFromCPP final
{
public:
	EPlayerAIMoveModeCPP                          MoveModeCPP;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIMoveMode                             CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetMoveMode_Dummy;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetMoveMode_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetMoveMode_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetMoveMode_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_SetMoveMode_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode_CallFromCPP, MoveModeCPP) == 0x000000, "Member 'RSBattlePlayer_C_SetMoveMode_CallFromCPP::MoveModeCPP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetMoveMode_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum) == 0x000002, "Member 'RSBattlePlayer_C_SetMoveMode_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMoveMode_CallFromCPP, CallFunc_SetMoveMode_Dummy) == 0x000003, "Member 'RSBattlePlayer_C_SetMoveMode_CallFromCPP::CallFunc_SetMoveMode_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventWait_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEventWait_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventWait_bDummy;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventWait_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEventWait_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetEventWait_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEventWait_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetEventWait_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SetEventWait_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventWait_CallFromCPP, CallFunc_SetEventWait_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEventWait_CallFromCPP::CallFunc_SetEventWait_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableInputStick_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetEnableInputStick_CallFromCPP final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnableInputStick_Dummy;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnableInputStick_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnableInputStick_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetEnableInputStick_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_SetEnableInputStick_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick_CallFromCPP, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEnableInputStick_CallFromCPP::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEnableInputStick_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnableInputStick_CallFromCPP, CallFunc_SetEnableInputStick_Dummy) == 0x000002, "Member 'RSBattlePlayer_C_SetEnableInputStick_CallFromCPP::CallFunc_SetEnableInputStick_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetAIMoveStick_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetAIMoveStick_CallFromCPP final
{
public:
	bool                                          bMoveStick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAIMoveStick_bDummy;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetAIMoveStick_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetAIMoveStick_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetAIMoveStick_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_SetAIMoveStick_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetAIMoveStick_CallFromCPP, bMoveStick) == 0x000000, "Member 'RSBattlePlayer_C_SetAIMoveStick_CallFromCPP::bMoveStick' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAIMoveStick_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetAIMoveStick_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetAIMoveStick_CallFromCPP, CallFunc_SetAIMoveStick_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SetAIMoveStick_CallFromCPP::CallFunc_SetAIMoveStick_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SearchAIPsychicObject_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchAIPsychicObject_bFiound;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP, CallFunc_SearchAIPsychicObject_bFiound) == 0x000001, "Member 'RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP::CallFunc_SearchAIPsychicObject_bFiound' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestartBattleAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_RestartBattleAI_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestartBattleAI_bDummy;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestartBattleAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RestartBattleAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_RestartBattleAI_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_RestartBattleAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_RestartBattleAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_RestartBattleAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestartBattleAI_CallFromCPP, CallFunc_RestartBattleAI_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_RestartBattleAI_CallFromCPP::CallFunc_RestartBattleAI_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetBattleThink_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ResetBattleThink_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetBattleThink_Dummy;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetBattleThink_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_ResetBattleThink_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_ResetBattleThink_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_ResetBattleThink_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetBattleThink_CallFromCPP, CallFunc_ResetBattleThink_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_ResetBattleThink_CallFromCPP::CallFunc_ResetBattleThink_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackInputKindAI_CallFromCPP
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTypeCPP                   Think;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Kind;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            CallFunc_OverwriteAttackInputKindAI_Kind;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP) == 0x000005, "Wrong size on RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP, Think) == 0x000000, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP::Think' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP, Kind) == 0x000001, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000003, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP, CallFunc_OverwriteAttackInputKindAI_Kind) == 0x000004, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP::CallFunc_OverwriteAttackInputKindAI_Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleThink_CallFromCPP
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTypeCPP                   Next;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   Prev;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnChangeBattleThink_bDummy;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP) == 0x000006, "Wrong size on RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, Next) == 0x000000, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::Next' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, Prev) == 0x000001, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::Prev' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000003, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1) == 0x000004, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP, CallFunc_OnChangeBattleThink_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP::CallFunc_OnChangeBattleThink_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NotifyResetBehaviorTree_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotifyResetBehaviorTree_Dummy;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP, CallFunc_NotifyResetBehaviorTree_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP::CallFunc_NotifyResetBehaviorTree_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NextBattleThink_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_NextBattleThink_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NextBattleThink_Dummy;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NextBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_NextBattleThink_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_NextBattleThink_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_NextBattleThink_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_NextBattleThink_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_NextBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NextBattleThink_CallFromCPP, CallFunc_NextBattleThink_Dummy) == 0x000001, "Member 'RSBattlePlayer_C_NextBattleThink_CallFromCPP::CallFunc_NextBattleThink_Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUseItemThink_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsUseItemThink_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseItemThink_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUseItemThink_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUseItemThink_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsUseItemThink_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsUseItemThink_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsUseItemThink_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsUseItemThink_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseItemThink_CallFromCPP, CallFunc_IsUseItemThink_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsUseItemThink_CallFromCPP::CallFunc_IsUseItemThink_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueConditionTransition_CallFromCPP
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP final
{
public:
	int32                                         UniqueNo;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionTransition_bResult;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP) == 0x000008, "Wrong size on RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP, UniqueNo) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP::UniqueNo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP, CallFunc_IsUniqueConditionTransition_bResult) == 0x000005, "Member 'RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP::CallFunc_IsUniqueConditionTransition_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSelfRecovery_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsSelfRecovery_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelfRecovery_bResult;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSelfRecovery_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSelfRecovery_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsSelfRecovery_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsSelfRecovery_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsSelfRecovery_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsSelfRecovery_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSelfRecovery_CallFromCPP, CallFunc_IsSelfRecovery_bResult) == 0x000001, "Member 'RSBattlePlayer_C_IsSelfRecovery_CallFromCPP::CallFunc_IsSelfRecovery_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicAble_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsPsychicAble_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicAble_bEnable;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPsychicAble_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPsychicAble_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsPsychicAble_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsPsychicAble_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicAble_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsPsychicAble_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPsychicAble_CallFromCPP, CallFunc_IsPsychicAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsPsychicAble_CallFromCPP::CallFunc_IsPsychicAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatusAI_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP final
{
public:
	EPlayerCommonStatus                           Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP, Status) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP::Status' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP, CallFunc_IsPlayerStatusAI_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_UseItem_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputAI_UseItem_bON;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP, CallFunc_IsInputAI_UseItem_bON) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP::CallFunc_IsInputAI_UseItem_bON' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Psychic_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputAI_Psychic_bON;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP, CallFunc_IsInputAI_Psychic_bON) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP::CallFunc_IsInputAI_Psychic_bON' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThinkParam_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP final
{
public:
	EPlayerAIBattleThinkParamCPP                  Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkParam                     CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattleThinkParam_bResult;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP, Param) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum) == 0x000002, "Member 'RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP, CallFunc_IsBattleThinkParam_bResult) == 0x000003, "Member 'RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP::CallFunc_IsBattleThinkParam_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThink_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsBattleThink_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTypeCPP                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattleThink_Result;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleThink_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsBattleThink_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_IsBattleThink_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink_CallFromCPP, Type) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleThink_CallFromCPP::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000002, "Member 'RSBattlePlayer_C_IsBattleThink_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink_CallFromCPP, CallFunc_IsBattleThink_Result) == 0x000003, "Member 'RSBattlePlayer_C_IsBattleThink_CallFromCPP::CallFunc_IsBattleThink_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleActionStartAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleActionStartAI_bStart;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP, CallFunc_IsBattleActionStartAI_bStart) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP::CallFunc_IsBattleActionStartAI_bStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAIMoveMode_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsAIMoveMode_CallFromCPP final
{
public:
	EPlayerAIMoveModeCPP                          MoveModeCPP;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIMoveMode                             CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAIMoveMode_Result;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAIMoveMode_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_IsAIMoveMode_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP, MoveModeCPP) == 0x000000, "Member 'RSBattlePlayer_C_IsAIMoveMode_CallFromCPP::MoveModeCPP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsAIMoveMode_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum) == 0x000002, "Member 'RSBattlePlayer_C_IsAIMoveMode_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode_CallFromCPP, CallFunc_IsAIMoveMode_Result) == 0x000003, "Member 'RSBattlePlayer_C_IsAIMoveMode_CallFromCPP::CallFunc_IsAIMoveMode_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatusAI_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsActionStatusAI_CallFromCPP final
{
public:
	EPlayerActionStatus                           Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActionStatusAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActionStatusAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsActionStatusAI_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_IsActionStatusAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI_CallFromCPP, Status) == 0x000000, "Member 'RSBattlePlayer_C_IsActionStatusAI_CallFromCPP::Status' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsActionStatusAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI_CallFromCPP, CallFunc_IsActionStatusAI_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsActionStatusAI_CallFromCPP::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEventMovePosActor_CallFromCPP
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP final
{
public:
	class AActor*                                 OutActor;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRadius;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CB0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEventMovePosActor_actor;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMovePosActor_radius;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP) == 0x000020, "Wrong size on RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP, OutActor) == 0x000000, "Member 'RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP::OutActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP, OutRadius) == 0x000008, "Member 'RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP::OutRadius' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP, CallFunc_GetEventMovePosActor_actor) == 0x000010, "Member 'RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP::CallFunc_GetEventMovePosActor_actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP, CallFunc_GetEventMovePosActor_radius) == 0x000018, "Member 'RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP::CallFunc_GetEventMovePosActor_radius' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBattleTargetActor_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP) == 0x000010, "Wrong size on RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP, CallFunc_GetBattleTargetActor_TargetActor) == 0x000008, "Member 'RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndEventWait_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EndEventWait_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndEventWait_bDummy;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndEventWait_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndEventWait_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_EndEventWait_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_EndEventWait_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_EndEventWait_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_EndEventWait_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EndEventWait_CallFromCPP, CallFunc_EndEventWait_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_EndEventWait_CallFromCPP::CallFunc_EndEventWait_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckEventMovePos_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CheckEventMovePos_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventMovePos_Goal;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckEventMovePos_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckEventMovePos_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_CheckEventMovePos_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_CheckEventMovePos_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_CheckEventMovePos_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CheckEventMovePos_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckEventMovePos_CallFromCPP, CallFunc_CheckEventMovePos_Goal) == 0x000001, "Member 'RSBattlePlayer_C_CheckEventMovePos_CallFromCPP::CallFunc_CheckEventMovePos_Goal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAIPsychicObject_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAIPsychicObject_bOK;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP, bCapture) == 0x000000, "Member 'RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP::bCapture' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP, bAttack) == 0x000001, "Member 'RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP::bAttack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP, CallFunc_CheckAIPsychicObject_bOK) == 0x000003, "Member 'RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP::CallFunc_CheckAIPsychicObject_bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AimStartAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_AimStartAI_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AimStartAI_bDummy;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AimStartAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AimStartAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_AimStartAI_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_AimStartAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_AimStartAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_AimStartAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AimStartAI_CallFromCPP, CallFunc_AimStartAI_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_AimStartAI_CallFromCPP::CallFunc_AimStartAI_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AimEndAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_AimEndAI_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AimEndAI_bDummy;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AimEndAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AimEndAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_AimEndAI_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_AimEndAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_AimEndAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_AimEndAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AimEndAI_CallFromCPP, CallFunc_AimEndAI_bDummy) == 0x000001, "Member 'RSBattlePlayer_C_AimEndAI_CallFromCPP::CallFunc_AimEndAI_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEventMove_CallFromCPP
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_SetEventMove_CallFromCPP final
{
public:
	TArray<struct FVector>                        Pos_list_in;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<float>                                 Radius_list_in;                                    // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Walk;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterWait;                                        // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventMove_dummy;                       // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEventMove_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetEventMove_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetEventMove_CallFromCPP) == 0x000028, "Wrong size on RSBattlePlayer_C_SetEventMove_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, Pos_list_in) == 0x000000, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::Pos_list_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, Radius_list_in) == 0x000010, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::Radius_list_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, Walk) == 0x000020, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::Walk' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, bAfterWait) == 0x000021, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::bAfterWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEventMove_CallFromCPP, CallFunc_SetEventMove_dummy) == 0x000023, "Member 'RSBattlePlayer_C_SetEventMove_CallFromCPP::CallFunc_SetEventMove_dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_UseItem_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_InputAI_UseItem_CallFromCPP final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_UseItem_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_UseItem_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_UseItem_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_InputAI_UseItem_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_UseItem_CallFromCPP, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_UseItem_CallFromCPP::bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_UseItem_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InputAI_UseItem_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Psychic_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_InputAI_Psychic_CallFromCPP final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Psychic_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Psychic_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Psychic_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_InputAI_Psychic_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Psychic_CallFromCPP, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Psychic_CallFromCPP::bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Psychic_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InputAI_Psychic_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_LeftStick_CallFromCPP
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP) == 0x00000C, "Wrong size on RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP, X) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP::X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP, Y) == 0x000004, "Member 'RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP::Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Jump_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_InputAI_Jump_CallFromCPP final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Jump_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Jump_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Jump_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_InputAI_Jump_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Jump_CallFromCPP, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Jump_CallFromCPP::bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Jump_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InputAI_Jump_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Dodge_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_InputAI_Dodge_CallFromCPP final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Dodge_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Dodge_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Dodge_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_InputAI_Dodge_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Dodge_CallFromCPP, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Dodge_CallFromCPP::bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Dodge_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InputAI_Dodge_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Attack_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_InputAI_Attack_CallFromCPP final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_InputAI_Attack_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_InputAI_Attack_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_InputAI_Attack_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_InputAI_Attack_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Attack_CallFromCPP, bPressed) == 0x000000, "Member 'RSBattlePlayer_C_InputAI_Attack_CallFromCPP::bPressed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_InputAI_Attack_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_InputAI_Attack_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerInputRestriction_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP final
{
public:
	EPlayerInputRestrictionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRistriction;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP, Type) == 0x000000, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP, bRistriction) == 0x000001, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP::bRistriction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP, CallFunc_SetPlayerInputRestriction_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestoreMaxSpeed_CallFromCPP
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreMaxSpeed_Result;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP) == 0x00000C, "Wrong size on RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP, CallFunc_RestoreMaxSpeed_Result) == 0x000009, "Member 'RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP::CallFunc_RestoreMaxSpeed_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyPlayer_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCounter_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCounter_return;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP, CallFunc_IsEnableActionCounter_return) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP::CallFunc_IsEnableActionCounter_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAutoCounter_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CheckAutoCounter_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAutoCounter_return;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAutoCounter_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckAutoCounter_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_CheckAutoCounter_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_CheckAutoCounter_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_CheckAutoCounter_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CheckAutoCounter_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckAutoCounter_CallFromCPP, CallFunc_CheckAutoCounter_return) == 0x000001, "Member 'RSBattlePlayer_C_CheckAutoCounter_CallFromCPP::CallFunc_CheckAutoCounter_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CanBattleAction_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_CanBattleAction_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanBattleAction_CanAction;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CanBattleAction_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CanBattleAction_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_CanBattleAction_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_CanBattleAction_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction_CallFromCPP, ThinkType) == 0x000000, "Member 'RSBattlePlayer_C_CanBattleAction_CallFromCPP::ThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_CanBattleAction_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000002, "Member 'RSBattlePlayer_C_CanBattleAction_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CanBattleAction_CallFromCPP, CallFunc_CanBattleAction_CanAction) == 0x000003, "Member 'RSBattlePlayer_C_CanBattleAction_CallFromCPP::CallFunc_CanBattleAction_CanAction' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ScaleMaxSpeed_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP) == 0x000010, "Wrong size on RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP, Scale) == 0x000000, "Member 'RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP::Scale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP, ClaimantName) == 0x000004, "Member 'RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP, CallFunc_ScaleMaxSpeed_Result) == 0x00000D, "Member 'RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUseAbleSASRecastGauge
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsUseAbleSASRecastGauge final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUseAbleSASRecastGauge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUseAbleSASRecastGauge");
static_assert(sizeof(RSBattlePlayer_C_IsUseAbleSASRecastGauge) == 0x000002, "Wrong size on RSBattlePlayer_C_IsUseAbleSASRecastGauge");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleSASRecastGauge, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_IsUseAbleSASRecastGauge::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleSASRecastGauge, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsUseAbleSASRecastGauge::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASEffectFixParam
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_GetSASEffectFixParam final
{
public:
	E_SASKindNative                               InKind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CB1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct F_SASParamNative>               OutFixParam;                                       // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetSASEffectFixParam) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetSASEffectFixParam");
static_assert(sizeof(RSBattlePlayer_C_GetSASEffectFixParam) == 0x000020, "Wrong size on RSBattlePlayer_C_GetSASEffectFixParam");
static_assert(offsetof(RSBattlePlayer_C_GetSASEffectFixParam, InKind) == 0x000000, "Member 'RSBattlePlayer_C_GetSASEffectFixParam::InKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASEffectFixParam, OutFixParam) == 0x000008, "Member 'RSBattlePlayer_C_GetSASEffectFixParam::OutFixParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASEffectFixParam, ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetSASEffectFixParam::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxSpeedScale_CallFromCPP
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSpeedScale_Scale;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP) == 0x000008, "Wrong size on RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP, CallFunc_GetMaxSpeedScale_Scale) == 0x000004, "Member 'RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP::CallFunc_GetMaxSpeedScale_Scale' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp_CallFromCPP
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_ForceWarp_CallFromCPP final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         IdleRestoreDelay;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ForceWarp_CallFromCPP) == 0x000010, "Wrong alignment on RSBattlePlayer_C_ForceWarp_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_ForceWarp_CallFromCPP) == 0x000040, "Wrong size on RSBattlePlayer_C_ForceWarp_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_CallFromCPP, Transform) == 0x000000, "Member 'RSBattlePlayer_C_ForceWarp_CallFromCPP::Transform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_CallFromCPP, IdleRestoreDelay) == 0x000030, "Member 'RSBattlePlayer_C_ForceWarp_CallFromCPP::IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceWarp_CallFromCPP, ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_ForceWarp_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueEffectiveSas_CallFromCPP
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP final
{
public:
	class AActor*                                 InAttackActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutWinceRate;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutKnockbackRate;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDownRate;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutCrashRate;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Unique_Effective_Sas_IsEffectiveSas;   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB2[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Is_Unique_Effective_Sas_WinceRate;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Is_Unique_Effective_Sas_KnockBackRate;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Is_Unique_Effective_Sas_DownRate;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Is_Unique_Effective_Sas_CrashRate;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP) == 0x000030, "Wrong size on RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, InAttackActor) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::InAttackActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, OutWinceRate) == 0x000008, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::OutWinceRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, OutKnockbackRate) == 0x00000C, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::OutKnockbackRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, OutDownRate) == 0x000010, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::OutDownRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, OutCrashRate) == 0x000014, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::OutCrashRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, CallFunc_Is_Unique_Effective_Sas_IsEffectiveSas) == 0x000019, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::CallFunc_Is_Unique_Effective_Sas_IsEffectiveSas' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, CallFunc_Is_Unique_Effective_Sas_WinceRate) == 0x00001C, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::CallFunc_Is_Unique_Effective_Sas_WinceRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, CallFunc_Is_Unique_Effective_Sas_KnockBackRate) == 0x000020, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::CallFunc_Is_Unique_Effective_Sas_KnockBackRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, CallFunc_Is_Unique_Effective_Sas_DownRate) == 0x000024, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::CallFunc_Is_Unique_Effective_Sas_DownRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP, CallFunc_Is_Unique_Effective_Sas_CrashRate) == 0x000028, "Member 'RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP::CallFunc_Is_Unique_Effective_Sas_CrashRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsReactionChance_CallFromCPP
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsReactionChance_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbReactionChance;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReactionChance_bReactionChance;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsReactionChance_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsReactionChance_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsReactionChance_CallFromCPP) == 0x000018, "Wrong size on RSBattlePlayer_C_IsReactionChance_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsReactionChance_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsReactionChance_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsReactionChance_CallFromCPP, LbReactionChance) == 0x000001, "Member 'RSBattlePlayer_C_IsReactionChance_CallFromCPP::LbReactionChance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsReactionChance_CallFromCPP, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_IsReactionChance_CallFromCPP::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsReactionChance_CallFromCPP, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_IsReactionChance_CallFromCPP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsReactionChance_CallFromCPP, CallFunc_IsReactionChance_bReactionChance) == 0x000011, "Member 'RSBattlePlayer_C_IsReactionChance_CallFromCPP::CallFunc_IsReactionChance_bReactionChance' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSpecialDown_CallFromCPP
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_IsSpecialDown_CallFromCPP final
{
public:
	float                                         OutSpDownWince;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpecialDown_IsSpDown;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsSpecialDown_SpDownWince;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsSpecialDown_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP) == 0x00000C, "Wrong size on RSBattlePlayer_C_IsSpecialDown_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP, OutSpDownWince) == 0x000000, "Member 'RSBattlePlayer_C_IsSpecialDown_CallFromCPP::OutSpDownWince' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsSpecialDown_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP, CallFunc_IsSpecialDown_IsSpDown) == 0x000005, "Member 'RSBattlePlayer_C_IsSpecialDown_CallFromCPP::CallFunc_IsSpecialDown_IsSpDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpecialDown_CallFromCPP, CallFunc_IsSpecialDown_SpDownWince) == 0x000008, "Member 'RSBattlePlayer_C_IsSpecialDown_CallFromCPP::CallFunc_IsSpecialDown_SpDownWince' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetStealthReactionInterval_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStealthReactionInterval_dummy;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP, CallFunc_SetStealthReactionInterval_dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP::CallFunc_SetStealthReactionInterval_dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealth_CallFromCPP
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_SetSasStealth_CallFromCPP final
{
public:
	bool                                          Stealth_on_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hero_order_in;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_delay;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_ignore;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_sas_cancel_in;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetSasStealth_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetSasStealth_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetSasStealth_CallFromCPP) == 0x000007, "Wrong size on RSBattlePlayer_C_SetSasStealth_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, Stealth_on_in) == 0x000000, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::Stealth_on_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, Hero_order_in) == 0x000001, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::Hero_order_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, Check_delay) == 0x000002, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::Check_delay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, Check_ignore) == 0x000003, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::Check_ignore' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, No_sas_cancel_in) == 0x000004, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::No_sas_cancel_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealth_CallFromCPP, CallFunc_SetSasStealth_dummy) == 0x000006, "Member 'RSBattlePlayer_C_SetSasStealth_CallFromCPP::CallFunc_SetSasStealth_dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainFieldDangerLV
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetBrainFieldDangerLV final
{
public:
	EPlayerBrainFieldDanger                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerBrainFieldDanger                       CallFunc_GetBrainFieldDangerLV_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainFieldDangerLV) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetBrainFieldDangerLV");
static_assert(sizeof(RSBattlePlayer_C_GetBrainFieldDangerLV) == 0x000002, "Wrong size on RSBattlePlayer_C_GetBrainFieldDangerLV");
static_assert(offsetof(RSBattlePlayer_C_GetBrainFieldDangerLV, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainFieldDangerLV::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainFieldDangerLV, CallFunc_GetBrainFieldDangerLV_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_GetBrainFieldDangerLV::CallFunc_GetBrainFieldDangerLV_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveCoverDamage_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP, Flag) == 0x000000, "Member 'RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP::Flag' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetCoverDamagePlayer_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetMaterialScalarParameterOther
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetMaterialScalarParameterOther final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetMaterialScalarParameterOther) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetMaterialScalarParameterOther");
static_assert(sizeof(RSBattlePlayer_C_SetMaterialScalarParameterOther) == 0x000010, "Wrong size on RSBattlePlayer_C_SetMaterialScalarParameterOther");
static_assert(offsetof(RSBattlePlayer_C_SetMaterialScalarParameterOther, ParamName) == 0x000000, "Member 'RSBattlePlayer_C_SetMaterialScalarParameterOther::ParamName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMaterialScalarParameterOther, Value) == 0x000008, "Member 'RSBattlePlayer_C_SetMaterialScalarParameterOther::Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetMaterialScalarParameterOther, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetMaterialScalarParameterOther::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASRecastAndActiveGaugeRate
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CB5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SASGaugeRate;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRate;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate");
static_assert(sizeof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate) == 0x000010, "Wrong size on RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate");
static_assert(offsetof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate, SASGaugeRate) == 0x000004, "Member 'RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate::SASGaugeRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate, IsActive) == 0x000008, "Member 'RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate::IsActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate, LRate) == 0x00000C, "Member 'RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate::LRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreStealthVelocity
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_IsIgnoreStealthVelocity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LResult;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsIgnoreStealthVelocity) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsIgnoreStealthVelocity");
static_assert(sizeof(RSBattlePlayer_C_IsIgnoreStealthVelocity) == 0x000005, "Wrong size on RSBattlePlayer_C_IsIgnoreStealthVelocity");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreStealthVelocity, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsIgnoreStealthVelocity::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreStealthVelocity, LResult) == 0x000001, "Member 'RSBattlePlayer_C_IsIgnoreStealthVelocity::LResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreStealthVelocity, CallFunc_GetCurrentActionState_Kind) == 0x000002, "Member 'RSBattlePlayer_C_IsIgnoreStealthVelocity::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreStealthVelocity, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'RSBattlePlayer_C_IsIgnoreStealthVelocity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreStealthVelocity, CallFunc_IsActionStatus_Result) == 0x000004, "Member 'RSBattlePlayer_C_IsIgnoreStealthVelocity::CallFunc_IsActionStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUseAbleCombinationVision
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsUseAbleCombinationVision final
{
public:
	E_SASKindNative                               InKind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          bUseAble;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_ConvertSAStoPlayerID_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CB7[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUseAbleCombinationVision) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsUseAbleCombinationVision");
static_assert(sizeof(RSBattlePlayer_C_IsUseAbleCombinationVision) == 0x000018, "Wrong size on RSBattlePlayer_C_IsUseAbleCombinationVision");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, InKind) == 0x000000, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::InKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, bUseAble) == 0x000002, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::bUseAble' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, CallFunc_ConvertSAStoPlayerID_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::CallFunc_ConvertSAStoPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, CallFunc_GetPlayerID_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, CallFunc_GetUserParamManager_UserParamManager) == 0x000008, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, CallFunc_GetBondsLevel_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUseAbleCombinationVision, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_IsUseAbleCombinationVision::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetAnimLeftStickPower
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetAnimLeftStickPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetAnimLeftStickPower) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetAnimLeftStickPower");
static_assert(sizeof(RSBattlePlayer_C_ResetAnimLeftStickPower) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetAnimLeftStickPower");
static_assert(offsetof(RSBattlePlayer_C_ResetAnimLeftStickPower, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetAnimLeftStickPower::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetForceLockTargetSelf_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP) == 0x000001, "Wrong size on RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ForceEndSAS_Telepo
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ForceEndSAS_Telepo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndSAS_Telepo_bEnd;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ForceEndSAS_Telepo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ForceEndSAS_Telepo");
static_assert(sizeof(RSBattlePlayer_C_ForceEndSAS_Telepo) == 0x000002, "Wrong size on RSBattlePlayer_C_ForceEndSAS_Telepo");
static_assert(offsetof(RSBattlePlayer_C_ForceEndSAS_Telepo, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ForceEndSAS_Telepo::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceEndSAS_Telepo, CallFunc_EndSAS_Telepo_bEnd) == 0x000001, "Member 'RSBattlePlayer_C_ForceEndSAS_Telepo::CallFunc_EndSAS_Telepo_bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasSelectSlow
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableSasSelectSlow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSasSelectSlow) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSasSelectSlow");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSasSelectSlow) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableSasSelectSlow");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSasSelectSlow, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSasSelectSlow::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDriveMode_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDriveMode_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDriveMode_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDriveMode_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsDriveMode_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDriveMode_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsDriveMode_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDriveMode_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDriveMode_CallFromCPP, CallFunc_IsDriveMode_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsDriveMode_CallFromCPP::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsManualHologramAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsManualHologramAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsManualHologramAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsManualHologramAttack");
static_assert(sizeof(RSBattlePlayer_C_IsManualHologramAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_IsManualHologramAttack");
static_assert(offsetof(RSBattlePlayer_C_IsManualHologramAttack, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsManualHologramAttack::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableSasInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSAS_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSasInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableSasInterface");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSasInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableSasInterface");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSasInterface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSasInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSasInterface, CallFunc_IsEnableSAS_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSasInterface::CallFunc_IsEnableSAS_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetManualAssaultVisionSasGaugeRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate");
static_assert(sizeof(RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate) == 0x000004, "Wrong size on RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate");
static_assert(offsetof(RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealthVisible_CallFromCPP
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP final
{
public:
	bool                                          Stealth_on_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStealthDelayParam               DelayParam_in;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FPlayerStealthDelayParam               DelayParam_out;                                    // 0x0018(0x0010)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStealthDelayParam               CallFunc_GetPlayerStealthDelayParam_PlayerStealthDelayParam; // 0x0030(0x0010)()
};
static_assert(alignof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP) == 0x000040, "Wrong size on RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP, Stealth_on_in) == 0x000000, "Member 'RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP::Stealth_on_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP, DelayParam_in) == 0x000008, "Member 'RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP::DelayParam_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP, DelayParam_out) == 0x000018, "Member 'RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP::DelayParam_out' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP, ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP, CallFunc_GetPlayerStealthDelayParam_PlayerStealthDelayParam) == 0x000030, "Member 'RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP::CallFunc_GetPlayerStealthDelayParam_PlayerStealthDelayParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSasMetalVisible_CallFromCPP
// 0x002C (0x002C - 0x0000)
struct RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP final
{
public:
	bool                                          Metal_on_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CBA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             Gametimer_in;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameTimer                             Gametimer_out;                                     // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CBB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             _lGameTimer;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP) == 0x00002C, "Wrong size on RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP, Metal_on_in) == 0x000000, "Member 'RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP::Metal_on_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP, Gametimer_in) == 0x000004, "Member 'RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP::Gametimer_in' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP, Gametimer_out) == 0x000010, "Member 'RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP::Gametimer_out' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP, ReturnValue) == 0x00001C, "Member 'RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP, _lGameTimer) == 0x000020, "Member 'RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP::_lGameTimer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainCrashParam
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainCrashParam final
{
public:
	float                                         BrainCrashTimer;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashMissScale;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainCrashParam) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainCrashParam");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainCrashParam) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetEnemyBrainCrashParam");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashParam, BrainCrashTimer) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashParam::BrainCrashTimer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashParam, BrainCrashMissScale) == 0x000004, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashParam::BrainCrashMissScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashParam, Return) == 0x000008, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashParam::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyStealthSeeEnable
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_SetEnemyStealthSeeEnable final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowChange;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyStealthSeeEnable_bReturn;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyStealthSeeEnable) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyStealthSeeEnable");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyStealthSeeEnable) == 0x000005, "Wrong size on RSBattlePlayer_C_SetEnemyStealthSeeEnable");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyStealthSeeEnable, On) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyStealthSeeEnable::On' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyStealthSeeEnable, ShadowChange) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyStealthSeeEnable::ShadowChange' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyStealthSeeEnable, Return) == 0x000002, "Member 'RSBattlePlayer_C_SetEnemyStealthSeeEnable::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyStealthSeeEnable, CallFunc_SetEnemyStealthSeeEnable_bReturn) == 0x000004, "Member 'RSBattlePlayer_C_SetEnemyStealthSeeEnable::CallFunc_SetEnemyStealthSeeEnable_bReturn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSwitchVisibleBrainFieldLevel
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Unused;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel");
static_assert(sizeof(RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel) == 0x000003, "Wrong size on RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel");
static_assert(offsetof(RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel, Visible) == 0x000000, "Member 'RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel::Visible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel, Unused) == 0x000001, "Member 'RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel::Unused' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetEnemyWait
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ResetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetEnemyWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetEnemyWait");
static_assert(sizeof(RSBattlePlayer_C_ResetEnemyWait) == 0x000002, "Wrong size on RSBattlePlayer_C_ResetEnemyWait");
static_assert(offsetof(RSBattlePlayer_C_ResetEnemyWait, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_ResetEnemyWait::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetEnemyWait, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_ResetEnemyWait::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyWait
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyWait");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyWait) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemyWait");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyWait, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyWait::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyWait, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyWait::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyGroundTransform
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattlePlayer_C_GetEnemyGroundTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             Return;                                            // 0x0030(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CBC[0xF];                                     // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetEnemyGroundTransform_return;           // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyGroundTransform) == 0x000010, "Wrong alignment on RSBattlePlayer_C_GetEnemyGroundTransform");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyGroundTransform) == 0x0000A0, "Wrong size on RSBattlePlayer_C_GetEnemyGroundTransform");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyGroundTransform, Transform) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyGroundTransform::Transform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyGroundTransform, Return) == 0x000030, "Member 'RSBattlePlayer_C_GetEnemyGroundTransform::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyGroundTransform, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_GetEnemyGroundTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyGroundTransform, CallFunc_GetEnemyGroundTransform_return) == 0x000070, "Member 'RSBattlePlayer_C_GetEnemyGroundTransform::CallFunc_GetEnemyGroundTransform_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainFieldEnd final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldEnd_bDummy;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainFieldEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainFieldEnd");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainFieldEnd) == 0x000004, "Wrong size on RSBattlePlayer_C_SetEnemyBrainFieldEnd");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldEnd, MoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldEnd::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldEnd, NewParam) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldEnd::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldEnd, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldEnd, CallFunc_SetEnemyBrainFieldEnd_bDummy) == 0x000003, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldEnd::CallFunc_SetEnemyBrainFieldEnd_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainFieldStart final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainFieldStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainFieldStart");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainFieldStart) == 0x000003, "Wrong size on RSBattlePlayer_C_SetEnemyBrainFieldStart");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldStart, MoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldStart::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldStart, NewParam) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldStart::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldStart, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyDamageReaction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEnemyDamageReaction final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyDamageReaction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyDamageReaction");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyDamageReaction) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEnemyDamageReaction");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyDamageReaction, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyDamageReaction::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetEnemyTarget) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetEnemyTarget");
static_assert(sizeof(RSBattlePlayer_C_ResetEnemyTarget) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetEnemyTarget");
static_assert(offsetof(RSBattlePlayer_C_ResetEnemyTarget, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_ResetEnemyTarget::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyTarget) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyTarget");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyTarget) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEnemyTarget");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyTarget, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyTarget::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainCrashPerformance
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainCrashPerformance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainCrashPerformance_bReturn;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainCrashPerformance) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainCrashPerformance");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainCrashPerformance) == 0x000003, "Wrong size on RSBattlePlayer_C_SetEnemyBrainCrashPerformance");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashPerformance, Return) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashPerformance::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashPerformance, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashPerformance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainCrashPerformance, CallFunc_SetEnemyBrainCrashPerformance_bReturn) == 0x000002, "Member 'RSBattlePlayer_C_SetEnemyBrainCrashPerformance::CallFunc_SetEnemyBrainCrashPerformance_bReturn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyBossActive
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnemyBossActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyBossActive_bResult;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyBossActive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyBossActive");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyBossActive) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnemyBossActive");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyBossActive, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyBossActive::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyBossActive, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyBossActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyBossActive, CallFunc_IsEnemyBossActive_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyBossActive::CallFunc_IsEnemyBossActive_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateAction");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateAction) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyStateAction");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateAction, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateAction::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateMove");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateMove) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyStateMove");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateMove, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateMove::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateDamageDown
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateDamageDown final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateDamageDown_bReturn;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateDamageDown) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateDamageDown");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateDamageDown) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnemyStateDamageDown");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamageDown, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateDamageDown::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamageDown, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyStateDamageDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamageDown, CallFunc_IsEnemyStateDamageDown_bReturn) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyStateDamageDown::CallFunc_IsEnemyStateDamageDown_bReturn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateDamage
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateDamage final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateDamage_bReturn;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateDamage");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateDamage) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnemyStateDamage");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamage, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateDamage::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamage, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyStateDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateDamage, CallFunc_IsEnemyStateDamage_bReturn) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyStateDamage::CallFunc_IsEnemyStateDamage_bReturn' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateAttack final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyStateAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateAttack, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateAttack::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateAttack, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyStateAttack::CallFunc_IsActionStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.isEnemyDamageBlow
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageBlow final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageBlow) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageBlow");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageBlow) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyDamageBlow");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageBlow, Bool) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageBlow::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageknockBack
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageknockBack final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerDamageKind                             CallFunc_GetDamageReaction_ReactionType;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageknockBack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageknockBack");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageknockBack) == 0x000005, "Wrong size on RSBattlePlayer_C_IsEnemyDamageknockBack");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageknockBack, Bool) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageknockBack::Bool' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageknockBack, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyDamageknockBack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageknockBack, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyDamageknockBack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageknockBack, CallFunc_GetDamageReaction_ReactionType) == 0x000003, "Member 'RSBattlePlayer_C_IsEnemyDamageknockBack::CallFunc_GetDamageReaction_ReactionType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageknockBack, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'RSBattlePlayer_C_IsEnemyDamageknockBack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.isEnemyDamageLaunch
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageLaunch final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageLaunch) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageLaunch");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageLaunch) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyDamageLaunch");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageLaunch, Bool) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageLaunch::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyAction");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyAction) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyAction");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyAction, Action) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyAction, Bool) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyAction::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BeginEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginEnemyAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginEnemyAction");
static_assert(sizeof(RSBattlePlayer_C_BeginEnemyAction) == 0x000002, "Wrong size on RSBattlePlayer_C_BeginEnemyAction");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyAction, Action) == 0x000000, "Member 'RSBattlePlayer_C_BeginEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyAction, Bool) == 0x000001, "Member 'RSBattlePlayer_C_BeginEnemyAction::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageDown
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageDown final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageDown) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageDown");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageDown) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyDamageDown");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageDown, Bool) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageDown::Bool' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageDown, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyDamageDown::CallFunc_IsActionStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageWince
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageWince final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageWince) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageWince");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageWince) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyDamageWince");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageWince, Bool) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageWince::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyMove
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyMove");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyMove) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyMove");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyMove, Move) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyMove, Bool) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyMove::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyMove
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BeginEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginEnemyMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginEnemyMove");
static_assert(sizeof(RSBattlePlayer_C_BeginEnemyMove) == 0x000002, "Wrong size on RSBattlePlayer_C_BeginEnemyMove");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyMove, Move) == 0x000000, "Member 'RSBattlePlayer_C_BeginEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyMove, Bool) == 0x000001, "Member 'RSBattlePlayer_C_BeginEnemyMove::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyAttack, Attack) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyAttack, Bool) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyAttack::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_BeginEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BeginEnemyAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BeginEnemyAttack");
static_assert(sizeof(RSBattlePlayer_C_BeginEnemyAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_BeginEnemyAttack");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyAttack, Attack) == 0x000000, "Member 'RSBattlePlayer_C_BeginEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BeginEnemyAttack, Bool) == 0x000001, "Member 'RSBattlePlayer_C_BeginEnemyAttack::Bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyInterfaceSound
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_GetEnemyInterfaceSound final
{
public:
	Enum_EnemySound                               Enum;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemySound                               CallFunc_GetEnemyInterfaceSound_Sound;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyInterfaceSound) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetEnemyInterfaceSound");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyInterfaceSound) == 0x000003, "Wrong size on RSBattlePlayer_C_GetEnemyInterfaceSound");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyInterfaceSound, Enum) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyInterfaceSound::Enum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyInterfaceSound, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_GetEnemyInterfaceSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyInterfaceSound, CallFunc_GetEnemyInterfaceSound_Sound) == 0x000002, "Member 'RSBattlePlayer_C_GetEnemyInterfaceSound::CallFunc_GetEnemyInterfaceSound_Sound' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableEnemyMoveRange
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsEnableEnemyMoveRange final
{
public:
	bool                                          bReturn;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRet;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableEnemyMoveRange_bReturn;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableEnemyMoveRange) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableEnemyMoveRange");
static_assert(sizeof(RSBattlePlayer_C_IsEnableEnemyMoveRange) == 0x000004, "Wrong size on RSBattlePlayer_C_IsEnableEnemyMoveRange");
static_assert(offsetof(RSBattlePlayer_C_IsEnableEnemyMoveRange, bReturn) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableEnemyMoveRange::bReturn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableEnemyMoveRange, bRet) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableEnemyMoveRange::bRet' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableEnemyMoveRange, CallFunc_IsEnableEnemyMoveRange_bReturn) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableEnemyMoveRange::CallFunc_IsEnableEnemyMoveRange_bReturn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableEnemyMoveRange, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableEnemyMoveRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PlayerActionForEnemyReaction
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_PlayerActionForEnemyReaction final
{
public:
	BattlePrototype::EPsychicObjectAttackType     PsychicObjectType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CBD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PsychicObjLocation;                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PlayerActionForEnemyReaction) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PlayerActionForEnemyReaction");
static_assert(sizeof(RSBattlePlayer_C_PlayerActionForEnemyReaction) == 0x000014, "Wrong size on RSBattlePlayer_C_PlayerActionForEnemyReaction");
static_assert(offsetof(RSBattlePlayer_C_PlayerActionForEnemyReaction, PsychicObjectType) == 0x000000, "Member 'RSBattlePlayer_C_PlayerActionForEnemyReaction::PsychicObjectType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayerActionForEnemyReaction, PsychicObjLocation) == 0x000004, "Member 'RSBattlePlayer_C_PlayerActionForEnemyReaction::PsychicObjLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PlayerActionForEnemyReaction, Dummy) == 0x000010, "Member 'RSBattlePlayer_C_PlayerActionForEnemyReaction::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnemyDataDrop
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_EnemyDataDrop final
{
public:
	struct FVector                                Param_SpawnLocation;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnDir;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrop;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnemyDataDrop) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EnemyDataDrop");
static_assert(sizeof(RSBattlePlayer_C_EnemyDataDrop) == 0x00001C, "Wrong size on RSBattlePlayer_C_EnemyDataDrop");
static_assert(offsetof(RSBattlePlayer_C_EnemyDataDrop, Param_SpawnLocation) == 0x000000, "Member 'RSBattlePlayer_C_EnemyDataDrop::Param_SpawnLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyDataDrop, SpawnDir) == 0x00000C, "Member 'RSBattlePlayer_C_EnemyDataDrop::SpawnDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyDataDrop, IsDrop) == 0x000018, "Member 'RSBattlePlayer_C_EnemyDataDrop::IsDrop' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemySpawn
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemySpawn final
{
public:
	bool                                          Spawn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemySpawn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemySpawn");
static_assert(sizeof(RSBattlePlayer_C_SetEnemySpawn) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemySpawn");
static_assert(offsetof(RSBattlePlayer_C_SetEnemySpawn, Spawn) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemySpawn::Spawn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemySpawn, Return) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemySpawn::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SpawnStart
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_SpawnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnSpawnStartEnpc_Return;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SpawnStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SpawnStart");
static_assert(sizeof(RSBattlePlayer_C_SpawnStart) == 0x000004, "Wrong size on RSBattlePlayer_C_SpawnStart");
static_assert(offsetof(RSBattlePlayer_C_SpawnStart, Return) == 0x000000, "Member 'RSBattlePlayer_C_SpawnStart::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnStart, CallFunc_OnSpawnStartEnpc_Return) == 0x000001, "Member 'RSBattlePlayer_C_SpawnStart::CallFunc_OnSpawnStartEnpc_Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnStart, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_SpawnStart::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SpawnStart, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_SpawnStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsHideWeak
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsHideWeak final
{
public:
	bool                                          Param_IsHideWeak;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsHideWeak) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsHideWeak");
static_assert(sizeof(RSBattlePlayer_C_IsHideWeak) == 0x000001, "Wrong size on RSBattlePlayer_C_IsHideWeak");
static_assert(offsetof(RSBattlePlayer_C_IsHideWeak, Param_IsHideWeak) == 0x000000, "Member 'RSBattlePlayer_C_IsHideWeak::Param_IsHideWeak' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReturnStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ReturnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReturnStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ReturnStart");
static_assert(sizeof(RSBattlePlayer_C_ReturnStart) == 0x000001, "Wrong size on RSBattlePlayer_C_ReturnStart");
static_assert(offsetof(RSBattlePlayer_C_ReturnStart, Return) == 0x000000, "Member 'RSBattlePlayer_C_ReturnStart::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsAttacking final
{
public:
	bool                                          IsAttack;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAttacking) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAttacking");
static_assert(sizeof(RSBattlePlayer_C_IsAttacking) == 0x000001, "Wrong size on RSBattlePlayer_C_IsAttacking");
static_assert(offsetof(RSBattlePlayer_C_IsAttacking, IsAttack) == 0x000000, "Member 'RSBattlePlayer_C_IsAttacking::IsAttack' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetKind
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetTargetKind final
{
public:
	ERSPartyPlayerKind                            TargetKind;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTargetKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetTargetKind");
static_assert(sizeof(RSBattlePlayer_C_GetTargetKind) == 0x000001, "Wrong size on RSBattlePlayer_C_GetTargetKind");
static_assert(offsetof(RSBattlePlayer_C_GetTargetKind, TargetKind) == 0x000000, "Member 'RSBattlePlayer_C_GetTargetKind::TargetKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCore
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetBrainCore final
{
public:
	class ABP_co2000Base_C*                       CoreObject;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainCore) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBrainCore");
static_assert(sizeof(RSBattlePlayer_C_GetBrainCore) == 0x000008, "Wrong size on RSBattlePlayer_C_GetBrainCore");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCore, CoreObject) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainCore::CoreObject' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateFloating
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateFloating final
{
public:
	bool                                          IsFloating;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateFloating) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateFloating");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateFloating) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyStateFloating");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateFloating, IsFloating) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateFloating::IsFloating' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CalcCameraShake
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_CalcCameraShake final
{
public:
	class UClass*                                 InputShakeClass;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputScale;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OutputShakeClass;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutputScale;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CalcCameraShake) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CalcCameraShake");
static_assert(sizeof(RSBattlePlayer_C_CalcCameraShake) == 0x000028, "Wrong size on RSBattlePlayer_C_CalcCameraShake");
static_assert(offsetof(RSBattlePlayer_C_CalcCameraShake, InputShakeClass) == 0x000000, "Member 'RSBattlePlayer_C_CalcCameraShake::InputShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCameraShake, InputScale) == 0x000008, "Member 'RSBattlePlayer_C_CalcCameraShake::InputScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCameraShake, ShakeLocation) == 0x00000C, "Member 'RSBattlePlayer_C_CalcCameraShake::ShakeLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCameraShake, OutputShakeClass) == 0x000018, "Member 'RSBattlePlayer_C_CalcCameraShake::OutputShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CalcCameraShake, OutputScale) == 0x000020, "Member 'RSBattlePlayer_C_CalcCameraShake::OutputScale' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyPressDownEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetEnemyPressDownEnd final
{
public:
	bool                                          Dammy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyPressDownEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyPressDownEnd");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyPressDownEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_SetEnemyPressDownEnd");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyPressDownEnd, Dammy) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyPressDownEnd::Dammy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndUniqueObjState
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EndUniqueObjState final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndUniqueObjState) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndUniqueObjState");
static_assert(sizeof(RSBattlePlayer_C_EndUniqueObjState) == 0x000001, "Wrong size on RSBattlePlayer_C_EndUniqueObjState");
static_assert(offsetof(RSBattlePlayer_C_EndUniqueObjState, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_EndUniqueObjState::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartUniqueObjState
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_StartUniqueObjState final
{
public:
	class ABP_PsychicObjectBasic_C*               AttackObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartUniqueObjState) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StartUniqueObjState");
static_assert(sizeof(RSBattlePlayer_C_StartUniqueObjState) == 0x000010, "Wrong size on RSBattlePlayer_C_StartUniqueObjState");
static_assert(offsetof(RSBattlePlayer_C_StartUniqueObjState, AttackObject) == 0x000000, "Member 'RSBattlePlayer_C_StartUniqueObjState::AttackObject' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartUniqueObjState, Dummy) == 0x000008, "Member 'RSBattlePlayer_C_StartUniqueObjState::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckUniqueObjState
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattlePlayer_C_CheckUniqueObjState final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckUniqueObjState) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckUniqueObjState");
static_assert(sizeof(RSBattlePlayer_C_CheckUniqueObjState) == 0x0001C8, "Wrong size on RSBattlePlayer_C_CheckUniqueObjState");
static_assert(offsetof(RSBattlePlayer_C_CheckUniqueObjState, HitResult) == 0x000000, "Member 'RSBattlePlayer_C_CheckUniqueObjState::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckUniqueObjState, Dummy) == 0x0001C0, "Member 'RSBattlePlayer_C_CheckUniqueObjState::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueObjState
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUniqueObjState final
{
public:
	bool                                          ReturnState;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueObjState) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUniqueObjState");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueObjState) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUniqueObjState");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueObjState, ReturnState) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueObjState::ReturnState' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SwitchDispCore
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SwitchDispCore final
{
public:
	bool                                          DisplayOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SwitchDispCore) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SwitchDispCore");
static_assert(sizeof(RSBattlePlayer_C_SwitchDispCore) == 0x000002, "Wrong size on RSBattlePlayer_C_SwitchDispCore");
static_assert(offsetof(RSBattlePlayer_C_SwitchDispCore, DisplayOn) == 0x000000, "Member 'RSBattlePlayer_C_SwitchDispCore::DisplayOn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SwitchDispCore, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SwitchDispCore::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnStartCrashChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnStartCrashChance final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnStartCrashChance) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnStartCrashChance");
static_assert(sizeof(RSBattlePlayer_C_OnStartCrashChance) == 0x000001, "Wrong size on RSBattlePlayer_C_OnStartCrashChance");
static_assert(offsetof(RSBattlePlayer_C_OnStartCrashChance, bStart) == 0x000000, "Member 'RSBattlePlayer_C_OnStartCrashChance::bStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEndCrashChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnEndCrashChance final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEndCrashChance) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEndCrashChance");
static_assert(sizeof(RSBattlePlayer_C_OnEndCrashChance) == 0x000001, "Wrong size on RSBattlePlayer_C_OnEndCrashChance");
static_assert(offsetof(RSBattlePlayer_C_OnEndCrashChance, bEnd) == 0x000000, "Member 'RSBattlePlayer_C_OnEndCrashChance::bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPossibleTargetAttack
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_IsPossibleTargetAttack final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPossibleTargetAttack) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsPossibleTargetAttack");
static_assert(sizeof(RSBattlePlayer_C_IsPossibleTargetAttack) == 0x000010, "Wrong size on RSBattlePlayer_C_IsPossibleTargetAttack");
static_assert(offsetof(RSBattlePlayer_C_IsPossibleTargetAttack, Attacker) == 0x000000, "Member 'RSBattlePlayer_C_IsPossibleTargetAttack::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPossibleTargetAttack, bPossible) == 0x000008, "Member 'RSBattlePlayer_C_IsPossibleTargetAttack::bPossible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableLostAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDisableLostAction final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableLostAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDisableLostAction");
static_assert(sizeof(RSBattlePlayer_C_IsDisableLostAction) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDisableLostAction");
static_assert(offsetof(RSBattlePlayer_C_IsDisableLostAction, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableLostAction::bDisable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCoreCollision
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetCoreCollision final
{
public:
	class UDamagePartCollisionComponent*          CoreCollision;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCoreCollision) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCoreCollision");
static_assert(sizeof(RSBattlePlayer_C_GetCoreCollision) == 0x000008, "Wrong size on RSBattlePlayer_C_GetCoreCollision");
static_assert(offsetof(RSBattlePlayer_C_GetCoreCollision, CoreCollision) == 0x000000, "Member 'RSBattlePlayer_C_GetCoreCollision::CoreCollision' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSpawnMoveStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnSpawnMoveStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnSpawnMoveStart) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnSpawnMoveStart");
static_assert(sizeof(RSBattlePlayer_C_OnSpawnMoveStart) == 0x000001, "Wrong size on RSBattlePlayer_C_OnSpawnMoveStart");
static_assert(offsetof(RSBattlePlayer_C_OnSpawnMoveStart, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnSpawnMoveStart::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldResetAction
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_OnEnemyBrainFieldResetAction final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReset;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCharacterVisibility_bDummy;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyInterfaceBrainAccess_bResult;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEnemyBrainFieldResetAction");
static_assert(sizeof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction) == 0x000006, "Wrong size on RSBattlePlayer_C_OnEnemyBrainFieldResetAction");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, bMoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, bReset) == 0x000001, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::bReset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, CallFunc_SetCharacterVisibility_bDummy) == 0x000002, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::CallFunc_SetCharacterVisibility_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, CallFunc_IsEnemyInterfaceBrainAccess_bResult) == 0x000004, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::CallFunc_IsEnemyInterfaceBrainAccess_bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetAction, CallFunc_IsEnemyDamageDown_bool) == 0x000005, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetAction::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldFinishWeapon
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon");
static_assert(sizeof(RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon) == 0x000002, "Wrong size on RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon, bMoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldResetStatus
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_OnEnemyBrainFieldResetStatus final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CBE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LMainPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CBF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CC0[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus) == 0x000008, "Wrong alignment on RSBattlePlayer_C_OnEnemyBrainFieldResetStatus");
static_assert(sizeof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus) == 0x000038, "Wrong size on RSBattlePlayer_C_OnEnemyBrainFieldResetStatus");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, bMoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, LMainPlayer) == 0x000008, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::LMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_GetMainPlayer_Player) == 0x000028, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldResetStatus, CallFunc_IsValid_ReturnValue_4) == 0x000031, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldResetStatus::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldMoveInner
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainFieldMoveInner final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainFieldMoveInner) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainFieldMoveInner");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainFieldMoveInner) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemyBrainFieldMoveInner");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldMoveInner, MoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldMoveInner::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldMoveInner, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldMoveInner::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldMoveNormal
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal, MoveBrainField) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldCutChange
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_OnEnemyBrainFieldCutChange final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEnemyBrainFieldCutChange) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEnemyBrainFieldCutChange");
static_assert(sizeof(RSBattlePlayer_C_OnEnemyBrainFieldCutChange) == 0x000002, "Wrong size on RSBattlePlayer_C_OnEnemyBrainFieldCutChange");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldCutChange, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldCutChange::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OnEnemyBrainFieldCutChange, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_OnEnemyBrainFieldCutChange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ChangeAiType
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_ChangeAiType final
{
public:
	Enum_EnemyAiType                              Param_ChangeAiType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailed;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ChangeAiType) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ChangeAiType");
static_assert(sizeof(RSBattlePlayer_C_ChangeAiType) == 0x000002, "Wrong size on RSBattlePlayer_C_ChangeAiType");
static_assert(offsetof(RSBattlePlayer_C_ChangeAiType, Param_ChangeAiType) == 0x000000, "Member 'RSBattlePlayer_C_ChangeAiType::Param_ChangeAiType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ChangeAiType, bFailed) == 0x000001, "Member 'RSBattlePlayer_C_ChangeAiType::bFailed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckChangeAiTypeForHpRate
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckChangeAiTypeForHpRate final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckChangeAiTypeForHpRate");
static_assert(sizeof(RSBattlePlayer_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckChangeAiTypeForHpRate");
static_assert(offsetof(RSBattlePlayer_C_CheckChangeAiTypeForHpRate, Failed) == 0x000000, "Member 'RSBattlePlayer_C_CheckChangeAiTypeForHpRate::Failed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsChangeAiTypeAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsChangeAiTypeAction final
{
public:
	Enum_EnemyAiType                              InAiType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsChangeAiTypeAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsChangeAiTypeAction");
static_assert(sizeof(RSBattlePlayer_C_IsChangeAiTypeAction) == 0x000002, "Wrong size on RSBattlePlayer_C_IsChangeAiTypeAction");
static_assert(offsetof(RSBattlePlayer_C_IsChangeAiTypeAction, InAiType) == 0x000000, "Member 'RSBattlePlayer_C_IsChangeAiTypeAction::InAiType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsChangeAiTypeAction, bPossible) == 0x000001, "Member 'RSBattlePlayer_C_IsChangeAiTypeAction::bPossible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.em1200_ChangePhaseParamSetting
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em1200_ChangePhaseParamSetting final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em1200_ChangePhaseParamSetting");
static_assert(sizeof(RSBattlePlayer_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong size on RSBattlePlayer_C_Em1200_ChangePhaseParamSetting");
static_assert(offsetof(RSBattlePlayer_C_Em1200_ChangePhaseParamSetting, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em1200_ChangePhaseParamSetting::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.em1210_AddPSychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em1210_AddPSychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               FlyObj;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1210_AddPSychicFlyObj) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em1210_AddPSychicFlyObj");
static_assert(sizeof(RSBattlePlayer_C_Em1210_AddPSychicFlyObj) == 0x000010, "Wrong size on RSBattlePlayer_C_Em1210_AddPSychicFlyObj");
static_assert(offsetof(RSBattlePlayer_C_Em1210_AddPSychicFlyObj, FlyObj) == 0x000000, "Member 'RSBattlePlayer_C_Em1210_AddPSychicFlyObj::FlyObj' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1210_AddPSychicFlyObj, Dummy) == 0x000008, "Member 'RSBattlePlayer_C_Em1210_AddPSychicFlyObj::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartReactionDilation
// 0x0088 (0x0088 - 0x0000)
struct RSBattlePlayer_C_StartReactionDilation final
{
public:
	uint8                                         ReactionKind;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddDamage;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CC1[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_em_ChangeTimeDilation              LRowData;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LDTChangeTimeDilation;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDE_em_ChangeTimeDilation                     LChangeEnum;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CC3[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CC4[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CC5[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_em_ChangeTimeDilation              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0070(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartReactionDilation) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StartReactionDilation");
static_assert(sizeof(RSBattlePlayer_C_StartReactionDilation) == 0x000088, "Wrong size on RSBattlePlayer_C_StartReactionDilation");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, ReactionKind) == 0x000000, "Member 'RSBattlePlayer_C_StartReactionDilation::ReactionKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, AddDamage) == 0x000001, "Member 'RSBattlePlayer_C_StartReactionDilation::AddDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, Return) == 0x000002, "Member 'RSBattlePlayer_C_StartReactionDilation::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, LRowData) == 0x000004, "Member 'RSBattlePlayer_C_StartReactionDilation::LRowData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, LDTChangeTimeDilation) == 0x000018, "Member 'RSBattlePlayer_C_StartReactionDilation::LDTChangeTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, LChangeEnum) == 0x000020, "Member 'RSBattlePlayer_C_StartReactionDilation::LChangeEnum' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetValidValue_ReturnValue) == 0x000021, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, K2Node_SwitchEnum_CmpSuccess) == 0x000022, "Member 'RSBattlePlayer_C_StartReactionDilation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetMainPlayer_Player) == 0x000038, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000040, "Member 'RSBattlePlayer_C_StartReactionDilation::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'RSBattlePlayer_C_StartReactionDilation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetAccelerating_Accelerating) == 0x000052, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_IsValid_ReturnValue_3) == 0x000053, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_Conv_StringToName_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetDataTableRowFromName_OutRow) == 0x000070, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000081, "Member 'RSBattlePlayer_C_StartReactionDilation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDiscoveredOnceInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface final
{
public:
	bool                                          bDiscoverd;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface, bDiscoverd) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface::bDiscoverd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em0700_EnableInvalidDamage
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em0700_EnableInvalidDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em0700_EnableInvalidDamage");
static_assert(sizeof(RSBattlePlayer_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong size on RSBattlePlayer_C_Em0700_EnableInvalidDamage");
static_assert(offsetof(RSBattlePlayer_C_Em0700_EnableInvalidDamage, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em0700_EnableInvalidDamage::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_StartDither
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em1400_StartDither final
{
public:
	float                                         TotalDuration;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1400_StartDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em1400_StartDither");
static_assert(sizeof(RSBattlePlayer_C_Em1400_StartDither) == 0x000008, "Wrong size on RSBattlePlayer_C_Em1400_StartDither");
static_assert(offsetof(RSBattlePlayer_C_Em1400_StartDither, TotalDuration) == 0x000000, "Member 'RSBattlePlayer_C_Em1400_StartDither::TotalDuration' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1400_StartDither, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em1400_StartDither::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_EndDither
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em1400_EndDither final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1400_EndDither) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em1400_EndDither");
static_assert(sizeof(RSBattlePlayer_C_Em1400_EndDither) == 0x000001, "Wrong size on RSBattlePlayer_C_Em1400_EndDither");
static_assert(offsetof(RSBattlePlayer_C_Em1400_EndDither, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em1400_EndDither::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_UpdateDither
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em1400_UpdateDither final
{
public:
	EEasingFunc                                   EasingFunc;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSec;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1400_UpdateDither) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em1400_UpdateDither");
static_assert(sizeof(RSBattlePlayer_C_Em1400_UpdateDither) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em1400_UpdateDither");
static_assert(offsetof(RSBattlePlayer_C_Em1400_UpdateDither, EasingFunc) == 0x000000, "Member 'RSBattlePlayer_C_Em1400_UpdateDither::EasingFunc' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1400_UpdateDither, DeltaSec) == 0x000004, "Member 'RSBattlePlayer_C_Em1400_UpdateDither::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1400_UpdateDither, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em1400_UpdateDither::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_SetSpawnTransform
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_Em1400_SetSpawnTransform final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1400_SetSpawnTransform) == 0x000010, "Wrong alignment on RSBattlePlayer_C_Em1400_SetSpawnTransform");
static_assert(sizeof(RSBattlePlayer_C_Em1400_SetSpawnTransform) == 0x000040, "Wrong size on RSBattlePlayer_C_Em1400_SetSpawnTransform");
static_assert(offsetof(RSBattlePlayer_C_Em1400_SetSpawnTransform, SpawnTransform) == 0x000000, "Member 'RSBattlePlayer_C_Em1400_SetSpawnTransform::SpawnTransform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1400_SetSpawnTransform, Return) == 0x000030, "Member 'RSBattlePlayer_C_Em1400_SetSpawnTransform::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_GetSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_Em1400_GetSpawnTransform final
{
public:
	struct FTransform                             SpawTransform;                                     // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1400_GetSpawnTransform) == 0x000010, "Wrong alignment on RSBattlePlayer_C_Em1400_GetSpawnTransform");
static_assert(sizeof(RSBattlePlayer_C_Em1400_GetSpawnTransform) == 0x000030, "Wrong size on RSBattlePlayer_C_Em1400_GetSpawnTransform");
static_assert(offsetof(RSBattlePlayer_C_Em1400_GetSpawnTransform, SpawTransform) == 0x000000, "Member 'RSBattlePlayer_C_Em1400_GetSpawnTransform::SpawTransform' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainFieldEnemyAlive
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsBrainFieldEnemyAlive final
{
public:
	bool                                          bEnemyAlive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnemyAlive;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharacterDead_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainFieldEnemyAlive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainFieldEnemyAlive");
static_assert(sizeof(RSBattlePlayer_C_IsBrainFieldEnemyAlive) == 0x000004, "Wrong size on RSBattlePlayer_C_IsBrainFieldEnemyAlive");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldEnemyAlive, bEnemyAlive) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainFieldEnemyAlive::bEnemyAlive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldEnemyAlive, LbEnemyAlive) == 0x000001, "Member 'RSBattlePlayer_C_IsBrainFieldEnemyAlive::LbEnemyAlive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldEnemyAlive, CallFunc_GetEnemySpawn_return) == 0x000002, "Member 'RSBattlePlayer_C_IsBrainFieldEnemyAlive::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldEnemyAlive, CallFunc_IsCharacterDead_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsBrainFieldEnemyAlive::CallFunc_IsCharacterDead_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSwitchAttackCollisionInfo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsSwitchAttackCollisionInfo final
{
public:
	bool                                          IsSwitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSwitchAttackCollisionInfo");
static_assert(sizeof(RSBattlePlayer_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong size on RSBattlePlayer_C_IsSwitchAttackCollisionInfo");
static_assert(offsetof(RSBattlePlayer_C_IsSwitchAttackCollisionInfo, IsSwitch) == 0x000000, "Member 'RSBattlePlayer_C_IsSwitchAttackCollisionInfo::IsSwitch' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyUpDownWait
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemyUpDownWait final
{
public:
	bool                                          DownWait;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyUpDownWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyUpDownWait");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyUpDownWait) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemyUpDownWait");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyUpDownWait, DownWait) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyUpDownWait::DownWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyUpDownWait, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyUpDownWait::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyUpDownWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyUpDownWait final
{
public:
	bool                                          bUpDownWait;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyUpDownWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyUpDownWait");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyUpDownWait) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyUpDownWait");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyUpDownWait, bUpDownWait) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyUpDownWait::bUpDownWait' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartCriticalHitSlow
// 0x0210 (0x0210 - 0x0000)
struct RSBattlePlayer_C_StartCriticalHitSlow final
{
public:
	struct FHCHitResult                           InHitResult;                                       // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            LSlowType;                                         // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC7[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01D9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable_1;                              // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC8[0x1];                                     // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_2;                              // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC9[0x6];                                     // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CCA[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartCriticalHitSlow) == 0x000008, "Wrong alignment on RSBattlePlayer_C_StartCriticalHitSlow");
static_assert(sizeof(RSBattlePlayer_C_StartCriticalHitSlow) == 0x000210, "Wrong size on RSBattlePlayer_C_StartCriticalHitSlow");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, InHitResult) == 0x000000, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::InHitResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Return) == 0x0001C0, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, LSlowType) == 0x0001C1, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::LSlowType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, LAttacker) == 0x0001C8, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Temp_bool_Variable) == 0x0001D0, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue) == 0x0001D1, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_1) == 0x0001D2, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D3, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D4, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001D5, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_BooleanOR_ReturnValue) == 0x0001D6, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_2) == 0x0001D7, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_BooleanOR_ReturnValue_1) == 0x0001D8, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Temp_byte_Variable) == 0x0001D9, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Temp_byte_Variable_1) == 0x0001DA, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_Array_Find_ReturnValue) == 0x0001DC, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001E0, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Temp_byte_Variable_2) == 0x0001E1, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0001E8, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, Temp_bool_Variable_1) == 0x0001F9, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsControlPlayer_ReturnValue) == 0x0001FA, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, K2Node_Select_Default) == 0x0001FB, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_GetBattleManager_BattleManager) == 0x000200, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_3) == 0x000208, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_4) == 0x000209, "Member 'RSBattlePlayer_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.em1130_EnableWeak
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em1130_EnableWeak final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em1130_EnableWeak) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em1130_EnableWeak");
static_assert(sizeof(RSBattlePlayer_C_Em1130_EnableWeak) == 0x000002, "Wrong size on RSBattlePlayer_C_Em1130_EnableWeak");
static_assert(offsetof(RSBattlePlayer_C_Em1130_EnableWeak, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em1130_EnableWeak::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em1130_EnableWeak, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em1130_EnableWeak::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemySpawnConditionCheck
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetEnemySpawnConditionCheck final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemySpawnConditionCheck) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetEnemySpawnConditionCheck");
static_assert(sizeof(RSBattlePlayer_C_GetEnemySpawnConditionCheck) == 0x000001, "Wrong size on RSBattlePlayer_C_GetEnemySpawnConditionCheck");
static_assert(offsetof(RSBattlePlayer_C_GetEnemySpawnConditionCheck, IsSpawnOK) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemySpawnConditionCheck::IsSpawnOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartEnemyCrashVisionHitEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StartEnemyCrashVisionHitEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartEnemyCrashVisionHitEffect");
static_assert(sizeof(RSBattlePlayer_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong size on RSBattlePlayer_C_StartEnemyCrashVisionHitEffect");
static_assert(offsetof(RSBattlePlayer_C_StartEnemyCrashVisionHitEffect, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_StartEnemyCrashVisionHitEffect::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartEnemyCrashVisionHitUniqueEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(sizeof(RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong size on RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(offsetof(RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BindingCrashVisionEnemy
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BindingCrashVisionEnemy final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BindingCrashVisionEnemy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BindingCrashVisionEnemy");
static_assert(sizeof(RSBattlePlayer_C_BindingCrashVisionEnemy) == 0x000001, "Wrong size on RSBattlePlayer_C_BindingCrashVisionEnemy");
static_assert(offsetof(RSBattlePlayer_C_BindingCrashVisionEnemy, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_BindingCrashVisionEnemy::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.em8300_DeadBattleSimulator
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8300_DeadBattleSimulator final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8300_DeadBattleSimulator");
static_assert(sizeof(RSBattlePlayer_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8300_DeadBattleSimulator");
static_assert(offsetof(RSBattlePlayer_C_Em8300_DeadBattleSimulator, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8300_DeadBattleSimulator::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyRepop
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyRepop final
{
public:
	bool                                          Repop;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyRepop) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyRepop");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyRepop) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyRepop");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyRepop, Repop) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyRepop::Repop' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SAS_CommonEnd
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SAS_CommonEnd final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelSASCost;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CCB[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainTime;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_SAS_CommonEnd) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SAS_CommonEnd");
static_assert(sizeof(RSBattlePlayer_C_SAS_CommonEnd) == 0x000008, "Wrong size on RSBattlePlayer_C_SAS_CommonEnd");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonEnd, SAS_Kind) == 0x000000, "Member 'RSBattlePlayer_C_SAS_CommonEnd::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonEnd, bCancelSASCost) == 0x000001, "Member 'RSBattlePlayer_C_SAS_CommonEnd::bCancelSASCost' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonEnd, bDummy) == 0x000002, "Member 'RSBattlePlayer_C_SAS_CommonEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonEnd, RemainTime) == 0x000004, "Member 'RSBattlePlayer_C_SAS_CommonEnd::RemainTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SAS_CommonStart
// 0x0038 (0x0038 - 0x0000)
struct RSBattlePlayer_C_SAS_CommonStart final
{
public:
	struct FFSASCommand                           SAS_Command;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SAS_CommonStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SAS_CommonStart");
static_assert(sizeof(RSBattlePlayer_C_SAS_CommonStart) == 0x000038, "Wrong size on RSBattlePlayer_C_SAS_CommonStart");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonStart, SAS_Command) == 0x000000, "Member 'RSBattlePlayer_C_SAS_CommonStart::SAS_Command' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SAS_CommonStart, Dummy) == 0x000030, "Member 'RSBattlePlayer_C_SAS_CommonStart::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBarrierComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetBarrierComponent final
{
public:
	class UBP_EnemyBarrierComponent_C*            Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBarrierComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBarrierComponent");
static_assert(sizeof(RSBattlePlayer_C_GetBarrierComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetBarrierComponent");
static_assert(offsetof(RSBattlePlayer_C_GetBarrierComponent, Component) == 0x000000, "Member 'RSBattlePlayer_C_GetBarrierComponent::Component' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnpcComponent final
{
public:
	class UBP_ENpcComponent_C*                    Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnpcComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnpcComponent");
static_assert(sizeof(RSBattlePlayer_C_GetEnpcComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnpcComponent");
static_assert(offsetof(RSBattlePlayer_C_GetEnpcComponent, Component) == 0x000000, "Member 'RSBattlePlayer_C_GetEnpcComponent::Component' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcSequencerComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnpcSequencerComponent final
{
public:
	class UBP_ENPCSequencerComponent_C*           Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnpcSequencerComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnpcSequencerComponent");
static_assert(sizeof(RSBattlePlayer_C_GetEnpcSequencerComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnpcSequencerComponent");
static_assert(offsetof(RSBattlePlayer_C_GetEnpcSequencerComponent, Component) == 0x000000, "Member 'RSBattlePlayer_C_GetEnpcSequencerComponent::Component' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetPartner
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8000_GetPartner final
{
public:
	class AActor*                                 PartnerActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_GetPartner) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_GetPartner");
static_assert(sizeof(RSBattlePlayer_C_Em8000_GetPartner) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8000_GetPartner");
static_assert(offsetof(RSBattlePlayer_C_Em8000_GetPartner, PartnerActor) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_GetPartner::PartnerActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_BulletAttackEnd
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_BulletAttackEnd final
{
public:
	EBulletType                                   BulletType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_BulletAttackEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_BulletAttackEnd");
static_assert(sizeof(RSBattlePlayer_C_Em8200_BulletAttackEnd) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_BulletAttackEnd");
static_assert(offsetof(RSBattlePlayer_C_Em8200_BulletAttackEnd, BulletType) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_BulletAttackEnd::BulletType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_BulletAttackEnd, bEnd) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_BulletAttackEnd::bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartTelepoMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartTelepoMove final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartTelepoMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_StartTelepoMove");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartTelepoMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_StartTelepoMove");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartTelepoMove, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartTelepoMove::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndTelepoMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_EndTelepoMove final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EndTelepoMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_EndTelepoMove");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EndTelepoMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_EndTelepoMove");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EndTelepoMove, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EndTelepoMove::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CalcTelepoMoveLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation final
{
public:
	ETelepoMoveType_em8200                        TelepoType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CCC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TelepoMoveLocation;                                // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation, TelepoType) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation::TelepoType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation, TelepoMoveLocation) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation::TelepoMoveLocation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetTelepoMoveLocation
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8200_GetTelepoMoveLocation final
{
public:
	struct FVector                                OutputTelepoMoveLocation;                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_GetTelepoMoveLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_GetTelepoMoveLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_GetTelepoMoveLocation) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8200_GetTelepoMoveLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetTelepoMoveLocation, OutputTelepoMoveLocation) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_GetTelepoMoveLocation::OutputTelepoMoveLocation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetTelepoMoveLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetTelepoMoveLocation final
{
public:
	struct FVector                                InputTelepoMoveLocation;                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetTelepoMoveLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_SetTelepoMoveLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetTelepoMoveLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8200_SetTelepoMoveLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetTelepoMoveLocation, InputTelepoMoveLocation) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetTelepoMoveLocation::InputTelepoMoveLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetTelepoMoveLocation, Dummy) == 0x00000C, "Member 'RSBattlePlayer_C_Em8200_SetTelepoMoveLocation::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorPlayMontage
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8200_CopyActorPlayMontage final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CCD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CopyActorPlayMontage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8200_CopyActorPlayMontage");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CopyActorPlayMontage) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8200_CopyActorPlayMontage");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorPlayMontage, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CopyActorPlayMontage::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorPlayMontage, Montage) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_CopyActorPlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorPlayMontage, Dummy) == 0x000010, "Member 'RSBattlePlayer_C_Em8200_CopyActorPlayMontage::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorUpdate
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8200_CopyActorUpdate final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSec;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextState;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CopyActorUpdate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_CopyActorUpdate");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CopyActorUpdate) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8200_CopyActorUpdate");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorUpdate, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CopyActorUpdate::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorUpdate, DeltaSec) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_CopyActorUpdate::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorUpdate, NextState) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_CopyActorUpdate::NextState' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorUpdate, bEnd) == 0x00000C, "Member 'RSBattlePlayer_C_Em8200_CopyActorUpdate::bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorActive
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8200_CopyActorActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CCE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CopyActorActive) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_CopyActorActive");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CopyActorActive) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8200_CopyActorActive");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorActive, bActive) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CopyActorActive::bActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorActive, Param_Index) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_CopyActorActive::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorActive, Dummy) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_CopyActorActive::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetCopyActorAssultTotalTime
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime");
static_assert(sizeof(RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime, TotalTime) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime::TotalTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetCopyActorActive
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_GetCopyActorActive final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_GetCopyActorActive) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_GetCopyActorActive");
static_assert(sizeof(RSBattlePlayer_C_Em8200_GetCopyActorActive) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_GetCopyActorActive");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetCopyActorActive, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_GetCopyActorActive::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetCopyActorActive, bActive) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_GetCopyActorActive::bActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCopyActorLocation
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetCopyActorLocation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetCopyActorLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_SetCopyActorLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetCopyActorLocation) == 0x000014, "Wrong size on RSBattlePlayer_C_Em8200_SetCopyActorLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorLocation, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorLocation::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorLocation, NewLocation) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorLocation, Dummy) == 0x000010, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorLocation::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCopyActorRotation
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetCopyActorRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetCopyActorRotation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_SetCopyActorRotation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetCopyActorRotation) == 0x000014, "Wrong size on RSBattlePlayer_C_Em8200_SetCopyActorRotation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorRotation, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorRotation, NewRotation) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCopyActorRotation, Dummy) == 0x000010, "Member 'RSBattlePlayer_C_Em8200_SetCopyActorRotation::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetTargetableCopyActor
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8200_GetTargetableCopyActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CCF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   RSBattleCharacter;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_GetTargetableCopyActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8200_GetTargetableCopyActor");
static_assert(sizeof(RSBattlePlayer_C_Em8200_GetTargetableCopyActor) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8200_GetTargetableCopyActor");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetTargetableCopyActor, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_GetTargetableCopyActor::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetTargetableCopyActor, RSBattleCharacter) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_GetTargetableCopyActor::RSBattleCharacter' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StoreHomingElecStartEnd
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd) == 0x00001C, "Wrong size on RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd, StartLocation) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd::StartLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd, EndLocation) == 0x00000C, "Member 'RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd::EndLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd, Dummy) == 0x000018, "Member 'RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartSeeThrough final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartSeeThrough) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_StartSeeThrough");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartSeeThrough) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_StartSeeThrough");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartSeeThrough, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartSeeThrough::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSpStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsSpStart final
{
public:
	bool                                          bSpStart;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpStart_bSpStart;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSpStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsSpStart");
static_assert(sizeof(RSBattlePlayer_C_IsSpStart) == 0x000018, "Wrong size on RSBattlePlayer_C_IsSpStart");
static_assert(offsetof(RSBattlePlayer_C_IsSpStart, bSpStart) == 0x000000, "Member 'RSBattlePlayer_C_IsSpStart::bSpStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpStart, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_IsSpStart::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpStart, CallFunc_IsSpStart_bSpStart) == 0x000010, "Member 'RSBattlePlayer_C_IsSpStart::CallFunc_IsSpStart_bSpStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpStart, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_IsSpStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetSpStart
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetSpStart final
{
public:
	bool                                          bSpStart;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetSpStart) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetSpStart");
static_assert(sizeof(RSBattlePlayer_C_SetSpStart) == 0x000018, "Wrong size on RSBattlePlayer_C_SetSpStart");
static_assert(offsetof(RSBattlePlayer_C_SetSpStart, bSpStart) == 0x000000, "Member 'RSBattlePlayer_C_SetSpStart::bSpStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSpStart, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_SetSpStart::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSpStart, CallFunc_GetEnpcComp_ReturnComp) == 0x000008, "Member 'RSBattlePlayer_C_SetSpStart::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetSpStart, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetSpStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_PillarIceExtendTime
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_PillarIceExtendTime final
{
public:
	float                                         ExtendTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_PillarIceExtendTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_PillarIceExtendTime");
static_assert(sizeof(RSBattlePlayer_C_Em8200_PillarIceExtendTime) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_PillarIceExtendTime");
static_assert(offsetof(RSBattlePlayer_C_Em8200_PillarIceExtendTime, ExtendTime) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_PillarIceExtendTime::ExtendTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_PillarIceExtendTime, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_PillarIceExtendTime::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetSpShockWaveLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetSpShockWaveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetSpShockWaveLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_SetSpShockWaveLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetSpShockWaveLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8200_SetSpShockWaveLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetSpShockWaveLocation, Location) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetSpShockWaveLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetSpShockWaveLocation, Dummy) == 0x00000C, "Member 'RSBattlePlayer_C_Em8200_SetSpShockWaveLocation::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_ApplyCommonBranch
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8210_ApplyCommonBranch final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8210_ApplyCommonBranch) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8210_ApplyCommonBranch");
static_assert(sizeof(RSBattlePlayer_C_Em8210_ApplyCommonBranch) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8210_ApplyCommonBranch");
static_assert(offsetof(RSBattlePlayer_C_Em8210_ApplyCommonBranch, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8210_ApplyCommonBranch::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_IsAttackDriveMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_IsAttackDriveMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_IsAttackDriveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_IsAttackDriveMode");
static_assert(sizeof(RSBattlePlayer_C_Em8000_IsAttackDriveMode) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_IsAttackDriveMode");
static_assert(offsetof(RSBattlePlayer_C_Em8000_IsAttackDriveMode, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_IsAttackDriveMode::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_IsAttackBrainField
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_IsAttackBrainField final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_IsAttackBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_IsAttackBrainField");
static_assert(sizeof(RSBattlePlayer_C_Em8000_IsAttackBrainField) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_IsAttackBrainField");
static_assert(offsetof(RSBattlePlayer_C_Em8000_IsAttackBrainField, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_IsAttackBrainField::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_FireBomb
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8000_FireBomb final
{
public:
	class AActor*                                 Parent;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHard;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_FireBomb) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_FireBomb");
static_assert(sizeof(RSBattlePlayer_C_Em8000_FireBomb) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8000_FireBomb");
static_assert(offsetof(RSBattlePlayer_C_Em8000_FireBomb, Parent) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_FireBomb::Parent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_FireBomb, bHard) == 0x000008, "Member 'RSBattlePlayer_C_Em8000_FireBomb::bHard' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_FireBomb, Dummy) == 0x000009, "Member 'RSBattlePlayer_C_Em8000_FireBomb::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetBattleProcess
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8000_SetBattleProcess final
{
public:
	int32                                         Process;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_SetBattleProcess) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8000_SetBattleProcess");
static_assert(sizeof(RSBattlePlayer_C_Em8000_SetBattleProcess) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8000_SetBattleProcess");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetBattleProcess, Process) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_SetBattleProcess::Process' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetBattleProcess, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_Em8000_SetBattleProcess::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckAbleInterceptInReactionChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CheckAbleInterceptInReactionChance final
{
public:
	bool                                          bAbleIntercept;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckAbleInterceptInReactionChance) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckAbleInterceptInReactionChance");
static_assert(sizeof(RSBattlePlayer_C_CheckAbleInterceptInReactionChance) == 0x000001, "Wrong size on RSBattlePlayer_C_CheckAbleInterceptInReactionChance");
static_assert(offsetof(RSBattlePlayer_C_CheckAbleInterceptInReactionChance, bAbleIntercept) == 0x000000, "Member 'RSBattlePlayer_C_CheckAbleInterceptInReactionChance::bAbleIntercept' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetAutoAimRate
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8010_SetAutoAimRate final
{
public:
	float                                         NewRate;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_SetAutoAimRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8010_SetAutoAimRate");
static_assert(sizeof(RSBattlePlayer_C_Em8010_SetAutoAimRate) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8010_SetAutoAimRate");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetAutoAimRate, NewRate) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_SetAutoAimRate::NewRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetAutoAimRate, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_Em8010_SetAutoAimRate::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Ch0500_StartSeeThrough
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Ch0500_StartSeeThrough final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Ch0500_StartSeeThrough) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Ch0500_StartSeeThrough");
static_assert(sizeof(RSBattlePlayer_C_Ch0500_StartSeeThrough) == 0x000001, "Wrong size on RSBattlePlayer_C_Ch0500_StartSeeThrough");
static_assert(offsetof(RSBattlePlayer_C_Ch0500_StartSeeThrough, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Ch0500_StartSeeThrough::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetTriggerLocation
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_SetTriggerLocation final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_SetTriggerLocation) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_SetTriggerLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8000_SetTriggerLocation) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_SetTriggerLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetTriggerLocation, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_SetTriggerLocation::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetStealthReactionInterval
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_SetStealthReactionInterval final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetStealthReactionInterval) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetStealthReactionInterval");
static_assert(sizeof(RSBattlePlayer_C_SetStealthReactionInterval) == 0x000001, "Wrong size on RSBattlePlayer_C_SetStealthReactionInterval");
static_assert(offsetof(RSBattlePlayer_C_SetStealthReactionInterval, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_SetStealthReactionInterval::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SelectChakramCombo
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Np1100_SelectChakramCombo final
{
public:
	class FString                                 ComboType;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_SelectChakramCombo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Np1100_SelectChakramCombo");
static_assert(sizeof(RSBattlePlayer_C_Np1100_SelectChakramCombo) == 0x000010, "Wrong size on RSBattlePlayer_C_Np1100_SelectChakramCombo");
static_assert(offsetof(RSBattlePlayer_C_Np1100_SelectChakramCombo, ComboType) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_SelectChakramCombo::ComboType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_GetChakramComboList
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Np1100_GetChakramComboList final
{
public:
	TArray<uint8>                                 ChakramComboList;                                  // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_GetChakramComboList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Np1100_GetChakramComboList");
static_assert(sizeof(RSBattlePlayer_C_Np1100_GetChakramComboList) == 0x000010, "Wrong size on RSBattlePlayer_C_Np1100_GetChakramComboList");
static_assert(offsetof(RSBattlePlayer_C_Np1100_GetChakramComboList, ChakramComboList) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_GetChakramComboList::ChakramComboList' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Ch0900_CreateCopy
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Ch0900_CreateCopy final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Ch0900_CreateCopy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Ch0900_CreateCopy");
static_assert(sizeof(RSBattlePlayer_C_Ch0900_CreateCopy) == 0x000001, "Wrong size on RSBattlePlayer_C_Ch0900_CreateCopy");
static_assert(offsetof(RSBattlePlayer_C_Ch0900_CreateCopy, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Ch0900_CreateCopy::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartHidden
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_StartHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_StartHidden) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_StartHidden");
static_assert(sizeof(RSBattlePlayer_C_Np1100_StartHidden) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_StartHidden");
static_assert(offsetof(RSBattlePlayer_C_Np1100_StartHidden, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_StartHidden::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_EndHidden
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_EndHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_EndHidden) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_EndHidden");
static_assert(sizeof(RSBattlePlayer_C_Np1100_EndHidden) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_EndHidden");
static_assert(offsetof(RSBattlePlayer_C_Np1100_EndHidden, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_EndHidden::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SetBattlePhase
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Np1100_SetBattlePhase final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_SetBattlePhase) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Np1100_SetBattlePhase");
static_assert(sizeof(RSBattlePlayer_C_Np1100_SetBattlePhase) == 0x000008, "Wrong size on RSBattlePlayer_C_Np1100_SetBattlePhase");
static_assert(offsetof(RSBattlePlayer_C_Np1100_SetBattlePhase, Phase) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_SetBattlePhase::Phase' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Np1100_SetBattlePhase, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_Np1100_SetBattlePhase::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetChangeEm8010Process
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8000_SetChangeEm8010Process final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_SetChangeEm8010Process) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8000_SetChangeEm8010Process");
static_assert(sizeof(RSBattlePlayer_C_Em8000_SetChangeEm8010Process) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8000_SetChangeEm8010Process");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetChangeEm8010Process, Value) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_SetChangeEm8010Process::Value' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetChangeEm8010Process, Dummy) == 0x000004, "Member 'RSBattlePlayer_C_Em8000_SetChangeEm8010Process::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetChangeEm8010Process
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8000_GetChangeEm8010Process final
{
public:
	int32                                         Process;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_GetChangeEm8010Process) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8000_GetChangeEm8010Process");
static_assert(sizeof(RSBattlePlayer_C_Em8000_GetChangeEm8010Process) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8000_GetChangeEm8010Process");
static_assert(offsetof(RSBattlePlayer_C_Em8000_GetChangeEm8010Process, Process) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_GetChangeEm8010Process::Process' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ExecChangeEm8010
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_ExecChangeEm8010 final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ExecChangeEm8010) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_ExecChangeEm8010");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ExecChangeEm8010) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_ExecChangeEm8010");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ExecChangeEm8010, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ExecChangeEm8010::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SetThrowCount
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Np1100_SetThrowCount final
{
public:
	bool                                          bAdd;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_SetThrowCount) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_SetThrowCount");
static_assert(sizeof(RSBattlePlayer_C_Np1100_SetThrowCount) == 0x000002, "Wrong size on RSBattlePlayer_C_Np1100_SetThrowCount");
static_assert(offsetof(RSBattlePlayer_C_Np1100_SetThrowCount, bAdd) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_SetThrowCount::bAdd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Np1100_SetThrowCount, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_Np1100_SetThrowCount::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ForceFinishMetamorphosis
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_ForceFinishMetamorphosis final
{
public:
	bool                                          bBrainFieldCancel;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIgnoreForceFinishMetamorphosis_bIgnore; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFinishType_bDummy;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishMetamorphosis_bDummy;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecMetamorphosis_bExec;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD2[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ForceFinishMetamorphosis) == 0x000004, "Wrong alignment on RSBattlePlayer_C_ForceFinishMetamorphosis");
static_assert(sizeof(RSBattlePlayer_C_ForceFinishMetamorphosis) == 0x000014, "Wrong size on RSBattlePlayer_C_ForceFinishMetamorphosis");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, bBrainFieldCancel) == 0x000000, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::bBrainFieldCancel' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_IsIgnoreForceFinishMetamorphosis_bIgnore) == 0x000002, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_IsIgnoreForceFinishMetamorphosis_bIgnore' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_SetFinishType_bDummy) == 0x000004, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_SetFinishType_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_FinishMetamorphosis_bDummy) == 0x000005, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_FinishMetamorphosis_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_IsExecMetamorphosis_bExec) == 0x000006, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_IsExecMetamorphosis_bExec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_GetName_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ForceFinishMetamorphosis, CallFunc_NotEqual_NameName_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_ForceFinishMetamorphosis::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_UseAttack_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_UseAttack_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_UseAttack_BrainTalk) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_UseAttack_BrainTalk");
static_assert(sizeof(RSBattlePlayer_C_Np1100_UseAttack_BrainTalk) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_UseAttack_BrainTalk");
static_assert(offsetof(RSBattlePlayer_C_Np1100_UseAttack_BrainTalk, Return) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_UseAttack_BrainTalk::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_UseSpTrigger_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk");
static_assert(sizeof(RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk");
static_assert(offsetof(RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk, Return) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UseAttackEnd_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk");
static_assert(sizeof(RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100UseAfterSpAttack_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk");
static_assert(sizeof(RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk");
static_assert(offsetof(RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartSpTriggerMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_StartSpTriggerMove final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_StartSpTriggerMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_StartSpTriggerMove");
static_assert(sizeof(RSBattlePlayer_C_Np1100_StartSpTriggerMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_StartSpTriggerMove");
static_assert(offsetof(RSBattlePlayer_C_Np1100_StartSpTriggerMove, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_StartSpTriggerMove::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_EndSpTriggerMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_EndSpTriggerMove final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_EndSpTriggerMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_EndSpTriggerMove");
static_assert(sizeof(RSBattlePlayer_C_Np1100_EndSpTriggerMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_EndSpTriggerMove");
static_assert(offsetof(RSBattlePlayer_C_Np1100_EndSpTriggerMove, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_EndSpTriggerMove::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetBattlePhase
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetBattlePhase final
{
public:
	EBattlePhase_em8210                           BattlePhase;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetBattlePhase) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetBattlePhase");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetBattlePhase) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_SetBattlePhase");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetBattlePhase, BattlePhase) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetBattlePhase::BattlePhase' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetBattlePhase, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_SetBattlePhase::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_GetBattlePhase final
{
public:
	EBattlePhase_em8210                           BattlePhase;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_GetBattlePhase) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_GetBattlePhase");
static_assert(sizeof(RSBattlePlayer_C_Em8200_GetBattlePhase) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_GetBattlePhase");
static_assert(offsetof(RSBattlePlayer_C_Em8200_GetBattlePhase, BattlePhase) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_GetBattlePhase::BattlePhase' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CanPlayExtraSasCutin
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin final
{
public:
	ESASCutinExtraID                              CutinID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlay;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin, CutinID) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin::CutinID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin, CanPlay) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin::CanPlay' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCanPlayExtraSasCutin
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin final
{
public:
	bool                                          bCanPlay;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESASCutinExtraID                              CutinID;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin) == 0x000003, "Wrong size on RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin, bCanPlay) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin::bCanPlay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin, CutinID) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin::CutinID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin, Return) == 0x000002, "Member 'RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PassedStartBrainFieldStartHp
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_PassedStartBrainFieldStartHp final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PassedStartBrainFieldStartHp) == 0x000001, "Wrong alignment on RSBattlePlayer_C_PassedStartBrainFieldStartHp");
static_assert(sizeof(RSBattlePlayer_C_PassedStartBrainFieldStartHp) == 0x000001, "Wrong size on RSBattlePlayer_C_PassedStartBrainFieldStartHp");
static_assert(offsetof(RSBattlePlayer_C_PassedStartBrainFieldStartHp, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_PassedStartBrainFieldStartHp::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartDodgeMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartDodgeMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_StartDodgeMove");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartDodgeMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_StartDodgeMove");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartDodgeMove, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartDodgeMove::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_CanStartDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8210_CanStartDodgeMove final
{
public:
	bool                                          CanStart;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8210_CanStartDodgeMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8210_CanStartDodgeMove");
static_assert(sizeof(RSBattlePlayer_C_Em8210_CanStartDodgeMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8210_CanStartDodgeMove");
static_assert(offsetof(RSBattlePlayer_C_Em8210_CanStartDodgeMove, CanStart) == 0x000000, "Member 'RSBattlePlayer_C_Em8210_CanStartDodgeMove::CanStart' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_EndDodgeMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8210_EndDodgeMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8210_EndDodgeMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8210_EndDodgeMove");
static_assert(sizeof(RSBattlePlayer_C_Em8210_EndDodgeMove) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8210_EndDodgeMove");
static_assert(offsetof(RSBattlePlayer_C_Em8210_EndDodgeMove, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8210_EndDodgeMove::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableDodgeJust
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_EnableDodgeJust final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EnableDodgeJust) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_EnableDodgeJust");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EnableDodgeJust) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_EnableDodgeJust");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableDodgeJust, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EnableDodgeJust::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableDodgeJust, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_EnableDodgeJust::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsEnableDodgeJust
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_IsEnableDodgeJust final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_IsEnableDodgeJust) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_IsEnableDodgeJust");
static_assert(sizeof(RSBattlePlayer_C_Em8200_IsEnableDodgeJust) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_IsEnableDodgeJust");
static_assert(offsetof(RSBattlePlayer_C_Em8200_IsEnableDodgeJust, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_IsEnableDodgeJust::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnpcBulletAttackEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EnpcBulletAttackEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnpcBulletAttackEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnpcBulletAttackEnd");
static_assert(sizeof(RSBattlePlayer_C_EnpcBulletAttackEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_EnpcBulletAttackEnd");
static_assert(offsetof(RSBattlePlayer_C_EnpcBulletAttackEnd, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_EnpcBulletAttackEnd::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetFakeUniqueName
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8010_SetFakeUniqueName final
{
public:
	class FName                                   FakeName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_SetFakeUniqueName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8010_SetFakeUniqueName");
static_assert(sizeof(RSBattlePlayer_C_Em8010_SetFakeUniqueName) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8010_SetFakeUniqueName");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetFakeUniqueName, FakeName) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_SetFakeUniqueName::FakeName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetFakeUniqueName, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_Em8010_SetFakeUniqueName::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetFakeUniqueName
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8000_SetFakeUniqueName final
{
public:
	class FName                                   FakeName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_SetFakeUniqueName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8000_SetFakeUniqueName");
static_assert(sizeof(RSBattlePlayer_C_Em8000_SetFakeUniqueName) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8000_SetFakeUniqueName");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetFakeUniqueName, FakeName) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_SetFakeUniqueName::FakeName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetFakeUniqueName, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_Em8000_SetFakeUniqueName::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Is Unique Enpc Type
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Is_Unique_Enpc_Type final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Is_Unique_Enpc_Type) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Is_Unique_Enpc_Type");
static_assert(sizeof(RSBattlePlayer_C_Is_Unique_Enpc_Type) == 0x000001, "Wrong size on RSBattlePlayer_C_Is_Unique_Enpc_Type");
static_assert(offsetof(RSBattlePlayer_C_Is_Unique_Enpc_Type, IsUnique) == 0x000000, "Member 'RSBattlePlayer_C_Is_Unique_Enpc_Type::IsUnique' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_AttachMask
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_AttachMask final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_AttachMask) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_AttachMask");
static_assert(sizeof(RSBattlePlayer_C_Em8200_AttachMask) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_AttachMask");
static_assert(offsetof(RSBattlePlayer_C_Em8200_AttachMask, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_AttachMask::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetLastPhaseHpRate
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetLastPhaseHpRate final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetLastPhaseHpRate) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetLastPhaseHpRate");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetLastPhaseHpRate) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_SetLastPhaseHpRate");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetLastPhaseHpRate, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetLastPhaseHpRate::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartSpAfterVoice
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Np1100_StartSpAfterVoice final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Np1100_StartSpAfterVoice) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Np1100_StartSpAfterVoice");
static_assert(sizeof(RSBattlePlayer_C_Np1100_StartSpAfterVoice) == 0x000001, "Wrong size on RSBattlePlayer_C_Np1100_StartSpAfterVoice");
static_assert(offsetof(RSBattlePlayer_C_Np1100_StartSpAfterVoice, Return) == 0x000000, "Member 'RSBattlePlayer_C_Np1100_StartSpAfterVoice::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcDyingHpRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetEnpcDyingHpRate final
{
public:
	float                                         EnpcDyingHpRate;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnpcDyingHpRate) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetEnpcDyingHpRate");
static_assert(sizeof(RSBattlePlayer_C_GetEnpcDyingHpRate) == 0x000004, "Wrong size on RSBattlePlayer_C_GetEnpcDyingHpRate");
static_assert(offsetof(RSBattlePlayer_C_GetEnpcDyingHpRate, EnpcDyingHpRate) == 0x000000, "Member 'RSBattlePlayer_C_GetEnpcDyingHpRate::EnpcDyingHpRate' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_PlayBattleVoice
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_PlayBattleVoice final
{
public:
	EBattleVoice_em8200                           EBattleVoiceType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_PlayBattleVoice) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_PlayBattleVoice");
static_assert(sizeof(RSBattlePlayer_C_Em8200_PlayBattleVoice) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_PlayBattleVoice");
static_assert(offsetof(RSBattlePlayer_C_Em8200_PlayBattleVoice, EBattleVoiceType) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_PlayBattleVoice::EBattleVoiceType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_PlayBattleVoice, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_PlayBattleVoice::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetExecRush
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8010_SetExecRush final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_SetExecRush) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_SetExecRush");
static_assert(sizeof(RSBattlePlayer_C_Em8010_SetExecRush) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8010_SetExecRush");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetExecRush, bExec) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_SetExecRush::bExec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8010_SetExecRush, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_Em8010_SetExecRush::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SuicideInformOwner
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_SuicideInformOwner final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SuicideInformOwner) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SuicideInformOwner");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SuicideInformOwner) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_SuicideInformOwner");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SuicideInformOwner, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SuicideInformOwner::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_NotifyDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_NotifyDead final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_NotifyDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_NotifyDead");
static_assert(sizeof(RSBattlePlayer_C_Em8000_NotifyDead) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_NotifyDead");
static_assert(offsetof(RSBattlePlayer_C_Em8000_NotifyDead, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_NotifyDead::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_HomingElecEnd_BrainTalk
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk");
static_assert(sizeof(RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk");
static_assert(offsetof(RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetWaitEventParty
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetWaitEventParty final
{
public:
	bool                                          InWait;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetWaitEventParty) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetWaitEventParty");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetWaitEventParty) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_SetWaitEventParty");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetWaitEventParty, InWait) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetWaitEventParty::InWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetWaitEventParty, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_SetWaitEventParty::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8000_SetAction final
{
public:
	EPlayerAIBattleThinkType                      AiType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_SetAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_SetAction");
static_assert(sizeof(RSBattlePlayer_C_Em8000_SetAction) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8000_SetAction");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetAction, AiType) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_SetAction::AiType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_SetAction, Dummy) == 0x000001, "Member 'RSBattlePlayer_C_Em8000_SetAction::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateDodgeJust
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_UpdateDodgeJust final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_UpdateDodgeJust) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_UpdateDodgeJust");
static_assert(sizeof(RSBattlePlayer_C_Em8200_UpdateDodgeJust) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_UpdateDodgeJust");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateDodgeJust, DeltaSec) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_UpdateDodgeJust::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateDodgeJust, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_UpdateDodgeJust::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_StartAppearEffect
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8290_StartAppearEffect final
{
public:
	bool                                          InAppear;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8290_StartAppearEffect) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8290_StartAppearEffect");
static_assert(sizeof(RSBattlePlayer_C_Em8290_StartAppearEffect) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8290_StartAppearEffect");
static_assert(offsetof(RSBattlePlayer_C_Em8290_StartAppearEffect, InAppear) == 0x000000, "Member 'RSBattlePlayer_C_Em8290_StartAppearEffect::InAppear' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8290_StartAppearEffect, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8290_StartAppearEffect::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_SetSafeDestroy
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8290_SetSafeDestroy final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8290_SetSafeDestroy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8290_SetSafeDestroy");
static_assert(sizeof(RSBattlePlayer_C_Em8290_SetSafeDestroy) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8290_SetSafeDestroy");
static_assert(offsetof(RSBattlePlayer_C_Em8290_SetSafeDestroy, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8290_SetSafeDestroy::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_StartDisappear
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8290_StartDisappear final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8290_StartDisappear) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8290_StartDisappear");
static_assert(sizeof(RSBattlePlayer_C_Em8290_StartDisappear) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8290_StartDisappear");
static_assert(offsetof(RSBattlePlayer_C_Em8290_StartDisappear, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8290_StartDisappear::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Ch0900_ForceCopyDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Ch0900_ForceCopyDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Ch0900_ForceCopyDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Ch0900_ForceCopyDead");
static_assert(sizeof(RSBattlePlayer_C_Ch0900_ForceCopyDead) == 0x000001, "Wrong size on RSBattlePlayer_C_Ch0900_ForceCopyDead");
static_assert(offsetof(RSBattlePlayer_C_Ch0900_ForceCopyDead, Dummy) == 0x000000, "Member 'RSBattlePlayer_C_Ch0900_ForceCopyDead::Dummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartDodgeJustFlash
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartDodgeJustFlash final
{
public:
	float                                         FlashIntervalTime;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartDodgeJustFlash) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_StartDodgeJustFlash");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartDodgeJustFlash) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_StartDodgeJustFlash");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartDodgeJustFlash, FlashIntervalTime) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartDodgeJustFlash::FlashIntervalTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartDodgeJustFlash, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_StartDodgeJustFlash::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateDodgeJustFlash
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash");
static_assert(sizeof(RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash, DeltaSec) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndDodgeJustFlash
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_EndDodgeJustFlash final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EndDodgeJustFlash) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_EndDodgeJustFlash");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EndDodgeJustFlash) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_EndDodgeJustFlash");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EndDodgeJustFlash, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EndDodgeJustFlash::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetMaskVisibility
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetMaskVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetMaskVisibility) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetMaskVisibility");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetMaskVisibility) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_SetMaskVisibility");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetMaskVisibility, NewVisibility) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetMaskVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetMaskVisibility, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_SetMaskVisibility::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableTargetableCopyActor
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_EnableTargetableCopyActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EnableTargetableCopyActor) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_EnableTargetableCopyActor");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EnableTargetableCopyActor) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_EnableTargetableCopyActor");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableTargetableCopyActor, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EnableTargetableCopyActor::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableTargetableCopyActor, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_EnableTargetableCopyActor::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetEyeMaterial
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_SetEyeMaterial final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_SetEyeMaterial) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_SetEyeMaterial");
static_assert(sizeof(RSBattlePlayer_C_Em8200_SetEyeMaterial) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_SetEyeMaterial");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetEyeMaterial, On) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_SetEyeMaterial::On' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_SetEyeMaterial, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_SetEyeMaterial::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_1stAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_1stAttack final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_1stAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_1stAttack");
static_assert(sizeof(RSBattlePlayer_C_Em8000_1stAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_1stAttack");
static_assert(offsetof(RSBattlePlayer_C_Em8000_1stAttack, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_1stAttack::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsTemporaryDriveMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsTemporaryDriveMode final
{
public:
	bool                                          IsTempDrive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsTemporaryDriveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsTemporaryDriveMode");
static_assert(sizeof(RSBattlePlayer_C_IsTemporaryDriveMode) == 0x000001, "Wrong size on RSBattlePlayer_C_IsTemporaryDriveMode");
static_assert(offsetof(RSBattlePlayer_C_IsTemporaryDriveMode, IsTempDrive) == 0x000000, "Member 'RSBattlePlayer_C_IsTemporaryDriveMode::IsTempDrive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_StartFinishMetamorphosis
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_StartFinishMetamorphosis final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_StartFinishMetamorphosis) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_StartFinishMetamorphosis");
static_assert(sizeof(RSBattlePlayer_C_Em8010_StartFinishMetamorphosis) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_StartFinishMetamorphosis");
static_assert(offsetof(RSBattlePlayer_C_Em8010_StartFinishMetamorphosis, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_StartFinishMetamorphosis::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueCondition_OpenBrainField
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUniqueCondition_OpenBrainField final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueCondition_OpenBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUniqueCondition_OpenBrainField");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueCondition_OpenBrainField) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUniqueCondition_OpenBrainField");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueCondition_OpenBrainField, bOK) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueCondition_OpenBrainField::bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_EndUniqueNoDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8210_EndUniqueNoDead final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8210_EndUniqueNoDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8210_EndUniqueNoDead");
static_assert(sizeof(RSBattlePlayer_C_Em8210_EndUniqueNoDead) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8210_EndUniqueNoDead");
static_assert(offsetof(RSBattlePlayer_C_Em8210_EndUniqueNoDead, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8210_EndUniqueNoDead::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsRegisterTelepoMoveLocation
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation final
{
public:
	bool                                          IsRegister;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation, IsRegister) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation::IsRegister' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueCondition_Drive
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUniqueCondition_Drive final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueCondition_Drive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUniqueCondition_Drive");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueCondition_Drive) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUniqueCondition_Drive");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueCondition_Drive, bOK) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueCondition_Drive::bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsAttachMask
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_IsAttachMask final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_IsAttachMask) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_IsAttachMask");
static_assert(sizeof(RSBattlePlayer_C_Em8200_IsAttachMask) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_IsAttachMask");
static_assert(offsetof(RSBattlePlayer_C_Em8200_IsAttachMask, bAttach) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_IsAttachMask::bAttach' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsMaskVisible
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_IsMaskVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_IsMaskVisible) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_IsMaskVisible");
static_assert(sizeof(RSBattlePlayer_C_Em8200_IsMaskVisible) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_IsMaskVisible");
static_assert(offsetof(RSBattlePlayer_C_Em8200_IsMaskVisible, IsVisible) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_IsMaskVisible::IsVisible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorWarmUp
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_CopyActorWarmUp final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_CopyActorWarmUp) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_CopyActorWarmUp");
static_assert(sizeof(RSBattlePlayer_C_Em8200_CopyActorWarmUp) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_CopyActorWarmUp");
static_assert(offsetof(RSBattlePlayer_C_Em8200_CopyActorWarmUp, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_CopyActorWarmUp::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartSpPsychic
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartSpPsychic final
{
public:
	int32                                         StartPsychicType;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shot;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartSpPsychic) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_StartSpPsychic");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartSpPsychic) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8200_StartSpPsychic");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartSpPsychic, StartPsychicType) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartSpPsychic::StartPsychicType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartSpPsychic, Shot) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_StartSpPsychic::Shot' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartSpPsychic, Return) == 0x000005, "Member 'RSBattlePlayer_C_Em8200_StartSpPsychic::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableAimCopyActor
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_EnableAimCopyActor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EnableAimCopyActor) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_EnableAimCopyActor");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EnableAimCopyActor) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_EnableAimCopyActor");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableAimCopyActor, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EnableAimCopyActor::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableAimCopyActor, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_EnableAimCopyActor::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartAimCopyActor
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8200_StartAimCopyActor final
{
public:
	float                                         AimSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAimAngle;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InternalLock;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ToCamera;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD3[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_StartAimCopyActor) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_StartAimCopyActor");
static_assert(sizeof(RSBattlePlayer_C_Em8200_StartAimCopyActor) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8200_StartAimCopyActor");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, AimSpeed) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::AimSpeed' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, MaxAimAngle) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::MaxAimAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, InternalLock) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::InternalLock' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, ToCamera) == 0x000009, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::ToCamera' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, SocketName) == 0x00000C, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::SocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_StartAimCopyActor, Return) == 0x000014, "Member 'RSBattlePlayer_C_Em8200_StartAimCopyActor::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_TriggerSequenceAfter
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8200_TriggerSequenceAfter final
{
public:
	bool                                          bAfter;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_TriggerSequenceAfter) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_TriggerSequenceAfter");
static_assert(sizeof(RSBattlePlayer_C_Em8200_TriggerSequenceAfter) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8200_TriggerSequenceAfter");
static_assert(offsetof(RSBattlePlayer_C_Em8200_TriggerSequenceAfter, bAfter) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_TriggerSequenceAfter::bAfter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_TriggerSequenceAfter, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8200_TriggerSequenceAfter::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageMove
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_StartDamageMove final
{
public:
	struct FVector                                DamageDir;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadMove;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Duumy;                                             // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartDamageMove) == 0x000004, "Wrong alignment on RSBattlePlayer_C_StartDamageMove");
static_assert(sizeof(RSBattlePlayer_C_StartDamageMove) == 0x000014, "Wrong size on RSBattlePlayer_C_StartDamageMove");
static_assert(offsetof(RSBattlePlayer_C_StartDamageMove, DamageDir) == 0x000000, "Member 'RSBattlePlayer_C_StartDamageMove::DamageDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageMove, Power) == 0x00000C, "Member 'RSBattlePlayer_C_StartDamageMove::Power' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageMove, DeadMove) == 0x000010, "Member 'RSBattlePlayer_C_StartDamageMove::DeadMove' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageMove, Duumy) == 0x000011, "Member 'RSBattlePlayer_C_StartDamageMove::Duumy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartDamageMove, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_StartDamageMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableIntenceVoice
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8200_EnableIntenceVoice final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EnableIntenceVoice) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8200_EnableIntenceVoice");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EnableIntenceVoice) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8200_EnableIntenceVoice");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EnableIntenceVoice, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EnableIntenceVoice::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetShockwaveEffectArray
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8000_GetShockwaveEffectArray final
{
public:
	TArray<class URSParticleSystemComponentBase*> EffectArray;                                       // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_GetShockwaveEffectArray) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_GetShockwaveEffectArray");
static_assert(sizeof(RSBattlePlayer_C_Em8000_GetShockwaveEffectArray) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8000_GetShockwaveEffectArray");
static_assert(offsetof(RSBattlePlayer_C_Em8000_GetShockwaveEffectArray, EffectArray) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_GetShockwaveEffectArray::EffectArray' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Clear
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_SetElem
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CD4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem, Particle) == 0x000008, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem::Particle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem, bDummy) == 0x000010, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Get
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8000_ShockwaveEffect_Get final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CD5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Get) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_ShockwaveEffect_Get");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Get) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8000_ShockwaveEffect_Get");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Get, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Get::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Get, Particle) == 0x000008, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Get::Particle' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Add
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8000_ShockwaveEffect_Add final
{
public:
	class URSParticleSystemComponentBase*         Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Add) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8000_ShockwaveEffect_Add");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Add) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8000_ShockwaveEffect_Add");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Add, Particle) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Add::Particle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Add, Param_Index) == 0x000008, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Add::Param_Index' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Deactivate
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate");
static_assert(sizeof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate");
static_assert(offsetof(RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_PermitBrainField
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_PermitBrainField final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_PermitBrainField) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_PermitBrainField");
static_assert(sizeof(RSBattlePlayer_C_Em8000_PermitBrainField) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_PermitBrainField");
static_assert(offsetof(RSBattlePlayer_C_Em8000_PermitBrainField, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_PermitBrainField::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetMetamorphosisParent
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8010_GetMetamorphosisParent final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCallActor_Actor;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_GetMetamorphosisParent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8010_GetMetamorphosisParent");
static_assert(sizeof(RSBattlePlayer_C_Em8010_GetMetamorphosisParent) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8010_GetMetamorphosisParent");
static_assert(offsetof(RSBattlePlayer_C_Em8010_GetMetamorphosisParent, ParentActor) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_GetMetamorphosisParent::ParentActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8010_GetMetamorphosisParent, CallFunc_GetCallActor_Actor) == 0x000008, "Member 'RSBattlePlayer_C_Em8010_GetMetamorphosisParent::CallFunc_GetCallActor_Actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8010_GetMetamorphosisParent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_Em8010_GetMetamorphosisParent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcOutlineAppendMesh
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetEnpcOutlineAppendMesh final
{
public:
	TArray<class UMeshComponent*>                 MeshComps;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnpcOutlineAppendMesh) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnpcOutlineAppendMesh");
static_assert(sizeof(RSBattlePlayer_C_GetEnpcOutlineAppendMesh) == 0x000010, "Wrong size on RSBattlePlayer_C_GetEnpcOutlineAppendMesh");
static_assert(offsetof(RSBattlePlayer_C_GetEnpcOutlineAppendMesh, MeshComps) == 0x000000, "Member 'RSBattlePlayer_C_GetEnpcOutlineAppendMesh::MeshComps' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_ExecAttack
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8290_ExecAttack final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8290_ExecAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8290_ExecAttack");
static_assert(sizeof(RSBattlePlayer_C_Em8290_ExecAttack) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8290_ExecAttack");
static_assert(offsetof(RSBattlePlayer_C_Em8290_ExecAttack, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_Em8290_ExecAttack::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetBattlePhase
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8220_GetBattlePhase final
{
public:
	int32                                         BattlePhase;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_GetBattlePhase) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_GetBattlePhase");
static_assert(sizeof(RSBattlePlayer_C_Em8220_GetBattlePhase) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8220_GetBattlePhase");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetBattlePhase, BattlePhase) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_GetBattlePhase::BattlePhase' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetBattlePhase
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8220_SetBattlePhase final
{
public:
	int32                                         BattlePhase;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_SetBattlePhase) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_SetBattlePhase");
static_assert(sizeof(RSBattlePlayer_C_Em8220_SetBattlePhase) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8220_SetBattlePhase");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetBattlePhase, BattlePhase) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_SetBattlePhase::BattlePhase' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetBattlePhase, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_SetBattlePhase::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginDispAttackCable
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8220_BeginDispAttackCable final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeginTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_BeginDispAttackCable) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_BeginDispAttackCable");
static_assert(sizeof(RSBattlePlayer_C_Em8220_BeginDispAttackCable) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8220_BeginDispAttackCable");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BeginDispAttackCable, CableIndex) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_BeginDispAttackCable::CableIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BeginDispAttackCable, BeginTime) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_BeginDispAttackCable::BeginTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BeginDispAttackCable, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_BeginDispAttackCable::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndDispAttackCable
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8220_EndDispAttackCable final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_EndDispAttackCable) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_EndDispAttackCable");
static_assert(sizeof(RSBattlePlayer_C_Em8220_EndDispAttackCable) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8220_EndDispAttackCable");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndDispAttackCable, CableIndex) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_EndDispAttackCable::CableIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndDispAttackCable, EndTime) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_EndDispAttackCable::EndTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndDispAttackCable, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_EndDispAttackCable::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_PlayAttackCableAnim
// 0x0090 (0x0090 - 0x0000)
struct RSBattlePlayer_C_Em8220_PlayAttackCableAnim final
{
public:
	struct FST_em8220_CableInfo                   CableInfo;                                         // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_PlayAttackCableAnim) == 0x000010, "Wrong alignment on RSBattlePlayer_C_Em8220_PlayAttackCableAnim");
static_assert(sizeof(RSBattlePlayer_C_Em8220_PlayAttackCableAnim) == 0x000090, "Wrong size on RSBattlePlayer_C_Em8220_PlayAttackCableAnim");
static_assert(offsetof(RSBattlePlayer_C_Em8220_PlayAttackCableAnim, CableInfo) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_PlayAttackCableAnim::CableInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_PlayAttackCableAnim, Return) == 0x000080, "Member 'RSBattlePlayer_C_Em8220_PlayAttackCableAnim::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndAttackCableAnim
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8220_EndAttackCableAnim final
{
public:
	int32                                         CableIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_EndAttackCableAnim) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_EndAttackCableAnim");
static_assert(sizeof(RSBattlePlayer_C_Em8220_EndAttackCableAnim) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8220_EndAttackCableAnim");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndAttackCableAnim, CableIndex) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_EndAttackCableAnim::CableIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndAttackCableAnim, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_EndAttackCableAnim::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndAllAttackCable
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8200_EndAllAttackCable final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8200_EndAllAttackCable) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8200_EndAllAttackCable");
static_assert(sizeof(RSBattlePlayer_C_Em8200_EndAllAttackCable) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8200_EndAllAttackCable");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EndAllAttackCable, bForce) == 0x000000, "Member 'RSBattlePlayer_C_Em8200_EndAllAttackCable::bForce' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EndAllAttackCable, EndTime) == 0x000004, "Member 'RSBattlePlayer_C_Em8200_EndAllAttackCable::EndTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8200_EndAllAttackCable, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em8200_EndAllAttackCable::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginCablePiller
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_BeginCablePiller final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_BeginCablePiller) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_BeginCablePiller");
static_assert(sizeof(RSBattlePlayer_C_Em8220_BeginCablePiller) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_BeginCablePiller");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BeginCablePiller, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_BeginCablePiller::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetCablePillerLocationList
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8220_GetCablePillerLocationList final
{
public:
	class AActor*                                 IgnoreActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LocationList;                                      // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_GetCablePillerLocationList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_GetCablePillerLocationList");
static_assert(sizeof(RSBattlePlayer_C_Em8220_GetCablePillerLocationList) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8220_GetCablePillerLocationList");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetCablePillerLocationList, IgnoreActor) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_GetCablePillerLocationList::IgnoreActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetCablePillerLocationList, LocationList) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_GetCablePillerLocationList::LocationList' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginNextCableSpike
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_BeginNextCableSpike final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_BeginNextCableSpike) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_BeginNextCableSpike");
static_assert(sizeof(RSBattlePlayer_C_Em8220_BeginNextCableSpike) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_BeginNextCableSpike");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BeginNextCableSpike, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_BeginNextCableSpike::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BulletAttackHit
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_Em8220_BulletAttackHit final
{
public:
	EBulletType                                   BulletType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CD7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_BulletAttackHit) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_BulletAttackHit");
static_assert(sizeof(RSBattlePlayer_C_Em8220_BulletAttackHit) == 0x000018, "Wrong size on RSBattlePlayer_C_Em8220_BulletAttackHit");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BulletAttackHit, BulletType) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_BulletAttackHit::BulletType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BulletAttackHit, HitActor) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_BulletAttackHit::HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_BulletAttackHit, Return) == 0x000010, "Member 'RSBattlePlayer_C_Em8220_BulletAttackHit::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetCableSpikeStartEffectTime
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime final
{
public:
	float                                         StartEffectTime;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime");
static_assert(sizeof(RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime, StartEffectTime) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime::StartEffectTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetCableSpikeStartEffectTime
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime final
{
public:
	float                                         StartEffectTime;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime");
static_assert(sizeof(RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime, StartEffectTime) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime::StartEffectTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnterDownEnpc
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EnterDownEnpc final
{
public:
	EPlayerDownType                               DownType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnterDownEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnterDownEnpc");
static_assert(sizeof(RSBattlePlayer_C_EnterDownEnpc) == 0x000002, "Wrong size on RSBattlePlayer_C_EnterDownEnpc");
static_assert(offsetof(RSBattlePlayer_C_EnterDownEnpc, DownType) == 0x000000, "Member 'RSBattlePlayer_C_EnterDownEnpc::DownType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnterDownEnpc, Return) == 0x000001, "Member 'RSBattlePlayer_C_EnterDownEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EntryBrainCrashAccessEnpc
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EntryBrainCrashAccessEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EntryBrainCrashAccessEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EntryBrainCrashAccessEnpc");
static_assert(sizeof(RSBattlePlayer_C_EntryBrainCrashAccessEnpc) == 0x000001, "Wrong size on RSBattlePlayer_C_EntryBrainCrashAccessEnpc");
static_assert(offsetof(RSBattlePlayer_C_EntryBrainCrashAccessEnpc, Return) == 0x000000, "Member 'RSBattlePlayer_C_EntryBrainCrashAccessEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetHighSpdLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8220_SetHighSpdLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_SetHighSpdLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_SetHighSpdLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8220_SetHighSpdLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8220_SetHighSpdLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetHighSpdLocation, InLocation) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_SetHighSpdLocation::InLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetHighSpdLocation, Return) == 0x00000C, "Member 'RSBattlePlayer_C_Em8220_SetHighSpdLocation::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetHighSpdLocation
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_Em8220_GetHighSpdLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_GetHighSpdLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_GetHighSpdLocation");
static_assert(sizeof(RSBattlePlayer_C_Em8220_GetHighSpdLocation) == 0x00000C, "Wrong size on RSBattlePlayer_C_Em8220_GetHighSpdLocation");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetHighSpdLocation, OutLocation) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_GetHighSpdLocation::OutLocation' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetHighSpdDistance
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8220_SetHighSpdDistance final
{
public:
	float                                         HighSpdDistance;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_SetHighSpdDistance) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_SetHighSpdDistance");
static_assert(sizeof(RSBattlePlayer_C_Em8220_SetHighSpdDistance) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8220_SetHighSpdDistance");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetHighSpdDistance, HighSpdDistance) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_SetHighSpdDistance::HighSpdDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetHighSpdDistance, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_SetHighSpdDistance::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetHighSpdDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8220_GetHighSpdDistance final
{
public:
	float                                         HighSpdDistance;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_GetHighSpdDistance) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_GetHighSpdDistance");
static_assert(sizeof(RSBattlePlayer_C_Em8220_GetHighSpdDistance) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8220_GetHighSpdDistance");
static_assert(offsetof(RSBattlePlayer_C_Em8220_GetHighSpdDistance, HighSpdDistance) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_GetHighSpdDistance::HighSpdDistance' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_RegisterShotData
// 0x00F0 (0x00F0 - 0x0000)
struct RSBattlePlayer_C_Em8220_RegisterShotData final
{
public:
	struct FFRegisterShotData                     RegisterShotData;                                  // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_RegisterShotData) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_RegisterShotData");
static_assert(sizeof(RSBattlePlayer_C_Em8220_RegisterShotData) == 0x0000F0, "Wrong size on RSBattlePlayer_C_Em8220_RegisterShotData");
static_assert(offsetof(RSBattlePlayer_C_Em8220_RegisterShotData, RegisterShotData) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_RegisterShotData::RegisterShotData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_RegisterShotData, Return) == 0x0000E8, "Member 'RSBattlePlayer_C_Em8220_RegisterShotData::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_UnregisterAllShotData
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_UnregisterAllShotData final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_UnregisterAllShotData) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_UnregisterAllShotData");
static_assert(sizeof(RSBattlePlayer_C_Em8220_UnregisterAllShotData) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_UnregisterAllShotData");
static_assert(offsetof(RSBattlePlayer_C_Em8220_UnregisterAllShotData, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_UnregisterAllShotData::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_UpdateShotData
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_Em8220_UpdateShotData final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_UpdateShotData) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8220_UpdateShotData");
static_assert(sizeof(RSBattlePlayer_C_Em8220_UpdateShotData) == 0x000008, "Wrong size on RSBattlePlayer_C_Em8220_UpdateShotData");
static_assert(offsetof(RSBattlePlayer_C_Em8220_UpdateShotData, DeltaSec) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_UpdateShotData::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_UpdateShotData, Return) == 0x000004, "Member 'RSBattlePlayer_C_Em8220_UpdateShotData::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_ChangeAccelerator
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8220_ChangeAccelerator final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_ChangeAccelerator) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_ChangeAccelerator");
static_assert(sizeof(RSBattlePlayer_C_Em8220_ChangeAccelerator) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8220_ChangeAccelerator");
static_assert(offsetof(RSBattlePlayer_C_Em8220_ChangeAccelerator, bStart) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_ChangeAccelerator::bStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_ChangeAccelerator, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8220_ChangeAccelerator::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StartSpCount
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_StartSpCount final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_StartSpCount) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_StartSpCount");
static_assert(sizeof(RSBattlePlayer_C_Em8220_StartSpCount) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_StartSpCount");
static_assert(offsetof(RSBattlePlayer_C_Em8220_StartSpCount, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_StartSpCount::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StartCopyActorSpTimer
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8220_StartCopyActorSpTimer final
{
public:
	class ARSCharacterBase*                       InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_StartCopyActorSpTimer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_StartCopyActorSpTimer");
static_assert(sizeof(RSBattlePlayer_C_Em8220_StartCopyActorSpTimer) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8220_StartCopyActorSpTimer");
static_assert(offsetof(RSBattlePlayer_C_Em8220_StartCopyActorSpTimer, InActor) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_StartCopyActorSpTimer::InActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_StartCopyActorSpTimer, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_StartCopyActorSpTimer::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndCopyActorSpTimer
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_Em8220_EndCopyActorSpTimer final
{
public:
	class ARSCharacterBase*                       InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_EndCopyActorSpTimer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_EndCopyActorSpTimer");
static_assert(sizeof(RSBattlePlayer_C_Em8220_EndCopyActorSpTimer) == 0x000010, "Wrong size on RSBattlePlayer_C_Em8220_EndCopyActorSpTimer");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndCopyActorSpTimer, InActor) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_EndCopyActorSpTimer::InActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_EndCopyActorSpTimer, Return) == 0x000008, "Member 'RSBattlePlayer_C_Em8220_EndCopyActorSpTimer::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PreStartSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_PreStartSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PreStartSequencerEnpc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PreStartSequencerEnpc");
static_assert(sizeof(RSBattlePlayer_C_PreStartSequencerEnpc) == 0x000008, "Wrong size on RSBattlePlayer_C_PreStartSequencerEnpc");
static_assert(offsetof(RSBattlePlayer_C_PreStartSequencerEnpc, IndexIn) == 0x000000, "Member 'RSBattlePlayer_C_PreStartSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PreStartSequencerEnpc, Return) == 0x000004, "Member 'RSBattlePlayer_C_PreStartSequencerEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FinishedSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_FinishedSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_FinishedSequencerEnpc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_FinishedSequencerEnpc");
static_assert(sizeof(RSBattlePlayer_C_FinishedSequencerEnpc) == 0x000008, "Wrong size on RSBattlePlayer_C_FinishedSequencerEnpc");
static_assert(offsetof(RSBattlePlayer_C_FinishedSequencerEnpc, IndexIn) == 0x000000, "Member 'RSBattlePlayer_C_FinishedSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_FinishedSequencerEnpc, Return) == 0x000004, "Member 'RSBattlePlayer_C_FinishedSequencerEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PostStartSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_PostStartSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PostStartSequencerEnpc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PostStartSequencerEnpc");
static_assert(sizeof(RSBattlePlayer_C_PostStartSequencerEnpc) == 0x000008, "Wrong size on RSBattlePlayer_C_PostStartSequencerEnpc");
static_assert(offsetof(RSBattlePlayer_C_PostStartSequencerEnpc, IndexIn) == 0x000000, "Member 'RSBattlePlayer_C_PostStartSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostStartSequencerEnpc, Return) == 0x000004, "Member 'RSBattlePlayer_C_PostStartSequencerEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSequenceActorEnpc
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetSequenceActorEnpc final
{
public:
	class AActor*                                 SequenceActorEnpc;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSequenceActorEnpc) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetSequenceActorEnpc");
static_assert(sizeof(RSBattlePlayer_C_GetSequenceActorEnpc) == 0x000008, "Wrong size on RSBattlePlayer_C_GetSequenceActorEnpc");
static_assert(offsetof(RSBattlePlayer_C_GetSequenceActorEnpc, SequenceActorEnpc) == 0x000000, "Member 'RSBattlePlayer_C_GetSequenceActorEnpc::SequenceActorEnpc' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartSpSequenceEnpc
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StartSpSequenceEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartSpSequenceEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartSpSequenceEnpc");
static_assert(sizeof(RSBattlePlayer_C_StartSpSequenceEnpc) == 0x000001, "Wrong size on RSBattlePlayer_C_StartSpSequenceEnpc");
static_assert(offsetof(RSBattlePlayer_C_StartSpSequenceEnpc, Return) == 0x000000, "Member 'RSBattlePlayer_C_StartSpSequenceEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetVisibleSpTimer
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_Em8220_SetVisibleSpTimer final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_SetVisibleSpTimer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_SetVisibleSpTimer");
static_assert(sizeof(RSBattlePlayer_C_Em8220_SetVisibleSpTimer) == 0x000002, "Wrong size on RSBattlePlayer_C_Em8220_SetVisibleSpTimer");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetVisibleSpTimer, bVisible) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_SetVisibleSpTimer::bVisible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_SetVisibleSpTimer, Return) == 0x000001, "Member 'RSBattlePlayer_C_Em8220_SetVisibleSpTimer::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_CalcAttackCollisionInfo
// 0x0288 (0x0288 - 0x0000)
struct RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo final
{
public:
	struct FHCAttackCollisionInfo                 CollisionInfo;                                     // 0x0000(0x0280)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0280(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo");
static_assert(sizeof(RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo) == 0x000288, "Wrong size on RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo");
static_assert(offsetof(RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo, CollisionInfo) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo::CollisionInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo, Return) == 0x000280, "Member 'RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StoreCollisionInfo
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattlePlayer_C_Em8220_StoreCollisionInfo final
{
public:
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_StoreCollisionInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_Em8220_StoreCollisionInfo");
static_assert(sizeof(RSBattlePlayer_C_Em8220_StoreCollisionInfo) == 0x0000F8, "Wrong size on RSBattlePlayer_C_Em8220_StoreCollisionInfo");
static_assert(offsetof(RSBattlePlayer_C_Em8220_StoreCollisionInfo, SkillInfo) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_StoreCollisionInfo::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_Em8220_StoreCollisionInfo, Return) == 0x0000F0, "Member 'RSBattlePlayer_C_Em8220_StoreCollisionInfo::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_RestoreCollisionInfo
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_RestoreCollisionInfo final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_RestoreCollisionInfo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_RestoreCollisionInfo");
static_assert(sizeof(RSBattlePlayer_C_Em8220_RestoreCollisionInfo) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_RestoreCollisionInfo");
static_assert(offsetof(RSBattlePlayer_C_Em8220_RestoreCollisionInfo, Return) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_RestoreCollisionInfo::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.PostFinishedSequencerEnpc
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_PostFinishedSequencerEnpc final
{
public:
	int32                                         IndexIn;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_PostFinishedSequencerEnpc) == 0x000004, "Wrong alignment on RSBattlePlayer_C_PostFinishedSequencerEnpc");
static_assert(sizeof(RSBattlePlayer_C_PostFinishedSequencerEnpc) == 0x000008, "Wrong size on RSBattlePlayer_C_PostFinishedSequencerEnpc");
static_assert(offsetof(RSBattlePlayer_C_PostFinishedSequencerEnpc, IndexIn) == 0x000000, "Member 'RSBattlePlayer_C_PostFinishedSequencerEnpc::IndexIn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_PostFinishedSequencerEnpc, Return) == 0x000004, "Member 'RSBattlePlayer_C_PostFinishedSequencerEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnSpawnStartEnpc
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnSpawnStartEnpc final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnSpawnStartEnpc) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnSpawnStartEnpc");
static_assert(sizeof(RSBattlePlayer_C_OnSpawnStartEnpc) == 0x000001, "Wrong size on RSBattlePlayer_C_OnSpawnStartEnpc");
static_assert(offsetof(RSBattlePlayer_C_OnSpawnStartEnpc, Return) == 0x000000, "Member 'RSBattlePlayer_C_OnSpawnStartEnpc::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAttachedCharacterMesh
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetAttachedCharacterMesh final
{
public:
	EPlayerID                                     EquipPlayerID;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CD8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipMeshIndex;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Param_Mesh;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAttachedCharacterMesh) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetAttachedCharacterMesh");
static_assert(sizeof(RSBattlePlayer_C_GetAttachedCharacterMesh) == 0x000010, "Wrong size on RSBattlePlayer_C_GetAttachedCharacterMesh");
static_assert(offsetof(RSBattlePlayer_C_GetAttachedCharacterMesh, EquipPlayerID) == 0x000000, "Member 'RSBattlePlayer_C_GetAttachedCharacterMesh::EquipPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAttachedCharacterMesh, EquipMeshIndex) == 0x000004, "Member 'RSBattlePlayer_C_GetAttachedCharacterMesh::EquipMeshIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAttachedCharacterMesh, Param_Mesh) == 0x000008, "Member 'RSBattlePlayer_C_GetAttachedCharacterMesh::Param_Mesh' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EquipAttachmentInterface
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_EquipAttachmentInterface final
{
public:
	EPlayerAttachment                             Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CD9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttachmentItemID;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     EquipPlayerID;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CDA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipMeshIndex;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CDB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CDC[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CDD[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Attachment_C>     CallFunc_EquipAttachmentInterface_self_CastInput;  // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EquipAttachmentInterface_bDummy;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EquipAttachmentInterface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EquipAttachmentInterface");
static_assert(sizeof(RSBattlePlayer_C_EquipAttachmentInterface) == 0x000048, "Wrong size on RSBattlePlayer_C_EquipAttachmentInterface");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, AttachmentItemID) == 0x000004, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::AttachmentItemID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, EquipPlayerID) == 0x000008, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::EquipPlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, EquipMeshIndex) == 0x00000C, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::EquipMeshIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, bDummy) == 0x000010, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, Temp_int_Array_Index_Variable) == 0x000014, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, Temp_int_Loop_Num_Variable) == 0x000018, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, CallFunc_EquipAttachmentInterface_self_CastInput) == 0x000030, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::CallFunc_EquipAttachmentInterface_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EquipAttachmentInterface, CallFunc_EquipAttachmentInterface_bDummy) == 0x000040, "Member 'RSBattlePlayer_C_EquipAttachmentInterface::CallFunc_EquipAttachmentInterface_bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DestroyAttachmentMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_DestroyAttachmentMeshComponent final
{
public:
	class USceneComponent*                        DestroyMeshComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DestroyAttachmentMeshComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DestroyAttachmentMeshComponent");
static_assert(sizeof(RSBattlePlayer_C_DestroyAttachmentMeshComponent) == 0x000010, "Wrong size on RSBattlePlayer_C_DestroyAttachmentMeshComponent");
static_assert(offsetof(RSBattlePlayer_C_DestroyAttachmentMeshComponent, DestroyMeshComponent) == 0x000000, "Member 'RSBattlePlayer_C_DestroyAttachmentMeshComponent::DestroyMeshComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyAttachmentMeshComponent, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_DestroyAttachmentMeshComponent::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DestroyAttachmentMeshComponent, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_DestroyAttachmentMeshComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttachmentVisibilityOffOnHead
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_AttachmentVisibilityOffOnHead final
{
public:
	bool                                          bOff;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AttachmentVisibilityOffOnHead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_AttachmentVisibilityOffOnHead");
static_assert(sizeof(RSBattlePlayer_C_AttachmentVisibilityOffOnHead) == 0x000002, "Wrong size on RSBattlePlayer_C_AttachmentVisibilityOffOnHead");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnHead, bOff) == 0x000000, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnHead::bOff' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnHead, bDummy) == 0x000001, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnHead::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.AttachmentVisibilityOffOnBackBody
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CDE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CDF[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody) == 0x000004, "Wrong alignment on RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody");
static_assert(sizeof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody) == 0x00001C, "Wrong size on RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, bVisibility) == 0x000000, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::bVisibility' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, FadeTime) == 0x000004, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::FadeTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, bDummy) == 0x000008, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, Temp_bool_Variable) == 0x000009, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, Temp_float_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, Temp_float_Variable_1) == 0x000010, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, K2Node_Select_Default) == 0x000014, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndAim
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EndAim final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndAim) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndAim");
static_assert(sizeof(RSBattlePlayer_C_EndAim) == 0x000001, "Wrong size on RSBattlePlayer_C_EndAim");
static_assert(offsetof(RSBattlePlayer_C_EndAim, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_EndAim::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartAim
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_StartAim final
{
public:
	float                                         LimitAngle;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartAim) == 0x000004, "Wrong alignment on RSBattlePlayer_C_StartAim");
static_assert(sizeof(RSBattlePlayer_C_StartAim) == 0x000008, "Wrong size on RSBattlePlayer_C_StartAim");
static_assert(offsetof(RSBattlePlayer_C_StartAim, LimitAngle) == 0x000000, "Member 'RSBattlePlayer_C_StartAim::LimitAngle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartAim, bDummy) == 0x000004, "Member 'RSBattlePlayer_C_StartAim::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.getEmPosDiscover
// 0x0048 (0x0048 - 0x0000)
struct RSBattlePlayer_C_GetEmPosDiscover final
{
public:
	struct FVector                                DiscoverPos;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEmPosDiscover) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetEmPosDiscover");
static_assert(sizeof(RSBattlePlayer_C_GetEmPosDiscover) == 0x000048, "Wrong size on RSBattlePlayer_C_GetEmPosDiscover");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, DiscoverPos) == 0x000000, "Member 'RSBattlePlayer_C_GetEmPosDiscover::DiscoverPos' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, L_Location) == 0x00000C, "Member 'RSBattlePlayer_C_GetEmPosDiscover::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_BreakVector_X) == 0x000028, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_BreakVector_Y) == 0x00002C, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_BreakVector_Z) == 0x000030, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetEmPosDiscover, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'RSBattlePlayer_C_GetEmPosDiscover::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerCopy
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsPlayerCopy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerCopy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerCopy");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerCopy) == 0x000001, "Wrong size on RSBattlePlayer_C_IsPlayerCopy");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerCopy, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerCopy::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsExistPlayerCopy
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_IsExistPlayerCopy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCopyVisible_bVisible;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsExistPlayerCopy) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsExistPlayerCopy");
static_assert(sizeof(RSBattlePlayer_C_IsExistPlayerCopy) == 0x000020, "Wrong size on RSBattlePlayer_C_IsExistPlayerCopy");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsExistPlayerCopy, CallFunc_IsCopyVisible_bVisible) == 0x00001C, "Member 'RSBattlePlayer_C_IsExistPlayerCopy::CallFunc_IsCopyVisible_bVisible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_UpdateFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateFall_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateFall_Native");
static_assert(sizeof(RSBattlePlayer_C_UpdateFall_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_UpdateFall_Native");
static_assert(offsetof(RSBattlePlayer_C_UpdateFall_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_UpdateFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateDamageAnim_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_UpdateDamageAnim_Native final
{
public:
	bool                                          DamageEnd;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DamageDownEnd;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateDamageAnim_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateDamageAnim_Native");
static_assert(sizeof(RSBattlePlayer_C_UpdateDamageAnim_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_UpdateDamageAnim_Native");
static_assert(offsetof(RSBattlePlayer_C_UpdateDamageAnim_Native, DamageEnd) == 0x000000, "Member 'RSBattlePlayer_C_UpdateDamageAnim_Native::DamageEnd' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_UpdateDamageAnim_Native, DamageDownEnd) == 0x000001, "Member 'RSBattlePlayer_C_UpdateDamageAnim_Native::DamageDownEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SwitchDispCore_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SwitchDispCore_Native final
{
public:
	bool                                          DisplayOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SwitchDispCore_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SwitchDispCore_Native");
static_assert(sizeof(RSBattlePlayer_C_SwitchDispCore_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SwitchDispCore_Native");
static_assert(offsetof(RSBattlePlayer_C_SwitchDispCore_Native, DisplayOn) == 0x000000, "Member 'RSBattlePlayer_C_SwitchDispCore_Native::DisplayOn' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SwitchDispCore_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SwitchDispCore_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StoreWeakState_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StoreWeakState_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StoreWeakState_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StoreWeakState_Native");
static_assert(sizeof(RSBattlePlayer_C_StoreWeakState_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_StoreWeakState_Native");
static_assert(offsetof(RSBattlePlayer_C_StoreWeakState_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_StoreWeakState_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StopCrashChanceLoopEffect_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StopCrashChanceLoopEffect_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StopCrashChanceLoopEffect_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StopCrashChanceLoopEffect_Native");
static_assert(sizeof(RSBattlePlayer_C_StopCrashChanceLoopEffect_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_StopCrashChanceLoopEffect_Native");
static_assert(offsetof(RSBattlePlayer_C_StopCrashChanceLoopEffect_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_StopCrashChanceLoopEffect_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartVanish_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_StartVanish_Native final
{
public:
	float                                         VanishSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartVanish;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndVanish;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartVanish_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_StartVanish_Native");
static_assert(sizeof(RSBattlePlayer_C_StartVanish_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_StartVanish_Native");
static_assert(offsetof(RSBattlePlayer_C_StartVanish_Native, VanishSec) == 0x000000, "Member 'RSBattlePlayer_C_StartVanish_Native::VanishSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartVanish_Native, StartVanish) == 0x000004, "Member 'RSBattlePlayer_C_StartVanish_Native::StartVanish' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartVanish_Native, EndVanish) == 0x000008, "Member 'RSBattlePlayer_C_StartVanish_Native::EndVanish' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartVanish_Native, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_StartVanish_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartFallIfFlyingIF
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StartFallIfFlyingIF final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartFallIfFlyingIF) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartFallIfFlyingIF");
static_assert(sizeof(RSBattlePlayer_C_StartFallIfFlyingIF) == 0x000001, "Wrong size on RSBattlePlayer_C_StartFallIfFlyingIF");
static_assert(offsetof(RSBattlePlayer_C_StartFallIfFlyingIF, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_StartFallIfFlyingIF::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_StartDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartDamageFloating_Native");
static_assert(sizeof(RSBattlePlayer_C_StartDamageFloating_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_StartDamageFloating_Native");
static_assert(offsetof(RSBattlePlayer_C_StartDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_StartDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetWeakEmissiveOff_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_SetWeakEmissiveOff_Native final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetWeakEmissiveOff_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SetWeakEmissiveOff_Native");
static_assert(sizeof(RSBattlePlayer_C_SetWeakEmissiveOff_Native) == 0x000018, "Wrong size on RSBattlePlayer_C_SetWeakEmissiveOff_Native");
static_assert(offsetof(RSBattlePlayer_C_SetWeakEmissiveOff_Native, WeakSlotName) == 0x000000, "Member 'RSBattlePlayer_C_SetWeakEmissiveOff_Native::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetWeakEmissiveOff_Native, ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_SetWeakEmissiveOff_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetUseWaitNoInterpolation_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetUseWaitNoInterpolation_Native final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetUseWaitNoInterpolation_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetUseWaitNoInterpolation_Native");
static_assert(sizeof(RSBattlePlayer_C_SetUseWaitNoInterpolation_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetUseWaitNoInterpolation_Native");
static_assert(offsetof(RSBattlePlayer_C_SetUseWaitNoInterpolation_Native, Use) == 0x000000, "Member 'RSBattlePlayer_C_SetUseWaitNoInterpolation_Native::Use' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetUseWaitNoInterpolation_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetUseWaitNoInterpolation_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveAction_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SetReserveAction_Native final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CE2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param00;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param01;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetReserveAction_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetReserveAction_Native");
static_assert(sizeof(RSBattlePlayer_C_SetReserveAction_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_SetReserveAction_Native");
static_assert(offsetof(RSBattlePlayer_C_SetReserveAction_Native, Action) == 0x000000, "Member 'RSBattlePlayer_C_SetReserveAction_Native::Action' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetReserveAction_Native, Param00) == 0x000004, "Member 'RSBattlePlayer_C_SetReserveAction_Native::Param00' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetReserveAction_Native, Param01) == 0x000008, "Member 'RSBattlePlayer_C_SetReserveAction_Native::Param01' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetReserveAction_Native, ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_SetReserveAction_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetLanding_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetLanding_Native final
{
public:
	bool                                          bLanding;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetLanding_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetLanding_Native");
static_assert(sizeof(RSBattlePlayer_C_SetLanding_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetLanding_Native");
static_assert(offsetof(RSBattlePlayer_C_SetLanding_Native, bLanding) == 0x000000, "Member 'RSBattlePlayer_C_SetLanding_Native::bLanding' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetLanding_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetLanding_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetIsMoveAnim_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetIsMoveAnim_Native final
{
public:
	bool                                          NewIsMoveAnim;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetIsMoveAnim_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetIsMoveAnim_Native");
static_assert(sizeof(RSBattlePlayer_C_SetIsMoveAnim_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetIsMoveAnim_Native");
static_assert(offsetof(RSBattlePlayer_C_SetIsMoveAnim_Native, NewIsMoveAnim) == 0x000000, "Member 'RSBattlePlayer_C_SetIsMoveAnim_Native::NewIsMoveAnim' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetIsMoveAnim_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetIsMoveAnim_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetIsLaunchDown_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetIsLaunchDown_Native final
{
public:
	bool                                          NewIsLaunchDown;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetIsLaunchDown_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetIsLaunchDown_Native");
static_assert(sizeof(RSBattlePlayer_C_SetIsLaunchDown_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetIsLaunchDown_Native");
static_assert(offsetof(RSBattlePlayer_C_SetIsLaunchDown_Native, NewIsLaunchDown) == 0x000000, "Member 'RSBattlePlayer_C_SetIsLaunchDown_Native::NewIsLaunchDown' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetIsLaunchDown_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetIsLaunchDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetIsLandCheck_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetIsLandCheck_Native final
{
public:
	bool                                          NewIsLandCheck;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetIsLandCheck_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetIsLandCheck_Native");
static_assert(sizeof(RSBattlePlayer_C_SetIsLandCheck_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetIsLandCheck_Native");
static_assert(offsetof(RSBattlePlayer_C_SetIsLandCheck_Native, NewIsLandCheck) == 0x000000, "Member 'RSBattlePlayer_C_SetIsLandCheck_Native::NewIsLandCheck' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetIsLandCheck_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetIsLandCheck_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetIsBrainAccess_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetIsBrainAccess_Native final
{
public:
	bool                                          NewIsBrainAccess;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetIsBrainAccess_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetIsBrainAccess_Native");
static_assert(sizeof(RSBattlePlayer_C_SetIsBrainAccess_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetIsBrainAccess_Native");
static_assert(offsetof(RSBattlePlayer_C_SetIsBrainAccess_Native, NewIsBrainAccess) == 0x000000, "Member 'RSBattlePlayer_C_SetIsBrainAccess_Native::NewIsBrainAccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetIsBrainAccess_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetIsBrainAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetIdleMove_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetIdleMove_Native final
{
public:
	bool                                          IsIdle;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetIdleMove_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetIdleMove_Native");
static_assert(sizeof(RSBattlePlayer_C_SetIdleMove_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_SetIdleMove_Native");
static_assert(offsetof(RSBattlePlayer_C_SetIdleMove_Native, IsIdle) == 0x000000, "Member 'RSBattlePlayer_C_SetIdleMove_Native::IsIdle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetIdleMove_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetIdleMove_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetHp_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetHp_Native final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetHp_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetHp_Native");
static_assert(sizeof(RSBattlePlayer_C_SetHp_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_SetHp_Native");
static_assert(offsetof(RSBattlePlayer_C_SetHp_Native, HP) == 0x000000, "Member 'RSBattlePlayer_C_SetHp_Native::HP' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetHp_Native, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetHp_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDownTimer_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_SetDownTimer_Native final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDownTimer_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDownTimer_Native");
static_assert(sizeof(RSBattlePlayer_C_SetDownTimer_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_SetDownTimer_Native");
static_assert(offsetof(RSBattlePlayer_C_SetDownTimer_Native, NewTime) == 0x000000, "Member 'RSBattlePlayer_C_SetDownTimer_Native::NewTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDownTimer_Native, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_SetDownTimer_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetDamageCollisionDisable_Native
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_SetDamageCollisionDisable_Native final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetDamageCollisionDisable_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_SetDamageCollisionDisable_Native");
static_assert(sizeof(RSBattlePlayer_C_SetDamageCollisionDisable_Native) == 0x00000C, "Wrong size on RSBattlePlayer_C_SetDamageCollisionDisable_Native");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionDisable_Native, ClaimantName) == 0x000000, "Member 'RSBattlePlayer_C_SetDamageCollisionDisable_Native::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetDamageCollisionDisable_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SetDamageCollisionDisable_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SafeDestroy_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_SafeDestroy_Native final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SafeDestroy_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_SafeDestroy_Native");
static_assert(sizeof(RSBattlePlayer_C_SafeDestroy_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_SafeDestroy_Native");
static_assert(offsetof(RSBattlePlayer_C_SafeDestroy_Native, Actor) == 0x000000, "Member 'RSBattlePlayer_C_SafeDestroy_Native::Actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SafeDestroy_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_SafeDestroy_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestoreWeakState_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_RestoreWeakState_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestoreWeakState_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_RestoreWeakState_Native");
static_assert(sizeof(RSBattlePlayer_C_RestoreWeakState_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_RestoreWeakState_Native");
static_assert(offsetof(RSBattlePlayer_C_RestoreWeakState_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_RestoreWeakState_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.RestoreWeakEmissive_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_RestoreWeakEmissive_Native final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_RestoreWeakEmissive_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_RestoreWeakEmissive_Native");
static_assert(sizeof(RSBattlePlayer_C_RestoreWeakEmissive_Native) == 0x000018, "Wrong size on RSBattlePlayer_C_RestoreWeakEmissive_Native");
static_assert(offsetof(RSBattlePlayer_C_RestoreWeakEmissive_Native, WeakSlotName) == 0x000000, "Member 'RSBattlePlayer_C_RestoreWeakEmissive_Native::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_RestoreWeakEmissive_Native, ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_RestoreWeakEmissive_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetStateReceivedExecuteAi_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native");
static_assert(sizeof(RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native");
static_assert(offsetof(RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetCore_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_ResetCore_Native final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveCore;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetCore_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_ResetCore_Native");
static_assert(sizeof(RSBattlePlayer_C_ResetCore_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_ResetCore_Native");
static_assert(offsetof(RSBattlePlayer_C_ResetCore_Native, Enemy) == 0x000000, "Member 'RSBattlePlayer_C_ResetCore_Native::Enemy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCore_Native, RemoveCore) == 0x000008, "Member 'RSBattlePlayer_C_ResetCore_Native::RemoveCore' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_ResetCore_Native, ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_ResetCore_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ResetAction_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ResetAction_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ResetAction_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ResetAction_Native");
static_assert(sizeof(RSBattlePlayer_C_ResetAction_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_ResetAction_Native");
static_assert(offsetof(RSBattlePlayer_C_ResetAction_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_ResetAction_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.ReceivedNotifyAnimEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native final
{
public:
	bool                                          Received;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native, Received) == 0x000000, "Member 'RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native::Received' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OutputLogCrashChanceEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OutputLogCrashChanceEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OutputLogCrashChanceEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OutputLogCrashChanceEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_OutputLogCrashChanceEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_OutputLogCrashChanceEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_OutputLogCrashChanceEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OutputLogCrashChanceEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEndCrashChance_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnEndCrashChance_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEndCrashChance_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEndCrashChance_Native");
static_assert(sizeof(RSBattlePlayer_C_OnEndCrashChance_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_OnEndCrashChance_Native");
static_assert(offsetof(RSBattlePlayer_C_OnEndCrashChance_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnEndCrashChance_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnEndAnimDieIF
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnEndAnimDieIF final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnEndAnimDieIF) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnEndAnimDieIF");
static_assert(sizeof(RSBattlePlayer_C_OnEndAnimDieIF) == 0x000001, "Wrong size on RSBattlePlayer_C_OnEndAnimDieIF");
static_assert(offsetof(RSBattlePlayer_C_OnEndAnimDieIF, bDummy) == 0x000000, "Member 'RSBattlePlayer_C_OnEndAnimDieIF::bDummy' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.LeaveBrainCrashAccess_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_LeaveBrainCrashAccess_Native final
{
public:
	class ARSCharacterBase*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_LeaveBrainCrashAccess_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_LeaveBrainCrashAccess_Native");
static_assert(sizeof(RSBattlePlayer_C_LeaveBrainCrashAccess_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_LeaveBrainCrashAccess_Native");
static_assert(offsetof(RSBattlePlayer_C_LeaveBrainCrashAccess_Native, Character) == 0x000000, "Member 'RSBattlePlayer_C_LeaveBrainCrashAccess_Native::Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_LeaveBrainCrashAccess_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_LeaveBrainCrashAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.LaunchDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_LaunchDown_Native final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_LaunchDown_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_LaunchDown_Native");
static_assert(sizeof(RSBattlePlayer_C_LaunchDown_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_LaunchDown_Native");
static_assert(offsetof(RSBattlePlayer_C_LaunchDown_Native, IsEnd) == 0x000000, "Member 'RSBattlePlayer_C_LaunchDown_Native::IsEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.KickCrashChanceLoopEffect_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_KickCrashChanceLoopEffect_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_KickCrashChanceLoopEffect_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_KickCrashChanceLoopEffect_Native");
static_assert(sizeof(RSBattlePlayer_C_KickCrashChanceLoopEffect_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_KickCrashChanceLoopEffect_Native");
static_assert(offsetof(RSBattlePlayer_C_KickCrashChanceLoopEffect_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_KickCrashChanceLoopEffect_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPossibleTargetAttack_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleTargetAttack_bPossible;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP) == 0x000010, "Wrong size on RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP, Actor) == 0x000000, "Member 'RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP::Actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP, CallFunc_IsPossibleTargetAttack_bPossible) == 0x000009, "Member 'RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP::CallFunc_IsPossibleTargetAttack_bPossible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMotionEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsMotionEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMotionEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMotionEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_IsMotionEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsMotionEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_IsMotionEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreLandingCheck_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsIgnoreLandingCheck_Native final
{
public:
	bool                                          bIgnoreLandingCheck;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsIgnoreLandingCheck_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsIgnoreLandingCheck_Native");
static_assert(sizeof(RSBattlePlayer_C_IsIgnoreLandingCheck_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsIgnoreLandingCheck_Native");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreLandingCheck_Native, bIgnoreLandingCheck) == 0x000000, "Member 'RSBattlePlayer_C_IsIgnoreLandingCheck_Native::bIgnoreLandingCheck' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAttack_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP, CallFunc_IsEnemyStateAttack_Return) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyLandingCheck_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyLandingCheck_Native final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyLandingCheck_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyLandingCheck_Native");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyLandingCheck_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyLandingCheck_Native");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyLandingCheck_Native, bHit) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyLandingCheck_Native::bHit' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashMiss_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsBrainCrashMiss_Native final
{
public:
	bool                                          IsMiss;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainCrashMiss_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainCrashMiss_Native");
static_assert(sizeof(RSBattlePlayer_C_IsBrainCrashMiss_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsBrainCrashMiss_Native");
static_assert(offsetof(RSBattlePlayer_C_IsBrainCrashMiss_Native, IsMiss) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainCrashMiss_Native::IsMiss' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSearchingComponent_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetSearchingComponent_Native final
{
public:
	class USearchingComponent*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSearchingComponent_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetSearchingComponent_Native");
static_assert(sizeof(RSBattlePlayer_C_GetSearchingComponent_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_GetSearchingComponent_Native");
static_assert(offsetof(RSBattlePlayer_C_GetSearchingComponent_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetSearchingComponent_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetLostData_Native
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_GetLostData_Native final
{
public:
	float                                         LostMoveTimeMin;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LostMoveTimeMax;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LostMoveRotationRate;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoMoveAnim;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetLostData_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetLostData_Native");
static_assert(sizeof(RSBattlePlayer_C_GetLostData_Native) == 0x000014, "Wrong size on RSBattlePlayer_C_GetLostData_Native");
static_assert(offsetof(RSBattlePlayer_C_GetLostData_Native, LostMoveTimeMin) == 0x000000, "Member 'RSBattlePlayer_C_GetLostData_Native::LostMoveTimeMin' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetLostData_Native, LostMoveTimeMax) == 0x000004, "Member 'RSBattlePlayer_C_GetLostData_Native::LostMoveTimeMax' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetLostData_Native, LostMoveRotationRate) == 0x000008, "Member 'RSBattlePlayer_C_GetLostData_Native::LostMoveRotationRate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetLostData_Native, SpeedScale) == 0x00000C, "Member 'RSBattlePlayer_C_GetLostData_Native::SpeedScale' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetLostData_Native, IsNoMoveAnim) == 0x000010, "Member 'RSBattlePlayer_C_GetLostData_Native::IsNoMoveAnim' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHitObjectType_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetHitObjectType_Native final
{
public:
	TArray<EObjectTypeQuery>                      ObjectType;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetHitObjectType_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetHitObjectType_Native");
static_assert(sizeof(RSBattlePlayer_C_GetHitObjectType_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_GetHitObjectType_Native");
static_assert(offsetof(RSBattlePlayer_C_GetHitObjectType_Native, ObjectType) == 0x000000, "Member 'RSBattlePlayer_C_GetHitObjectType_Native::ObjectType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetFall_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetFall_Native");
static_assert(sizeof(RSBattlePlayer_C_GetFall_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetFall_Native");
static_assert(offsetof(RSBattlePlayer_C_GetFall_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetFailedFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetFailedFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetFailedFall_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetFailedFall_Native");
static_assert(sizeof(RSBattlePlayer_C_GetFailedFall_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetFailedFall_Native");
static_assert(offsetof(RSBattlePlayer_C_GetFailedFall_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetFailedFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionTime_Native
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetCurrentActionTime_Native final
{
public:
	float                                         ActionTime;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentActionTime_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCurrentActionTime_Native");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentActionTime_Native) == 0x000004, "Wrong size on RSBattlePlayer_C_GetCurrentActionTime_Native");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionTime_Native, ActionTime) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentActionTime_Native::ActionTime' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.FlyDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_FlyDown_Native final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_FlyDown_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_FlyDown_Native");
static_assert(sizeof(RSBattlePlayer_C_FlyDown_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_FlyDown_Native");
static_assert(offsetof(RSBattlePlayer_C_FlyDown_Native, IsEnd) == 0x000000, "Member 'RSBattlePlayer_C_FlyDown_Native::IsEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EntryBrainCrashAccess_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_EntryBrainCrashAccess_Native final
{
public:
	class ARSCharacterBase*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EntryBrainCrashAccess_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_EntryBrainCrashAccess_Native");
static_assert(sizeof(RSBattlePlayer_C_EntryBrainCrashAccess_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_EntryBrainCrashAccess_Native");
static_assert(offsetof(RSBattlePlayer_C_EntryBrainCrashAccess_Native, Character) == 0x000000, "Member 'RSBattlePlayer_C_EntryBrainCrashAccess_Native::Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EntryBrainCrashAccess_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_EntryBrainCrashAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EndDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EndDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EndDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EndDamageFloating_Native");
static_assert(sizeof(RSBattlePlayer_C_EndDamageFloating_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_EndDamageFloating_Native");
static_assert(offsetof(RSBattlePlayer_C_EndDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_EndDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnableFitGroundTmp_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_EnableFitGroundTmp_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnableFitGroundTmp_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnableFitGroundTmp_Native");
static_assert(sizeof(RSBattlePlayer_C_EnableFitGroundTmp_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_EnableFitGroundTmp_Native");
static_assert(offsetof(RSBattlePlayer_C_EnableFitGroundTmp_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_EnableFitGroundTmp_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnableAllWeak_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EnableAllWeak_Native final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnableAllWeak_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnableAllWeak_Native");
static_assert(sizeof(RSBattlePlayer_C_EnableAllWeak_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_EnableAllWeak_Native");
static_assert(offsetof(RSBattlePlayer_C_EnableAllWeak_Native, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_EnableAllWeak_Native::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnableAllWeak_Native, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_EnableAllWeak_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DropFlyingEnemy_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_DropFlyingEnemy_Native final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DropFlyingEnemy_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DropFlyingEnemy_Native");
static_assert(sizeof(RSBattlePlayer_C_DropFlyingEnemy_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_DropFlyingEnemy_Native");
static_assert(offsetof(RSBattlePlayer_C_DropFlyingEnemy_Native, Enemy) == 0x000000, "Member 'RSBattlePlayer_C_DropFlyingEnemy_Native::Enemy' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DropFlyingEnemy_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_DropFlyingEnemy_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DisableFitGroundTmp_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DisableFitGroundTmp_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DisableFitGroundTmp_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DisableFitGroundTmp_Native");
static_assert(sizeof(RSBattlePlayer_C_DisableFitGroundTmp_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_DisableFitGroundTmp_Native");
static_assert(offsetof(RSBattlePlayer_C_DisableFitGroundTmp_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DisableFitGroundTmp_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DeadStart_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DeadStart_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DeadStart_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DeadStart_Native");
static_assert(sizeof(RSBattlePlayer_C_DeadStart_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_DeadStart_Native");
static_assert(offsetof(RSBattlePlayer_C_DeadStart_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DeadStart_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DamageMotionEnd_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_DamageMotionEnd_Native final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DamageMotionEnd_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_DamageMotionEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_DamageMotionEnd_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_DamageMotionEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_DamageMotionEnd_Native, DeltaTime) == 0x000000, "Member 'RSBattlePlayer_C_DamageMotionEnd_Native::DeltaTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DamageMotionEnd_Native, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_DamageMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DamageFloatEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_DamageFloatEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_DamageFloatEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_DamageFloatEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_DamageFloatEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_DamageFloatEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_DamageFloatEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_DamageFloatEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckSASHologramAttack_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckSASHologramAttack_Native final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CE3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       RequestCharacter;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckSASHologramAttack_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckSASHologramAttack_Native");
static_assert(sizeof(RSBattlePlayer_C_CheckSASHologramAttack_Native) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckSASHologramAttack_Native");
static_assert(offsetof(RSBattlePlayer_C_CheckSASHologramAttack_Native, Timing) == 0x000000, "Member 'RSBattlePlayer_C_CheckSASHologramAttack_Native::Timing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckSASHologramAttack_Native, RequestCharacter) == 0x000008, "Member 'RSBattlePlayer_C_CheckSASHologramAttack_Native::RequestCharacter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckSASHologramAttack_Native, ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CheckSASHologramAttack_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckNpcDrive_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_CheckNpcDrive_Native final
{
public:
	ENpcDriveCheckType                            CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CE4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EnemyActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckNpcDrive_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckNpcDrive_Native");
static_assert(sizeof(RSBattlePlayer_C_CheckNpcDrive_Native) == 0x000018, "Wrong size on RSBattlePlayer_C_CheckNpcDrive_Native");
static_assert(offsetof(RSBattlePlayer_C_CheckNpcDrive_Native, CheckType) == 0x000000, "Member 'RSBattlePlayer_C_CheckNpcDrive_Native::CheckType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNpcDrive_Native, EnemyActor) == 0x000008, "Member 'RSBattlePlayer_C_CheckNpcDrive_Native::EnemyActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckNpcDrive_Native, ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_CheckNpcDrive_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CameraAttentionEnd_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_CameraAttentionEnd_Native final
{
public:
	class UCurveFloat*                            FovCurveOut;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CameraAttentionEnd_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CameraAttentionEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_CameraAttentionEnd_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_CameraAttentionEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_CameraAttentionEnd_Native, FovCurveOut) == 0x000000, "Member 'RSBattlePlayer_C_CameraAttentionEnd_Native::FovCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CameraAttentionEnd_Native, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_CameraAttentionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownStart_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CallFuncDamageDownStart_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CallFuncDamageDownStart_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CallFuncDamageDownStart_Native");
static_assert(sizeof(RSBattlePlayer_C_CallFuncDamageDownStart_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_CallFuncDamageDownStart_Native");
static_assert(offsetof(RSBattlePlayer_C_CallFuncDamageDownStart_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CallFuncDamageDownStart_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownLoop_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CallFuncDamageDownLoop_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CallFuncDamageDownLoop_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CallFuncDamageDownLoop_Native");
static_assert(sizeof(RSBattlePlayer_C_CallFuncDamageDownLoop_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_CallFuncDamageDownLoop_Native");
static_assert(offsetof(RSBattlePlayer_C_CallFuncDamageDownLoop_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CallFuncDamageDownLoop_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CallFuncDamageDownEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CallFuncDamageDownEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CallFuncDamageDownEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_CallFuncDamageDownEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_CallFuncDamageDownEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_CallFuncDamageDownEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CallFuncDamageDownEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CallDead_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_CallDead_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CallDead_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CallDead_Native");
static_assert(sizeof(RSBattlePlayer_C_CallDead_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_CallDead_Native");
static_assert(offsetof(RSBattlePlayer_C_CallDead_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_CallDead_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashLock_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_BrainCrashLock_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BrainCrashLock_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BrainCrashLock_Native");
static_assert(sizeof(RSBattlePlayer_C_BrainCrashLock_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_BrainCrashLock_Native");
static_assert(offsetof(RSBattlePlayer_C_BrainCrashLock_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_BrainCrashLock_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMoveMaxSpeed
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_UpdateMoveMaxSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_UpdateMoveMaxSpeed) == 0x000001, "Wrong alignment on RSBattlePlayer_C_UpdateMoveMaxSpeed");
static_assert(sizeof(RSBattlePlayer_C_UpdateMoveMaxSpeed) == 0x000001, "Wrong size on RSBattlePlayer_C_UpdateMoveMaxSpeed");
static_assert(offsetof(RSBattlePlayer_C_UpdateMoveMaxSpeed, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_UpdateMoveMaxSpeed::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnemyUpdateEvDitherNative
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_EnemyUpdateEvDitherNative final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnemyUpdateEvDitherNative) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EnemyUpdateEvDitherNative");
static_assert(sizeof(RSBattlePlayer_C_EnemyUpdateEvDitherNative) == 0x000008, "Wrong size on RSBattlePlayer_C_EnemyUpdateEvDitherNative");
static_assert(offsetof(RSBattlePlayer_C_EnemyUpdateEvDitherNative, DeltaSec) == 0x000000, "Member 'RSBattlePlayer_C_EnemyUpdateEvDitherNative::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyUpdateEvDitherNative, ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_EnemyUpdateEvDitherNative::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnemyStartEvDitherNative
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_EnemyStartEvDitherNative final
{
public:
	bool                                          bDisp;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DitherTime;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnemyStartEvDitherNative) == 0x000004, "Wrong alignment on RSBattlePlayer_C_EnemyStartEvDitherNative");
static_assert(sizeof(RSBattlePlayer_C_EnemyStartEvDitherNative) == 0x00000C, "Wrong size on RSBattlePlayer_C_EnemyStartEvDitherNative");
static_assert(offsetof(RSBattlePlayer_C_EnemyStartEvDitherNative, bDisp) == 0x000000, "Member 'RSBattlePlayer_C_EnemyStartEvDitherNative::bDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyStartEvDitherNative, DitherTime) == 0x000004, "Member 'RSBattlePlayer_C_EnemyStartEvDitherNative::DitherTime' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyStartEvDitherNative, ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_EnemyStartEvDitherNative::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.EnemyEndEvDitherNative
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_EnemyEndEvDitherNative final
{
public:
	bool                                          bDisp;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_EnemyEndEvDitherNative) == 0x000001, "Wrong alignment on RSBattlePlayer_C_EnemyEndEvDitherNative");
static_assert(sizeof(RSBattlePlayer_C_EnemyEndEvDitherNative) == 0x000002, "Wrong size on RSBattlePlayer_C_EnemyEndEvDitherNative");
static_assert(offsetof(RSBattlePlayer_C_EnemyEndEvDitherNative, bDisp) == 0x000000, "Member 'RSBattlePlayer_C_EnemyEndEvDitherNative::bDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_EnemyEndEvDitherNative, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_EnemyEndEvDitherNative::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsFlyEnemyCheck_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsFlyEnemyCheck_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsFlyEnemyCheck_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsFlyEnemyCheck_Native");
static_assert(sizeof(RSBattlePlayer_C_IsFlyEnemyCheck_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsFlyEnemyCheck_Native");
static_assert(offsetof(RSBattlePlayer_C_IsFlyEnemyCheck_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsFlyEnemyCheck_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageDown_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP, CallFunc_IsEnemyDamageDown_bool) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.StartReactionDilation_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_StartReactionDilation_CallFromCPP final
{
public:
	uint8                                         ReactionKind;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddDamage;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartReactionDilation_Return;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_StartReactionDilation_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP) == 0x000004, "Wrong size on RSBattlePlayer_C_StartReactionDilation_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP, ReactionKind) == 0x000000, "Member 'RSBattlePlayer_C_StartReactionDilation_CallFromCPP::ReactionKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP, bAddDamage) == 0x000001, "Member 'RSBattlePlayer_C_StartReactionDilation_CallFromCPP::bAddDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_StartReactionDilation_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_StartReactionDilation_CallFromCPP, CallFunc_StartReactionDilation_Return) == 0x000003, "Member 'RSBattlePlayer_C_StartReactionDilation_CallFromCPP::CallFunc_StartReactionDilation_Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckLookScrollTick
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_IsCheckLookScrollTick final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckLookScrollTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsCheckLookScrollTick");
static_assert(sizeof(RSBattlePlayer_C_IsCheckLookScrollTick) == 0x00001C, "Wrong size on RSBattlePlayer_C_IsCheckLookScrollTick");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookScrollTick, Start) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckLookScrollTick::Start' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookScrollTick, End) == 0x00000C, "Member 'RSBattlePlayer_C_IsCheckLookScrollTick::End' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookScrollTick, ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsCheckLookScrollTick::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetTickEnableMeshOnly
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetTickEnableMeshOnly final
{
public:
	bool                                          bMeshOnly;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetTickEnableMeshOnly) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetTickEnableMeshOnly");
static_assert(sizeof(RSBattlePlayer_C_SetTickEnableMeshOnly) == 0x000002, "Wrong size on RSBattlePlayer_C_SetTickEnableMeshOnly");
static_assert(offsetof(RSBattlePlayer_C_SetTickEnableMeshOnly, bMeshOnly) == 0x000000, "Member 'RSBattlePlayer_C_SetTickEnableMeshOnly::bMeshOnly' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetTickEnableMeshOnly, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetTickEnableMeshOnly::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckSameCompareGroundLoaction
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsCheckSameCompareGroundLoaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckSameCompareGroundLoaction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsCheckSameCompareGroundLoaction");
static_assert(sizeof(RSBattlePlayer_C_IsCheckSameCompareGroundLoaction) == 0x000001, "Wrong size on RSBattlePlayer_C_IsCheckSameCompareGroundLoaction");
static_assert(offsetof(RSBattlePlayer_C_IsCheckSameCompareGroundLoaction, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckSameCompareGroundLoaction::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyConsiderDownDead
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_SetEnemyConsiderDownDead final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_SetEnemyConsiderDownDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_SetEnemyConsiderDownDead");
static_assert(sizeof(RSBattlePlayer_C_SetEnemyConsiderDownDead) == 0x000002, "Wrong size on RSBattlePlayer_C_SetEnemyConsiderDownDead");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyConsiderDownDead, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_SetEnemyConsiderDownDead::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_SetEnemyConsiderDownDead, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_SetEnemyConsiderDownDead::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyTribe
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetEnemyTribe final
{
public:
	EEnemyTribe                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyTribe) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetEnemyTribe");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyTribe) == 0x000001, "Wrong size on RSBattlePlayer_C_GetEnemyTribe");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyTribe, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyTribe::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnCrashVisionDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnCrashVisionDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnCrashVisionDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnCrashVisionDead");
static_assert(sizeof(RSBattlePlayer_C_OnCrashVisionDead) == 0x000001, "Wrong size on RSBattlePlayer_C_OnCrashVisionDead");
static_assert(offsetof(RSBattlePlayer_C_OnCrashVisionDead, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnCrashVisionDead::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OnNotifyPlayerDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_OnNotifyPlayerDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_OnNotifyPlayerDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OnNotifyPlayerDead");
static_assert(sizeof(RSBattlePlayer_C_OnNotifyPlayerDead) == 0x000001, "Wrong size on RSBattlePlayer_C_OnNotifyPlayerDead");
static_assert(offsetof(RSBattlePlayer_C_OnNotifyPlayerDead, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_OnNotifyPlayerDead::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponManage
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetPlayerWeaponManage final
{
public:
	class UBP_WeaponManageComponent_C*            WeaponManage;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerWeaponManage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPlayerWeaponManage");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerWeaponManage) == 0x000008, "Wrong size on RSBattlePlayer_C_GetPlayerWeaponManage");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponManage, WeaponManage) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerWeaponManage::WeaponManage' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTargetActor
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetCurrentTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentTargetActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCurrentTargetActor");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentTargetActor) == 0x000010, "Wrong size on RSBattlePlayer_C_GetCurrentTargetActor");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentTargetActor, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentTargetActor, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetCurrentTargetActor::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattling
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsBattling final
{
public:
	bool                                          bBatting;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattling) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattling");
static_assert(sizeof(RSBattlePlayer_C_IsBattling) == 0x000002, "Wrong size on RSBattlePlayer_C_IsBattling");
static_assert(offsetof(RSBattlePlayer_C_IsBattling, bBatting) == 0x000000, "Member 'RSBattlePlayer_C_IsBattling::bBatting' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattling, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsBattling::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetCameraRotation final
{
public:
	struct FRotator                               CameraRotate;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetCameraRotation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCameraRotation");
static_assert(sizeof(RSBattlePlayer_C_GetCameraRotation) == 0x000018, "Wrong size on RSBattlePlayer_C_GetCameraRotation");
static_assert(offsetof(RSBattlePlayer_C_GetCameraRotation, CameraRotate) == 0x000000, "Member 'RSBattlePlayer_C_GetCameraRotation::CameraRotate' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraRotation, CallFunc_GetCameraRotation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetCameraRotation::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatus
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsPlayerStatus final
{
public:
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerStatus");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerStatus) == 0x000003, "Wrong size on RSBattlePlayer_C_IsPlayerStatus");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatus, PlayerStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerStatus::PlayerStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatus, Result) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerStatus::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatus, CallFunc_IsPlayerStatus_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsPlayerStatus::CallFunc_IsPlayerStatus_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatus
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsActionStatus final
{
public:
	EPlayerActionStatus                           ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActionStatus");
static_assert(sizeof(RSBattlePlayer_C_IsActionStatus) == 0x000003, "Wrong size on RSBattlePlayer_C_IsActionStatus");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsActionStatus::ActionStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatus, Result) == 0x000001, "Member 'RSBattlePlayer_C_IsActionStatus::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatus, CallFunc_IsActionStatus_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsActionStatus::CallFunc_IsActionStatus_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionJump
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionJump final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE6[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionJump_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionJump) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsEnableActionJump");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionJump) == 0x000018, "Wrong size on RSBattlePlayer_C_IsEnableActionJump");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionJump::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, LbEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionJump::LbEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_IsDisableAction_bEnable) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_GetCurrentActionState_Kind) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump, CallFunc_IsEnableActionJump_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_IsEnableActionJump::CallFunc_IsEnableActionJump_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDodge
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionDodge final
{
public:
	bool                                          bIgnoreBadStatus;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnable;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistDamage_bExist;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDodge_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionDodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionDodge");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionDodge) == 0x000007, "Wrong size on RSBattlePlayer_C_IsEnableActionDodge");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, bIgnoreBadStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionDodge::bIgnoreBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionDodge::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, CallFunc_IsExistDamage_bExist) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableActionDodge::CallFunc_IsExistDamage_bExist' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, CallFunc_GetCurrentActionState_Kind) == 0x000003, "Member 'RSBattlePlayer_C_IsEnableActionDodge::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableActionDodge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_IsEnableActionDodge::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge, CallFunc_IsEnableActionDodge_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_IsEnableActionDodge::CallFunc_IsEnableActionDodge_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionAttack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionAttack final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionAttack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionAttack");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionAttack) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionAttack");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionAttack, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionAttack::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionAttack, CallFunc_IsEnableActionAttack_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionAttack::CallFunc_IsEnableActionAttack_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionPsychic
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionPsychic final
{
public:
	bool                                          bPsychicEx;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnable;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionPsychic_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionPsychic) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionPsychic");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionPsychic) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnableActionPsychic");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionPsychic, bPsychicEx) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionPsychic::bPsychicEx' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionPsychic, bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionPsychic::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionPsychic, CallFunc_IsEnableActionPsychic_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableActionPsychic::CallFunc_IsEnableActionPsychic_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionSprint
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionSprint final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionSprint_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionSprint) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionSprint");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionSprint) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionSprint");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionSprint, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionSprint::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionSprint, CallFunc_IsEnableActionSprint_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionSprint::CallFunc_IsEnableActionSprint_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASParamForKind
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetSASParamForKind final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CE7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SASParam;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASParamForKind) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSASParamForKind");
static_assert(sizeof(RSBattlePlayer_C_GetSASParamForKind) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetSASParamForKind");
static_assert(offsetof(RSBattlePlayer_C_GetSASParamForKind, SasKind) == 0x000000, "Member 'RSBattlePlayer_C_GetSASParamForKind::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASParamForKind, SASParam) == 0x000004, "Member 'RSBattlePlayer_C_GetSASParamForKind::SASParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASParamForKind, Param) == 0x000008, "Member 'RSBattlePlayer_C_GetSASParamForKind::Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCommon
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionCommon final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionCommon) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionCommon");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionCommon) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionCommon");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionCommon, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionCommon::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionCommon, CallFunc_IsEnableActionCommon_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionCommon::CallFunc_IsEnableActionCommon_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionIdleWalkRun
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionIdleWalkRun final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionIdleWalkRun_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionIdleWalkRun) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionIdleWalkRun");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionIdleWalkRun) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionIdleWalkRun");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionIdleWalkRun, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionIdleWalkRun::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionIdleWalkRun, CallFunc_IsEnableActionIdleWalkRun_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionIdleWalkRun::CallFunc_IsEnableActionIdleWalkRun_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDamage
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDamage_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionDamage");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionDamage) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionDamage");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDamage, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionDamage::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDamage, CallFunc_IsEnableActionDamage_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionDamage::CallFunc_IsEnableActionDamage_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetBoss
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetTargetBoss final
{
public:
	class AActor*                                 LockBoss;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetLockBoss_LockBoss;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTargetBoss) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetTargetBoss");
static_assert(sizeof(RSBattlePlayer_C_GetTargetBoss) == 0x000010, "Wrong size on RSBattlePlayer_C_GetTargetBoss");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBoss, LockBoss) == 0x000000, "Member 'RSBattlePlayer_C_GetTargetBoss::LockBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBoss, CallFunc_GetLockBoss_LockBoss) == 0x000008, "Member 'RSBattlePlayer_C_GetTargetBoss::CallFunc_GetLockBoss_LockBoss' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_ForKind
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_ForKind final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_ForKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_ForKind");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_ForKind) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_ForKind");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_ForKind, SAS_Kind) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_ForKind::SAS_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_ForKind, IsActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_ForKind::IsActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.isForceCritical
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsForceCritical final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsForceCritical) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsForceCritical");
static_assert(sizeof(RSBattlePlayer_C_IsForceCritical) == 0x000001, "Wrong size on RSBattlePlayer_C_IsForceCritical");
static_assert(offsetof(RSBattlePlayer_C_IsForceCritical, bResult) == 0x000000, "Member 'RSBattlePlayer_C_IsForceCritical::bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetActorDeltaSeconds
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetActorDeltaSeconds final
{
public:
	float                                         ActorDeltaSeconds;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetActorDeltaSeconds) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetActorDeltaSeconds");
static_assert(sizeof(RSBattlePlayer_C_GetActorDeltaSeconds) == 0x000008, "Wrong size on RSBattlePlayer_C_GetActorDeltaSeconds");
static_assert(offsetof(RSBattlePlayer_C_GetActorDeltaSeconds, ActorDeltaSeconds) == 0x000000, "Member 'RSBattlePlayer_C_GetActorDeltaSeconds::ActorDeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetActorDeltaSeconds, CallFunc_GetActorDeltaSeconds_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetActorDeltaSeconds::CallFunc_GetActorDeltaSeconds_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTarget
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsLockTarget final
{
public:
	bool                                          Param_IsLockTarget;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsLockTarget) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsLockTarget");
static_assert(sizeof(RSBattlePlayer_C_IsLockTarget) == 0x000002, "Wrong size on RSBattlePlayer_C_IsLockTarget");
static_assert(offsetof(RSBattlePlayer_C_IsLockTarget, Param_IsLockTarget) == 0x000000, "Member 'RSBattlePlayer_C_IsLockTarget::Param_IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsLockTarget, CallFunc_IsLockTarget_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsLockTarget::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsControlAI
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_IsControlAI final
{
public:
	bool                                          bAI;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIControllerInterface_C> K2Node_DynamicCast_AsBPI_Player_AIController_Interface; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAI_bAI;                                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsControlAI) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsControlAI");
static_assert(sizeof(RSBattlePlayer_C_IsControlAI) == 0x000028, "Wrong size on RSBattlePlayer_C_IsControlAI");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI, bAI) == 0x000000, "Member 'RSBattlePlayer_C_IsControlAI::bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsControlAI::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI, K2Node_DynamicCast_AsBPI_Player_AIController_Interface) == 0x000010, "Member 'RSBattlePlayer_C_IsControlAI::K2Node_DynamicCast_AsBPI_Player_AIController_Interface' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattlePlayer_C_IsControlAI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI, CallFunc_IsAI_bAI) == 0x000021, "Member 'RSBattlePlayer_C_IsControlAI::CallFunc_IsAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetIsBattleMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetIsBattleMode final
{
public:
	bool                                          IsBattleMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetIsBattleMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetIsBattleMode");
static_assert(sizeof(RSBattlePlayer_C_GetIsBattleMode) == 0x000002, "Wrong size on RSBattlePlayer_C_GetIsBattleMode");
static_assert(offsetof(RSBattlePlayer_C_GetIsBattleMode, IsBattleMode) == 0x000000, "Member 'RSBattlePlayer_C_GetIsBattleMode::IsBattleMode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetIsBattleMode, CallFunc_IsBattling_bBatting) == 0x000001, "Member 'RSBattlePlayer_C_GetIsBattleMode::CallFunc_IsBattling_bBatting' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDefaultCameraRotation
// 0x0034 (0x0034 - 0x0000)
struct RSBattlePlayer_C_GetDefaultCameraRotation final
{
public:
	struct FRotator                               DefaultCameraRotation;                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetDefaultCameraRotation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDefaultCameraRotation");
static_assert(sizeof(RSBattlePlayer_C_GetDefaultCameraRotation) == 0x000034, "Wrong size on RSBattlePlayer_C_GetDefaultCameraRotation");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, DefaultCameraRotation) == 0x000000, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::DefaultCameraRotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDefaultCameraRotation, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_GetDefaultCameraRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUpperActionStatus
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsUpperActionStatus final
{
public:
	EPlayerUpperActionStatus                      ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUpperActionStatus) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUpperActionStatus");
static_assert(sizeof(RSBattlePlayer_C_IsUpperActionStatus) == 0x000003, "Wrong size on RSBattlePlayer_C_IsUpperActionStatus");
static_assert(offsetof(RSBattlePlayer_C_IsUpperActionStatus, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsUpperActionStatus::ActionStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUpperActionStatus, bResult) == 0x000001, "Member 'RSBattlePlayer_C_IsUpperActionStatus::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUpperActionStatus, CallFunc_IsUpperActionStatus_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsUpperActionStatus::CallFunc_IsUpperActionStatus_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionBrainCrash
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionBrainCrash final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTelepo_bTelepo;                         // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingSequence_IsPlaying;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionBrainCrash_ReturnValue;     // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionBrainCrash) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsEnableActionBrainCrash");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionBrainCrash) == 0x000020, "Wrong size on RSBattlePlayer_C_IsEnableActionBrainCrash");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, Enable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::Enable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_GetSASManager_SAS_Manager) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x000018, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_IsCutInPlaying_Playing) == 0x000019, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_IsTelepo_bTelepo) == 0x00001B, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_IsTelepo_bTelepo' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001C, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_IsPlayingSequence_IsPlaying) == 0x00001D, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_IsPlayingSequence_IsPlaying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001E, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionBrainCrash, CallFunc_IsEnableActionBrainCrash_ReturnValue) == 0x00001F, "Member 'RSBattlePlayer_C_IsEnableActionBrainCrash::CallFunc_IsEnableActionBrainCrash_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeapon
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetPlayerWeapon final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CEA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       Weapon;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       CallFunc_GetPlayerWeaponPure_Weapon;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerWeapon) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPlayerWeapon");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerWeapon) == 0x000018, "Wrong size on RSBattlePlayer_C_GetPlayerWeapon");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeapon, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerWeapon::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeapon, Weapon) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeapon, CallFunc_GetPlayerWeaponPure_Weapon) == 0x000010, "Member 'RSBattlePlayer_C_GetPlayerWeapon::CallFunc_GetPlayerWeaponPure_Weapon' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponPure
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_GetPlayerWeaponPure final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CEB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       Weapon;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CEC[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerWeaponPure) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPlayerWeaponPure");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerWeaponPure) == 0x000030, "Wrong size on RSBattlePlayer_C_GetPlayerWeaponPure");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponPure, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerWeaponPure::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponPure, Weapon) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerWeaponPure::Weapon' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponPure, CallFunc_GetWeaponList_WeaponList) == 0x000010, "Member 'RSBattlePlayer_C_GetPlayerWeaponPure::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponPure, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'RSBattlePlayer_C_GetPlayerWeaponPure::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponPure, CallFunc_Array_Get_Item) == 0x000028, "Member 'RSBattlePlayer_C_GetPlayerWeaponPure::CallFunc_Array_Get_Item' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetConnectEffectLocation
// 0x0060 (0x0060 - 0x0000)
struct RSBattlePlayer_C_GetConnectEffectLocation final
{
public:
	bool                                          bSource;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEffectConnectPoint                           ConnectPoint;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CED[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGetPlayerWeaponType                          LWeaponType;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CEE[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetPlayerWeaponList_WeaponList;           // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CEF[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetConnectEffectLocation) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetConnectEffectLocation");
static_assert(sizeof(RSBattlePlayer_C_GetConnectEffectLocation) == 0x000060, "Wrong size on RSBattlePlayer_C_GetConnectEffectLocation");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, bSource) == 0x000000, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::bSource' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, ConnectPoint) == 0x000001, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::ConnectPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, SocketName) == 0x000004, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::SocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, Param) == 0x00000C, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, Location) == 0x000010, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, LWeaponType) == 0x00001C, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::LWeaponType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_GetPlayerWeaponList_WeaponList) == 0x000020, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_GetPlayerWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_GetSocketLocation_ReturnValue_1) == 0x00004C, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetConnectEffectLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_GetConnectEffectLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDisableAction final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableAction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDisableAction");
static_assert(sizeof(RSBattlePlayer_C_IsDisableAction) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDisableAction");
static_assert(offsetof(RSBattlePlayer_C_IsDisableAction, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableAction::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDisableAction, CallFunc_IsDisableAction_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsDisableAction::CallFunc_IsDisableAction_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraPitch
// 0x0030 (0x0030 - 0x0000)
struct RSBattlePlayer_C_GetCameraPitch final
{
public:
	float                                         Rotation;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPitch;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCameraPitch) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCameraPitch");
static_assert(sizeof(RSBattlePlayer_C_GetCameraPitch) == 0x000030, "Wrong size on RSBattlePlayer_C_GetCameraPitch");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, Rotation) == 0x000000, "Member 'RSBattlePlayer_C_GetCameraPitch::Rotation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, LPitch) == 0x000004, "Member 'RSBattlePlayer_C_GetCameraPitch::LPitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_GetControlRotation_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraPitch, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'RSBattlePlayer_C_GetCameraPitch::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayBlendAnimMontage
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_IsPlayBlendAnimMontage final
{
public:
	bool                                          bPlay;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimMontageStoped_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimMontageStoped_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayBlendAnimMontage) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsPlayBlendAnimMontage");
static_assert(sizeof(RSBattlePlayer_C_IsPlayBlendAnimMontage) == 0x000028, "Wrong size on RSBattlePlayer_C_IsPlayBlendAnimMontage");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, bPlay) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::bPlay' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsAnimMontageStoped_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsAnimMontageStoped_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000018, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsAnimMontageStoped_ReturnValue_1) == 0x000022, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsAnimMontageStoped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayBlendAnimMontage, CallFunc_IsValid_ReturnValue_3) == 0x000023, "Member 'RSBattlePlayer_C_IsPlayBlendAnimMontage::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckExistActorByCapsule
// 0x02F0 (0x02F0 - 0x0000)
struct RSBattlePlayer_C_CheckExistActorByCapsule final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectTypeQuery                              ActorObjectType;                                   // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CF3[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreActorHeight;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bExist;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF4[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LEndLocation;                                      // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LStartLocation;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LNormalizeDir;                                     // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LHitActorDir;                                      // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CF5[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LHitActor;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF6[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CF7[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF8[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRSResultCapsule                       CallFunc_CheckCollisionCapsule_Result;             // 0x0144(0x001C)(NoDestructor)
	bool                                          CallFunc_CheckCollisionCapsule_ReturnValue;        // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CF9[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CFA[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CFB[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CFC[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x01E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0272(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CFD[0x1];                                     // 0x0273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CFE[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_CheckExistActorByCapsule) == 0x000008, "Wrong alignment on RSBattlePlayer_C_CheckExistActorByCapsule");
static_assert(sizeof(RSBattlePlayer_C_CheckExistActorByCapsule) == 0x0002F0, "Wrong size on RSBattlePlayer_C_CheckExistActorByCapsule");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, Offset) == 0x000000, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::Offset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, ActorObjectType) == 0x00000C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::ActorObjectType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, Actor) == 0x000010, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::Actor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, IgnoreActorHeight) == 0x000018, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::IgnoreActorHeight' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, bExist) == 0x000019, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::bExist' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, LEndLocation) == 0x00001C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::LEndLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, LStartLocation) == 0x000028, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::LStartLocation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, LNormalizeDir) == 0x000034, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::LNormalizeDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, LHitActorDir) == 0x000040, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::LHitActorDir' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, LHitActor) == 0x000050, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::LHitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, Temp_object_Variable) == 0x000058, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_X) == 0x00006C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Y) == 0x000070, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Z) == 0x000074, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_X_1) == 0x000078, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Y_1) == 0x00007C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Z_1) == 0x000080, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000084, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_X_2) == 0x000090, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Y_2) == 0x000094, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Z_2) == 0x000098, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_MakeVector_ReturnValue) == 0x00009C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_MakeVector_ReturnValue_1) == 0x0000A8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B4, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, K2Node_DynamicCast_AsRSBattle_Character) == 0x0000D0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000DC, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_X_3) == 0x0000E0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Y_3) == 0x0000E4, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Z_3) == 0x0000E8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_GetUpVector_ReturnValue) == 0x0000EC, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_MakeVector_ReturnValue_2) == 0x0000F8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000104, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Normal_ReturnValue) == 0x000110, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00011C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000134, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000140, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_CheckCollisionCapsule_Result) == 0x000144, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_CheckCollisionCapsule_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_CheckCollisionCapsule_ReturnValue) == 0x000160, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_CheckCollisionCapsule_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_DegCos_ReturnValue) == 0x000164, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Dot_VectorVector_ReturnValue) == 0x000168, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00016C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000178, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00017C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000188, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_IsValid_ReturnValue_1) == 0x000194, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_X_4) == 0x000198, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Y_4) == 0x00019C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakVector_Z_4) == 0x0001A0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_MakeVector_ReturnValue_3) == 0x0001A4, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Normal_ReturnValue_1) == 0x0001B0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, K2Node_MakeArray_Array) == 0x0001C0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0001D0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001DC, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x0001E8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000270, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_bBlockingHit) == 0x000271, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_bInitialOverlap) == 0x000272, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_Time) == 0x000274, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_Distance) == 0x000278, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_Location) == 0x00027C, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_ImpactPoint) == 0x000288, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_Normal) == 0x000294, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_ImpactNormal) == 0x0002A0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_PhysMat) == 0x0002B0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_HitActor) == 0x0002B8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_HitComponent) == 0x0002C0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_HitBoneName) == 0x0002C8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_HitItem) == 0x0002D0, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_FaceIndex) == 0x0002D4, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_TraceStart) == 0x0002D8, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckExistActorByCapsule, CallFunc_BreakHitResult_TraceEnd) == 0x0002E4, "Member 'RSBattlePlayer_C_CheckExistActorByCapsule::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsNoBattleWeaponDispOff
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsNoBattleWeaponDispOff final
{
public:
	bool                                          bOff;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsNoBattleWeaponDispOff) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsNoBattleWeaponDispOff");
static_assert(sizeof(RSBattlePlayer_C_IsNoBattleWeaponDispOff) == 0x000001, "Wrong size on RSBattlePlayer_C_IsNoBattleWeaponDispOff");
static_assert(offsetof(RSBattlePlayer_C_IsNoBattleWeaponDispOff, bOff) == 0x000000, "Member 'RSBattlePlayer_C_IsNoBattleWeaponDispOff::bOff' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCompleteTelepoDisappear
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsCompleteTelepoDisappear final
{
public:
	bool                                          bComplete;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisappear_bDisappear;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCompleteTelepoDisappear) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsCompleteTelepoDisappear");
static_assert(sizeof(RSBattlePlayer_C_IsCompleteTelepoDisappear) == 0x000002, "Wrong size on RSBattlePlayer_C_IsCompleteTelepoDisappear");
static_assert(offsetof(RSBattlePlayer_C_IsCompleteTelepoDisappear, bComplete) == 0x000000, "Member 'RSBattlePlayer_C_IsCompleteTelepoDisappear::bComplete' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCompleteTelepoDisappear, CallFunc_IsDisappear_bDisappear) == 0x000001, "Member 'RSBattlePlayer_C_IsCompleteTelepoDisappear::CallFunc_IsDisappear_bDisappear' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableAddMovementInput
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnableAddMovementInput final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableAddMovementInput) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableAddMovementInput");
static_assert(sizeof(RSBattlePlayer_C_IsEnableAddMovementInput) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnableAddMovementInput");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAddMovementInput, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableAddMovementInput::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAddMovementInput, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableAddMovementInput::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAddMovementInput, CallFunc_IsControlAI_bAI) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableAddMovementInput::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetWeaponSocketName
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetWeaponSocketName final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBattle;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceBattle;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CFF[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetWeaponSocketName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetWeaponSocketName");
static_assert(sizeof(RSBattlePlayer_C_GetWeaponSocketName) == 0x000010, "Wrong size on RSBattlePlayer_C_GetWeaponSocketName");
static_assert(offsetof(RSBattlePlayer_C_GetWeaponSocketName, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_GetWeaponSocketName::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeaponSocketName, bBattle) == 0x000004, "Member 'RSBattlePlayer_C_GetWeaponSocketName::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeaponSocketName, ForceBattle) == 0x000005, "Member 'RSBattlePlayer_C_GetWeaponSocketName::ForceBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeaponSocketName, SocketName) == 0x000008, "Member 'RSBattlePlayer_C_GetWeaponSocketName::SocketName' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffect
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_IsEnableSASEffect final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASEffect                                    Effect;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D00[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param0;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param1;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param2;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param3;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSASEffect) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsEnableSASEffect");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSASEffect) == 0x000014, "Wrong size on RSBattlePlayer_C_IsEnableSASEffect");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Kind) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Effect) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Effect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, bEnable) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableSASEffect::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Param0) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Param0' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Param1) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Param1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Param2) == 0x00000C, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Param2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffect, Param3) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableSASEffect::Param3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASParamDataCurrentLevel
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_GetSASParamDataCurrentLevel final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D01[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_SASParam                            Param;                                             // 0x0004(0x0024)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASParamDataCurrentLevel) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSASParamDataCurrentLevel");
static_assert(sizeof(RSBattlePlayer_C_GetSASParamDataCurrentLevel) == 0x000028, "Wrong size on RSBattlePlayer_C_GetSASParamDataCurrentLevel");
static_assert(offsetof(RSBattlePlayer_C_GetSASParamDataCurrentLevel, Kind) == 0x000000, "Member 'RSBattlePlayer_C_GetSASParamDataCurrentLevel::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASParamDataCurrentLevel, Param) == 0x000004, "Member 'RSBattlePlayer_C_GetSASParamDataCurrentLevel::Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCopyPlayerList
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetCopyPlayerList final
{
public:
	TArray<class ABP_SASCopyPlayerActor_C*>       Param_CopyPlayerList;                              // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCopyPlayerList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCopyPlayerList");
static_assert(sizeof(RSBattlePlayer_C_GetCopyPlayerList) == 0x000010, "Wrong size on RSBattlePlayer_C_GetCopyPlayerList");
static_assert(offsetof(RSBattlePlayer_C_GetCopyPlayerList, Param_CopyPlayerList) == 0x000000, "Member 'RSBattlePlayer_C_GetCopyPlayerList::Param_CopyPlayerList' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSearchAbleActionIcon
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_IsSearchAbleActionIcon final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_bEnable;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSearchAbleActionIcon) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSearchAbleActionIcon");
static_assert(sizeof(RSBattlePlayer_C_IsSearchAbleActionIcon) == 0x000005, "Wrong size on RSBattlePlayer_C_IsSearchAbleActionIcon");
static_assert(offsetof(RSBattlePlayer_C_IsSearchAbleActionIcon, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsSearchAbleActionIcon::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSearchAbleActionIcon, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsSearchAbleActionIcon::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSearchAbleActionIcon, CallFunc_IsEnableActionCommon_bEnable) == 0x000002, "Member 'RSBattlePlayer_C_IsSearchAbleActionIcon::CallFunc_IsEnableActionCommon_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSearchAbleActionIcon, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsSearchAbleActionIcon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSearchAbleActionIcon, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsSearchAbleActionIcon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMetalMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsMetalMode final
{
public:
	bool                                          bMetal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHarden_return;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMetalMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMetalMode");
static_assert(sizeof(RSBattlePlayer_C_IsMetalMode) == 0x000002, "Wrong size on RSBattlePlayer_C_IsMetalMode");
static_assert(offsetof(RSBattlePlayer_C_IsMetalMode, bMetal) == 0x000000, "Member 'RSBattlePlayer_C_IsMetalMode::bMetal' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMetalMode, CallFunc_IsHarden_return) == 0x000001, "Member 'RSBattlePlayer_C_IsMetalMode::CallFunc_IsHarden_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableAssist
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnableAssist final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableNpcAssist_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableAssist) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableAssist");
static_assert(sizeof(RSBattlePlayer_C_IsEnableAssist) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnableAssist");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAssist, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableAssist::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAssist, LbEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableAssist::LbEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableAssist, CallFunc_IsEnableNpcAssist_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableAssist::CallFunc_IsEnableNpcAssist_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckWaitEnableAssist
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_CheckWaitEnableAssist final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCommon_bEnable;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckWaitEnableAssist) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckWaitEnableAssist");
static_assert(sizeof(RSBattlePlayer_C_CheckWaitEnableAssist) == 0x000002, "Wrong size on RSBattlePlayer_C_CheckWaitEnableAssist");
static_assert(offsetof(RSBattlePlayer_C_CheckWaitEnableAssist, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_CheckWaitEnableAssist::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckWaitEnableAssist, CallFunc_IsEnableActionCommon_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_CheckWaitEnableAssist::CallFunc_IsEnableActionCommon_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawAiInfo
// 0x0358 (0x0358 - 0x0000)
struct RSBattlePlayer_C_DebugDrawAiInfo final
{
public:
	bool                                          L_bDraw;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D02[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   L_TableName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible)
	class FText                                   L_TableType;                                       // 0x0020(0x0018)(Edit, BlueprintVisible)
	float                                         L_TargetDistance;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D03[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   L_TargetName;                                      // 0x0040(0x0018)(Edit, BlueprintVisible)
	class FText                                   L_CurrentThink;                                    // 0x0058(0x0018)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D04[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B8(0x0040)(HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D05[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0118(0x0018)()
	bool                                          CallFunc_IsDebugEnpcDrawAiInfo_IsDraw;             // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugPlayerDrawAiInfo_IsDraw;           // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D06[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCurrentThinkTable_Table;               // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0150(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0168(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0180(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01C0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0200(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x0250(0x0018)()
	struct FVector                                CallFunc_GetBattleTargetDist_ReturnValue;          // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D07[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0278(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D08[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x02C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x02D0(0x0018)()
	class AActor*                                 CallFunc_GetBattleTargetActor_Target;              // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D09[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x0308(0x0018)()
	EPlayerAIBattleThinkType                      CallFunc_GetCurrentBattleThink_NewParam;           // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D0A[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0328(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0B[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x0340(0x0018)()
};
static_assert(alignof(RSBattlePlayer_C_DebugDrawAiInfo) == 0x000008, "Wrong alignment on RSBattlePlayer_C_DebugDrawAiInfo");
static_assert(sizeof(RSBattlePlayer_C_DebugDrawAiInfo) == 0x000358, "Wrong size on RSBattlePlayer_C_DebugDrawAiInfo");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_bDraw) == 0x000000, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_bDraw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_TableName) == 0x000008, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_TableName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_TableType) == 0x000020, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_TableType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_TargetDistance) == 0x000038, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_TargetName) == 0x000040, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_TargetName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, L_CurrentThink) == 0x000058, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::L_CurrentThink' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000070, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B8, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetDebuggingManager_Manager) == 0x0000F8, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000108, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000118, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsDebugEnpcDrawAiInfo_IsDraw) == 0x000130, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsDebugEnpcDrawAiInfo_IsDraw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsDebugPlayerDrawAiInfo_IsDraw) == 0x000131, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsDebugPlayerDrawAiInfo_IsDraw' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetCurrentThinkTable_Table) == 0x000138, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetCurrentThinkTable_Table' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetDisplayName_ReturnValue) == 0x000140, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000150, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_FloatToText_ReturnValue) == 0x000168, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData_2) == 0x000180, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001C0, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData_4) == 0x000200, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetObjectName_ReturnValue) == 0x000240, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_StringToText_ReturnValue_2) == 0x000250, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetBattleTargetDist_ReturnValue) == 0x000268, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetBattleTargetDist_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeStruct_FormatArgumentData_5) == 0x000278, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_VSize_ReturnValue) == 0x0002B8, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, K2Node_MakeArray_Array) == 0x0002C0, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Format_ReturnValue) == 0x0002D0, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetBattleTargetActor_Target) == 0x0002E8, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetBattleTargetActor_Target' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsValid_ReturnValue_1) == 0x0002F0, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetObjectName_ReturnValue_1) == 0x0002F8, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_StringToText_ReturnValue_3) == 0x000308, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetCurrentBattleThink_NewParam) == 0x000320, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetCurrentBattleThink_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000328, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_IsControlAI_bAI) == 0x000338, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_DebugDrawAiInfo, CallFunc_Conv_StringToText_ReturnValue_4) == 0x000340, "Member 'RSBattlePlayer_C_DebugDrawAiInfo::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionChangeBattle
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionChangeBattle final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionChangeBattle_ReturnValue;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionChangeBattle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionChangeBattle");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionChangeBattle) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionChangeBattle");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionChangeBattle, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionChangeBattle::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionChangeBattle, CallFunc_IsEnableActionChangeBattle_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionChangeBattle::CallFunc_IsEnableActionChangeBattle_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionState
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetCurrentActionState final
{
public:
	EPlayerActionKind                             Kind;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D0C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentStateIndex_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentActionState) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCurrentActionState");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentActionState) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetCurrentActionState");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionState, Kind) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentActionState::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionState, CallFunc_GetCurrentStateIndex_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetCurrentActionState::CallFunc_GetCurrentStateIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionState, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetCurrentActionState::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentActionState, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_GetCurrentActionState::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAbleTransitionBrainField
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_IsAbleTransitionBrainField final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  LSequencerPlayer;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0E[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  CallFunc_GetCurrentSequencer_Sequencer;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAbleTransitionBrainField) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsAbleTransitionBrainField");
static_assert(sizeof(RSBattlePlayer_C_IsAbleTransitionBrainField) == 0x000040, "Wrong size on RSBattlePlayer_C_IsAbleTransitionBrainField");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, bOK) == 0x000000, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::bOK' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, LSequencerPlayer) == 0x000008, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::LSequencerPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_GetSASManager_SAS_Manager) == 0x000010, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_GetSequencePlayer_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_IsCutInPlaying_Playing) == 0x000020, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_IsPlaying_ReturnValue) == 0x000022, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_GetBrainCrashManager_Manager) == 0x000028, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_GetCurrentSequencer_Sequencer) == 0x000030, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_GetCurrentSequencer_Sequencer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAbleTransitionBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'RSBattlePlayer_C_IsAbleTransitionBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerAccessoryEffect
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetPlayerAccessoryEffect final
{
public:
	EEffecacyType                                 EffectType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquip;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LParam;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEquip;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D10[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccessoryEffect_outValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAccessoryEffect_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerAccessoryEffect) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerAccessoryEffect");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerAccessoryEffect) == 0x000018, "Wrong size on RSBattlePlayer_C_GetPlayerAccessoryEffect");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, EffectType) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::EffectType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, bEquip) == 0x000001, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, Param) == 0x000004, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, LParam) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::LParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, LbEquip) == 0x00000C, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::LbEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, CallFunc_GetPlayerID_ReturnValue) == 0x00000D, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00000E, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, CallFunc_GetAccessoryEffect_outValue) == 0x000010, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::CallFunc_GetAccessoryEffect_outValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect, CallFunc_GetAccessoryEffect_ReturnValue) == 0x000014, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect::CallFunc_GetAccessoryEffect_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetWeakTargetPoint
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_GetWeakTargetPoint final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D11[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetWeakTargetPoint) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetWeakTargetPoint");
static_assert(sizeof(RSBattlePlayer_C_GetWeakTargetPoint) == 0x000040, "Wrong size on RSBattlePlayer_C_GetWeakTargetPoint");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, AttackerPos) == 0x000000, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::AttackerPos' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, Point) == 0x00000C, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, L_Location) == 0x000018, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, CallFunc_GetWeakTargetPoint_Point) == 0x000024, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetWeakTargetPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x000034, "Member 'RSBattlePlayer_C_GetWeakTargetPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableMetalMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableMetalMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableMetalMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableMetalMode");
static_assert(sizeof(RSBattlePlayer_C_IsEnableMetalMode) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableMetalMode");
static_assert(offsetof(RSBattlePlayer_C_IsEnableMetalMode, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableMetalMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableMetalMode, CallFunc_IsMetalMode_bMetal) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableMetalMode::CallFunc_IsMetalMode_bMetal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsGuardBadCondition
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_IsGuardBadCondition final
{
public:
	EHCSkillAttribute                             Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D12[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsGuardBadCondition) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsGuardBadCondition");
static_assert(sizeof(RSBattlePlayer_C_IsGuardBadCondition) == 0x000014, "Wrong size on RSBattlePlayer_C_IsGuardBadCondition");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, Attr) == 0x000000, "Member 'RSBattlePlayer_C_IsGuardBadCondition::Attr' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsGuardBadCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, CallFunc_IsEnableSASEffect_bEnable) == 0x000002, "Member 'RSBattlePlayer_C_IsGuardBadCondition::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, CallFunc_IsEnableSASEffect_Param0) == 0x000004, "Member 'RSBattlePlayer_C_IsGuardBadCondition::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, CallFunc_IsEnableSASEffect_Param1) == 0x000008, "Member 'RSBattlePlayer_C_IsGuardBadCondition::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, CallFunc_IsEnableSASEffect_Param2) == 0x00000C, "Member 'RSBattlePlayer_C_IsGuardBadCondition::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsGuardBadCondition, CallFunc_IsEnableSASEffect_Param3) == 0x000010, "Member 'RSBattlePlayer_C_IsGuardBadCondition::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetReviveCableSocketName
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_GetReviveCableSocketName final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetReviveCableSocketName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetReviveCableSocketName");
static_assert(sizeof(RSBattlePlayer_C_GetReviveCableSocketName) == 0x000040, "Wrong size on RSBattlePlayer_C_GetReviveCableSocketName");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, SocketName) == 0x000004, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::SocketName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_int_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_name_Variable) == 0x000010, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_name_Variable_1) == 0x000018, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_name_Variable_2) == 0x000020, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_name_Variable_3) == 0x000028, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, Temp_name_Variable_4) == 0x000030, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetReviveCableSocketName, K2Node_Select_Default) == 0x000038, "Member 'RSBattlePlayer_C_GetReviveCableSocketName::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetUseItemSpeed
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetUseItemSpeed final
{
public:
	EPlayerUseItemSpeed                           Speed;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetUseItemSpeed) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetUseItemSpeed");
static_assert(sizeof(RSBattlePlayer_C_GetUseItemSpeed) == 0x000001, "Wrong size on RSBattlePlayer_C_GetUseItemSpeed");
static_assert(offsetof(RSBattlePlayer_C_GetUseItemSpeed, Speed) == 0x000000, "Member 'RSBattlePlayer_C_GetUseItemSpeed::Speed' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckFlyingAttackKind
// 0x0064 (0x0064 - 0x0000)
struct RSBattlePlayer_C_CheckFlyingAttackKind final
{
public:
	ERSAttackInputKind                            AttackKind;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlying;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_50;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_51;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_52;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_53;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_54;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_55;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_56;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_57;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_58;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_59;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_60;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_61;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_62;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_63;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_64;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_65;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_66;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_67;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_68;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_69;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_70;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_71;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_72;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_73;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_74;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_75;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_76;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_77;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_78;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_79;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_80;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_81;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_82;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_83;                             // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_84;                             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_85;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_86;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_87;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_88;                             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_89;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_90;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_91;                             // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_92;                             // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_93;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_94;                             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_95;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckFlyingAttackKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckFlyingAttackKind");
static_assert(sizeof(RSBattlePlayer_C_CheckFlyingAttackKind) == 0x000064, "Wrong size on RSBattlePlayer_C_CheckFlyingAttackKind");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, AttackKind) == 0x000000, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::AttackKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, bFlying) == 0x000001, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::bFlying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_byte_Variable) == 0x000002, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable) == 0x000003, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_1) == 0x000004, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_2) == 0x000005, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_3) == 0x000006, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_4) == 0x000007, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_5) == 0x000008, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_6) == 0x000009, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_7) == 0x00000A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_8) == 0x00000B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_9) == 0x00000C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_10) == 0x00000D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_11) == 0x00000E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_12) == 0x00000F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_13) == 0x000010, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_14) == 0x000011, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_15) == 0x000012, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_16) == 0x000013, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_17) == 0x000014, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_18) == 0x000015, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_19) == 0x000016, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_20) == 0x000017, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_21) == 0x000018, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_22) == 0x000019, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_23) == 0x00001A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_24) == 0x00001B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_25) == 0x00001C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_26) == 0x00001D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_27) == 0x00001E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_28) == 0x00001F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_29) == 0x000020, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_30) == 0x000021, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_31) == 0x000022, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_32) == 0x000023, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_33) == 0x000024, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_34) == 0x000025, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_35) == 0x000026, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_36) == 0x000027, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_37) == 0x000028, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_38) == 0x000029, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_39) == 0x00002A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_40) == 0x00002B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_41) == 0x00002C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_42) == 0x00002D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_43) == 0x00002E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_44) == 0x00002F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_45) == 0x000030, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_46) == 0x000031, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_47) == 0x000032, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_48) == 0x000033, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_49) == 0x000034, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_50) == 0x000035, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_50' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_51) == 0x000036, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_51' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_52) == 0x000037, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_52' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_53) == 0x000038, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_53' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_54) == 0x000039, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_54' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_55) == 0x00003A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_55' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_56) == 0x00003B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_56' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_57) == 0x00003C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_57' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_58) == 0x00003D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_58' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_59) == 0x00003E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_59' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_60) == 0x00003F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_60' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_61) == 0x000040, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_61' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_62) == 0x000041, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_62' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_63) == 0x000042, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_63' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_64) == 0x000043, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_64' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_65) == 0x000044, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_65' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_66) == 0x000045, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_66' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_67) == 0x000046, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_67' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_68) == 0x000047, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_68' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_69) == 0x000048, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_69' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_70) == 0x000049, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_70' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_71) == 0x00004A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_71' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_72) == 0x00004B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_72' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_73) == 0x00004C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_73' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_74) == 0x00004D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_74' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_75) == 0x00004E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_75' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_76) == 0x00004F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_76' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_77) == 0x000050, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_77' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_78) == 0x000051, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_78' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_79) == 0x000052, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_79' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_80) == 0x000053, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_80' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_81) == 0x000054, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_81' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_82) == 0x000055, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_82' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_83) == 0x000056, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_83' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_84) == 0x000057, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_84' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_85) == 0x000058, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_85' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_86) == 0x000059, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_86' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_87) == 0x00005A, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_87' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_88) == 0x00005B, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_88' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_89) == 0x00005C, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_89' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_90) == 0x00005D, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_90' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_91) == 0x00005E, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_91' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_92) == 0x00005F, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_92' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_93) == 0x000060, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_93' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_94) == 0x000061, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_94' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, Temp_bool_Variable_95) == 0x000062, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::Temp_bool_Variable_95' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckFlyingAttackKind, K2Node_Select_Default) == 0x000063, "Member 'RSBattlePlayer_C_CheckFlyingAttackKind::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHpGaugePoint
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_GetHpGaugePoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetHpGaugePoint) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetHpGaugePoint");
static_assert(sizeof(RSBattlePlayer_C_GetHpGaugePoint) == 0x000024, "Wrong size on RSBattlePlayer_C_GetHpGaugePoint");
static_assert(offsetof(RSBattlePlayer_C_GetHpGaugePoint, Point) == 0x000000, "Member 'RSBattlePlayer_C_GetHpGaugePoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHpGaugePoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetHpGaugePoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetHpGaugePoint, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetHpGaugePoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCrashChanceCursorPoint
// 0x0024 (0x0024 - 0x0000)
struct RSBattlePlayer_C_GetCrashChanceCursorPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCrashChanceCursorPoint) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCrashChanceCursorPoint");
static_assert(sizeof(RSBattlePlayer_C_GetCrashChanceCursorPoint) == 0x000024, "Wrong size on RSBattlePlayer_C_GetCrashChanceCursorPoint");
static_assert(offsetof(RSBattlePlayer_C_GetCrashChanceCursorPoint, Point) == 0x000000, "Member 'RSBattlePlayer_C_GetCrashChanceCursorPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCrashChanceCursorPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetCrashChanceCursorPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCrashChanceCursorPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_GetCrashChanceCursorPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashSuccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsBrainCrashSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainCrashSuccess) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainCrashSuccess");
static_assert(sizeof(RSBattlePlayer_C_IsBrainCrashSuccess) == 0x000001, "Wrong size on RSBattlePlayer_C_IsBrainCrashSuccess");
static_assert(offsetof(RSBattlePlayer_C_IsBrainCrashSuccess, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainCrashSuccess::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashAccess
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsBrainCrashAccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyInterfaceBrainAccess_bResult;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainCrashAccess) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainCrashAccess");
static_assert(sizeof(RSBattlePlayer_C_IsBrainCrashAccess) == 0x000003, "Wrong size on RSBattlePlayer_C_IsBrainCrashAccess");
static_assert(offsetof(RSBattlePlayer_C_IsBrainCrashAccess, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainCrashAccess::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainCrashAccess, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsBrainCrashAccess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainCrashAccess, CallFunc_IsEnemyInterfaceBrainAccess_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsBrainCrashAccess::CallFunc_IsEnemyInterfaceBrainAccess_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsComboInputEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsComboInputEnd final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsComboInputEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsComboInputEnd");
static_assert(sizeof(RSBattlePlayer_C_IsComboInputEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_IsComboInputEnd");
static_assert(offsetof(RSBattlePlayer_C_IsComboInputEnd, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_IsComboInputEnd::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBadStateIconParam
// 0x0098 (0x0098 - 0x0000)
struct RSBattlePlayer_C_GetBadStateIconParam final
{
public:
	EHCBadState                                   BadType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D13[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStateAddParticleData               ParamData;                                         // 0x0008(0x0028)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D14[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_1;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBadStateAddParticleData               K2Node_MakeStruct_BadStateAddParticleData;         // 0x0070(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBadStateIconParam) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBadStateIconParam");
static_assert(sizeof(RSBattlePlayer_C_GetBadStateIconParam) == 0x000098, "Wrong size on RSBattlePlayer_C_GetBadStateIconParam");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, BadType) == 0x000000, "Member 'RSBattlePlayer_C_GetBadStateIconParam::BadType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, ParamData) == 0x000008, "Member 'RSBattlePlayer_C_GetBadStateIconParam::ParamData' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_byte_Variable) == 0x000030, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable) == 0x000038, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable_1) == 0x000040, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable_2) == 0x000048, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable_3) == 0x000050, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable_4) == 0x000058, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, Temp_object_Variable_5) == 0x000060, "Member 'RSBattlePlayer_C_GetBadStateIconParam::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, K2Node_Select_Default) == 0x000068, "Member 'RSBattlePlayer_C_GetBadStateIconParam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBadStateIconParam, K2Node_MakeStruct_BadStateAddParticleData) == 0x000070, "Member 'RSBattlePlayer_C_GetBadStateIconParam::K2Node_MakeStruct_BadStateAddParticleData' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraDitherTableRowName
// 0x0028 (0x0028 - 0x0000)
struct RSBattlePlayer_C_GetCameraDitherTableRowName final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D15[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D16[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCameraDitherTableRowName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCameraDitherTableRowName");
static_assert(sizeof(RSBattlePlayer_C_GetCameraDitherTableRowName) == 0x000028, "Wrong size on RSBattlePlayer_C_GetCameraDitherTableRowName");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, RowName) == 0x000000, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::RowName' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, Temp_bool_Variable) == 0x000008, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, Temp_name_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, Temp_name_Variable_1) == 0x000014, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, CallFunc_IsControlAI_bAI) == 0x00001C, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCameraDitherTableRowName, K2Node_Select_Default) == 0x000020, "Member 'RSBattlePlayer_C_GetCameraDitherTableRowName::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDriveParameterName
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetDriveParameterName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetDriveParameterName) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDriveParameterName");
static_assert(sizeof(RSBattlePlayer_C_GetDriveParameterName) == 0x000010, "Wrong size on RSBattlePlayer_C_GetDriveParameterName");
static_assert(offsetof(RSBattlePlayer_C_GetDriveParameterName, Param_Name) == 0x000000, "Member 'RSBattlePlayer_C_GetDriveParameterName::Param_Name' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDriveParameterName, CallFunc_GetName_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetDriveParameterName::CallFunc_GetName_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsWeaponAttachMode
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsWeaponAttachMode final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsWeaponAttachMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsWeaponAttachMode");
static_assert(sizeof(RSBattlePlayer_C_IsWeaponAttachMode) == 0x000002, "Wrong size on RSBattlePlayer_C_IsWeaponAttachMode");
static_assert(offsetof(RSBattlePlayer_C_IsWeaponAttachMode, bBattle) == 0x000000, "Member 'RSBattlePlayer_C_IsWeaponAttachMode::bBattle' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsWeaponAttachMode, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_IsWeaponAttachMode::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASTimeParameter
// 0x0040 (0x0040 - 0x0000)
struct RSBattlePlayer_C_GetSASTimeParameter final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D17[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecastSec;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActivationSec;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D18[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_SASParam                            CallFunc_GetSASParamDataCurrentLevel_param;        // 0x0010(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerIDFromSASKind_PlayerID;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistBattleMember_ReturnValue;          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D19[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASTimeParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSASTimeParameter");
static_assert(sizeof(RSBattlePlayer_C_GetSASTimeParameter) == 0x000040, "Wrong size on RSBattlePlayer_C_GetSASTimeParameter");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, Kind) == 0x000000, "Member 'RSBattlePlayer_C_GetSASTimeParameter::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, RecastSec) == 0x000004, "Member 'RSBattlePlayer_C_GetSASTimeParameter::RecastSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, ActivationSec) == 0x000008, "Member 'RSBattlePlayer_C_GetSASTimeParameter::ActivationSec' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, Temp_bool_Variable) == 0x00000C, "Member 'RSBattlePlayer_C_GetSASTimeParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, CallFunc_GetSASParamDataCurrentLevel_param) == 0x000010, "Member 'RSBattlePlayer_C_GetSASTimeParameter::CallFunc_GetSASParamDataCurrentLevel_param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, CallFunc_GetPlayerIDFromSASKind_PlayerID) == 0x000034, "Member 'RSBattlePlayer_C_GetSASTimeParameter::CallFunc_GetPlayerIDFromSASKind_PlayerID' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, Temp_bool_Variable_1) == 0x000035, "Member 'RSBattlePlayer_C_GetSASTimeParameter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, CallFunc_IsExistBattleMember_ReturnValue) == 0x000036, "Member 'RSBattlePlayer_C_GetSASTimeParameter::CallFunc_IsExistBattleMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, K2Node_Select_Default) == 0x000038, "Member 'RSBattlePlayer_C_GetSASTimeParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASTimeParameter, K2Node_Select_Default_1) == 0x00003C, "Member 'RSBattlePlayer_C_GetSASTimeParameter::K2Node_Select_Default_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectDispSwitch
// 0x000B (0x000B - 0x0000)
struct RSBattlePlayer_C_BadStateEffectDispSwitch final
{
public:
	bool                                          bInDisp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectDispSwitch_bSuccess;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_BadStateEffectDispSwitch) == 0x000001, "Wrong alignment on RSBattlePlayer_C_BadStateEffectDispSwitch");
static_assert(sizeof(RSBattlePlayer_C_BadStateEffectDispSwitch) == 0x00000B, "Wrong size on RSBattlePlayer_C_BadStateEffectDispSwitch");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, bInDisp) == 0x000000, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::bInDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, bSuccess) == 0x000001, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsStealthMode_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_BadStateEffectDispSwitch_bSuccess) == 0x000003, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_BadStateEffectDispSwitch_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_2) == 0x000006, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_3) == 0x000007, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_4) == 0x000008, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_5) == 0x000009, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_6) == 0x00000A, "Member 'RSBattlePlayer_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsContentsOpen
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_IsContentsOpen final
{
public:
	EContentsOpening                              Contents;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpen;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsContentsOpen) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsContentsOpen");
static_assert(sizeof(RSBattlePlayer_C_IsContentsOpen) == 0x00000C, "Wrong size on RSBattlePlayer_C_IsContentsOpen");
static_assert(offsetof(RSBattlePlayer_C_IsContentsOpen, Contents) == 0x000000, "Member 'RSBattlePlayer_C_IsContentsOpen::Contents' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsContentsOpen, bOpen) == 0x000001, "Member 'RSBattlePlayer_C_IsContentsOpen::bOpen' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsContentsOpen, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsContentsOpen::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsContentsOpen, CallFunc_Array_Get_Item) == 0x000008, "Member 'RSBattlePlayer_C_IsContentsOpen::CallFunc_Array_Get_Item' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerSuperArmor
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsPlayerSuperArmor final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerSuperArmor) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerSuperArmor");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerSuperArmor) == 0x000002, "Wrong size on RSBattlePlayer_C_IsPlayerSuperArmor");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerSuperArmor, bSuperArmor) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerSuperArmor::bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerSuperArmor, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerSuperArmor::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCharacterLV
// 0x00E8 (0x00E8 - 0x0000)
struct RSBattlePlayer_C_GetCharacterLV final
{
public:
	int32                                         LV;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LLV;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterLV_LV;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0010(0x00D0)(NoDestructor)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetCharacterLV) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetCharacterLV");
static_assert(sizeof(RSBattlePlayer_C_GetCharacterLV) == 0x0000E8, "Wrong size on RSBattlePlayer_C_GetCharacterLV");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, LV) == 0x000000, "Member 'RSBattlePlayer_C_GetCharacterLV::LV' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, LLV) == 0x000004, "Member 'RSBattlePlayer_C_GetCharacterLV::LLV' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, CallFunc_GetCharacterLV_LV) == 0x000008, "Member 'RSBattlePlayer_C_GetCharacterLV::CallFunc_GetCharacterLV_LV' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, CallFunc_GetPlayerID_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetCharacterLV::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_GetCharacterLV::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, CallFunc_Max_ReturnValue) == 0x0000E0, "Member 'RSBattlePlayer_C_GetCharacterLV::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCharacterLV, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000E4, "Member 'RSBattlePlayer_C_GetCharacterLV::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAssasinAttackHitType
// 0x0006 (0x0006 - 0x0000)
struct RSBattlePlayer_C_GetAssasinAttackHitType final
{
public:
	EAssassinAttackHit                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAssassinAttackHit                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAssassinAttackHit                            Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAssassinAttackHit                            K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAssasinAttackHitType) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetAssasinAttackHitType");
static_assert(sizeof(RSBattlePlayer_C_GetAssasinAttackHitType) == 0x000006, "Wrong size on RSBattlePlayer_C_GetAssasinAttackHitType");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, Temp_bool_Variable) == 0x000001, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, Temp_byte_Variable) == 0x000002, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, Temp_byte_Variable_1) == 0x000003, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000004, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAssasinAttackHitType, K2Node_Select_Default) == 0x000005, "Member 'RSBattlePlayer_C_GetAssasinAttackHitType::K2Node_Select_Default' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBodyMeshes
// 0x0070 (0x0070 - 0x0000)
struct RSBattlePlayer_C_GetBodyMeshes final
{
public:
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         BodyMeshes;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1D[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetExtraMesh_ExtraMesh;                   // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBodyMeshes) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBodyMeshes");
static_assert(sizeof(RSBattlePlayer_C_GetBodyMeshes) == 0x000070, "Wrong size on RSBattlePlayer_C_GetBodyMeshes");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, Meshes) == 0x000000, "Member 'RSBattlePlayer_C_GetBodyMeshes::Meshes' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, BodyMeshes) == 0x000010, "Member 'RSBattlePlayer_C_GetBodyMeshes::BodyMeshes' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattlePlayer_C_GetBodyMeshes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattlePlayer_C_GetBodyMeshes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'RSBattlePlayer_C_GetBodyMeshes::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_GetBodyMeshes_Meshes) == 0x000038, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_GetWeaponList_WeaponList) == 0x000048, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBodyMeshes, CallFunc_GetExtraMesh_ExtraMesh) == 0x000060, "Member 'RSBattlePlayer_C_GetBodyMeshes::CallFunc_GetExtraMesh_ExtraMesh' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsControlPlayer
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsControlPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsControlPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsControlPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsControlPlayer) == 0x000003, "Wrong size on RSBattlePlayer_C_IsControlPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsControlPlayer, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsControlPlayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlPlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsControlPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsControlPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableBoringIdle
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDisableBoringIdle final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableBoringIdle) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDisableBoringIdle");
static_assert(sizeof(RSBattlePlayer_C_IsDisableBoringIdle) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDisableBoringIdle");
static_assert(offsetof(RSBattlePlayer_C_IsDisableBoringIdle, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableBoringIdle::bDisable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageCollisionInvincible
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDamageCollisionInvincible final
{
public:
	bool                                          bInvincible;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDamageCollisionInvincible) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDamageCollisionInvincible");
static_assert(sizeof(RSBattlePlayer_C_IsDamageCollisionInvincible) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDamageCollisionInvincible");
static_assert(offsetof(RSBattlePlayer_C_IsDamageCollisionInvincible, bInvincible) == 0x000000, "Member 'RSBattlePlayer_C_IsDamageCollisionInvincible::bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDamageCollisionInvincible, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsDamageCollisionInvincible::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashRange
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetBrainCrashRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainCrashRange) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBrainCrashRange");
static_assert(sizeof(RSBattlePlayer_C_GetBrainCrashRange) == 0x000018, "Wrong size on RSBattlePlayer_C_GetBrainCrashRange");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashRange, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainCrashRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashRange, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_GetBrainCrashRange::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashRange, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_GetBrainCrashRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NeedsDispNoDamage
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_NeedsDispNoDamage final
{
public:
	bool                                          bNeedsDipsNoDamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LResult;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDispNoDamage_bEnable;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NeedsDispNoDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_NeedsDispNoDamage");
static_assert(sizeof(RSBattlePlayer_C_NeedsDispNoDamage) == 0x000004, "Wrong size on RSBattlePlayer_C_NeedsDispNoDamage");
static_assert(offsetof(RSBattlePlayer_C_NeedsDispNoDamage, bNeedsDipsNoDamage) == 0x000000, "Member 'RSBattlePlayer_C_NeedsDispNoDamage::bNeedsDipsNoDamage' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsDispNoDamage, LResult) == 0x000001, "Member 'RSBattlePlayer_C_NeedsDispNoDamage::LResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsDispNoDamage, CallFunc_IsEnableDispNoDamage_bEnable) == 0x000002, "Member 'RSBattlePlayer_C_NeedsDispNoDamage::CallFunc_IsEnableDispNoDamage_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsDispNoDamage, CallFunc_IsMetalMode_bMetal) == 0x000003, "Member 'RSBattlePlayer_C_NeedsDispNoDamage::CallFunc_IsMetalMode_bMetal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDispNoDamage
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnableDispNoDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableDispNoDamage) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableDispNoDamage");
static_assert(sizeof(RSBattlePlayer_C_IsEnableDispNoDamage) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnableDispNoDamage");
static_assert(offsetof(RSBattlePlayer_C_IsEnableDispNoDamage, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableDispNoDamage::bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAutoStealth
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsAutoStealth final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAutoStealth) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAutoStealth");
static_assert(sizeof(RSBattlePlayer_C_IsAutoStealth) == 0x000001, "Wrong size on RSBattlePlayer_C_IsAutoStealth");
static_assert(offsetof(RSBattlePlayer_C_IsAutoStealth, bAuto) == 0x000000, "Member 'RSBattlePlayer_C_IsAutoStealth::bAuto' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableBehaviorTree
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_IsDisableBehaviorTree final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableBehaviorTree) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsDisableBehaviorTree");
static_assert(sizeof(RSBattlePlayer_C_IsDisableBehaviorTree) == 0x00000C, "Wrong size on RSBattlePlayer_C_IsDisableBehaviorTree");
static_assert(offsetof(RSBattlePlayer_C_IsDisableBehaviorTree, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableBehaviorTree::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDisableBehaviorTree, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_IsDisableBehaviorTree::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDisableBehaviorTree, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsDisableBehaviorTree::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetWeaponEmissiveValue
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetWeaponEmissiveValue final
{
public:
	float                                         Emmisive;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetWeaponEmissiveValue) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetWeaponEmissiveValue");
static_assert(sizeof(RSBattlePlayer_C_GetWeaponEmissiveValue) == 0x000004, "Wrong size on RSBattlePlayer_C_GetWeaponEmissiveValue");
static_assert(offsetof(RSBattlePlayer_C_GetWeaponEmissiveValue, Emmisive) == 0x000000, "Member 'RSBattlePlayer_C_GetWeaponEmissiveValue::Emmisive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.NeedsWeaponVisibility
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_NeedsWeaponVisibility final
{
public:
	bool                                          bNeedsVisibility;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D20[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWeaponVisibility_Visibillity;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoBattleWeaponDispOff_bOff;             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_NeedsWeaponVisibility) == 0x000008, "Wrong alignment on RSBattlePlayer_C_NeedsWeaponVisibility");
static_assert(sizeof(RSBattlePlayer_C_NeedsWeaponVisibility) == 0x000018, "Wrong size on RSBattlePlayer_C_NeedsWeaponVisibility");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, bNeedsVisibility) == 0x000000, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::bNeedsVisibility' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_IsPlayerStatus_Result) == 0x000010, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_IsWeaponVisibility_Visibillity) == 0x000011, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_IsWeaponVisibility_Visibillity' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_IsNoBattleWeaponDispOff_bOff) == 0x000013, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_IsNoBattleWeaponDispOff_bOff' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_IsBattling_bBatting) == 0x000014, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000016, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_NeedsWeaponVisibility, CallFunc_BooleanOR_ReturnValue_1) == 0x000017, "Member 'RSBattlePlayer_C_NeedsWeaponVisibility::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainFieldUser
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_IsBrainFieldUser final
{
public:
	bool                                          bIsUser;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D21[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBrainFieldUser_User;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainFieldUser) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsBrainFieldUser");
static_assert(sizeof(RSBattlePlayer_C_IsBrainFieldUser) == 0x000020, "Wrong size on RSBattlePlayer_C_IsBrainFieldUser");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldUser, bIsUser) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainFieldUser::bIsUser' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldUser, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsBrainFieldUser::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldUser, CallFunc_GetBrainFieldUser_User) == 0x000010, "Member 'RSBattlePlayer_C_IsBrainFieldUser::CallFunc_GetBrainFieldUser_User' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBrainFieldUser, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsBrainFieldUser::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.CheckDisableBeginSAS_Telepo
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_CheckDisableBeginSAS_Telepo final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_CheckDisableBeginSAS_Telepo) == 0x000001, "Wrong alignment on RSBattlePlayer_C_CheckDisableBeginSAS_Telepo");
static_assert(sizeof(RSBattlePlayer_C_CheckDisableBeginSAS_Telepo) == 0x000003, "Wrong size on RSBattlePlayer_C_CheckDisableBeginSAS_Telepo");
static_assert(offsetof(RSBattlePlayer_C_CheckDisableBeginSAS_Telepo, bDisable) == 0x000000, "Member 'RSBattlePlayer_C_CheckDisableBeginSAS_Telepo::bDisable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDisableBeginSAS_Telepo, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'RSBattlePlayer_C_CheckDisableBeginSAS_Telepo::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_CheckDisableBeginSAS_Telepo, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_CheckDisableBeginSAS_Telepo::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsStealthFromEvent
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsStealthFromEvent final
{
public:
	bool                                          bFromEvent;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthFromEvent_bFromEvent;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsStealthFromEvent) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsStealthFromEvent");
static_assert(sizeof(RSBattlePlayer_C_IsStealthFromEvent) == 0x000002, "Wrong size on RSBattlePlayer_C_IsStealthFromEvent");
static_assert(offsetof(RSBattlePlayer_C_IsStealthFromEvent, bFromEvent) == 0x000000, "Member 'RSBattlePlayer_C_IsStealthFromEvent::bFromEvent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsStealthFromEvent, CallFunc_IsStealthFromEvent_bFromEvent) == 0x000001, "Member 'RSBattlePlayer_C_IsStealthFromEvent::CallFunc_IsStealthFromEvent_bFromEvent' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInvisibleMiniMap
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsInvisibleMiniMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealth_return;                         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInvisibleMiniMap) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInvisibleMiniMap");
static_assert(sizeof(RSBattlePlayer_C_IsInvisibleMiniMap) == 0x000004, "Wrong size on RSBattlePlayer_C_IsInvisibleMiniMap");
static_assert(offsetof(RSBattlePlayer_C_IsInvisibleMiniMap, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInvisibleMiniMap::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInvisibleMiniMap, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000001, "Member 'RSBattlePlayer_C_IsInvisibleMiniMap::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInvisibleMiniMap, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsInvisibleMiniMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInvisibleMiniMap, CallFunc_IsStealth_return) == 0x000003, "Member 'RSBattlePlayer_C_IsInvisibleMiniMap::CallFunc_IsStealth_return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackerMainPlayer
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsAttackerMainPlayer final
{
public:
	bool                                          bMainPlayer;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAttackerMainPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAttackerMainPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsAttackerMainPlayer) == 0x000002, "Wrong size on RSBattlePlayer_C_IsAttackerMainPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsAttackerMainPlayer, bMainPlayer) == 0x000000, "Member 'RSBattlePlayer_C_IsAttackerMainPlayer::bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAttackerMainPlayer, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsAttackerMainPlayer::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSpawnWait
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_IsSpawnWait final
{
public:
	bool                                          bSpawnWait;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue_1;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemySpawnState                          Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSpawnWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSpawnWait");
static_assert(sizeof(RSBattlePlayer_C_IsSpawnWait) == 0x000008, "Wrong size on RSBattlePlayer_C_IsSpawnWait");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, bSpawnWait) == 0x000000, "Member 'RSBattlePlayer_C_IsSpawnWait::bSpawnWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, CallFunc_MakeLiteralBool_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsSpawnWait::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, CallFunc_MakeLiteralBool_ReturnValue_1) == 0x000002, "Member 'RSBattlePlayer_C_IsSpawnWait::CallFunc_MakeLiteralBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, Temp_byte_Variable) == 0x000003, "Member 'RSBattlePlayer_C_IsSpawnWait::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, K2Node_Select_Default) == 0x000004, "Member 'RSBattlePlayer_C_IsSpawnWait::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'RSBattlePlayer_C_IsSpawnWait::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'RSBattlePlayer_C_IsSpawnWait::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawnWait, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'RSBattlePlayer_C_IsSpawnWait::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDebugInvincible
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDebugInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDebugInvincible) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDebugInvincible");
static_assert(sizeof(RSBattlePlayer_C_IsDebugInvincible) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDebugInvincible");
static_assert(offsetof(RSBattlePlayer_C_IsDebugInvincible, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDebugInvincible::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsLookAtEnable
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsLookAtEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLookAtEnabled_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsLookAtEnable) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsLookAtEnable");
static_assert(sizeof(RSBattlePlayer_C_IsLookAtEnable) == 0x000003, "Wrong size on RSBattlePlayer_C_IsLookAtEnable");
static_assert(offsetof(RSBattlePlayer_C_IsLookAtEnable, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsLookAtEnable::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsLookAtEnable, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsLookAtEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsLookAtEnable, CallFunc_IsLookAtEnabled_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsLookAtEnable::CallFunc_IsLookAtEnabled_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetPlayerIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerIndex) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerIndex");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerIndex) == 0x000004, "Wrong size on RSBattlePlayer_C_GetPlayerIndex");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerIndex, Param_Index) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerIndex::Param_Index' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponList
// 0x0078 (0x0078 - 0x0000)
struct RSBattlePlayer_C_GetPlayerWeaponList final
{
public:
	EGetPlayerWeaponType                          Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D22[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               WeaponList;                                        // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D23[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList;                 // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetWeaponList_WeaponList_1;               // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               K2Node_MakeArray_Array_1;                          // 0x0060(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerWeaponList) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetPlayerWeaponList");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerWeaponList) == 0x000078, "Wrong size on RSBattlePlayer_C_GetPlayerWeaponList");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, Type) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, WeaponList) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_GetWeaponList_WeaponList) == 0x000020, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_GetWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_GetWeaponList_WeaponList_1) == 0x000038, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_GetWeaponList_WeaponList_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, K2Node_MakeArray_Array) == 0x000048, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, K2Node_MakeArray_Array_1) == 0x000060, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerWeaponList, CallFunc_Greater_IntInt_ReturnValue) == 0x000074, "Member 'RSBattlePlayer_C_GetPlayerWeaponList::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyPlayer
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_IsEnemyPlayer final
{
public:
	bool                                          bEnemyPlayer;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D24[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetDebugControlNonePlayerID_ReturnValue;  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyPlayer) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsEnemyPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyPlayer) == 0x000018, "Wrong size on RSBattlePlayer_C_IsEnemyPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, bEnemyPlayer) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyPlayer::bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattlePlayer_C_IsEnemyPlayer::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattlePlayer_C_IsEnemyPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RSBattlePlayer_C_IsEnemyPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, CallFunc_GetDebugControlNonePlayerID_ReturnValue) == 0x000012, "Member 'RSBattlePlayer_C_IsEnemyPlayer::CallFunc_GetDebugControlNonePlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyPlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000013, "Member 'RSBattlePlayer_C_IsEnemyPlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsForceWarpAble_Interface
// 0x0007 (0x0007 - 0x0000)
struct RSBattlePlayer_C_IsForceWarpAble_Interface final
{
public:
	bool                                          bWarpAble;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LWarpAble;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMove_result;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventWait_bWait;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsForceWarpAble_Interface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsForceWarpAble_Interface");
static_assert(sizeof(RSBattlePlayer_C_IsForceWarpAble_Interface) == 0x000007, "Wrong size on RSBattlePlayer_C_IsForceWarpAble_Interface");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, bWarpAble) == 0x000000, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::bWarpAble' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, LWarpAble) == 0x000001, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::LWarpAble' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, CallFunc_IsEventMove_result) == 0x000002, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::CallFunc_IsEventMove_result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, CallFunc_IsEventWait_bWait) == 0x000003, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::CallFunc_IsEventWait_bWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, CallFunc_IsActionStatus_Result) == 0x000004, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, CallFunc_IsDead_bDead) == 0x000005, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsForceWarpAble_Interface, CallFunc_IsPlayerStatus_Result) == 0x000006, "Member 'RSBattlePlayer_C_IsForceWarpAble_Interface::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSkillParameter
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_GetSkillParameter final
{
public:
	EPlayerSkill                                  Skill;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLearned;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D25[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Parameter;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLearnedSkillParameter_bLearned;        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLearnedSkillParameter_Parameter2;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSkillParameter) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetSkillParameter");
static_assert(sizeof(RSBattlePlayer_C_GetSkillParameter) == 0x000014, "Wrong size on RSBattlePlayer_C_GetSkillParameter");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, Skill) == 0x000000, "Member 'RSBattlePlayer_C_GetSkillParameter::Skill' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, bLearned) == 0x000001, "Member 'RSBattlePlayer_C_GetSkillParameter::bLearned' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, Parameter) == 0x000004, "Member 'RSBattlePlayer_C_GetSkillParameter::Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_GetPlayerID_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000009, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_GetLearnedSkillParameter_bLearned) == 0x00000B, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_GetLearnedSkillParameter_bLearned' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_GetLearnedSkillParameter_Parameter) == 0x00000C, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_GetLearnedSkillParameter_Parameter' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSkillParameter, CallFunc_GetLearnedSkillParameter_Parameter2) == 0x000010, "Member 'RSBattlePlayer_C_GetSkillParameter::CallFunc_GetLearnedSkillParameter_Parameter2' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerInputRestriction
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsPlayerInputRestriction final
{
public:
	EPlayerInputRestrictionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRestriction;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRestriction_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerInputRestriction) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerInputRestriction");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerInputRestriction) == 0x000003, "Wrong size on RSBattlePlayer_C_IsPlayerInputRestriction");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerInputRestriction, Type) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerInputRestriction::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerInputRestriction, bRestriction) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerInputRestriction::bRestriction' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerInputRestriction, CallFunc_IsRestriction_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsPlayerInputRestriction::CallFunc_IsRestriction_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcComp
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnpcComp final
{
public:
	class UBP_ENpcComponent_C*                    ReturnComp;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnpcComp) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnpcComp");
static_assert(sizeof(RSBattlePlayer_C_GetEnpcComp) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnpcComp");
static_assert(offsetof(RSBattlePlayer_C_GetEnpcComp, ReturnComp) == 0x000000, "Member 'RSBattlePlayer_C_GetEnpcComp::ReturnComp' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAnimationEndTalkTurn
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsAnimationEndTalkTurn final
{
public:
	bool                                          bAnimation;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsASAnimPlayEnd_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAnimationEndTalkTurn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAnimationEndTalkTurn");
static_assert(sizeof(RSBattlePlayer_C_IsAnimationEndTalkTurn) == 0x000002, "Wrong size on RSBattlePlayer_C_IsAnimationEndTalkTurn");
static_assert(offsetof(RSBattlePlayer_C_IsAnimationEndTalkTurn, bAnimation) == 0x000000, "Member 'RSBattlePlayer_C_IsAnimationEndTalkTurn::bAnimation' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAnimationEndTalkTurn, CallFunc_IsASAnimPlayEnd_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsAnimationEndTalkTurn::CallFunc_IsASAnimPlayEnd_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTalkLookAtLocation
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetTalkLookAtLocation final
{
public:
	bool                                          Param_bTalkLookAt;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D26[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTalkLookAtLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetTalkLookAtLocation");
static_assert(sizeof(RSBattlePlayer_C_GetTalkLookAtLocation) == 0x000010, "Wrong size on RSBattlePlayer_C_GetTalkLookAtLocation");
static_assert(offsetof(RSBattlePlayer_C_GetTalkLookAtLocation, Param_bTalkLookAt) == 0x000000, "Member 'RSBattlePlayer_C_GetTalkLookAtLocation::Param_bTalkLookAt' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTalkLookAtLocation, Location) == 0x000004, "Member 'RSBattlePlayer_C_GetTalkLookAtLocation::Location' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCameraControl
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsCameraControl final
{
public:
	bool                                          bControl;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCameraControl) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsCameraControl");
static_assert(sizeof(RSBattlePlayer_C_IsCameraControl) == 0x000003, "Wrong size on RSBattlePlayer_C_IsCameraControl");
static_assert(offsetof(RSBattlePlayer_C_IsCameraControl, bControl) == 0x000000, "Member 'RSBattlePlayer_C_IsCameraControl::bControl' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCameraControl, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsCameraControl::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCameraControl, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsCameraControl::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnpcSASLinkAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnpcSASLinkAble final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnpcSASLinkAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnpcSASLinkAble");
static_assert(sizeof(RSBattlePlayer_C_IsEnpcSASLinkAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnpcSASLinkAble");
static_assert(offsetof(RSBattlePlayer_C_IsEnpcSASLinkAble, Kind) == 0x000000, "Member 'RSBattlePlayer_C_IsEnpcSASLinkAble::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnpcSASLinkAble, bOK) == 0x000001, "Member 'RSBattlePlayer_C_IsEnpcSASLinkAble::bOK' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDying
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_IsDying final
{
public:
	bool                                          bDying;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D27[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDying) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsDying");
static_assert(sizeof(RSBattlePlayer_C_IsDying) == 0x00000C, "Wrong size on RSBattlePlayer_C_IsDying");
static_assert(offsetof(RSBattlePlayer_C_IsDying, bDying) == 0x000000, "Member 'RSBattlePlayer_C_IsDying::bDying' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDying, CallFunc_GetHPPercent_Percent) == 0x000004, "Member 'RSBattlePlayer_C_IsDying::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDying, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_IsDying::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAutoTakenItem
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsAutoTakenItem final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAutoTakenItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAutoTakenItem");
static_assert(sizeof(RSBattlePlayer_C_IsAutoTakenItem) == 0x000001, "Wrong size on RSBattlePlayer_C_IsAutoTakenItem");
static_assert(offsetof(RSBattlePlayer_C_IsAutoTakenItem, bAuto) == 0x000000, "Member 'RSBattlePlayer_C_IsAutoTakenItem::bAuto' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashStartTransform
// 0x0150 (0x0150 - 0x0000)
struct RSBattlePlayer_C_GetBrainCrashStartTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	TArray<EPlayerCollisionCheckType>             LCheckType;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EPlayerCollisionCheckType>             K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D28[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D29[0xC];                                     // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D2A[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x00B8(0x0040)(ConstParm)
	float                                         CallFunc_BreakVector_X;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D2B[0xC];                                     // 0x0114(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainCrashStartTransform) == 0x000010, "Wrong alignment on RSBattlePlayer_C_GetBrainCrashStartTransform");
static_assert(sizeof(RSBattlePlayer_C_GetBrainCrashStartTransform) == 0x000150, "Wrong size on RSBattlePlayer_C_GetBrainCrashStartTransform");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, Transform) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::Transform' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, LCheckType) == 0x000030, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::LCheckType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, K2Node_MakeArray_Array) == 0x000040, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, Temp_int_Array_Index_Variable) == 0x000050, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, Temp_int_Loop_Num_Variable) == 0x000054, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00005C, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000068, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_GetTransform_ReturnValue) == 0x000080, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_GetAsyncResult_ReturnValue) == 0x0000B8, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_BreakVector_X) == 0x0000F8, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_BreakVector_Y) == 0x0000FC, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_BreakVector_Z) == 0x000100, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_Add_FloatFloat_ReturnValue) == 0x000104, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashStartTransform, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'RSBattlePlayer_C_GetBrainCrashStartTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsExecTalkEvent
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsExecTalkEvent final
{
public:
	bool                                          bTalk;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsExecTalkEvent) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsExecTalkEvent");
static_assert(sizeof(RSBattlePlayer_C_IsExecTalkEvent) == 0x000001, "Wrong size on RSBattlePlayer_C_IsExecTalkEvent");
static_assert(offsetof(RSBattlePlayer_C_IsExecTalkEvent, bTalk) == 0x000000, "Member 'RSBattlePlayer_C_IsExecTalkEvent::bTalk' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUsingItem
// 0x0005 (0x0005 - 0x0000)
struct RSBattlePlayer_C_IsUsingItem final
{
public:
	bool                                          bUsing;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EConsumeItemID                                ItemId;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EConsumeItemID                                CallFunc_GetItemID_item;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsUsingItem) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUsingItem");
static_assert(sizeof(RSBattlePlayer_C_IsUsingItem) == 0x000005, "Wrong size on RSBattlePlayer_C_IsUsingItem");
static_assert(offsetof(RSBattlePlayer_C_IsUsingItem, bUsing) == 0x000000, "Member 'RSBattlePlayer_C_IsUsingItem::bUsing' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUsingItem, ItemId) == 0x000001, "Member 'RSBattlePlayer_C_IsUsingItem::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUsingItem, CallFunc_GetCurrentActionState_Kind) == 0x000002, "Member 'RSBattlePlayer_C_IsUsingItem::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUsingItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsUsingItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsUsingItem, CallFunc_GetItemID_item) == 0x000004, "Member 'RSBattlePlayer_C_IsUsingItem::CallFunc_GetItemID_item' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetControlPlayerDist
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetControlPlayerDist final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetControlPlayerDist) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetControlPlayerDist");
static_assert(sizeof(RSBattlePlayer_C_GetControlPlayerDist) == 0x000018, "Wrong size on RSBattlePlayer_C_GetControlPlayerDist");
static_assert(offsetof(RSBattlePlayer_C_GetControlPlayerDist, Dist) == 0x000000, "Member 'RSBattlePlayer_C_GetControlPlayerDist::Dist' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetControlPlayerDist, CallFunc_GetControlPlayerDist_Dist) == 0x00000C, "Member 'RSBattlePlayer_C_GetControlPlayerDist::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMoveAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsMoveAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionIdleWalkRun_bEnable;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMoveAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMoveAble");
static_assert(sizeof(RSBattlePlayer_C_IsMoveAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsMoveAble");
static_assert(offsetof(RSBattlePlayer_C_IsMoveAble, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsMoveAble::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMoveAble, CallFunc_IsEnableActionIdleWalkRun_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsMoveAble::CallFunc_IsEnableActionIdleWalkRun_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMovePosActor
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetMovePosActor final
{
public:
	class AActor*                                 MovePosActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMovePosActor_MovePosActor;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMovePosActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetMovePosActor");
static_assert(sizeof(RSBattlePlayer_C_GetMovePosActor) == 0x000010, "Wrong size on RSBattlePlayer_C_GetMovePosActor");
static_assert(offsetof(RSBattlePlayer_C_GetMovePosActor, MovePosActor) == 0x000000, "Member 'RSBattlePlayer_C_GetMovePosActor::MovePosActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMovePosActor, CallFunc_GetMovePosActor_MovePosActor) == 0x000008, "Member 'RSBattlePlayer_C_GetMovePosActor::CallFunc_GetMovePosActor_MovePosActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsAttackAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackAble_bEnable;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAttackAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAttackAble");
static_assert(sizeof(RSBattlePlayer_C_IsAttackAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsAttackAble");
static_assert(offsetof(RSBattlePlayer_C_IsAttackAble, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsAttackAble::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAttackAble, CallFunc_IsAttackAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsAttackAble::CallFunc_IsAttackAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatusAI
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsActionStatusAI final
{
public:
	EPlayerActionStatus                           ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActionStatusAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActionStatusAI");
static_assert(sizeof(RSBattlePlayer_C_IsActionStatusAI) == 0x000003, "Wrong size on RSBattlePlayer_C_IsActionStatusAI");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI, ActionStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsActionStatusAI::ActionStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI, bResult) == 0x000001, "Member 'RSBattlePlayer_C_IsActionStatusAI::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActionStatusAI, CallFunc_IsActionStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_IsActionStatusAI::CallFunc_IsActionStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatusAI
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsPlayerStatusAI final
{
public:
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerStatusAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerStatusAI");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerStatusAI) == 0x000003, "Wrong size on RSBattlePlayer_C_IsPlayerStatusAI");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI, PlayerStatus) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerStatusAI::PlayerStatus' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI, bResult) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerStatusAI::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerStatusAI, CallFunc_IsPlayerStatus_Result) == 0x000002, "Member 'RSBattlePlayer_C_IsPlayerStatusAI::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Attack
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Attack final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Attack) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Attack");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Attack) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Attack");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Attack, bON) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Attack::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Attack, CallFunc_IsOn_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Attack::CallFunc_IsOn_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Dodge
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Dodge final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Dodge) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Dodge");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Dodge) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Dodge");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Dodge, bON) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Dodge::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Dodge, CallFunc_IsOn_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Dodge::CallFunc_IsOn_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDodgeAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDodgeAble_bEnable;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDodgeAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDodgeAble");
static_assert(sizeof(RSBattlePlayer_C_IsDodgeAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDodgeAble");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeAble, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsDodgeAble::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeAble, CallFunc_IsDodgeAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsDodgeAble::CallFunc_IsDodgeAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAIMoveMode
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsAIMoveMode final
{
public:
	EPlayerAIMoveMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIMoveMode                             CallFunc_GetMoveMode_MoveMode;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAIMoveMode) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAIMoveMode");
static_assert(sizeof(RSBattlePlayer_C_IsAIMoveMode) == 0x000004, "Wrong size on RSBattlePlayer_C_IsAIMoveMode");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode, Mode) == 0x000000, "Member 'RSBattlePlayer_C_IsAIMoveMode::Mode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode, Result) == 0x000001, "Member 'RSBattlePlayer_C_IsAIMoveMode::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode, CallFunc_GetMoveMode_MoveMode) == 0x000002, "Member 'RSBattlePlayer_C_IsAIMoveMode::CallFunc_GetMoveMode_MoveMode' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAIMoveMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsAIMoveMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThink
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsBattleThink final
{
public:
	EPlayerAIBattleThinkType                      Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleThink_bResult;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleThink) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleThink");
static_assert(sizeof(RSBattlePlayer_C_IsBattleThink) == 0x000003, "Wrong size on RSBattlePlayer_C_IsBattleThink");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink, Type) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleThink::Type' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink, Result) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleThink::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThink, CallFunc_IsBattleThink_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsBattleThink::CallFunc_IsBattleThink_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThinkParam
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsBattleThinkParam final
{
public:
	EPlayerAIBattleThinkParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkParam                     CallFunc_GetCurrentBattleThinkParam_Param;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBattleThinkParam) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBattleThinkParam");
static_assert(sizeof(RSBattlePlayer_C_IsBattleThinkParam) == 0x000004, "Wrong size on RSBattlePlayer_C_IsBattleThinkParam");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam, Param) == 0x000000, "Member 'RSBattlePlayer_C_IsBattleThinkParam::Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam, bResult) == 0x000001, "Member 'RSBattlePlayer_C_IsBattleThinkParam::bResult' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam, CallFunc_GetCurrentBattleThinkParam_Param) == 0x000002, "Member 'RSBattlePlayer_C_IsBattleThinkParam::CallFunc_GetCurrentBattleThinkParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBattleThinkParam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsBattleThinkParam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBattleTargetActor
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetBattleTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBattleTargetActor_Target;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBattleTargetActor) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBattleTargetActor");
static_assert(sizeof(RSBattlePlayer_C_GetBattleTargetActor) == 0x000010, "Wrong size on RSBattlePlayer_C_GetBattleTargetActor");
static_assert(offsetof(RSBattlePlayer_C_GetBattleTargetActor, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_GetBattleTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBattleTargetActor, CallFunc_GetBattleTargetActor_Target) == 0x000008, "Member 'RSBattlePlayer_C_GetBattleTargetActor::CallFunc_GetBattleTargetActor_Target' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Jump
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Jump final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Jump) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Jump");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Jump) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Jump");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Jump, bON) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Jump::bON' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Jump, CallFunc_IsOn_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Jump::CallFunc_IsOn_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAble
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsJumpAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJumpAble_bEnable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsJumpAble) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsJumpAble");
static_assert(sizeof(RSBattlePlayer_C_IsJumpAble) == 0x000002, "Wrong size on RSBattlePlayer_C_IsJumpAble");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAble, bEnable) == 0x000000, "Member 'RSBattlePlayer_C_IsJumpAble::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAble, CallFunc_IsJumpAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsJumpAble::CallFunc_IsJumpAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackCountAI
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetAttackCountAI final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAttackCount_Count;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAttackCountAI) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetAttackCountAI");
static_assert(sizeof(RSBattlePlayer_C_GetAttackCountAI) == 0x000008, "Wrong size on RSBattlePlayer_C_GetAttackCountAI");
static_assert(offsetof(RSBattlePlayer_C_GetAttackCountAI, Count) == 0x000000, "Member 'RSBattlePlayer_C_GetAttackCountAI::Count' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAttackCountAI, CallFunc_GetAttackCount_Count) == 0x000004, "Member 'RSBattlePlayer_C_GetAttackCountAI::CallFunc_GetAttackCount_Count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackInputKindAI
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_OverwriteAttackInputKindAI final
{
public:
	EPlayerAIBattleThinkType                      ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            InputKind;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Kind;                                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_OverwriteAttackInputKindAI) == 0x000001, "Wrong alignment on RSBattlePlayer_C_OverwriteAttackInputKindAI");
static_assert(sizeof(RSBattlePlayer_C_OverwriteAttackInputKindAI) == 0x000003, "Wrong size on RSBattlePlayer_C_OverwriteAttackInputKindAI");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI, ThinkType) == 0x000000, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI::ThinkType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI, InputKind) == 0x000001, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI::InputKind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_OverwriteAttackInputKindAI, Kind) == 0x000002, "Member 'RSBattlePlayer_C_OverwriteAttackInputKindAI::Kind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMove
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventMove final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMove_result;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventMove) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventMove");
static_assert(sizeof(RSBattlePlayer_C_IsEventMove) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventMove");
static_assert(offsetof(RSBattlePlayer_C_IsEventMove, Result) == 0x000000, "Member 'RSBattlePlayer_C_IsEventMove::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventMove, CallFunc_IsEventMove_result) == 0x000001, "Member 'RSBattlePlayer_C_IsEventMove::CallFunc_IsEventMove_result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMoveEnd
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventMoveEnd final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMoveEnd_result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventMoveEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventMoveEnd");
static_assert(sizeof(RSBattlePlayer_C_IsEventMoveEnd) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventMoveEnd");
static_assert(offsetof(RSBattlePlayer_C_IsEventMoveEnd, Result) == 0x000000, "Member 'RSBattlePlayer_C_IsEventMoveEnd::Result' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventMoveEnd, CallFunc_IsEventMoveEnd_result) == 0x000001, "Member 'RSBattlePlayer_C_IsEventMoveEnd::CallFunc_IsEventMoveEnd_result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsResetBehaviorTree
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsResetBehaviorTree final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsResetBehaviorTree_bResetBehaviorTree;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsResetBehaviorTree) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsResetBehaviorTree");
static_assert(sizeof(RSBattlePlayer_C_IsResetBehaviorTree) == 0x000002, "Wrong size on RSBattlePlayer_C_IsResetBehaviorTree");
static_assert(offsetof(RSBattlePlayer_C_IsResetBehaviorTree, bReset) == 0x000000, "Member 'RSBattlePlayer_C_IsResetBehaviorTree::bReset' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsResetBehaviorTree, CallFunc_IsResetBehaviorTree_bResetBehaviorTree) == 0x000001, "Member 'RSBattlePlayer_C_IsResetBehaviorTree::CallFunc_IsResetBehaviorTree_bResetBehaviorTree' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventWait
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventWait final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventWait_bWait;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventWait) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventWait");
static_assert(sizeof(RSBattlePlayer_C_IsEventWait) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventWait");
static_assert(offsetof(RSBattlePlayer_C_IsEventWait, bWait) == 0x000000, "Member 'RSBattlePlayer_C_IsEventWait::bWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventWait, CallFunc_IsEventWait_bWait) == 0x000001, "Member 'RSBattlePlayer_C_IsEventWait::CallFunc_IsEventWait_bWait' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetUseItemID
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetUseItemID final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EConsumeItemID                                CallFunc_GetUseItemID_ItemID;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetUseItemID) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetUseItemID");
static_assert(sizeof(RSBattlePlayer_C_GetUseItemID) == 0x000002, "Wrong size on RSBattlePlayer_C_GetUseItemID");
static_assert(offsetof(RSBattlePlayer_C_GetUseItemID, ItemId) == 0x000000, "Member 'RSBattlePlayer_C_GetUseItemID::ItemId' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetUseItemID, CallFunc_GetUseItemID_ItemID) == 0x000001, "Member 'RSBattlePlayer_C_GetUseItemID::CallFunc_GetUseItemID_ItemID' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerID
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetPlayerID final
{
public:
	EPlayerID                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D2C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerID) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerID");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerID) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetPlayerID");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerID, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerID::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerID, CallFunc_GetId_ReturnValue) == 0x000004, "Member 'RSBattlePlayer_C_GetPlayerID::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerID, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerID::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerID, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'RSBattlePlayer_C_GetPlayerID::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPartyPlayerKind
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetPartyPlayerKind final
{
public:
	ERSPartyPlayerKind                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPartyPlayerKind) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetPartyPlayerKind");
static_assert(sizeof(RSBattlePlayer_C_GetPartyPlayerKind) == 0x000001, "Wrong size on RSBattlePlayer_C_GetPartyPlayerKind");
static_assert(offsetof(RSBattlePlayer_C_GetPartyPlayerKind, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPartyPlayerKind::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTargetInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsLockTargetInterface final
{
public:
	bool                                          IsLockTarget;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_IsLockTarget;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsLockTargetInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsLockTargetInterface");
static_assert(sizeof(RSBattlePlayer_C_IsLockTargetInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_IsLockTargetInterface");
static_assert(offsetof(RSBattlePlayer_C_IsLockTargetInterface, IsLockTarget) == 0x000000, "Member 'RSBattlePlayer_C_IsLockTargetInterface::IsLockTarget' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsLockTargetInterface, CallFunc_IsLockTarget_IsLockTarget) == 0x000001, "Member 'RSBattlePlayer_C_IsLockTargetInterface::CallFunc_IsLockTarget_IsLockTarget' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetBossInterface
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_GetTargetBossInterface final
{
public:
	class AActor*                                 LockBoss;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetTargetBoss_LockBoss;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossHpDisp_IsDisp;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetTargetBossInterface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetTargetBossInterface");
static_assert(sizeof(RSBattlePlayer_C_GetTargetBossInterface) == 0x000020, "Wrong size on RSBattlePlayer_C_GetTargetBossInterface");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, LockBoss) == 0x000000, "Member 'RSBattlePlayer_C_GetTargetBossInterface::LockBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, CallFunc_GetTargetBoss_LockBoss) == 0x000008, "Member 'RSBattlePlayer_C_GetTargetBossInterface::CallFunc_GetTargetBoss_LockBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, K2Node_DynamicCast_AsRSBattle_Character) == 0x000010, "Member 'RSBattlePlayer_C_GetTargetBossInterface::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattlePlayer_C_GetTargetBossInterface::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, CallFunc_IsBossHpDisp_IsDisp) == 0x000019, "Member 'RSBattlePlayer_C_GetTargetBossInterface::CallFunc_IsBossHpDisp_IsDisp' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetTargetBossInterface, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'RSBattlePlayer_C_GetTargetBossInterface::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTargetActorInterface
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetCurrentTargetActorInterface final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentTargetActorInterface) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCurrentTargetActorInterface");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentTargetActorInterface) == 0x000010, "Wrong size on RSBattlePlayer_C_GetCurrentTargetActorInterface");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentTargetActorInterface, TargetActor) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentTargetActorInterface::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentTargetActorInterface, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000008, "Member 'RSBattlePlayer_C_GetCurrentTargetActorInterface::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_ForButton
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsActiveSAS_ForButton final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSAS;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveSAS_ForButton) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveSAS_ForButton");
static_assert(sizeof(RSBattlePlayer_C_IsActiveSAS_ForButton) == 0x000002, "Wrong size on RSBattlePlayer_C_IsActiveSAS_ForButton");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_ForButton, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveSAS_ForButton::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveSAS_ForButton, IsSAS) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveSAS_ForButton::IsSAS' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsOnReadySAS
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsOnReadySAS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsOnReadySAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsOnReadySAS");
static_assert(sizeof(RSBattlePlayer_C_IsOnReadySAS) == 0x000002, "Wrong size on RSBattlePlayer_C_IsOnReadySAS");
static_assert(offsetof(RSBattlePlayer_C_IsOnReadySAS, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsOnReadySAS::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsOnReadySAS, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsOnReadySAS::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCanSAS_Use
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsCanSAS_Use final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSASUse;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCanSAS_Use) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsCanSAS_Use");
static_assert(sizeof(RSBattlePlayer_C_IsCanSAS_Use) == 0x000002, "Wrong size on RSBattlePlayer_C_IsCanSAS_Use");
static_assert(offsetof(RSBattlePlayer_C_IsCanSAS_Use, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_IsCanSAS_Use::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCanSAS_Use, IsSASUse) == 0x000001, "Member 'RSBattlePlayer_C_IsCanSAS_Use::IsSASUse' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetSASKindforButton
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_GetSASKindforButton final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKindNative                               SasKind;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetSASKindforButton) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetSASKindforButton");
static_assert(sizeof(RSBattlePlayer_C_GetSASKindforButton) == 0x000002, "Wrong size on RSBattlePlayer_C_GetSASKindforButton");
static_assert(offsetof(RSBattlePlayer_C_GetSASKindforButton, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_GetSASKindforButton::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetSASKindforButton, SasKind) == 0x000001, "Member 'RSBattlePlayer_C_GetSASKindforButton::SasKind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputSAS
// 0x0020 (0x0020 - 0x0000)
struct RSBattlePlayer_C_IsInputSAS final
{
public:
	E_SASButton                                   SASButton;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsInputSAS;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  LocalIsInputSAS;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputSAS) == 0x000008, "Wrong alignment on RSBattlePlayer_C_IsInputSAS");
static_assert(sizeof(RSBattlePlayer_C_IsInputSAS) == 0x000020, "Wrong size on RSBattlePlayer_C_IsInputSAS");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, SASButton) == 0x000000, "Member 'RSBattlePlayer_C_IsInputSAS::SASButton' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, Param_IsInputSAS) == 0x000001, "Member 'RSBattlePlayer_C_IsInputSAS::Param_IsInputSAS' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, Param_Index) == 0x000004, "Member 'RSBattlePlayer_C_IsInputSAS::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, LocalIsInputSAS) == 0x000008, "Member 'RSBattlePlayer_C_IsInputSAS::LocalIsInputSAS' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsInputSAS::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputSAS, CallFunc_Array_Get_Item) == 0x00001C, "Member 'RSBattlePlayer_C_IsInputSAS::CallFunc_Array_Get_Item' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTargetLostInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsLockTargetLostInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLostLockTarget_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsLockTargetLostInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsLockTargetLostInterface");
static_assert(sizeof(RSBattlePlayer_C_IsLockTargetLostInterface) == 0x000002, "Wrong size on RSBattlePlayer_C_IsLockTargetLostInterface");
static_assert(offsetof(RSBattlePlayer_C_IsLockTargetLostInterface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsLockTargetLostInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsLockTargetLostInterface, CallFunc_IsLostLockTarget_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsLockTargetLostInterface::CallFunc_IsLostLockTarget_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableBrainCrash_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableBrainCrash_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionBrainCrash_Enable;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableBrainCrash_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableBrainCrash_Native");
static_assert(sizeof(RSBattlePlayer_C_IsEnableBrainCrash_Native) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableBrainCrash_Native");
static_assert(offsetof(RSBattlePlayer_C_IsEnableBrainCrash_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableBrainCrash_Native::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableBrainCrash_Native, CallFunc_IsEnableActionBrainCrash_Enable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableBrainCrash_Native::CallFunc_IsEnableActionBrainCrash_Enable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsResetBehaviorTree_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsResetBehaviorTree_bReset;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP, CallFunc_IsResetBehaviorTree_bReset) == 0x000001, "Member 'RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP::CallFunc_IsResetBehaviorTree_bReset' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMoveAble_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsMoveAble_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMoveAble_bEnable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMoveAble_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMoveAble_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsMoveAble_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsMoveAble_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsMoveAble_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsMoveAble_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMoveAble_CallFromCPP, CallFunc_IsMoveAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsMoveAble_CallFromCPP::CallFunc_IsMoveAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAble_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsJumpAble_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJumpAble_bEnable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsJumpAble_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsJumpAble_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsJumpAble_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsJumpAble_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAble_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsJumpAble_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsJumpAble_CallFromCPP, CallFunc_IsJumpAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsJumpAble_CallFromCPP::CallFunc_IsJumpAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Jump_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputAI_Jump_bON;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP, CallFunc_IsInputAI_Jump_bON) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP::CallFunc_IsInputAI_Jump_bON' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Dodge_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputAI_Dodge_bON;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP, CallFunc_IsInputAI_Dodge_bON) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP::CallFunc_IsInputAI_Dodge_bON' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Attack_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInputAI_Attack_bON;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP, CallFunc_IsInputAI_Attack_bON) == 0x000001, "Member 'RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP::CallFunc_IsInputAI_Attack_bON' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventWait_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventWait_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventWait_bWait;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventWait_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventWait_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEventWait_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventWait_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEventWait_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEventWait_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventWait_CallFromCPP, CallFunc_IsEventWait_bWait) == 0x000001, "Member 'RSBattlePlayer_C_IsEventWait_CallFromCPP::CallFunc_IsEventWait_bWait' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMoveEnd_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMoveEnd_result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP, CallFunc_IsEventMoveEnd_result) == 0x000001, "Member 'RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP::CallFunc_IsEventMoveEnd_result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDodge_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDodge_bEnable;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP, CallFunc_IsEnableActionDodge_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP::CallFunc_IsEnableActionDodge_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeAble_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDodgeAble_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDodgeAble_bEnable;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDodgeAble_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDodgeAble_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsDodgeAble_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDodgeAble_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeAble_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDodgeAble_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDodgeAble_CallFromCPP, CallFunc_IsDodgeAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsDodgeAble_CallFromCPP::CallFunc_IsDodgeAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackAble_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsAttackAble_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackAble_bEnable;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAttackAble_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAttackAble_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsAttackAble_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsAttackAble_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsAttackAble_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsAttackAble_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsAttackAble_CallFromCPP, CallFunc_IsAttackAble_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsAttackAble_CallFromCPP::CallFunc_IsAttackAble_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMovePosActor_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetMovePosActor_CallFromCPP final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMovePosActor_MovePosActor;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMovePosActor_CallFromCPP) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetMovePosActor_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetMovePosActor_CallFromCPP) == 0x000010, "Wrong size on RSBattlePlayer_C_GetMovePosActor_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetMovePosActor_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetMovePosActor_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetMovePosActor_CallFromCPP, CallFunc_GetMovePosActor_MovePosActor) == 0x000008, "Member 'RSBattlePlayer_C_GetMovePosActor_CallFromCPP::CallFunc_GetMovePosActor_MovePosActor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetControlPlayerDist_CallFromCPP
// 0x0018 (0x0018 - 0x0000)
struct RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP) == 0x000018, "Wrong size on RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP, CallFunc_GetControlPlayerDist_Dist) == 0x00000C, "Member 'RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackCountAI_CallFromCPP
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetAttackCountAI_CallFromCPP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAttackCountAI_Count;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetAttackCountAI_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetAttackCountAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetAttackCountAI_CallFromCPP) == 0x000008, "Wrong size on RSBattlePlayer_C_GetAttackCountAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetAttackCountAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetAttackCountAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetAttackCountAI_CallFromCPP, CallFunc_GetAttackCountAI_Count) == 0x000004, "Member 'RSBattlePlayer_C_GetAttackCountAI_CallFromCPP::CallFunc_GetAttackCountAI_Count' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMove_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEventMove_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMove_result;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEventMove_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEventMove_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEventMove_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEventMove_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEventMove_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEventMove_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEventMove_CallFromCPP, CallFunc_IsEventMove_result) == 0x000001, "Member 'RSBattlePlayer_C_IsEventMove_CallFromCPP::CallFunc_IsEventMove_result' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsMetalMode_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsMetalMode_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsMetalMode_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsMetalMode_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsMetalMode_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsMetalMode_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsMetalMode_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsMetalMode_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsMetalMode_CallFromCPP, CallFunc_IsMetalMode_bMetal) == 0x000001, "Member 'RSBattlePlayer_C_IsMetalMode_CallFromCPP::CallFunc_IsMetalMode_bMetal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionJump_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsEnableActionJump_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionJump_bEnable;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableActionJump_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnableActionJump_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnableActionJump_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsEnableActionJump_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableActionJump_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableActionJump_CallFromCPP, CallFunc_IsEnableActionJump_bEnable) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableActionJump_CallFromCPP::CallFunc_IsEnableActionJump_bEnable' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsControlAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsControlAI_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsControlAI_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsControlAI_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsControlAI_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsControlAI_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsControlAI_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsControlAI_CallFromCPP, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'RSBattlePlayer_C_IsControlAI_CallFromCPP::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDying_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDying_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDying_bDying;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDying_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDying_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsDying_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDying_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsDying_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDying_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDying_CallFromCPP, CallFunc_IsDying_bDying) == 0x000001, "Member 'RSBattlePlayer_C_IsDying_CallFromCPP::CallFunc_IsDying_bDying' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerAccessoryEffect_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP final
{
public:
	EEffecacyType                                 EffectType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutEquip;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutParam;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerAccessoryEffect_bEquip;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_Param;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP) == 0x000010, "Wrong size on RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP, EffectType) == 0x000000, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP::EffectType' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP, bOutEquip) == 0x000001, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP::bOutEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP, OutParam) == 0x000004, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP::OutParam' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP, CallFunc_GetPlayerAccessoryEffect_bEquip) == 0x000008, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP::CallFunc_GetPlayerAccessoryEffect_bEquip' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP, CallFunc_GetPlayerAccessoryEffect_Param) == 0x00000C, "Member 'RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP::CallFunc_GetPlayerAccessoryEffect_Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCoverDamagePlayerID_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP final
{
public:
	EPlayerID                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP) == 0x000001, "Wrong size on RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerSuperArmor_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerSuperArmor_bSuperArmor;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP, CallFunc_IsPlayerSuperArmor_bSuperArmor) == 0x000001, "Member 'RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP::CallFunc_IsPlayerSuperArmor_bSuperArmor' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageCollisionInvincible_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageCollisionInvincible_bInvincible;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP, CallFunc_IsDamageCollisionInvincible_bInvincible) == 0x000001, "Member 'RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP::CallFunc_IsDamageCollisionInvincible_bInvincible' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyForceWait_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceWait_bIsForceWait;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP, CallFunc_IsForceWait_bIsForceWait) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP::CallFunc_IsForceWait_bIsForceWait' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffectInterface
// 0x0014 (0x0014 - 0x0000)
struct RSBattlePlayer_C_IsEnableSASEffectInterface final
{
public:
	E_SASKindNative                               Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESASEffect                                    Effect;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutEnable;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D30[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutParam0;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam1;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam2;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutParam3;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_IsEnableSASEffectInterface) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsEnableSASEffectInterface");
static_assert(sizeof(RSBattlePlayer_C_IsEnableSASEffectInterface) == 0x000014, "Wrong size on RSBattlePlayer_C_IsEnableSASEffectInterface");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, Kind) == 0x000000, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, Effect) == 0x000001, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::Effect' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, OutEnable) == 0x000002, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::OutEnable' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, OutParam0) == 0x000004, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::OutParam0' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, OutParam1) == 0x000008, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::OutParam1' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, OutParam2) == 0x00000C, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::OutParam2' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnableSASEffectInterface, OutParam3) == 0x000010, "Member 'RSBattlePlayer_C_IsEnableSASEffectInterface::OutParam3' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyActive
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsEnemyActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyActive_bResult;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyActive) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyActive");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyActive) == 0x000003, "Wrong size on RSBattlePlayer_C_IsEnemyActive");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyActive, Return) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyActive::Return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyActive, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattlePlayer_C_IsEnemyActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyActive, CallFunc_IsEnemyActive_bResult) == 0x000002, "Member 'RSBattlePlayer_C_IsEnemyActive::CallFunc_IsEnemyActive_bResult' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBossEnemy
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsBossEnemy final
{
public:
	bool                                          bBoss;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbBoss;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBossEnemy) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBossEnemy");
static_assert(sizeof(RSBattlePlayer_C_IsBossEnemy) == 0x000004, "Wrong size on RSBattlePlayer_C_IsBossEnemy");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy, bBoss) == 0x000000, "Member 'RSBattlePlayer_C_IsBossEnemy::bBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy, LbBoss) == 0x000001, "Member 'RSBattlePlayer_C_IsBossEnemy::LbBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy, CallFunc_IsBossEnemy_bBoss) == 0x000002, "Member 'RSBattlePlayer_C_IsBossEnemy::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattlePlayer_C_IsBossEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDistanceToPlayer
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetDistanceToPlayer final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDistance;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceToPlayer_Distance;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetDistanceToPlayer) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDistanceToPlayer");
static_assert(sizeof(RSBattlePlayer_C_GetDistanceToPlayer) == 0x000010, "Wrong size on RSBattlePlayer_C_GetDistanceToPlayer");
static_assert(offsetof(RSBattlePlayer_C_GetDistanceToPlayer, Distance) == 0x000000, "Member 'RSBattlePlayer_C_GetDistanceToPlayer::Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDistanceToPlayer, LDistance) == 0x000004, "Member 'RSBattlePlayer_C_GetDistanceToPlayer::LDistance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDistanceToPlayer, CallFunc_GetDistanceToPlayer_Distance) == 0x000008, "Member 'RSBattlePlayer_C_GetDistanceToPlayer::CallFunc_GetDistanceToPlayer_Distance' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetDistanceToPlayer, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattlePlayer_C_GetDistanceToPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetTargetDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTargetDistance) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetTargetDistance");
static_assert(sizeof(RSBattlePlayer_C_GetTargetDistance) == 0x000004, "Wrong size on RSBattlePlayer_C_GetTargetDistance");
static_assert(offsetof(RSBattlePlayer_C_GetTargetDistance, Distance) == 0x000000, "Member 'RSBattlePlayer_C_GetTargetDistance::Distance' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemySpawn
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetEnemySpawn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemySpawn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetEnemySpawn");
static_assert(sizeof(RSBattlePlayer_C_GetEnemySpawn) == 0x000001, "Wrong size on RSBattlePlayer_C_GetEnemySpawn");
static_assert(offsetof(RSBattlePlayer_C_GetEnemySpawn, Return) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemySpawn::Return' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHeightCheckFlag
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetHeightCheckFlag final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetHeightCheckFlag) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetHeightCheckFlag");
static_assert(sizeof(RSBattlePlayer_C_GetHeightCheckFlag) == 0x000001, "Wrong size on RSBattlePlayer_C_GetHeightCheckFlag");
static_assert(offsetof(RSBattlePlayer_C_GetHeightCheckFlag, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_GetHeightCheckFlag::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsFlyEnemyCheck
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsFlyEnemyCheck final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsFlyEnemyCheck) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsFlyEnemyCheck");
static_assert(sizeof(RSBattlePlayer_C_IsFlyEnemyCheck) == 0x000001, "Wrong size on RSBattlePlayer_C_IsFlyEnemyCheck");
static_assert(offsetof(RSBattlePlayer_C_IsFlyEnemyCheck, NewParam) == 0x000000, "Member 'RSBattlePlayer_C_IsFlyEnemyCheck::NewParam' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashSequence
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetBrainCrashSequence final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D31[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetBrainCrashSequence) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetBrainCrashSequence");
static_assert(sizeof(RSBattlePlayer_C_GetBrainCrashSequence) == 0x000010, "Wrong size on RSBattlePlayer_C_GetBrainCrashSequence");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashSequence, IsUnique) == 0x000000, "Member 'RSBattlePlayer_C_GetBrainCrashSequence::IsUnique' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_GetBrainCrashSequence, Sequence) == 0x000008, "Member 'RSBattlePlayer_C_GetBrainCrashSequence::Sequence' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMoveToTargetAnim
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetMoveToTargetAnim final
{
public:
	EnemyMoveAnimKind                             MoveAnim;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMoveToTargetAnim) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetMoveToTargetAnim");
static_assert(sizeof(RSBattlePlayer_C_GetMoveToTargetAnim) == 0x000001, "Wrong size on RSBattlePlayer_C_GetMoveToTargetAnim");
static_assert(offsetof(RSBattlePlayer_C_GetMoveToTargetAnim, MoveAnim) == 0x000000, "Member 'RSBattlePlayer_C_GetMoveToTargetAnim::MoveAnim' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetMainPlayerDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetMainPlayerDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetMainPlayerDistance) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetMainPlayerDistance");
static_assert(sizeof(RSBattlePlayer_C_GetMainPlayerDistance) == 0x000004, "Wrong size on RSBattlePlayer_C_GetMainPlayerDistance");
static_assert(offsetof(RSBattlePlayer_C_GetMainPlayerDistance, Distance) == 0x000000, "Member 'RSBattlePlayer_C_GetMainPlayerDistance::Distance' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsRealThings
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsRealThings final
{
public:
	bool                                          bReal;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsRealThings) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsRealThings");
static_assert(sizeof(RSBattlePlayer_C_IsRealThings) == 0x000001, "Wrong size on RSBattlePlayer_C_IsRealThings");
static_assert(offsetof(RSBattlePlayer_C_IsRealThings, bReal) == 0x000000, "Member 'RSBattlePlayer_C_IsRealThings::bReal' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemySpawnNow
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemySpawnNow final
{
public:
	bool                                          SpawnNow;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemySpawnNow) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemySpawnNow");
static_assert(sizeof(RSBattlePlayer_C_IsEnemySpawnNow) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemySpawnNow");
static_assert(offsetof(RSBattlePlayer_C_IsEnemySpawnNow, SpawnNow) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemySpawnNow::SpawnNow' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsNotFindPlayer
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsNotFindPlayer final
{
public:
	bool                                          bNotFind;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsNotFindPlayer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsNotFindPlayer");
static_assert(sizeof(RSBattlePlayer_C_IsNotFindPlayer) == 0x000001, "Wrong size on RSBattlePlayer_C_IsNotFindPlayer");
static_assert(offsetof(RSBattlePlayer_C_IsNotFindPlayer, bNotFind) == 0x000000, "Member 'RSBattlePlayer_C_IsNotFindPlayer::bNotFind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyTickDisableCondition
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyTickDisableCondition final
{
public:
	bool                                          bDisableCondition;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyTickDisableCondition) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyTickDisableCondition");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyTickDisableCondition) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyTickDisableCondition");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyTickDisableCondition, bDisableCondition) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyTickDisableCondition::bDisableCondition' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8310_IsMaskMan
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8310_IsMaskMan final
{
public:
	bool                                          bMaskMan;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8310_IsMaskMan) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8310_IsMaskMan");
static_assert(sizeof(RSBattlePlayer_C_Em8310_IsMaskMan) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8310_IsMaskMan");
static_assert(offsetof(RSBattlePlayer_C_Em8310_IsMaskMan, bMaskMan) == 0x000000, "Member 'RSBattlePlayer_C_Em8310_IsMaskMan::bMaskMan' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAccelerating
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAccelerating) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAccelerating");
static_assert(sizeof(RSBattlePlayer_C_IsAccelerating) == 0x000001, "Wrong size on RSBattlePlayer_C_IsAccelerating");
static_assert(offsetof(RSBattlePlayer_C_IsAccelerating, Accelerating) == 0x000000, "Member 'RSBattlePlayer_C_IsAccelerating::Accelerating' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsAcceleratorValid
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsAcceleratorValid final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsAcceleratorValid) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsAcceleratorValid");
static_assert(sizeof(RSBattlePlayer_C_IsAcceleratorValid) == 0x000001, "Wrong size on RSBattlePlayer_C_IsAcceleratorValid");
static_assert(offsetof(RSBattlePlayer_C_IsAcceleratorValid, Valid) == 0x000000, "Member 'RSBattlePlayer_C_IsAcceleratorValid::Valid' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetENpcParam
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetENpcParam final
{
public:
	class UBP_ENpc_ParamBase_C*                   Param;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetENpcParam) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetENpcParam");
static_assert(sizeof(RSBattlePlayer_C_GetENpcParam) == 0x000008, "Wrong size on RSBattlePlayer_C_GetENpcParam");
static_assert(offsetof(RSBattlePlayer_C_GetENpcParam, Param) == 0x000000, "Member 'RSBattlePlayer_C_GetENpcParam::Param' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetBattleType
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8000_GetBattleType final
{
public:
	Enum_BattleType_em8000                        BattleType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_GetBattleType) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8000_GetBattleType");
static_assert(sizeof(RSBattlePlayer_C_Em8000_GetBattleType) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8000_GetBattleType");
static_assert(offsetof(RSBattlePlayer_C_Em8000_GetBattleType, BattleType) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_GetBattleType::BattleType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSAS
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_IsActiveEnpcSAS final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSAS_bActive;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsActiveEnpcSAS) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsActiveEnpcSAS");
static_assert(sizeof(RSBattlePlayer_C_IsActiveEnpcSAS) == 0x000004, "Wrong size on RSBattlePlayer_C_IsActiveEnpcSAS");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSAS, Kind) == 0x000000, "Member 'RSBattlePlayer_C_IsActiveEnpcSAS::Kind' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSAS, bActive) == 0x000001, "Member 'RSBattlePlayer_C_IsActiveEnpcSAS::bActive' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSAS, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattlePlayer_C_IsActiveEnpcSAS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsActiveEnpcSAS, CallFunc_IsActiveEnpcSAS_bActive) == 0x000003, "Member 'RSBattlePlayer_C_IsActiveEnpcSAS::CallFunc_IsActiveEnpcSAS_bActive' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_IsHomingEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8210_IsHomingEnd final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8210_IsHomingEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8210_IsHomingEnd");
static_assert(sizeof(RSBattlePlayer_C_Em8210_IsHomingEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8210_IsHomingEnd");
static_assert(offsetof(RSBattlePlayer_C_Em8210_IsHomingEnd, bEnd) == 0x000000, "Member 'RSBattlePlayer_C_Em8210_IsHomingEnd::bEnd' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetBattleProcess
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8000_GetBattleProcess final
{
public:
	int32                                         CurProcess;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8000_GetBattleProcess) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8000_GetBattleProcess");
static_assert(sizeof(RSBattlePlayer_C_Em8000_GetBattleProcess) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8000_GetBattleProcess");
static_assert(offsetof(RSBattlePlayer_C_Em8000_GetBattleProcess, CurProcess) == 0x000000, "Member 'RSBattlePlayer_C_Em8000_GetBattleProcess::CurProcess' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetBattleType
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_GetBattleType final
{
public:
	Enum_BattleType_em8010                        BattleType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_GetBattleType) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_GetBattleType");
static_assert(sizeof(RSBattlePlayer_C_Em8010_GetBattleType) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_GetBattleType");
static_assert(offsetof(RSBattlePlayer_C_Em8010_GetBattleType, BattleType) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_GetBattleType::BattleType' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsNotRequirementPartner
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsNotRequirementPartner final
{
public:
	bool                                          bNotRequirement;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsNotRequirementPartner) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsNotRequirementPartner");
static_assert(sizeof(RSBattlePlayer_C_IsNotRequirementPartner) == 0x000001, "Wrong size on RSBattlePlayer_C_IsNotRequirementPartner");
static_assert(offsetof(RSBattlePlayer_C_IsNotRequirementPartner, bNotRequirement) == 0x000000, "Member 'RSBattlePlayer_C_IsNotRequirementPartner::bNotRequirement' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreForceFinishMetamorphosis
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis");
static_assert(sizeof(RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis) == 0x000001, "Wrong size on RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis");
static_assert(offsetof(RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis, bIgnore) == 0x000000, "Member 'RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis::bIgnore' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamophosis_BaseChara
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara final
{
public:
	bool                                          bIsMetamorphosis;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara");
static_assert(sizeof(RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara");
static_assert(offsetof(RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara, bIsMetamorphosis) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara::bIsMetamorphosis' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamophosis_ChangeChara
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara final
{
public:
	bool                                          bIsMetamorphosis;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara");
static_assert(sizeof(RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara");
static_assert(offsetof(RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara, bIsMetamorphosis) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara::bIsMetamorphosis' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamorphosis_Disappear
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear final
{
public:
	bool                                          bDisappear;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear");
static_assert(sizeof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear");
static_assert(offsetof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear, bDisappear) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear::bDisappear' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamorphosis_Appear
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear final
{
public:
	bool                                          bAppear;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear");
static_assert(sizeof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear");
static_assert(offsetof(RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear, bAppear) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear::bAppear' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetParameterTableAttackScale
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_Em8010_GetParameterTableAttackScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_Em8010_GetParameterTableAttackScale) == 0x000004, "Wrong alignment on RSBattlePlayer_C_Em8010_GetParameterTableAttackScale");
static_assert(sizeof(RSBattlePlayer_C_Em8010_GetParameterTableAttackScale) == 0x000004, "Wrong size on RSBattlePlayer_C_Em8010_GetParameterTableAttackScale");
static_assert(offsetof(RSBattlePlayer_C_Em8010_GetParameterTableAttackScale, Scale) == 0x000000, "Member 'RSBattlePlayer_C_Em8010_GetParameterTableAttackScale::Scale' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_IsSpFieldOpen
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_Em8220_IsSpFieldOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_Em8220_IsSpFieldOpen) == 0x000001, "Wrong alignment on RSBattlePlayer_C_Em8220_IsSpFieldOpen");
static_assert(sizeof(RSBattlePlayer_C_Em8220_IsSpFieldOpen) == 0x000001, "Wrong size on RSBattlePlayer_C_Em8220_IsSpFieldOpen");
static_assert(offsetof(RSBattlePlayer_C_Em8220_IsSpFieldOpen, bOpen) == 0x000000, "Member 'RSBattlePlayer_C_Em8220_IsSpFieldOpen::bOpen' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUpdateEnemyTickEnable
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUpdateEnemyTickEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUpdateEnemyTickEnable) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUpdateEnemyTickEnable");
static_assert(sizeof(RSBattlePlayer_C_IsUpdateEnemyTickEnable) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUpdateEnemyTickEnable");
static_assert(offsetof(RSBattlePlayer_C_IsUpdateEnemyTickEnable, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsUpdateEnemyTickEnable::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUpdateEnemySpawn
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUpdateEnemySpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUpdateEnemySpawn) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUpdateEnemySpawn");
static_assert(sizeof(RSBattlePlayer_C_IsUpdateEnemySpawn) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUpdateEnemySpawn");
static_assert(offsetof(RSBattlePlayer_C_IsUpdateEnemySpawn, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsUpdateEnemySpawn::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsTickDisableCondition
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsTickDisableCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsTickDisableCondition) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsTickDisableCondition");
static_assert(sizeof(RSBattlePlayer_C_IsTickDisableCondition) == 0x000001, "Wrong size on RSBattlePlayer_C_IsTickDisableCondition");
static_assert(offsetof(RSBattlePlayer_C_IsTickDisableCondition, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsTickDisableCondition::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsReflectContainer
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsReflectContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsReflectContainer) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsReflectContainer");
static_assert(sizeof(RSBattlePlayer_C_IsReflectContainer) == 0x000001, "Wrong size on RSBattlePlayer_C_IsReflectContainer");
static_assert(offsetof(RSBattlePlayer_C_IsReflectContainer, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsReflectContainer::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsPressDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsPressDown_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsPressDown_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsPressDown_Native");
static_assert(sizeof(RSBattlePlayer_C_IsPressDown_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsPressDown_Native");
static_assert(offsetof(RSBattlePlayer_C_IsPressDown_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsPressDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsLaunchDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsLaunchDown_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsLaunchDown_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsLaunchDown_Native");
static_assert(sizeof(RSBattlePlayer_C_IsLaunchDown_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsLaunchDown_Native");
static_assert(offsetof(RSBattlePlayer_C_IsLaunchDown_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsLaunchDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsExecLowProcess
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsExecLowProcess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsExecLowProcess) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsExecLowProcess");
static_assert(sizeof(RSBattlePlayer_C_IsExecLowProcess) == 0x000001, "Wrong size on RSBattlePlayer_C_IsExecLowProcess");
static_assert(offsetof(RSBattlePlayer_C_IsExecLowProcess, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsExecLowProcess::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemySpawn_Interface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemySpawn_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemySpawn_Interface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemySpawn_Interface");
static_assert(sizeof(RSBattlePlayer_C_IsEnemySpawn_Interface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemySpawn_Interface");
static_assert(offsetof(RSBattlePlayer_C_IsEnemySpawn_Interface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemySpawn_Interface::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyFalling_Interface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyFalling_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyFalling_Interface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyFalling_Interface");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyFalling_Interface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyFalling_Interface");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyFalling_Interface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyFalling_Interface::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableUroAction_Interface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDisableUroAction_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableUroAction_Interface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDisableUroAction_Interface");
static_assert(sizeof(RSBattlePlayer_C_IsDisableUroAction_Interface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDisableUroAction_Interface");
static_assert(offsetof(RSBattlePlayer_C_IsDisableUroAction_Interface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableUroAction_Interface::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageMotionEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDamageMotionEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDamageMotionEnd_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDamageMotionEnd_Native");
static_assert(sizeof(RSBattlePlayer_C_IsDamageMotionEnd_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDamageMotionEnd_Native");
static_assert(offsetof(RSBattlePlayer_C_IsDamageMotionEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDamageMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckLookTargetTick
// 0x001C (0x001C - 0x0000)
struct RSBattlePlayer_C_IsCheckLookTargetTick final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckLookTargetTick) == 0x000004, "Wrong alignment on RSBattlePlayer_C_IsCheckLookTargetTick");
static_assert(sizeof(RSBattlePlayer_C_IsCheckLookTargetTick) == 0x00001C, "Wrong size on RSBattlePlayer_C_IsCheckLookTargetTick");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookTargetTick, Start) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckLookTargetTick::Start' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookTargetTick, End) == 0x00000C, "Member 'RSBattlePlayer_C_IsCheckLookTargetTick::End' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsCheckLookTargetTick, ReturnValue) == 0x000018, "Member 'RSBattlePlayer_C_IsCheckLookTargetTick::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckHeightChangeTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsCheckHeightChangeTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsCheckHeightChangeTick) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsCheckHeightChangeTick");
static_assert(sizeof(RSBattlePlayer_C_IsCheckHeightChangeTick) == 0x000001, "Wrong size on RSBattlePlayer_C_IsCheckHeightChangeTick");
static_assert(offsetof(RSBattlePlayer_C_IsCheckHeightChangeTick, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsCheckHeightChangeTick::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainSuccess_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsBrainSuccess_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBrainSuccess_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBrainSuccess_Native");
static_assert(sizeof(RSBattlePlayer_C_IsBrainSuccess_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsBrainSuccess_Native");
static_assert(offsetof(RSBattlePlayer_C_IsBrainSuccess_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsBrainSuccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTopHeightLocation
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetTopHeightLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTopHeightLocation) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetTopHeightLocation");
static_assert(sizeof(RSBattlePlayer_C_GetTopHeightLocation) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetTopHeightLocation");
static_assert(offsetof(RSBattlePlayer_C_GetTopHeightLocation, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetTopHeightLocation::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetCharacter_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetTargetCharacter_Native final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetTargetCharacter_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetTargetCharacter_Native");
static_assert(sizeof(RSBattlePlayer_C_GetTargetCharacter_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_GetTargetCharacter_Native");
static_assert(offsetof(RSBattlePlayer_C_GetTargetCharacter_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetTargetCharacter_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetPressDownLoop_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetPressDownLoop_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetPressDownLoop_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetPressDownLoop_Native");
static_assert(sizeof(RSBattlePlayer_C_GetPressDownLoop_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetPressDownLoop_Native");
static_assert(offsetof(RSBattlePlayer_C_GetPressDownLoop_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetPressDownLoop_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetNewDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetNewDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetNewDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetNewDamageFloating_Native");
static_assert(sizeof(RSBattlePlayer_C_GetNewDamageFloating_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetNewDamageFloating_Native");
static_assert(offsetof(RSBattlePlayer_C_GetNewDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetNewDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetLostActionInfoList_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattlePlayer_C_GetLostActionInfoList_Native final
{
public:
	TArray<struct FEmLostActionInfo>              LostActionInfo;                                    // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetLostActionInfoList_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetLostActionInfoList_Native");
static_assert(sizeof(RSBattlePlayer_C_GetLostActionInfoList_Native) == 0x000010, "Wrong size on RSBattlePlayer_C_GetLostActionInfoList_Native");
static_assert(offsetof(RSBattlePlayer_C_GetLostActionInfoList_Native, LostActionInfo) == 0x000000, "Member 'RSBattlePlayer_C_GetLostActionInfoList_Native::LostActionInfo' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetIsLandCheck
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetIsLandCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetIsLandCheck) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetIsLandCheck");
static_assert(sizeof(RSBattlePlayer_C_GetIsLandCheck) == 0x000001, "Wrong size on RSBattlePlayer_C_GetIsLandCheck");
static_assert(offsetof(RSBattlePlayer_C_GetIsLandCheck, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetIsLandCheck::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetIsJumpEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetIsJumpEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetIsJumpEnd) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetIsJumpEnd");
static_assert(sizeof(RSBattlePlayer_C_GetIsJumpEnd) == 0x000001, "Wrong size on RSBattlePlayer_C_GetIsJumpEnd");
static_assert(offsetof(RSBattlePlayer_C_GetIsJumpEnd, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetIsJumpEnd::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetHateTarget_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetHateTarget_Native final
{
public:
	class UHateTargetComponent*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetHateTarget_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetHateTarget_Native");
static_assert(sizeof(RSBattlePlayer_C_GetHateTarget_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_GetHateTarget_Native");
static_assert(offsetof(RSBattlePlayer_C_GetHateTarget_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetHateTarget_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnemyScriptComponent final
{
public:
	class UEnemyScriptComponent*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyScriptComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnemyScriptComponent");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyScriptComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnemyScriptComponent");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyScriptComponent, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyScriptComponent::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyAnimControllerComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnemyAnimControllerComponent final
{
public:
	class UEnemyAnimControllerComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyAnimControllerComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnemyAnimControllerComponent");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyAnimControllerComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnemyAnimControllerComponent");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyAnimControllerComponent, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyAnimControllerComponent::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyAiComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetEnemyAiComponent final
{
public:
	class UEnemyAiComponentBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetEnemyAiComponent) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetEnemyAiComponent");
static_assert(sizeof(RSBattlePlayer_C_GetEnemyAiComponent) == 0x000008, "Wrong size on RSBattlePlayer_C_GetEnemyAiComponent");
static_assert(offsetof(RSBattlePlayer_C_GetEnemyAiComponent, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetEnemyAiComponent::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDownUpMoveAnimKind_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetDownUpMoveAnimKind_Native final
{
public:
	EnemyMoveAnimKind                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetDownUpMoveAnimKind_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetDownUpMoveAnimKind_Native");
static_assert(sizeof(RSBattlePlayer_C_GetDownUpMoveAnimKind_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetDownUpMoveAnimKind_Native");
static_assert(offsetof(RSBattlePlayer_C_GetDownUpMoveAnimKind_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetDownUpMoveAnimKind_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDownTimer_Native
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetDownTimer_Native final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetDownTimer_Native) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDownTimer_Native");
static_assert(sizeof(RSBattlePlayer_C_GetDownTimer_Native) == 0x000004, "Wrong size on RSBattlePlayer_C_GetDownTimer_Native");
static_assert(offsetof(RSBattlePlayer_C_GetDownTimer_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetDownTimer_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDebugEnemyDownInfinity_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native");
static_assert(sizeof(RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native");
static_assert(offsetof(RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetDamageHitDirectionIF
// 0x000C (0x000C - 0x0000)
struct RSBattlePlayer_C_GetDamageHitDirectionIF final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetDamageHitDirectionIF) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetDamageHitDirectionIF");
static_assert(sizeof(RSBattlePlayer_C_GetDamageHitDirectionIF) == 0x00000C, "Wrong size on RSBattlePlayer_C_GetDamageHitDirectionIF");
static_assert(offsetof(RSBattlePlayer_C_GetDamageHitDirectionIF, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetDamageHitDirectionIF::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCurrentTarget) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCurrentTarget");
static_assert(sizeof(RSBattlePlayer_C_GetCurrentTarget) == 0x000008, "Wrong size on RSBattlePlayer_C_GetCurrentTarget");
static_assert(offsetof(RSBattlePlayer_C_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetCapsuleComponent_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattlePlayer_C_GetCapsuleComponent_Native final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetCapsuleComponent_Native) == 0x000008, "Wrong alignment on RSBattlePlayer_C_GetCapsuleComponent_Native");
static_assert(sizeof(RSBattlePlayer_C_GetCapsuleComponent_Native) == 0x000008, "Wrong size on RSBattlePlayer_C_GetCapsuleComponent_Native");
static_assert(offsetof(RSBattlePlayer_C_GetCapsuleComponent_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetCapsuleComponent_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsWeakUiDamageHit_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP) == 0x000001, "Wrong size on RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsNotFindPlayer_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotFindPlayer_bNotFind;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP, CallFunc_IsNotFindPlayer_bNotFind) == 0x000001, "Member 'RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP::CallFunc_IsNotFindPlayer_bNotFind' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueAroundEffectPause
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsUniqueAroundEffectPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsUniqueAroundEffectPause) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsUniqueAroundEffectPause");
static_assert(sizeof(RSBattlePlayer_C_IsUniqueAroundEffectPause) == 0x000001, "Wrong size on RSBattlePlayer_C_IsUniqueAroundEffectPause");
static_assert(offsetof(RSBattlePlayer_C_IsUniqueAroundEffectPause, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsUniqueAroundEffectPause::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.GetUniqueTickEnableRange
// 0x0004 (0x0004 - 0x0000)
struct RSBattlePlayer_C_GetUniqueTickEnableRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattlePlayer_C_GetUniqueTickEnableRange) == 0x000004, "Wrong alignment on RSBattlePlayer_C_GetUniqueTickEnableRange");
static_assert(sizeof(RSBattlePlayer_C_GetUniqueTickEnableRange) == 0x000004, "Wrong size on RSBattlePlayer_C_GetUniqueTickEnableRange");
static_assert(offsetof(RSBattlePlayer_C_GetUniqueTickEnableRange, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_GetUniqueTickEnableRange::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsBossEnemy_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattlePlayer_C_IsBossEnemy_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsBossEnemy_CallFromCPP) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsBossEnemy_CallFromCPP");
static_assert(sizeof(RSBattlePlayer_C_IsBossEnemy_CallFromCPP) == 0x000002, "Wrong size on RSBattlePlayer_C_IsBossEnemy_CallFromCPP");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsBossEnemy_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsBossEnemy_CallFromCPP, CallFunc_IsBossEnemy_bBoss) == 0x000001, "Member 'RSBattlePlayer_C_IsBossEnemy_CallFromCPP::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSpawned
// 0x0003 (0x0003 - 0x0000)
struct RSBattlePlayer_C_IsSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSpawned) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSpawned");
static_assert(sizeof(RSBattlePlayer_C_IsSpawned) == 0x000003, "Wrong size on RSBattlePlayer_C_IsSpawned");
static_assert(offsetof(RSBattlePlayer_C_IsSpawned, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsSpawned::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawned, CallFunc_GetEnemySpawn_return) == 0x000001, "Member 'RSBattlePlayer_C_IsSpawned::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattlePlayer_C_IsSpawned, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000002, "Member 'RSBattlePlayer_C_IsSpawned::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableDownMotionInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsDisableDownMotionInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsDisableDownMotionInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsDisableDownMotionInterface");
static_assert(sizeof(RSBattlePlayer_C_IsDisableDownMotionInterface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsDisableDownMotionInterface");
static_assert(offsetof(RSBattlePlayer_C_IsDisableDownMotionInterface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsDisableDownMotionInterface::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsSuspendFollowAttackInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsSuspendFollowAttackInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsSuspendFollowAttackInterface) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsSuspendFollowAttackInterface");
static_assert(sizeof(RSBattlePlayer_C_IsSuspendFollowAttackInterface) == 0x000001, "Wrong size on RSBattlePlayer_C_IsSuspendFollowAttackInterface");
static_assert(offsetof(RSBattlePlayer_C_IsSuspendFollowAttackInterface, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsSuspendFollowAttackInterface::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsInvincible_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsInvincible_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsInvincible_Native) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsInvincible_Native");
static_assert(sizeof(RSBattlePlayer_C_IsInvincible_Native) == 0x000001, "Wrong size on RSBattlePlayer_C_IsInvincible_Native");
static_assert(offsetof(RSBattlePlayer_C_IsInvincible_Native, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsInvincible_Native::ReturnValue' has a wrong offset!");

// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyConsiderDownDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattlePlayer_C_IsEnemyConsiderDownDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattlePlayer_C_IsEnemyConsiderDownDead) == 0x000001, "Wrong alignment on RSBattlePlayer_C_IsEnemyConsiderDownDead");
static_assert(sizeof(RSBattlePlayer_C_IsEnemyConsiderDownDead) == 0x000001, "Wrong size on RSBattlePlayer_C_IsEnemyConsiderDownDead");
static_assert(offsetof(RSBattlePlayer_C_IsEnemyConsiderDownDead, ReturnValue) == 0x000000, "Member 'RSBattlePlayer_C_IsEnemyConsiderDownDead::ReturnValue' has a wrong offset!");

}

