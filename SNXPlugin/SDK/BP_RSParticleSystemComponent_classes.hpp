#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RSParticleSystemComponent

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RSParticleSystemComponent.BP_RSParticleSystemComponent_C
// 0x0010 (0x0710 - 0x0700)
#pragma pack(push, 0x1)
class alignas(0x10) UBP_RSParticleSystemComponent_C : public URSParticleSystemComponentBase
{
public:
	uint8                                         Pad_63F4[0x8];                                     // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0700(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IgnoreAccel;                                       // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn)
	bool                                          IgnoreTelepo;                                      // 0x0709(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsRegist;                                          // 0x070A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_RSParticleSystemComponent(int32 EntryPoint);
	void OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Owner, float RemainTime);
	void OnFireStart(const struct FFSASFireParam& Param, class AActor* Owner);
	void OnFireEnd(const struct FFSASFireParam& Param, class AActor* Owner, float RemainTime);
	void OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Owner);
	void OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Owner, float RemainTime);
	void StopParticleImplements();
	void StopAndHideParticleImplements();
	void PlayParticleImplements();
	void Initialize();
	void OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Owner);
	void OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Owner, float RemainTime);
	void UserTick(float ParentDeltaSeconds);
	void OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Owner);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Owner);
	void ReceiveBeginPlay();
	void OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Owner, float RemainTime);
	void OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Owner);
	void OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Owner, float RemainTime);
	void OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Owner, float RemainTime, bool bHologram);
	void OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Owner, bool bHologram);
	void OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Owner);
	void OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Owner, float RemainTime);
	void OnCutInStart();
	void OnCutInEnd();
	void OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Owner);
	void OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Owner, float RemainTime);
	void SetupStageSetting();
	void InitializeOnAccelarator();
	void ResetParameter();
	void PlayParticle();
	void StopParticle();
	void StopAndHideParticle();
	void ResetParticle();
	void SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy);
	void SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime);

	void IsIgnoreAccelerate(bool* Ignore) const;
	void IsOwnerPlayer(class UObject* Actor, bool* IsPlayer) const;
	bool IsSelfAccelerating(class AActor* Actor) const;
	void IsAcceleratorValid(bool* Valid) const;
	void IsAccelerating(bool* Accelerating) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RSParticleSystemComponent_C">();
	}
	static class UBP_RSParticleSystemComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_RSParticleSystemComponent_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBP_RSParticleSystemComponent_C) == 0x000010, "Wrong alignment on UBP_RSParticleSystemComponent_C");
static_assert(sizeof(UBP_RSParticleSystemComponent_C) == 0x000710, "Wrong size on UBP_RSParticleSystemComponent_C");
static_assert(offsetof(UBP_RSParticleSystemComponent_C, UberGraphFrame) == 0x000700, "Member 'UBP_RSParticleSystemComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_RSParticleSystemComponent_C, IgnoreAccel) == 0x000708, "Member 'UBP_RSParticleSystemComponent_C::IgnoreAccel' has a wrong offset!");
static_assert(offsetof(UBP_RSParticleSystemComponent_C, IgnoreTelepo) == 0x000709, "Member 'UBP_RSParticleSystemComponent_C::IgnoreTelepo' has a wrong offset!");
static_assert(offsetof(UBP_RSParticleSystemComponent_C, IsRegist) == 0x00070A, "Member 'UBP_RSParticleSystemComponent_C::IsRegist' has a wrong offset!");

}

