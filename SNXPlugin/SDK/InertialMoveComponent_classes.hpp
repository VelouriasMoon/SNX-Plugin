#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InertialMoveComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass InertialMoveComponent.InertialMoveComponent_C
// 0x0078 (0x0138 - 0x00C0)
class UInertialMoveComponent_C final : public UActorComponent
{
public:
	float                                         MoveSpeedMax;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveAccel;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveDecel;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FollowRange;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVector;                                        // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugPrint;                                       // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAccelEx;                                          // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5396[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandAccel;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandDecel;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandSpeed;                                         // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandRange;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDecel;                                            // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReturn;                                           // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5397[0x2];                                     // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecelTime;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnTime;                                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         bounceRate;                                        // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedDecelStt;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosReturnStt;                                      // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistReturn;                                        // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecMove;                                           // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosOwnerPrev;                                      // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Initialize(float Speed_max, float Accel, float Decel, float Range);
	void SetOwner(class AActor* Owner);
	void CalcMoveVector(const struct FVector& Target, const struct FVector& Origin, float Delta_second, bool bForceFinish, struct FVector* Move_vector, bool* bBounce, bool* bFinish);
	void InitParam();
	void InitRandParam();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InertialMoveComponent_C">();
	}
	static class UInertialMoveComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInertialMoveComponent_C>();
	}
};
static_assert(alignof(UInertialMoveComponent_C) == 0x000008, "Wrong alignment on UInertialMoveComponent_C");
static_assert(sizeof(UInertialMoveComponent_C) == 0x000138, "Wrong size on UInertialMoveComponent_C");
static_assert(offsetof(UInertialMoveComponent_C, MoveSpeedMax) == 0x0000C0, "Member 'UInertialMoveComponent_C::MoveSpeedMax' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, MoveAccel) == 0x0000C4, "Member 'UInertialMoveComponent_C::MoveAccel' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, MoveDecel) == 0x0000C8, "Member 'UInertialMoveComponent_C::MoveDecel' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, FollowRange) == 0x0000CC, "Member 'UInertialMoveComponent_C::FollowRange' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, MoveVector) == 0x0000D0, "Member 'UInertialMoveComponent_C::MoveVector' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, MoveSpeed) == 0x0000DC, "Member 'UInertialMoveComponent_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, bDebugPrint) == 0x0000E0, "Member 'UInertialMoveComponent_C::bDebugPrint' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, bAccelEx) == 0x0000E1, "Member 'UInertialMoveComponent_C::bAccelEx' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, RandAccel) == 0x0000E4, "Member 'UInertialMoveComponent_C::RandAccel' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, RandDecel) == 0x0000E8, "Member 'UInertialMoveComponent_C::RandDecel' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, RandSpeed) == 0x0000EC, "Member 'UInertialMoveComponent_C::RandSpeed' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, RandRange) == 0x0000F0, "Member 'UInertialMoveComponent_C::RandRange' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, bDecel) == 0x0000F4, "Member 'UInertialMoveComponent_C::bDecel' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, bReturn) == 0x0000F5, "Member 'UInertialMoveComponent_C::bReturn' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, DecelTime) == 0x0000F8, "Member 'UInertialMoveComponent_C::DecelTime' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, ReturnTime) == 0x0000FC, "Member 'UInertialMoveComponent_C::ReturnTime' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, bounceRate) == 0x000100, "Member 'UInertialMoveComponent_C::bounceRate' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, SpeedDecelStt) == 0x000104, "Member 'UInertialMoveComponent_C::SpeedDecelStt' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, PosReturnStt) == 0x000108, "Member 'UInertialMoveComponent_C::PosReturnStt' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, DistReturn) == 0x000114, "Member 'UInertialMoveComponent_C::DistReturn' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, OwnerActor) == 0x000118, "Member 'UInertialMoveComponent_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, VecMove) == 0x000120, "Member 'UInertialMoveComponent_C::VecMove' has a wrong offset!");
static_assert(offsetof(UInertialMoveComponent_C, PosOwnerPrev) == 0x00012C, "Member 'UInertialMoveComponent_C::PosOwnerPrev' has a wrong offset!");

}

