#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyChangePlayRate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "DE_em_ChangePlayRate_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C
// 0x0038 (0x00F8 - 0x00C0)
class UBP_EnemyChangePlayRate_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         LearpTime;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   EaseFunc;                                          // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4195[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseBlendExp;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeRate;                                       // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4196[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      PlayAnim;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        HitObjSize;                                        // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4197[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPlayRate;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultPlayRate;                                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitObj;                                           // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EnemyChangePlayRate(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Start(float Param_StartPlayRate, float Param_LearpTime, EEasingFunc Param_EaseFunc, float Param_EaseBlendExp, int32 Param_Steps, class UAnimSequenceBase* Animation);
	void Update(float DeltaSec);
	void IsPlayerAccelerating(bool* bAccelerating);
	void End();
	void IsChangePlayRate(bool* bChange);
	void SetObjType(class AActor* Obj);
	void ClearObjType();
	void SelectPlayRateParam(bool bAddDamage, bool* bSuccess, float* Param_StartPlayRate, float* LerpTime, EEasingFunc* Param_EaseFunc, float* Param_EaseBlendExp, int32* Step);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyChangePlayRate_C">();
	}
	static class UBP_EnemyChangePlayRate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyChangePlayRate_C>();
	}
};
static_assert(alignof(UBP_EnemyChangePlayRate_C) == 0x000008, "Wrong alignment on UBP_EnemyChangePlayRate_C");
static_assert(sizeof(UBP_EnemyChangePlayRate_C) == 0x0000F8, "Wrong size on UBP_EnemyChangePlayRate_C");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_EnemyChangePlayRate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, LearpTime) == 0x0000C8, "Member 'UBP_EnemyChangePlayRate_C::LearpTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, EaseFunc) == 0x0000CC, "Member 'UBP_EnemyChangePlayRate_C::EaseFunc' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, EaseBlendExp) == 0x0000D0, "Member 'UBP_EnemyChangePlayRate_C::EaseBlendExp' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, Steps) == 0x0000D4, "Member 'UBP_EnemyChangePlayRate_C::Steps' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, CurrentTime) == 0x0000D8, "Member 'UBP_EnemyChangePlayRate_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, bChangeRate) == 0x0000DC, "Member 'UBP_EnemyChangePlayRate_C::bChangeRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, PlayAnim) == 0x0000E0, "Member 'UBP_EnemyChangePlayRate_C::PlayAnim' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, HitObjSize) == 0x0000E8, "Member 'UBP_EnemyChangePlayRate_C::HitObjSize' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, StartPlayRate) == 0x0000EC, "Member 'UBP_EnemyChangePlayRate_C::StartPlayRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, DefaultPlayRate) == 0x0000F0, "Member 'UBP_EnemyChangePlayRate_C::DefaultPlayRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyChangePlayRate_C, bHitObj) == 0x0000F4, "Member 'UBP_EnemyChangePlayRate_C::bHitObj' has a wrong offset!");

}

