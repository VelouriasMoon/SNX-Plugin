#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleManager

#include "Basic.hpp"

#include "BP_BattleManager_classes.hpp"
#include "BP_BattleManager_parameters.hpp"


namespace SDK
{

// Function BP_BattleManager.BP_BattleManager_C.OnHpDownEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCharacterHPEventInfo            EventInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BattleManager_C::OnHpDownEvent__DelegateSignature(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnHpDownEvent__DelegateSignature");

	Params::BP_BattleManager_C_OnHpDownEvent__DelegateSignature Parms{};

	Parms.Actor = Actor;
	Parms.EventInfo = std::move(EventInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.ExecuteUbergraph_BP_BattleManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::ExecuteUbergraph_BP_BattleManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ExecuteUbergraph_BP_BattleManager");

	Params::BP_BattleManager_C_ExecuteUbergraph_BP_BattleManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleFieldEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleFieldEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleFieldEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleFieldBegin
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleFieldBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleFieldBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.StartTutorialOperation
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             HelpTutoID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelaySec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::StartTutorialOperation(class FName HelpTutoID, float DelaySec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "StartTutorialOperation");

	Params::BP_BattleManager_C_StartTutorialOperation Parms{};

	Parms.HelpTutoID = HelpTutoID;
	Parms.DelaySec = DelaySec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BattleManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ReceiveTick");

	Params::BP_BattleManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.DispEnemyDeadLog
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::DispEnemyDeadLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "DispEnemyDeadLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.StartPlayerDeadFlow
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::StartPlayerDeadFlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "StartPlayerDeadFlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.UpdateBattleMode
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::UpdateBattleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "UpdateBattleMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.UpdateBattleSound
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::UpdateBattleSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "UpdateBattleSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.GetSituation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattleSituationComponent*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UBattleSituationComponent* ABP_BattleManager_C::GetSituation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "GetSituation");

	Params::BP_BattleManager_C_GetSituation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleManager.BP_BattleManager_C.SetEnemyDead
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Character_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropDataIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       EnemyLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// EDeadFactor                             DeadFactor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeadActorLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseDeadCharacterName                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             DeadCharacterName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDefeatedMainPlayer                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDispKillEnemyName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             LogReplaceName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCHitResult                     DeadHitResult                                          (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ABP_BattleManager_C::SetEnemyDead(class FName Character_ID, int32 DropDataIndex, const struct FTransform& EnemyLocation, EDeadFactor DeadFactor, int32 DeadActorLevel, bool UseDeadCharacterName, class FName DeadCharacterName, bool bDefeatedMainPlayer, bool IsDispKillEnemyName, class FName LogReplaceName, const struct FHCHitResult& DeadHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetEnemyDead");

	Params::BP_BattleManager_C_SetEnemyDead Parms{};

	Parms.Character_ID = Character_ID;
	Parms.DropDataIndex = DropDataIndex;
	Parms.EnemyLocation = std::move(EnemyLocation);
	Parms.DeadFactor = DeadFactor;
	Parms.DeadActorLevel = DeadActorLevel;
	Parms.UseDeadCharacterName = UseDeadCharacterName;
	Parms.DeadCharacterName = DeadCharacterName;
	Parms.bDefeatedMainPlayer = bDefeatedMainPlayer;
	Parms.IsDispKillEnemyName = IsDispKillEnemyName;
	Parms.LogReplaceName = LogReplaceName;
	Parms.DeadHitResult = std::move(DeadHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.Set Enemy Dead Log Param
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharacterId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Experience                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Money                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bonus                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             DropItemId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropItemNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::Set_Enemy_Dead_Log_Param(class FName CharacterId, int32 Experience, int32 Money, int32 bonus, class FName DropItemId, int32 DropItemNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "Set Enemy Dead Log Param");

	Params::BP_BattleManager_C_Set_Enemy_Dead_Log_Param Parms{};

	Parms.CharacterId = CharacterId;
	Parms.Experience = Experience;
	Parms.Money = Money;
	Parms.bonus = bonus;
	Parms.DropItemId = DropItemId;
	Parms.DropItemNum = DropItemNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.ListUpBattleActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dir                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Num                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 BaseActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   IgnoreActorList                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class AActor*>                   TargetList                                             (Parm, OutParm, HasGetValueTypeHash)

void ABP_BattleManager_C::ListUpBattleActor(const struct FVector& Location, float Distance, const struct FVector& Dir, float Angle, int32 Num, class ARSCharacterBase* BaseActor, TArray<class AActor*>& IgnoreActorList, TArray<class AActor*>* TargetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ListUpBattleActor");

	Params::BP_BattleManager_C_ListUpBattleActor Parms{};

	Parms.Location = std::move(Location);
	Parms.Distance = Distance;
	Parms.Dir = std::move(Dir);
	Parms.Angle = Angle;
	Parms.Num = Num;
	Parms.BaseActor = BaseActor;
	Parms.IgnoreActorList = std::move(IgnoreActorList);

	UObject::ProcessEvent(Func, &Parms);

	IgnoreActorList = std::move(Parms.IgnoreActorList);

	if (TargetList != nullptr)
		*TargetList = std::move(Parms.TargetList);
}


// Function BP_BattleManager.BP_BattleManager_C.SpawnCoreDrop
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DropDataIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsBig                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SpawnCoreDrop(int32 DropDataIndex, const struct FTransform& SpawnLocation, bool IsBig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SpawnCoreDrop");

	Params::BP_BattleManager_C_SpawnCoreDrop Parms{};

	Parms.DropDataIndex = DropDataIndex;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.IsBig = IsBig;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.GetBattleSetting
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattleSettingComponent*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UBattleSettingComponent* ABP_BattleManager_C::GetBattleSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "GetBattleSetting");

	Params::BP_BattleManager_C_GetBattleSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleManager.BP_BattleManager_C.Start
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.SetEnableENPCBrainFieldGauge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetEnableENPCBrainFieldGauge(bool bEnable, bool bForce, class AActor* BrainFieldUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetEnableENPCBrainFieldGauge");

	Params::BP_BattleManager_C_SetEnableENPCBrainFieldGauge Parms{};

	Parms.bEnable = bEnable;
	Parms.bForce = bForce;
	Parms.BrainFieldUser = BrainFieldUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.AddENPCBrainFieldGaugeByAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::AddENPCBrainFieldGaugeByAttack(class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "AddENPCBrainFieldGaugeByAttack");

	Params::BP_BattleManager_C_AddENPCBrainFieldGaugeByAttack Parms{};

	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.ResetENPCBrainFieldGauge
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::ResetENPCBrainFieldGauge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ResetENPCBrainFieldGauge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.CallHpDownEventDispatcher
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCharacterHPEventInfo            EventInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_BattleManager_C::CallHpDownEventDispatcher(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "CallHpDownEventDispatcher");

	Params::BP_BattleManager_C_CallHpDownEventDispatcher Parms{};

	Parms.Actor = Actor;
	Parms.EventInfo = std::move(EventInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.AddENPCBrainFieldGaugeByDefense
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::AddENPCBrainFieldGaugeByDefense(class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "AddENPCBrainFieldGaugeByDefense");

	Params::BP_BattleManager_C_AddENPCBrainFieldGaugeByDefense Parms{};

	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetVisibleENPCBrainFieldGauge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFromEnpc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetVisibleENPCBrainFieldGauge(bool bVisible, bool bFromEnpc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetVisibleENPCBrainFieldGauge");

	Params::BP_BattleManager_C_SetVisibleENPCBrainFieldGauge Parms{};

	Parms.bVisible = bVisible;
	Parms.bFromEnpc = bFromEnpc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetENPCBrainFieldGaugeUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUpdate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetENPCBrainFieldGaugeUpdate(bool bUpdate, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetENPCBrainFieldGaugeUpdate");

	Params::BP_BattleManager_C_SetENPCBrainFieldGaugeUpdate Parms{};

	Parms.bUpdate = bUpdate;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetFullEnpcBrainFieldGauge
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::SetFullEnpcBrainFieldGauge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetFullEnpcBrainFieldGauge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.ClearCurrentBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::ClearCurrentBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ClearCurrentBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.StartDelayBattleLog
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::StartDelayBattleLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "StartDelayBattleLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.EndDelayBattleLog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::EndDelayBattleLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "EndDelayBattleLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.GetAccessoryGoldBonus
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::GetAccessoryGoldBonus(float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "GetAccessoryGoldBonus");

	Params::BP_BattleManager_C_GetAccessoryGoldBonus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_BattleManager.BP_BattleManager_C.Set Enemy Dead from Event
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeadEnemyLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropDataIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EnemyId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDispKillEnemyName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EDeadFactor                             DeadFactor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::Set_Enemy_Dead_from_Event(int32 DeadEnemyLevel, int32 DropDataIndex, class FName EnemyId, bool IsDispKillEnemyName, EDeadFactor DeadFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "Set Enemy Dead from Event");

	Params::BP_BattleManager_C_Set_Enemy_Dead_from_Event Parms{};

	Parms.DeadEnemyLevel = DeadEnemyLevel;
	Parms.DropDataIndex = DropDataIndex;
	Parms.EnemyId = EnemyId;
	Parms.IsDispKillEnemyName = IsDispKillEnemyName;
	Parms.DeadFactor = DeadFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.IsExistBattleEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::IsExistBattleEnemy(bool* bExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "IsExistBattleEnemy");

	Params::BP_BattleManager_C_IsExistBattleEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExist != nullptr)
		*bExist = Parms.bExist;
}


// Function BP_BattleManager.BP_BattleManager_C.Is Disp Enemy Name Log
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EnemyId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DisplayName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::Is_Disp_Enemy_Name_Log(class FName EnemyId, bool* DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "Is Disp Enemy Name Log");

	Params::BP_BattleManager_C_Is_Disp_Enemy_Name_Log Parms{};

	Parms.EnemyId = EnemyId;

	UObject::ProcessEvent(Func, &Parms);

	if (DisplayName != nullptr)
		*DisplayName = Parms.DisplayName;
}


// Function BP_BattleManager.BP_BattleManager_C.SetModeEnpcBrainFieldGauge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInBrainField                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           BFUser                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetModeEnpcBrainFieldGauge(bool bInBrainField, class AActor* BFUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetModeEnpcBrainFieldGauge");

	Params::BP_BattleManager_C_SetModeEnpcBrainFieldGauge Parms{};

	Parms.bInBrainField = bInBrainField;
	Parms.BFUser = BFUser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.CheckExistBattleEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bExistEnemy                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARSCharacterBase*                 LastEnemy                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::CheckExistBattleEnemy(bool* bExistEnemy, class ARSCharacterBase** LastEnemy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "CheckExistBattleEnemy");

	Params::BP_BattleManager_C_CheckExistBattleEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExistEnemy != nullptr)
		*bExistEnemy = Parms.bExistEnemy;

	if (LastEnemy != nullptr)
		*LastEnemy = Parms.LastEnemy;
}


// Function BP_BattleManager.BP_BattleManager_C.GetENPCBrainFieldRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::GetENPCBrainFieldRate(float* Rate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "GetENPCBrainFieldRate");

	Params::BP_BattleManager_C_GetENPCBrainFieldRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_BattleManager.BP_BattleManager_C.IsEnableENPCBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnableGauge                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::IsEnableENPCBrainField(bool* bEnableGauge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "IsEnableENPCBrainField");

	Params::BP_BattleManager_C_IsEnableENPCBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnableGauge != nullptr)
		*bEnableGauge = Parms.bEnableGauge;
}


// Function BP_BattleManager.BP_BattleManager_C.IsPlayerStealth
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bStealth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAfterStealth                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::IsPlayerStealth(bool* bStealth, bool* bAfterStealth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "IsPlayerStealth");

	Params::BP_BattleManager_C_IsPlayerStealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bStealth != nullptr)
		*bStealth = Parms.bStealth;

	if (bAfterStealth != nullptr)
		*bAfterStealth = Parms.bAfterStealth;
}

}

