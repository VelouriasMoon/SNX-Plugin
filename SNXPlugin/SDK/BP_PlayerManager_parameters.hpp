#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "AcceleratorParam_structs.hpp"
#include "FPlayerCostumeData_structs.hpp"
#include "EPlayerFacialAnim_structs.hpp"
#include "FPhotoModeFacialData_structs.hpp"
#include "SPlayerAIAssistThinkData_structs.hpp"
#include "FAttachmentData_structs.hpp"
#include "CharactersLevelData_structs.hpp"
#include "CharactersSkillData_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "EHologramKind_structs.hpp"
#include "EPlayerCapsuleSize_structs.hpp"
#include "E_SceneType_structs.hpp"
#include "SPlayerAIAssistCountData_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerManager.BP_PlayerManager_C.DispatchSuccessResurrect__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature final
{
public:
	class AActor*                                 RevivePlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature");
static_assert(sizeof(BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature");
static_assert(offsetof(BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature, RevivePlayer) == 0x000000, "Member 'BP_PlayerManager_C_DispatchSuccessResurrect__DelegateSignature::RevivePlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ExecuteUbergraph_BP_PlayerManager
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B75[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_RevivePlayer_1;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_RevivePlayer;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_RSPlayerCameraManager_C*            K2Node_DynamicCast_AsBP_RSPlayer_Camera_Manager;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B76[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Event_player_id_in_1;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  K2Node_Event_skill_id_in;                          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Event_player_id_in;                         // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B77[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PresetName;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isCheckBattleMemberMain;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B78[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_HP;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_BadStatus;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Revive;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RigitBodyEmptyUpdateSeconds;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            K2Node_Event_kind_3;                               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B79[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_Event_Player;                               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7A[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_4B7B[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7C[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7D[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            K2Node_Event_kind_2;                               // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Event_id;                                   // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSpawn;                               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7E[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetBattleMemberCore_ReturnValue;          // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7F[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            K2Node_Event_kind_1;                               // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerFacialAnim_Native                      K2Node_Event_Anim;                                 // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            K2Node_Event_kind;                                 // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bVisible;                             // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager");
static_assert(sizeof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager) == 0x0000D0, "Wrong size on BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, EntryPoint) == 0x000000, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_ComponentBoundEvent_RevivePlayer_1) == 0x000008, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_ComponentBoundEvent_RevivePlayer_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_ComponentBoundEvent_RevivePlayer) == 0x000010, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_ComponentBoundEvent_RevivePlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_GetPlayersAll_Player) == 0x000020, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_DynamicCast_AsBP_RSPlayer_Camera_Manager) == 0x000030, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_DynamicCast_AsBP_RSPlayer_Camera_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_player_id_in_1) == 0x000040, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_player_id_in_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_skill_id_in) == 0x000041, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_skill_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_player_id_in) == 0x000042, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_PresetName) == 0x000044, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_PresetName' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_isCheckBattleMemberMain) == 0x00004C, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_isCheckBattleMemberMain' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_HP) == 0x000050, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_HP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_BadStatus) == 0x000054, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_BadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_Revive) == 0x000058, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_Revive' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_DeltaSeconds) == 0x00005C, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_RigitBodyEmptyUpdateSeconds) == 0x000060, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_RigitBodyEmptyUpdateSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_kind_3) == 0x000064, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_kind_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_Player) == 0x000068, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_CreateDelegate_OutputDelegate) == 0x000074, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000088, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_DynamicCast_AsRSBattle_Player) == 0x000090, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, Temp_int_Loop_Counter_Variable) == 0x00009C, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_EndPlayReason) == 0x0000A8, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_SwitchEnum_CmpSuccess) == 0x0000A9, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_kind_2) == 0x0000AA, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_kind_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_id) == 0x0000AB, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_id' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_bSpawn) == 0x0000AC, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_bSpawn' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, Temp_int_Array_Index_Variable) == 0x0000B0, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_SetBattleMemberCore_ReturnValue) == 0x0000B4, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_SetBattleMemberCore_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, Temp_bool_Has_Been_Initd_Variable) == 0x0000C1, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_kind_1) == 0x0000C2, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_kind_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_Anim) == 0x0000C3, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_Anim' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000C4, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_Conv_IntToByte_ReturnValue) == 0x0000C8, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_kind) == 0x0000C9, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, K2Node_Event_bVisible) == 0x0000CA, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::K2Node_Event_bVisible' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager, CallFunc_GetValidValue_ReturnValue) == 0x0000CB, "Member 'BP_PlayerManager_C_ExecuteUbergraph_BP_PlayerManager::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetPhotoModeHood_Native
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_SetPhotoModeHood_Native final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetPhotoModeHood_Native) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetPhotoModeHood_Native");
static_assert(sizeof(BP_PlayerManager_C_SetPhotoModeHood_Native) == 0x000002, "Wrong size on BP_PlayerManager_C_SetPhotoModeHood_Native");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood_Native, Kind) == 0x000000, "Member 'BP_PlayerManager_C_SetPhotoModeHood_Native::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood_Native, bVisible) == 0x000001, "Member 'BP_PlayerManager_C_SetPhotoModeHood_Native::bVisible' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PlayPhotoModeFacialAnim_Native
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerFacialAnim_Native                      Anim;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native) == 0x000001, "Wrong alignment on BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native");
static_assert(sizeof(BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native) == 0x000002, "Wrong size on BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native, Kind) == 0x000000, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native, Anim) == 0x000001, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim_Native::Anim' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetBattleMember
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_SetBattleMember final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     ID;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpawn;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetBattleMember) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetBattleMember");
static_assert(sizeof(BP_PlayerManager_C_SetBattleMember) == 0x000003, "Wrong size on BP_PlayerManager_C_SetBattleMember");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMember, Kind) == 0x000000, "Member 'BP_PlayerManager_C_SetBattleMember::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMember, ID) == 0x000001, "Member 'BP_PlayerManager_C_SetBattleMember::ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMember, bSpawn) == 0x000002, "Member 'BP_PlayerManager_C_SetBattleMember::bSpawn' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerManager_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerManager_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerManager_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerManager_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerManager_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PlayerSetting
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerManager_C_PlayerSetting final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B80[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_PlayerSetting) == 0x000008, "Wrong alignment on BP_PlayerManager_C_PlayerSetting");
static_assert(sizeof(BP_PlayerManager_C_PlayerSetting) == 0x000010, "Wrong size on BP_PlayerManager_C_PlayerSetting");
static_assert(offsetof(BP_PlayerManager_C_PlayerSetting, Kind) == 0x000000, "Member 'BP_PlayerManager_C_PlayerSetting::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayerSetting, Player) == 0x000008, "Member 'BP_PlayerManager_C_PlayerSetting::Player' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerRigitBodyEmptyUpdateSeconds
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds final
{
public:
	float                                         RigitBodyEmptyUpdateSeconds;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds) == 0x000004, "Wrong alignment on BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds");
static_assert(sizeof(BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds) == 0x000004, "Wrong size on BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds");
static_assert(offsetof(BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds, RigitBodyEmptyUpdateSeconds) == 0x000000, "Member 'BP_PlayerManager_C_EventManagerRigitBodyEmptyUpdateSeconds::RigitBodyEmptyUpdateSeconds' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerManager_C_ReceiveTick");
static_assert(sizeof(BP_PlayerManager_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerManager_C_ReceiveTick");
static_assert(offsetof(BP_PlayerManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.Set Assist Count
// 0x000C (0x000C - 0x0000)
struct BP_PlayerManager_C_Set_Assist_Count final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BadStatus;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Revive;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_Set_Assist_Count) == 0x000004, "Wrong alignment on BP_PlayerManager_C_Set_Assist_Count");
static_assert(sizeof(BP_PlayerManager_C_Set_Assist_Count) == 0x00000C, "Wrong size on BP_PlayerManager_C_Set_Assist_Count");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count, HP) == 0x000000, "Member 'BP_PlayerManager_C_Set_Assist_Count::HP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count, BadStatus) == 0x000004, "Member 'BP_PlayerManager_C_Set_Assist_Count::BadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count, Revive) == 0x000008, "Member 'BP_PlayerManager_C_Set_Assist_Count::Revive' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IPresetAddPartyMember
// 0x000C (0x000C - 0x0000)
struct BP_PlayerManager_C_IPresetAddPartyMember final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCheckBattleMemberMain;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IPresetAddPartyMember) == 0x000004, "Wrong alignment on BP_PlayerManager_C_IPresetAddPartyMember");
static_assert(sizeof(BP_PlayerManager_C_IPresetAddPartyMember) == 0x00000C, "Wrong size on BP_PlayerManager_C_IPresetAddPartyMember");
static_assert(offsetof(BP_PlayerManager_C_IPresetAddPartyMember, PresetName) == 0x000000, "Member 'BP_PlayerManager_C_IPresetAddPartyMember::PresetName' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IPresetAddPartyMember, IsCheckBattleMemberMain) == 0x000008, "Member 'BP_PlayerManager_C_IPresetAddPartyMember::IsCheckBattleMemberMain' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ResetSkill
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_ResetSkill final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ResetSkill) == 0x000001, "Wrong alignment on BP_PlayerManager_C_ResetSkill");
static_assert(sizeof(BP_PlayerManager_C_ResetSkill) == 0x000001, "Wrong size on BP_PlayerManager_C_ResetSkill");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_ResetSkill::Player_id_in' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AddSkill
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_AddSkill final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill_id_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AddSkill) == 0x000001, "Wrong alignment on BP_PlayerManager_C_AddSkill");
static_assert(sizeof(BP_PlayerManager_C_AddSkill) == 0x000002, "Wrong size on BP_PlayerManager_C_AddSkill");
static_assert(offsetof(BP_PlayerManager_C_AddSkill, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_AddSkill::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill, Skill_id_in) == 0x000001, "Member 'BP_PlayerManager_C_AddSkill::Skill_id_in' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature final
{
public:
	class AActor*                                 RevivePlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature");
static_assert(sizeof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature");
static_assert(offsetof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature, RevivePlayer) == 0x000000, "Member 'BP_PlayerManager_C_BndEvt__BP_PlayerRessurectRight_K2Node_ComponentBoundEvent_1_RessurectSuccessDelegate__DelegateSignature::RevivePlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature final
{
public:
	class AActor*                                 RevivePlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature");
static_assert(sizeof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature");
static_assert(offsetof(BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature, RevivePlayer) == 0x000000, "Member 'BP_PlayerManager_C_BndEvt__BP_PlayerRessurecttLeft_K2Node_ComponentBoundEvent_0_RessurectSuccessDelegate__DelegateSignature::RevivePlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateWarpPartner
// 0x00F8 (0x00F8 - 0x0000)
struct BP_PlayerManager_C_UpdateWarpPartner final
{
public:
	float                                         LWarpDistance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B81[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERSPartyPlayerKind>                    LPlayerKindList;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          LbBattle;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            LPlayerKind;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B82[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LMainPlayer;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LPlayer;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B83[0x5];                                     // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERSPartyPlayerKind>                    K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B84[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B85[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattlefieldManager_C*               CallFunc_GetBattlefieldManager_BP_BattlefieldManager; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyFenceEnabled_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B86[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNpcWarpDither_bDummy;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B87[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleMode_ReturnValue;                 // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceWarpAble_Interface_bWarpAble;      // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B88[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerNum_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B89[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_1;                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInAntiWarpField_bInAntiWarp;            // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdateWarpPartner) == 0x000008, "Wrong alignment on BP_PlayerManager_C_UpdateWarpPartner");
static_assert(sizeof(BP_PlayerManager_C_UpdateWarpPartner) == 0x0000F8, "Wrong size on BP_PlayerManager_C_UpdateWarpPartner");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LWarpDistance) == 0x000000, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LWarpDistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LPlayerKindList) == 0x000008, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LPlayerKindList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LbBattle) == 0x000018, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LbBattle' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LPlayerKind) == 0x000019, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LPlayerKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LMainPlayer) == 0x000020, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, LPlayer) == 0x000028, "Member 'BP_PlayerManager_C_UpdateWarpPartner::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_GetPlayer_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000038, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsPlayerStatusAI_bResult) == 0x000049, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsValid_ReturnValue) == 0x00004A, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_MakeArray_Array) == 0x000050, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_PlayerManager_C_UpdateWarpPartner::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, Temp_int_Loop_Num_Variable) == 0x000064, "Member 'BP_PlayerManager_C_UpdateWarpPartner::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'BP_PlayerManager_C_UpdateWarpPartner::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000070, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_Less_IntInt_ReturnValue) == 0x000081, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsActionStatusAI_bResult) == 0x000082, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_GetBattlefieldManager_BP_BattlefieldManager) == 0x000088, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_GetBattlefieldManager_BP_BattlefieldManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsAnyFenceEnabled_ReturnValue) == 0x000090, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsAnyFenceEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000098, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_SetNpcWarpDither_bDummy) == 0x0000A9, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_SetNpcWarpDither_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_GetBattleManager_BattleManager) == 0x0000B0, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x0000B8, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'BP_PlayerManager_C_UpdateWarpPartner::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsBattleMode_ReturnValue) == 0x0000C9, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsBattleMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsForceWarpAble_Interface_bWarpAble) == 0x0000CA, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsForceWarpAble_Interface_bWarpAble' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_GetPlayerNum_ReturnValue) == 0x0000CC, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_GetPlayerNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000D4, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_GetPlayer_ReturnValue_1) == 0x0000E0, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_GetPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000E8, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_CheckDistance_bResult) == 0x0000F4, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_IsInAntiWarpField_bInAntiWarp) == 0x0000F5, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_IsInAntiWarpField_bInAntiWarp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateWarpPartner, CallFunc_Not_PreBool_ReturnValue) == 0x0000F6, "Member 'BP_PlayerManager_C_UpdateWarpPartner::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AllPlayerRigitBodyEmptyUpdate
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate final
{
public:
	float                                         EmptyUpdateSeconds;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B8C[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate) == 0x000008, "Wrong alignment on BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate");
static_assert(sizeof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate) == 0x000058, "Wrong size on BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, EmptyUpdateSeconds) == 0x000000, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::EmptyUpdateSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, LPlayerList) == 0x000008, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::LPlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, K2Node_DynamicCast_AsEvent_Interface) == 0x000030, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate, CallFunc_GetPlayerList_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_AllPlayerRigitBodyEmptyUpdate::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ForceWarpToMainPlayer
// 0x0190 (0x0190 - 0x0000)
struct BP_PlayerManager_C_ForceWarpToMainPlayer final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EventIn;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B8E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LNpcOffset;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LMainPlayer;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LPlayer;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            Temp_byte_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCollisionCheckType                     Temp_byte_Variable_1;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCollisionCheckType                     Temp_byte_Variable_2;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCollisionCheckType                     Temp_byte_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCollisionCheckType                     Temp_byte_Variable_4;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetAjitoNpcWarpOffset_Offset;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B8F[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B90[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCollisionCheckType                     K2Node_Select_Default;                             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B91[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerCollisionCheckResult            CallFunc_GetAsyncResult_ReturnValue;               // 0x0098(0x0040)(ConstParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B92[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B93[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B94[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B95[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ForceWarpToMainPlayer) == 0x000010, "Wrong alignment on BP_PlayerManager_C_ForceWarpToMainPlayer");
static_assert(sizeof(BP_PlayerManager_C_ForceWarpToMainPlayer) == 0x000190, "Wrong size on BP_PlayerManager_C_ForceWarpToMainPlayer");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Kind) == 0x000000, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Delay) == 0x000004, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Delay' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, EventIn) == 0x000008, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::EventIn' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, LNpcOffset) == 0x00000C, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::LNpcOffset' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, LMainPlayer) == 0x000018, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, LPlayer) == 0x000020, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_int_Variable) == 0x000028, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_byte_Variable) == 0x00002D, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_byte_Variable_1) == 0x00002E, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_byte_Variable_2) == 0x00002F, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_byte_Variable_3) == 0x000030, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_byte_Variable_4) == 0x000031, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_IsValid_ReturnValue) == 0x000032, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000033, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_GetAjitoNpcWarpOffset_Offset) == 0x000034, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_GetAjitoNpcWarpOffset_Offset' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_int_Variable_1) == 0x000044, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_BreakRotator_Roll) == 0x000064, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_BreakRotator_Pitch) == 0x000068, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_BreakRotator_Yaw) == 0x00006C, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, K2Node_Select_Default) == 0x000074, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_MakeVector_ReturnValue) == 0x000078, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000084, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_GetMainPlayer_Player) == 0x000090, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_GetAsyncResult_ReturnValue) == 0x000098, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_GetAsyncResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_GetPlayer_ReturnValue) == 0x0000E8, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, Temp_bool_Variable) == 0x000130, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, K2Node_Select_Default_1) == 0x000134, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_RotateAngleAxis_ReturnValue) == 0x000138, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000144, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000150, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarpToMainPlayer, CallFunc_MakeTransform_ReturnValue_1) == 0x000160, "Member 'BP_PlayerManager_C_ForceWarpToMainPlayer::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ForceWarp
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerManager_C_ForceWarp final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B96[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         IdleRestoreDelay;                                  // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B97[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LPlayer;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B98[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ForceWarp_Interface_Dummy;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ForceWarp) == 0x000010, "Wrong alignment on BP_PlayerManager_C_ForceWarp");
static_assert(sizeof(BP_PlayerManager_C_ForceWarp) == 0x000080, "Wrong size on BP_PlayerManager_C_ForceWarp");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, Kind) == 0x000000, "Member 'BP_PlayerManager_C_ForceWarp::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, Transform) == 0x000010, "Member 'BP_PlayerManager_C_ForceWarp::Transform' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, IdleRestoreDelay) == 0x000040, "Member 'BP_PlayerManager_C_ForceWarp::IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, LPlayer) == 0x000048, "Member 'BP_PlayerManager_C_ForceWarp::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, CallFunc_GetPlayer_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_ForceWarp::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_ForceWarp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000060, "Member 'BP_PlayerManager_C_ForceWarp::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_PlayerManager_C_ForceWarp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ForceWarp, CallFunc_ForceWarp_Interface_Dummy) == 0x000071, "Member 'BP_PlayerManager_C_ForceWarp::CallFunc_ForceWarp_Interface_Dummy' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetLeftPlayer
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_GetLeftPlayer final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LTemp;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B99[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetLeftPlayer) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetLeftPlayer");
static_assert(sizeof(BP_PlayerManager_C_GetLeftPlayer) == 0x000038, "Wrong size on BP_PlayerManager_C_GetLeftPlayer");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, Player) == 0x000000, "Member 'BP_PlayerManager_C_GetLeftPlayer::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_GetLeftPlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, LTemp) == 0x000010, "Member 'BP_PlayerManager_C_GetLeftPlayer::LTemp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, CallFunc_GetPlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_GetLeftPlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_GetLeftPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, K2Node_DynamicCast_AsRSBattle_Player) == 0x000028, "Member 'BP_PlayerManager_C_GetLeftPlayer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLeftPlayer, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerManager_C_GetLeftPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetRightPlayer
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_GetRightPlayer final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LTemp;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetRightPlayer) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetRightPlayer");
static_assert(sizeof(BP_PlayerManager_C_GetRightPlayer) == 0x000038, "Wrong size on BP_PlayerManager_C_GetRightPlayer");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, Player) == 0x000000, "Member 'BP_PlayerManager_C_GetRightPlayer::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_GetRightPlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, LTemp) == 0x000010, "Member 'BP_PlayerManager_C_GetRightPlayer::LTemp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, CallFunc_GetPlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_GetRightPlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_GetRightPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, K2Node_DynamicCast_AsRSBattle_Player) == 0x000028, "Member 'BP_PlayerManager_C_GetRightPlayer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRightPlayer, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerManager_C_GetRightPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetMainPlayer
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_GetMainPlayer final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LTemp;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetMainPlayer) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetMainPlayer");
static_assert(sizeof(BP_PlayerManager_C_GetMainPlayer) == 0x000038, "Wrong size on BP_PlayerManager_C_GetMainPlayer");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, Player) == 0x000000, "Member 'BP_PlayerManager_C_GetMainPlayer::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_GetMainPlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, LTemp) == 0x000010, "Member 'BP_PlayerManager_C_GetMainPlayer::LTemp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, CallFunc_GetPlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_GetMainPlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_GetMainPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, K2Node_DynamicCast_AsRSBattle_Player) == 0x000028, "Member 'BP_PlayerManager_C_GetMainPlayer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayer, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerManager_C_GetMainPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayersAll
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerManager_C_GetPlayersAll final
{
public:
	TArray<class ARSBattlePlayer_C*>              Player;                                            // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              AllPlayers;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B9C[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9D[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9E[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetPlayersAll) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPlayersAll");
static_assert(sizeof(BP_PlayerManager_C_GetPlayersAll) == 0x000070, "Wrong size on BP_PlayerManager_C_GetPlayersAll");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, Player) == 0x000000, "Member 'BP_PlayerManager_C_GetPlayersAll::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, PlayerList) == 0x000010, "Member 'BP_PlayerManager_C_GetPlayersAll::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, AllPlayers) == 0x000020, "Member 'BP_PlayerManager_C_GetPlayersAll::AllPlayers' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_PlayerManager_C_GetPlayersAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_PlayerManager_C_GetPlayersAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_GetPlayerList_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, K2Node_DynamicCast_AsRSBattle_Player) == 0x000058, "Member 'BP_PlayerManager_C_GetPlayersAll::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_PlayerManager_C_GetPlayersAll::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayersAll, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'BP_PlayerManager_C_GetPlayersAll::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeAssistThink
// 0x0120 (0x0120 - 0x0000)
struct BP_PlayerManager_C_InitializeAssistThink final
{
public:
	TArray<class UClass*>                         L_NpcClassList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA0[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA1[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              CallFunc_GetDataTableRowFromName_OutRow;           // 0x006C(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA2[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BA3[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames_1;       // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames_2;       // 0x00A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00B0(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA4[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSPlayerAIAssistThinkData              CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x00C8(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA5[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames_3;       // 0x00E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x00FC(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA6[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_InitializeAssistThink) == 0x000008, "Wrong alignment on BP_PlayerManager_C_InitializeAssistThink");
static_assert(sizeof(BP_PlayerManager_C_InitializeAssistThink) == 0x000120, "Wrong size on BP_PlayerManager_C_InitializeAssistThink");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, L_NpcClassList) == 0x000000, "Member 'BP_PlayerManager_C_InitializeAssistThink::L_NpcClassList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Counter_Variable_2) == 0x00002C, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Add_IntInt_ReturnValue_2) == 0x000030, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Num_Variable_1) == 0x000034, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Num_Variable_2) == 0x000038, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Less_IntInt_ReturnValue_2) == 0x00003D, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Counter_Variable_3) == 0x000044, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Add_IntInt_ReturnValue_3) == 0x000048, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Array_Index_Variable_2) == 0x00004C, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Loop_Num_Variable_3) == 0x000050, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Less_IntInt_ReturnValue_3) == 0x000054, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000058, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, Temp_int_Array_Index_Variable_3) == 0x000068, "Member 'BP_PlayerManager_C_InitializeAssistThink::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_OutRow) == 0x00006C, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowNames_OutRowNames_1) == 0x000090, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowNames_OutRowNames_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowNames_OutRowNames_2) == 0x0000A0, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowNames_OutRowNames_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000B0, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0000C4, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x0000C8, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0000DC, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Length_ReturnValue_2) == 0x0000E4, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowNames_OutRowNames_3) == 0x0000E8, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowNames_OutRowNames_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Length_ReturnValue_3) == 0x0000F8, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x0000FC, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x000110, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Add_ReturnValue_1) == 0x000114, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Add_ReturnValue_2) == 0x000118, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeAssistThink, CallFunc_Array_Add_ReturnValue_3) == 0x00011C, "Member 'BP_PlayerManager_C_InitializeAssistThink::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RequestHpAssist
// 0x0100 (0x0100 - 0x0000)
struct BP_PlayerManager_C_RequestHpAssist final
{
public:
	float                                         Hp_percentage;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BA7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      L_execPlayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              L_assistThinkData;                                 // 0x0010(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAA[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAB[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIOrder                                CallFunc_Get_Order_Order;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAC[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUseItemThink_self_CastInput;            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseItemThink_Result;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableAssist_bEnable;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAD[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAE[0x5];                                     // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSPlayerAIAssistThinkData>      K2Node_Select_Default;                             // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TMap<class ARSBattlePlayer_C*, int32>         CallFunc_GetAssistCheckPlayerList_AssistList;      // 0x0080(0x0050)()
	TArray<class ARSBattlePlayer_C*>              CallFunc_Map_Keys_Keys;                            // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BAF[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x00E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_RequestHpAssist) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RequestHpAssist");
static_assert(sizeof(BP_PlayerManager_C_RequestHpAssist) == 0x000100, "Wrong size on BP_PlayerManager_C_RequestHpAssist");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Hp_percentage) == 0x000000, "Member 'BP_PlayerManager_C_RequestHpAssist::Hp_percentage' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, L_execPlayer) == 0x000008, "Member 'BP_PlayerManager_C_RequestHpAssist::L_execPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, L_assistThinkData) == 0x000010, "Member 'BP_PlayerManager_C_RequestHpAssist::L_assistThinkData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_PlayerManager_C_RequestHpAssist::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Less_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'BP_PlayerManager_C_RequestHpAssist::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_PlayerManager_C_RequestHpAssist::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'BP_PlayerManager_C_RequestHpAssist::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, Temp_bool_Variable) == 0x000040, "Member 'BP_PlayerManager_C_RequestHpAssist::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Get_Order_Order) == 0x000048, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Get_Order_Order' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004A, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004B, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_IsUseItemThink_self_CastInput) == 0x000050, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_IsUseItemThink_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_IsUseItemThink_Result) == 0x000060, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_IsUseItemThink_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_IsEnableAssist_bEnable) == 0x000061, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_IsEnableAssist_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000064, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000069, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00006A, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, K2Node_Select_Default) == 0x000070, "Member 'BP_PlayerManager_C_RequestHpAssist::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_GetAssistCheckPlayerList_AssistList) == 0x000080, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_GetAssistCheckPlayerList_AssistList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Map_Keys_Keys) == 0x0000D0, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E0, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Array_Length_ReturnValue) == 0x0000E4, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Map_Values_Values) == 0x0000E8, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestHpAssist, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'BP_PlayerManager_C_RequestHpAssist::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RequestStatusAssist
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_RequestStatusAssist final
{
public:
	class ARSBattlePlayer_C*                      L_execPlayer;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              L_assistThinkData;                                 // 0x0008(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_RequestStatusAssist) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RequestStatusAssist");
static_assert(sizeof(BP_PlayerManager_C_RequestStatusAssist) == 0x000020, "Wrong size on BP_PlayerManager_C_RequestStatusAssist");
static_assert(offsetof(BP_PlayerManager_C_RequestStatusAssist, L_execPlayer) == 0x000000, "Member 'BP_PlayerManager_C_RequestStatusAssist::L_execPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestStatusAssist, L_assistThinkData) == 0x000008, "Member 'BP_PlayerManager_C_RequestStatusAssist::L_assistThinkData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestStatusAssist, CallFunc_IsEnable_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_RequestStatusAssist::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestStatusAssist, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'BP_PlayerManager_C_RequestStatusAssist::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RequestRevivalAssist
// 0x00D8 (0x00D8 - 0x0000)
struct BP_PlayerManager_C_RequestRevivalAssist final
{
public:
	bool                                          Is_revival;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      AssistPlayer;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bDone;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSPlayerAIAssistThinkData              L_assistThinkData;                                 // 0x0014(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      L_execPlayer;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB2[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB3[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAssist_bEnable;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB4[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB5[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB6[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ARSBattlePlayer_C*, int32>         CallFunc_GetAssistCheckPlayerList_AssistList;      // 0x0058(0x0050)()
	TArray<class ARSBattlePlayer_C*>              CallFunc_Map_Keys_Keys;                            // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB7[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_RequestRevivalAssist) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RequestRevivalAssist");
static_assert(sizeof(BP_PlayerManager_C_RequestRevivalAssist) == 0x0000D8, "Wrong size on BP_PlayerManager_C_RequestRevivalAssist");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, Is_revival) == 0x000000, "Member 'BP_PlayerManager_C_RequestRevivalAssist::Is_revival' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, AssistPlayer) == 0x000008, "Member 'BP_PlayerManager_C_RequestRevivalAssist::AssistPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, L_bDone) == 0x000010, "Member 'BP_PlayerManager_C_RequestRevivalAssist::L_bDone' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, L_assistThinkData) == 0x000014, "Member 'BP_PlayerManager_C_RequestRevivalAssist::L_assistThinkData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, L_execPlayer) == 0x000028, "Member 'BP_PlayerManager_C_RequestRevivalAssist::L_execPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'BP_PlayerManager_C_RequestRevivalAssist::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_PlayerManager_C_RequestRevivalAssist::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'BP_PlayerManager_C_RequestRevivalAssist::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_IsEnableAssist_bEnable) == 0x000044, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_IsEnableAssist_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_PlayerManager_C_RequestRevivalAssist::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_BooleanAND_ReturnValue) == 0x000054, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_GetAssistCheckPlayerList_AssistList) == 0x000058, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_GetAssistCheckPlayerList_AssistList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Map_Keys_Keys) == 0x0000A8, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Map_Values_Values) == 0x0000C0, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_IsValid_ReturnValue) == 0x0000D4, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RequestRevivalAssist, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D5, "Member 'BP_PlayerManager_C_RequestRevivalAssist::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ResetAssistThinkData_Internal
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PlayerManager_C_ResetAssistThinkData_Internal final
{
public:
	TArray<ERSPartyPlayerKind>                    AssistEquipCheckList;                              // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         LBondsLevel;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerInfo>                    LPartyList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	EPlayerID                                     LMainPlayerID;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BBA[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BBB[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_GetAccessoryExtendParameter_outParameter; // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAccessoryExtendParameter_ReturnValue;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BBC[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistCountData              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BBD[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERSPartyPlayerKind>                    K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BBE[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BBF[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC0[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC1[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC2[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerInfo>                    CallFunc_GetPartyInfoList_ReturnValue;             // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ResetAssistThinkData_Internal) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ResetAssistThinkData_Internal");
static_assert(sizeof(BP_PlayerManager_C_ResetAssistThinkData_Internal) == 0x0000F0, "Wrong size on BP_PlayerManager_C_ResetAssistThinkData_Internal");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, AssistEquipCheckList) == 0x000000, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::AssistEquipCheckList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, LBondsLevel) == 0x000010, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::LBondsLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, LPartyList) == 0x000018, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::LPartyList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, LMainPlayerID) == 0x000028, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::LMainPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Loop_Num_Variable_1) == 0x000040, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetAccessoryExtendParameter_outParameter) == 0x000050, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetAccessoryExtendParameter_outParameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetAccessoryExtendParameter_ReturnValue) == 0x000060, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetAccessoryExtendParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Array_Get_Item) == 0x000064, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Round_ReturnValue) == 0x000078, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Conv_StringToName_ReturnValue) == 0x00007C, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetDataTableRowFromName_OutRow) == 0x000088, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000094, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000095, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, K2Node_MakeArray_Array) == 0x000098, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000AC, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, Temp_int_Loop_Counter_Variable_1) == 0x0000B0, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B4, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000B8, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetUserParamManager_UserParamManager) == 0x0000C0, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_IsValid_ReturnValue) == 0x0000C8, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetBondsLevel_ReturnValue) == 0x0000CC, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetPartyInfoList_ReturnValue) == 0x0000D8, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetPartyInfoList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetAssistThinkData_Internal, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x0000E8, "Member 'BP_PlayerManager_C_ResetAssistThinkData_Internal::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DecAssistCount
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_DecAssistCount final
{
public:
	EConsumeItemID                                Item_id_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC4[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_DecAssistCount) == 0x000004, "Wrong alignment on BP_PlayerManager_C_DecAssistCount");
static_assert(sizeof(BP_PlayerManager_C_DecAssistCount) == 0x000020, "Wrong size on BP_PlayerManager_C_DecAssistCount");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, Item_id_in) == 0x000000, "Member 'BP_PlayerManager_C_DecAssistCount::Item_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, Temp_int_Variable) == 0x000004, "Member 'BP_PlayerManager_C_DecAssistCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'BP_PlayerManager_C_DecAssistCount::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, Temp_int_Variable_1) == 0x00000C, "Member 'BP_PlayerManager_C_DecAssistCount::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, Temp_int_Variable_2) == 0x000010, "Member 'BP_PlayerManager_C_DecAssistCount::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_DecAssistCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'BP_PlayerManager_C_DecAssistCount::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DecAssistCount, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x00001C, "Member 'BP_PlayerManager_C_DecAssistCount::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ChangePlayerFromClass
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerManager_C_ChangePlayerFromClass final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PlayerClass;                                       // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC6[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadSoftClassActor_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsRSBattle_Player;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ChangePlayerFromClass) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ChangePlayerFromClass");
static_assert(sizeof(BP_PlayerManager_C_ChangePlayerFromClass) == 0x000050, "Wrong size on BP_PlayerManager_C_ChangePlayerFromClass");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, Kind) == 0x000000, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, PlayerClass) == 0x000008, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::PlayerClass' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, CallFunc_LoadSoftClassActor_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::CallFunc_LoadSoftClassActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, K2Node_ClassDynamicCast_AsRSBattle_Player) == 0x000040, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::K2Node_ClassDynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangePlayerFromClass, K2Node_ClassDynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerManager_C_ChangePlayerFromClass::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DoPlayerSetting
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_DoPlayerSetting final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LMesh;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DoPlayerSetting) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DoPlayerSetting");
static_assert(sizeof(BP_PlayerManager_C_DoPlayerSetting) == 0x000038, "Wrong size on BP_PlayerManager_C_DoPlayerSetting");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, Kind) == 0x000000, "Member 'BP_PlayerManager_C_DoPlayerSetting::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, Player) == 0x000008, "Member 'BP_PlayerManager_C_DoPlayerSetting::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, LMesh) == 0x000010, "Member 'BP_PlayerManager_C_DoPlayerSetting::LMesh' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000018, "Member 'BP_PlayerManager_C_DoPlayerSetting::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_DoPlayerSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000028, "Member 'BP_PlayerManager_C_DoPlayerSetting::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerManager_C_DoPlayerSetting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoPlayerSetting, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'BP_PlayerManager_C_DoPlayerSetting::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetSasStealth
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerManager_C_SetSasStealth final
{
public:
	bool                                          Stealth_on_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BC9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              L_playerList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BCA[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BCB[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SetSasStealth_dummy;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BCC[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_SetSasStealth) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SetSasStealth");
static_assert(sizeof(BP_PlayerManager_C_SetSasStealth) == 0x000048, "Wrong size on BP_PlayerManager_C_SetSasStealth");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, Stealth_on_in) == 0x000000, "Member 'BP_PlayerManager_C_SetSasStealth::Stealth_on_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, L_playerList) == 0x000008, "Member 'BP_PlayerManager_C_SetSasStealth::L_playerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerManager_C_SetSasStealth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_PlayerManager_C_SetSasStealth::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_PlayerManager_C_SetSasStealth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_SetSasStealth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_SetSasStealth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, CallFunc_GetPlayersAll_Player) == 0x000030, "Member 'BP_PlayerManager_C_SetSasStealth::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, CallFunc_SetSasStealth_dummy) == 0x000040, "Member 'BP_PlayerManager_C_SetSasStealth::CallFunc_SetSasStealth_dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetSasStealth, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_SetSasStealth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.StartDeadRecover
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerManager_C_StartDeadRecover final
{
public:
	class ARSBattleCharacter_C*                   RecoverCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BCD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_StartDeadRecover) == 0x000008, "Wrong alignment on BP_PlayerManager_C_StartDeadRecover");
static_assert(sizeof(BP_PlayerManager_C_StartDeadRecover) == 0x000028, "Wrong size on BP_PlayerManager_C_StartDeadRecover");
static_assert(offsetof(BP_PlayerManager_C_StartDeadRecover, RecoverCharacter) == 0x000000, "Member 'BP_PlayerManager_C_StartDeadRecover::RecoverCharacter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartDeadRecover, Temp_byte_Variable) == 0x000008, "Member 'BP_PlayerManager_C_StartDeadRecover::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartDeadRecover, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_PlayerManager_C_StartDeadRecover::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartDeadRecover, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerManager_C_StartDeadRecover::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartDeadRecover, CallFunc_GetPlayerID_ReturnValue) == 0x000021, "Member 'BP_PlayerManager_C_StartDeadRecover::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadGameOver
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingDeadGameOver final
{
public:
	bool                                          Playing;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingDeadGameOver_IsPlaying;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingDeadGameOver) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingDeadGameOver");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingDeadGameOver) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingDeadGameOver");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadGameOver, Playing) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingDeadGameOver::Playing' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadGameOver, CallFunc_IsPlayingDeadGameOver_IsPlaying) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingDeadGameOver::CallFunc_IsPlayingDeadGameOver_IsPlaying' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingAnyDead
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingAnyDead final
{
public:
	bool                                          Playing;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAny_IsPlaying;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingAnyDead) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingAnyDead");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingAnyDead) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingAnyDead");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingAnyDead, Playing) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingAnyDead::Playing' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingAnyDead, CallFunc_IsPlayingAny_IsPlaying) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingAnyDead::CallFunc_IsPlayingAny_IsPlaying' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ChangeAreaLocation
// 0x0078 (0x0078 - 0x0000)
struct BP_PlayerManager_C_ChangeAreaLocation final
{
public:
	E_SceneType                                   SceneType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BCE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCapsuleSize                            Temp_byte_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BCF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCapsuleSize                            Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD0[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCameraPreset                           CallFunc_GetCurrentAreaCameraPreset_camera_preset; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurrentAreaCameraPreset_return;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerCapsuleSize                            K2Node_Select_Default;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD1[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraTriggerInfo                     K2Node_MakeStruct_CameraTriggerInfo;               // 0x0038(0x0028)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD2[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player_1;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ChangeAreaLocation) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ChangeAreaLocation");
static_assert(sizeof(BP_PlayerManager_C_ChangeAreaLocation) == 0x000078, "Wrong size on BP_PlayerManager_C_ChangeAreaLocation");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, SceneType) == 0x000000, "Member 'BP_PlayerManager_C_ChangeAreaLocation::SceneType' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetMainPlayer_Player) == 0x000008, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, Temp_byte_Variable) == 0x000012, "Member 'BP_PlayerManager_C_ChangeAreaLocation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, K2Node_SwitchEnum_CmpSuccess) == 0x000013, "Member 'BP_PlayerManager_C_ChangeAreaLocation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000018, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000020, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, Temp_byte_Variable_1) == 0x000022, "Member 'BP_PlayerManager_C_ChangeAreaLocation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetLevelManager_LevelManager) == 0x000028, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetLevelManager_LevelManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, Temp_bool_Variable) == 0x000030, "Member 'BP_PlayerManager_C_ChangeAreaLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetCurrentAreaCameraPreset_camera_preset) == 0x000031, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetCurrentAreaCameraPreset_camera_preset' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetCurrentAreaCameraPreset_return) == 0x000032, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetCurrentAreaCameraPreset_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, K2Node_Select_Default) == 0x000033, "Member 'BP_PlayerManager_C_ChangeAreaLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, K2Node_MakeStruct_CameraTriggerInfo) == 0x000038, "Member 'BP_PlayerManager_C_ChangeAreaLocation::K2Node_MakeStruct_CameraTriggerInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_GetMainPlayer_Player_1) == 0x000068, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_GetMainPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'BP_PlayerManager_C_ChangeAreaLocation::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAreaLocation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000071, "Member 'BP_PlayerManager_C_ChangeAreaLocation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerBPSoftRef
// 0x0D98 (0x0D98 - 0x0000)
struct BP_PlayerManager_C_GetPlayerBPSoftRef final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bENPC;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMetamorphosis;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD3[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD4[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable;                           // 0x0038(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_1;                         // 0x0060(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_2;                         // 0x0088(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_3;                         // 0x00B0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_4;                         // 0x00D8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_5;                         // 0x0100(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_6;                         // 0x0128(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_7;                         // 0x0150(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_8;                         // 0x0178(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_9;                         // 0x01A0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_10;                        // 0x01C8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_11;                        // 0x01F0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_12;                        // 0x0218(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_13;                        // 0x0240(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_14;                        // 0x0268(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_15;                        // 0x0290(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_16;                        // 0x02B8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_17;                        // 0x02E0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_18;                        // 0x0308(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_19;                        // 0x0330(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_20;                        // 0x0358(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_21;                        // 0x0380(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_22;                        // 0x03A8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_23;                        // 0x03D0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_24;                        // 0x03F8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_25;                        // 0x0420(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_26;                        // 0x0448(0x0028)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD5[0x7];                                     // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   K2Node_Select_Default;                             // 0x0478(0x0028)(HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD6[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_27;                        // 0x04A8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_28;                        // 0x04D0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_29;                        // 0x04F8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_30;                        // 0x0520(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_31;                        // 0x0548(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_32;                        // 0x0570(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_33;                        // 0x0598(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_34;                        // 0x05C0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_35;                        // 0x05E8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_36;                        // 0x0610(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_37;                        // 0x0638(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_38;                        // 0x0660(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_39;                        // 0x0688(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_40;                        // 0x06B0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_41;                        // 0x06D8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_42;                        // 0x0700(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_43;                        // 0x0728(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_44;                        // 0x0750(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_45;                        // 0x0778(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_46;                        // 0x07A0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_47;                        // 0x07C8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_48;                        // 0x07F0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_49;                        // 0x0818(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_50;                        // 0x0840(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_51;                        // 0x0868(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_52;                        // 0x0890(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_53;                        // 0x08B8(0x0028)(HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x08E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD7[0x7];                                     // 0x08E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   K2Node_Select_Default_1;                           // 0x08E8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_54;                        // 0x0910(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_55;                        // 0x0938(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_56;                        // 0x0960(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_57;                        // 0x0988(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_58;                        // 0x09B0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_59;                        // 0x09D8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_60;                        // 0x0A00(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_61;                        // 0x0A28(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_62;                        // 0x0A50(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_63;                        // 0x0A78(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_64;                        // 0x0AA0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_65;                        // 0x0AC8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_66;                        // 0x0AF0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_67;                        // 0x0B18(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_68;                        // 0x0B40(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_69;                        // 0x0B68(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_70;                        // 0x0B90(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_71;                        // 0x0BB8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_72;                        // 0x0BE0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_73;                        // 0x0C08(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_74;                        // 0x0C30(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_75;                        // 0x0C58(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_76;                        // 0x0C80(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_77;                        // 0x0CA8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_78;                        // 0x0CD0(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_79;                        // 0x0CF8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_80;                        // 0x0D20(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   K2Node_Select_Default_2;                           // 0x0D48(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   K2Node_Select_Default_3;                           // 0x0D70(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetPlayerBPSoftRef) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPlayerBPSoftRef");
static_assert(sizeof(BP_PlayerManager_C_GetPlayerBPSoftRef) == 0x000D98, "Wrong size on BP_PlayerManager_C_GetPlayerBPSoftRef");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, bENPC) == 0x000001, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::bENPC' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, bMetamorphosis) == 0x000002, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::bMetamorphosis' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_byte_Variable) == 0x000030, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable) == 0x000038, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_1) == 0x000060, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_2) == 0x000088, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_3) == 0x0000B0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_4) == 0x0000D8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_5) == 0x000100, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_6) == 0x000128, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_7) == 0x000150, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_8) == 0x000178, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_9) == 0x0001A0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_10) == 0x0001C8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_11) == 0x0001F0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_12) == 0x000218, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_13) == 0x000240, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_14) == 0x000268, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_15) == 0x000290, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_16) == 0x0002B8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_17) == 0x0002E0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_18) == 0x000308, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_19) == 0x000330, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_20) == 0x000358, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_21) == 0x000380, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_22) == 0x0003A8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_23) == 0x0003D0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_24) == 0x0003F8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_25) == 0x000420, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_26) == 0x000448, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_bool_Variable) == 0x000470, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, K2Node_Select_Default) == 0x000478, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_byte_Variable_1) == 0x0004A0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_27) == 0x0004A8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_28) == 0x0004D0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_29) == 0x0004F8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_30) == 0x000520, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_31) == 0x000548, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_32) == 0x000570, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_33) == 0x000598, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_34) == 0x0005C0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_35) == 0x0005E8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_36) == 0x000610, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_37) == 0x000638, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_38) == 0x000660, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_39) == 0x000688, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_40) == 0x0006B0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_41) == 0x0006D8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_42) == 0x000700, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_43) == 0x000728, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_44) == 0x000750, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_45) == 0x000778, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_46) == 0x0007A0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_47) == 0x0007C8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_48) == 0x0007F0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_49) == 0x000818, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_50) == 0x000840, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_50' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_51) == 0x000868, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_51' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_52) == 0x000890, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_52' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_53) == 0x0008B8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_53' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_byte_Variable_2) == 0x0008E0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, K2Node_Select_Default_1) == 0x0008E8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_54) == 0x000910, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_54' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_55) == 0x000938, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_55' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_56) == 0x000960, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_56' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_57) == 0x000988, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_57' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_58) == 0x0009B0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_58' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_59) == 0x0009D8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_59' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_60) == 0x000A00, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_60' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_61) == 0x000A28, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_61' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_62) == 0x000A50, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_62' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_63) == 0x000A78, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_63' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_64) == 0x000AA0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_64' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_65) == 0x000AC8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_65' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_66) == 0x000AF0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_66' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_67) == 0x000B18, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_67' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_68) == 0x000B40, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_68' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_69) == 0x000B68, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_69' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_70) == 0x000B90, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_70' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_71) == 0x000BB8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_71' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_72) == 0x000BE0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_72' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_73) == 0x000C08, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_73' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_74) == 0x000C30, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_74' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_75) == 0x000C58, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_75' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_76) == 0x000C80, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_76' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_77) == 0x000CA8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_77' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_78) == 0x000CD0, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_78' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_79) == 0x000CF8, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_79' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, Temp_softclass_Variable_80) == 0x000D20, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::Temp_softclass_Variable_80' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, K2Node_Select_Default_2) == 0x000D48, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerBPSoftRef, K2Node_Select_Default_3) == 0x000D70, "Member 'BP_PlayerManager_C_GetPlayerBPSoftRef::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetForceBrainField
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_SetForceBrainField final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetForceBrainField) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetForceBrainField");
static_assert(sizeof(BP_PlayerManager_C_SetForceBrainField) == 0x000001, "Wrong size on BP_PlayerManager_C_SetForceBrainField");
static_assert(offsetof(BP_PlayerManager_C_SetForceBrainField, bEnable) == 0x000000, "Member 'BP_PlayerManager_C_SetForceBrainField::bEnable' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetDisableGameOver
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_SetDisableGameOver final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetDisableGameOver) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetDisableGameOver");
static_assert(sizeof(BP_PlayerManager_C_SetDisableGameOver) == 0x000001, "Wrong size on BP_PlayerManager_C_SetDisableGameOver");
static_assert(offsetof(BP_PlayerManager_C_SetDisableGameOver, bDisable) == 0x000000, "Member 'BP_PlayerManager_C_SetDisableGameOver::bDisable' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdatePlayerParameter
// 0x0438 (0x0438 - 0x0000)
struct BP_PlayerManager_C_UpdatePlayerParameter final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMaxHP;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD8[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              ReturnValue;                                       // 0x0008(0x01F8)(Parm, OutParm, ReturnParm)
	class ARSCharacterBase*                       CallFunc_GetBattleMemberActorFromID_ReturnValue;   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD9[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_CalcCharactersParameterTable_Parameter;   // 0x0220(0x01F8)()
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDA[0x4];                                     // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_1;    // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdatePlayerParameter) == 0x000008, "Wrong alignment on BP_PlayerManager_C_UpdatePlayerParameter");
static_assert(sizeof(BP_PlayerManager_C_UpdatePlayerParameter) == 0x000438, "Wrong size on BP_PlayerManager_C_UpdatePlayerParameter");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, bMaxHP) == 0x000001, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::bMaxHP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, CallFunc_GetBattleMemberActorFromID_ReturnValue) == 0x000200, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::CallFunc_GetBattleMemberActorFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000208, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, K2Node_DynamicCast_bSuccess) == 0x000218, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, CallFunc_CalcCharactersParameterTable_Parameter) == 0x000220, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::CallFunc_CalcCharactersParameterTable_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, CallFunc_GetMaxHP_MaxHP) == 0x000418, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, K2Node_DynamicCast_AsBPI_Character_Paramater_1) == 0x000420, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::K2Node_DynamicCast_AsBPI_Character_Paramater_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, K2Node_DynamicCast_bSuccess_1) == 0x000430, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, CallFunc_IsValid_ReturnValue) == 0x000431, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdatePlayerParameter, CallFunc_SetHP_bDummy) == 0x000432, "Member 'BP_PlayerManager_C_UpdatePlayerParameter::CallFunc_SetHP_bDummy' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeSkillList
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PlayerManager_C_InitializeSkillList final
{
public:
	struct FCharactersSkillData                   LDummyData;                                        // 0x0000(0x0024)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDB[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_str;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EPlayerSkillCategory                          L_skillCategoryMax;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDC[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDD[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDE[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BDF[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BE0[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_RightChop_ReturnValue;                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersSkillData                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0090(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE1[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_InitializeSkillList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_InitializeSkillList");
static_assert(sizeof(BP_PlayerManager_C_InitializeSkillList) == 0x0000D0, "Wrong size on BP_PlayerManager_C_InitializeSkillList");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, LDummyData) == 0x000000, "Member 'BP_PlayerManager_C_InitializeSkillList::LDummyData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, L_str) == 0x000028, "Member 'BP_PlayerManager_C_InitializeSkillList::L_str' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, L_skillCategoryMax) == 0x000038, "Member 'BP_PlayerManager_C_InitializeSkillList::L_skillCategoryMax' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, Temp_int_Variable) == 0x00003C, "Member 'BP_PlayerManager_C_InitializeSkillList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, Temp_int_Variable_1) == 0x000040, "Member 'BP_PlayerManager_C_InitializeSkillList::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Conv_IntToByte_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_GetValidValue_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00004D, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_GetEnumeratorName_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Conv_NameToString_ReturnValue) == 0x000060, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_RightChop_ReturnValue) == 0x000078, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_RightChop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Conv_StringToName_ReturnValue) == 0x000088, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_GetDataTableRowFromName_OutRow) == 0x000090, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000B4, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Array_Add_ReturnValue) == 0x0000B8, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Array_Add_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000C4, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeSkillList, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_PlayerManager_C_InitializeSkillList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AddSkill_Internal
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_AddSkill_Internal final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill_id_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bAdd;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE2[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_skillIdx;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_playerIdx;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BE3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      L_userParamMan;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AddSkill_Internal) == 0x000008, "Wrong alignment on BP_PlayerManager_C_AddSkill_Internal");
static_assert(sizeof(BP_PlayerManager_C_AddSkill_Internal) == 0x000030, "Wrong size on BP_PlayerManager_C_AddSkill_Internal");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_AddSkill_Internal::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, Skill_id_in) == 0x000001, "Member 'BP_PlayerManager_C_AddSkill_Internal::Skill_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, L_bAdd) == 0x000002, "Member 'BP_PlayerManager_C_AddSkill_Internal::L_bAdd' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, L_skillIdx) == 0x000004, "Member 'BP_PlayerManager_C_AddSkill_Internal::L_skillIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, L_playerIdx) == 0x000008, "Member 'BP_PlayerManager_C_AddSkill_Internal::L_playerIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, L_userParamMan) == 0x000010, "Member 'BP_PlayerManager_C_AddSkill_Internal::L_userParamMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Array_Get_Item_1) == 0x000021, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, Temp_bool_Variable) == 0x000022, "Member 'BP_PlayerManager_C_AddSkill_Internal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, Temp_bool_Variable_1) == 0x000024, "Member 'BP_PlayerManager_C_AddSkill_Internal::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000025, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000026, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, K2Node_SwitchEnum_CmpSuccess) == 0x000027, "Member 'BP_PlayerManager_C_AddSkill_Internal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddSkill_Internal, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'BP_PlayerManager_C_AddSkill_Internal::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AddExp
// 0x0530 (0x0530 - 0x0000)
struct BP_PlayerManager_C_AddExp final
{
public:
	int32                                         Exp_value_in;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemyLevelIn;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDirect;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE4[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutMainPlayerExp;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bBrainTalkLvUpPl;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE5[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_OriginalAddExp;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bDead;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bMainPlayer;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bBattleMember;                                   // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE6[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerInfo>                    L_PartyInfoList;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         L_addExp;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bCheckLoop;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE7[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_skillPoint;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bOverwrite;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_bLevelUp;                                        // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BE8[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_mainPlayerExp;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_reqExp;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_level;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_expDiff;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_exp;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_totalExp;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerInfo                            L_playerInfo;                                      // 0x0058(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	EPlayerID                                     L_playerId;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BE9[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x0154(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x0164(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_8;                              // 0x016C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_9;                              // 0x0174(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_10;                             // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_11;                             // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_12;                             // 0x018C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BEA[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BEB[0x2];                                     // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_13;                             // 0x01A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_14;                             // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BEC[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_15;                             // 0x01BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_16;                             // 0x01C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BED[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_LvUp_PL_ReturnValue;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BEE[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClearGetterManager*                    CallFunc_GetClearGetterManager_ClearGetterManager; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClearGetterManager*                    CallFunc_GetClearGetterManager_ClearGetterManager_1; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_17;                             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BEF[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcLevelDifferentExpRate_ReturnValue;    // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_18;                             // 0x0204(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF0[0x1];                                     // 0x020F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF1[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccessoryEffect_outValue;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAccessoryEffect_ReturnValue;           // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF2[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccessoryEffect_outValue_1;            // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAccessoryEffect_ReturnValue_1;         // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF3[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_19;                             // 0x0234(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExistBattleMember_ReturnValue;          // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF4[0x2];                                     // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerInfo>                    CallFunc_GetPartyInfoList_ReturnValue;             // 0x0240(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_20;                             // 0x0254(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_21;                             // 0x025C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF5[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_1;   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_LvUp_ReturnValue;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF6[0x2];                                     // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF7[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF8[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BF9[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue_1;                      // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_22;                             // 0x02A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BFA[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BFB[0x2];                                     // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_23;                             // 0x02BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_24;                             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BFC[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_25;                             // 0x02DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_26;                             // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_1;                           // 0x02F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersParameterTable              CallFunc_UpdatePlayerParameter_ReturnValue;        // 0x0308(0x01F8)()
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCharacterLevelData_return;             // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BFD[0x3];                                     // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersLevelData                   CallFunc_GetCharacterLevelData_data_table;         // 0x0508(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AddExp) == 0x000008, "Wrong alignment on BP_PlayerManager_C_AddExp");
static_assert(sizeof(BP_PlayerManager_C_AddExp) == 0x000530, "Wrong size on BP_PlayerManager_C_AddExp");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Exp_value_in) == 0x000000, "Member 'BP_PlayerManager_C_AddExp::Exp_value_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, EnemyLevelIn) == 0x000004, "Member 'BP_PlayerManager_C_AddExp::EnemyLevelIn' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, bDirect) == 0x000008, "Member 'BP_PlayerManager_C_AddExp::bDirect' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, OutMainPlayerExp) == 0x00000C, "Member 'BP_PlayerManager_C_AddExp::OutMainPlayerExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bBrainTalkLvUpPl) == 0x000010, "Member 'BP_PlayerManager_C_AddExp::L_bBrainTalkLvUpPl' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_OriginalAddExp) == 0x000014, "Member 'BP_PlayerManager_C_AddExp::L_OriginalAddExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bDead) == 0x000018, "Member 'BP_PlayerManager_C_AddExp::L_bDead' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bMainPlayer) == 0x000019, "Member 'BP_PlayerManager_C_AddExp::L_bMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bBattleMember) == 0x00001A, "Member 'BP_PlayerManager_C_AddExp::L_bBattleMember' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_PartyInfoList) == 0x000020, "Member 'BP_PlayerManager_C_AddExp::L_PartyInfoList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_addExp) == 0x000030, "Member 'BP_PlayerManager_C_AddExp::L_addExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bCheckLoop) == 0x000034, "Member 'BP_PlayerManager_C_AddExp::L_bCheckLoop' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_skillPoint) == 0x000038, "Member 'BP_PlayerManager_C_AddExp::L_skillPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bOverwrite) == 0x00003C, "Member 'BP_PlayerManager_C_AddExp::L_bOverwrite' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_bLevelUp) == 0x00003D, "Member 'BP_PlayerManager_C_AddExp::L_bLevelUp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_mainPlayerExp) == 0x000040, "Member 'BP_PlayerManager_C_AddExp::L_mainPlayerExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_reqExp) == 0x000044, "Member 'BP_PlayerManager_C_AddExp::L_reqExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_level) == 0x000048, "Member 'BP_PlayerManager_C_AddExp::L_level' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_expDiff) == 0x00004C, "Member 'BP_PlayerManager_C_AddExp::L_expDiff' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_exp) == 0x000050, "Member 'BP_PlayerManager_C_AddExp::L_exp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_totalExp) == 0x000054, "Member 'BP_PlayerManager_C_AddExp::L_totalExp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_playerInfo) == 0x000058, "Member 'BP_PlayerManager_C_AddExp::L_playerInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, L_playerId) == 0x000128, "Member 'BP_PlayerManager_C_AddExp::L_playerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable) == 0x00012C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_1) == 0x000134, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_2) == 0x00013C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_3) == 0x000144, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_4) == 0x00014C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_5) == 0x000154, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_6) == 0x00015C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_7) == 0x000164, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_8) == 0x00016C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_9) == 0x000174, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_10) == 0x00017C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_11) == 0x000184, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_12) == 0x00018C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_bool_Variable) == 0x000194, "Member 'BP_PlayerManager_C_AddExp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_int_Variable) == 0x000198, "Member 'BP_PlayerManager_C_AddExp::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00019C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Less_IntInt_ReturnValue) == 0x00019D, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_int_Loop_Num_Variable) == 0x0001A0, "Member 'BP_PlayerManager_C_AddExp::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_13) == 0x0001A4, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_14) == 0x0001AC, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_byte_Variable) == 0x0001B4, "Member 'BP_PlayerManager_C_AddExp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_int_Array_Index_Variable) == 0x0001B8, "Member 'BP_PlayerManager_C_AddExp::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_15) == 0x0001BC, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_16) == 0x0001C4, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x0001D0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_BrainTalkBt_LvUp_PL_ReturnValue) == 0x0001D8, "Member 'BP_PlayerManager_C_AddExp::CallFunc_BrainTalkBt_LvUp_PL_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsValid_ReturnValue) == 0x0001D9, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetClearGetterManager_ClearGetterManager) == 0x0001E0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetClearGetterManager_ClearGetterManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetClearGetterManager_ClearGetterManager_1) == 0x0001E8, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetClearGetterManager_ClearGetterManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_17) == 0x0001F0, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Not_PreBool_ReturnValue) == 0x0001F8, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001FC, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_CalcLevelDifferentExpRate_ReturnValue) == 0x000200, "Member 'BP_PlayerManager_C_AddExp::CallFunc_CalcLevelDifferentExpRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_18) == 0x000204, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x00020C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00020D, "Member 'BP_PlayerManager_C_AddExp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsExistPartyMember_ReturnValue) == 0x00020E, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000210, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsValid_ReturnValue_1) == 0x000218, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetAccessoryEffect_outValue) == 0x00021C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetAccessoryEffect_outValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetAccessoryEffect_ReturnValue) == 0x000220, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetAccessoryEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetAccessoryEffect_outValue_1) == 0x000224, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetAccessoryEffect_outValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetAccessoryEffect_ReturnValue_1) == 0x000228, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetAccessoryEffect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_FloatFloat_ReturnValue) == 0x00022C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, K2Node_MathExpression_ReturnValue) == 0x000230, "Member 'BP_PlayerManager_C_AddExp::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_19) == 0x000234, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsExistBattleMember_ReturnValue) == 0x00023C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsExistBattleMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00023D, "Member 'BP_PlayerManager_C_AddExp::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetPartyInfoList_ReturnValue) == 0x000240, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetPartyInfoList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Array_Length_ReturnValue) == 0x000250, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_20) == 0x000254, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_21) == 0x00025C, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetBrainTalkManager_BrainTalkManager_1) == 0x000268, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetBrainTalkManager_BrainTalkManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_BrainTalkBt_LvUp_ReturnValue) == 0x000270, "Member 'BP_PlayerManager_C_AddExp::CallFunc_BrainTalkBt_LvUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsValid_ReturnValue_2) == 0x000271, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_int_Loop_Counter_Variable) == 0x000274, "Member 'BP_PlayerManager_C_AddExp::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Less_IntInt_ReturnValue_1) == 0x000278, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue) == 0x00027C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000280, "Member 'BP_PlayerManager_C_AddExp::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000284, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue_1) == 0x000288, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00028C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000290, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000294, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000298, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_FCeil_ReturnValue) == 0x00029C, "Member 'BP_PlayerManager_C_AddExp::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_FCeil_ReturnValue_1) == 0x0002A0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_FCeil_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_22) == 0x0002A4, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetUserParamManager_UserParamManager) == 0x0002B0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsValid_ReturnValue_3) == 0x0002B8, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_bool_Variable_1) == 0x0002B9, "Member 'BP_PlayerManager_C_AddExp::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_23) == 0x0002BC, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, K2Node_Select_Default) == 0x0002C4, "Member 'BP_PlayerManager_C_AddExp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_24) == 0x0002C8, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x0002D0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_IsValid_ReturnValue_4) == 0x0002D8, "Member 'BP_PlayerManager_C_AddExp::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_25) == 0x0002DC, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_int_Variable_1) == 0x0002E4, "Member 'BP_PlayerManager_C_AddExp::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, Temp_name_Variable_26) == 0x0002E8, "Member 'BP_PlayerManager_C_AddExp::Temp_name_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002F0, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, K2Node_Select_Default_1) == 0x0002F4, "Member 'BP_PlayerManager_C_AddExp::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue_3) == 0x0002FC, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000300, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue_4) == 0x000304, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_UpdatePlayerParameter_ReturnValue) == 0x000308, "Member 'BP_PlayerManager_C_AddExp::CallFunc_UpdatePlayerParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000500, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetCharacterLevelData_return) == 0x000504, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetCharacterLevelData_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_GetCharacterLevelData_data_table) == 0x000508, "Member 'BP_PlayerManager_C_AddExp::CallFunc_GetCharacterLevelData_data_table' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_FTrunc_ReturnValue) == 0x000520, "Member 'BP_PlayerManager_C_AddExp::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_FTrunc_ReturnValue_1) == 0x000524, "Member 'BP_PlayerManager_C_AddExp::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, CallFunc_Add_IntInt_ReturnValue_5) == 0x000528, "Member 'BP_PlayerManager_C_AddExp::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddExp, K2Node_Select_Default_2) == 0x00052C, "Member 'BP_PlayerManager_C_AddExp::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetDisableBrainFieldFlag
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_SetDisableBrainFieldFlag final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetDisableBrainFieldFlag) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetDisableBrainFieldFlag");
static_assert(sizeof(BP_PlayerManager_C_SetDisableBrainFieldFlag) == 0x000001, "Wrong size on BP_PlayerManager_C_SetDisableBrainFieldFlag");
static_assert(offsetof(BP_PlayerManager_C_SetDisableBrainFieldFlag, bDisable) == 0x000000, "Member 'BP_PlayerManager_C_SetDisableBrainFieldFlag::bDisable' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SubSkill
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_SubSkill final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill_id_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bSub;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BFE[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_skillIdx;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_playerIdx;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BFF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      L_userParamMan;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0027(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_SubSkill) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SubSkill");
static_assert(sizeof(BP_PlayerManager_C_SubSkill) == 0x000030, "Wrong size on BP_PlayerManager_C_SubSkill");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_SubSkill::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, Skill_id_in) == 0x000001, "Member 'BP_PlayerManager_C_SubSkill::Skill_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, L_bSub) == 0x000002, "Member 'BP_PlayerManager_C_SubSkill::L_bSub' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, L_skillIdx) == 0x000004, "Member 'BP_PlayerManager_C_SubSkill::L_skillIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, L_playerIdx) == 0x000008, "Member 'BP_PlayerManager_C_SubSkill::L_playerIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, L_userParamMan) == 0x000010, "Member 'BP_PlayerManager_C_SubSkill::L_userParamMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Array_Get_Item_1) == 0x000021, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, K2Node_SwitchEnum_CmpSuccess) == 0x000022, "Member 'BP_PlayerManager_C_SubSkill::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, Temp_bool_Variable) == 0x000024, "Member 'BP_PlayerManager_C_SubSkill::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000025, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000026, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, Temp_bool_Variable_1) == 0x000027, "Member 'BP_PlayerManager_C_SubSkill::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SubSkill, CallFunc_GetUserParamManager_UserParamManager) == 0x000028, "Member 'BP_PlayerManager_C_SubSkill::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ResetSkill_Internal
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerManager_C_ResetSkill_Internal final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C00[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      L_userParamMan;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C01[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C02[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C03[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0044(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C04[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ResetSkill_Internal) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ResetSkill_Internal");
static_assert(sizeof(BP_PlayerManager_C_ResetSkill_Internal) == 0x000050, "Wrong size on BP_PlayerManager_C_ResetSkill_Internal");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, L_userParamMan) == 0x000008, "Member 'BP_PlayerManager_C_ResetSkill_Internal::L_userParamMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'BP_PlayerManager_C_ResetSkill_Internal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Loop_Num_Variable_1) == 0x000028, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_bool_Variable) == 0x00002C, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Less_IntInt_ReturnValue_1) == 0x000038, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, Temp_bool_Variable_1) == 0x000044, "Member 'BP_PlayerManager_C_ResetSkill_Internal::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_IsValid_ReturnValue) == 0x000045, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetSkill_Internal, CallFunc_GetUserParamManager_UserParamManager) == 0x000048, "Member 'BP_PlayerManager_C_ResetSkill_Internal::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DebugPrintSkillList
// 0x01B0 (0x01B0 - 0x0000)
struct BP_PlayerManager_C_DebugPrintSkillList final
{
public:
	EPlayerSkill                                  L_skillid;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C05[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      L_userParamMan;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_skillIdx;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_idxEnd;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_idxStt;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_num;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_playerIdx;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     L_playerId;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C06[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       L_player;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_str;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C07[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C08[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C09[0x1];                                     // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0A[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0B[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C0C[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFallbackStruct                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C0D[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0E[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLearnedSkill_ReturnValue;               // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DebugPrintSkillList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DebugPrintSkillList");
static_assert(sizeof(BP_PlayerManager_C_DebugPrintSkillList) == 0x0001B0, "Wrong size on BP_PlayerManager_C_DebugPrintSkillList");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_skillid) == 0x000000, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_skillid' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_userParamMan) == 0x000008, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_userParamMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_skillIdx) == 0x000010, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_skillIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_idxEnd) == 0x000014, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_idxEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_idxStt) == 0x000018, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_idxStt' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_num) == 0x00001C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_num' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_playerIdx) == 0x000020, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_playerIdx' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_playerId) == 0x000024, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_playerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_player) == 0x000028, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, L_str) == 0x000030, "Member 'BP_PlayerManager_C_DebugPrintSkillList::L_str' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Variable) == 0x000040, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_IntToByte_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00004D, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000050, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000054, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Loop_Num_Variable) == 0x000058, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Array_Index_Variable_1) == 0x000068, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Loop_Num_Variable_1) == 0x00006C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Variable_1) == 0x000074, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, Temp_int_Loop_Counter_Variable_1) == 0x000078, "Member 'BP_PlayerManager_C_DebugPrintSkillList::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00007C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetValidValue_ReturnValue) == 0x00007D, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007E, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Add_IntInt_ReturnValue_2) == 0x000080, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_MakeLiteralInt_ReturnValue) == 0x000084, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Less_IntInt_ReturnValue_2) == 0x000088, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000094, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x000098, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetUserParamManager_UserParamManager) == 0x0000A0, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000A8, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_IntToString_ReturnValue) == 0x0000B8, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000C8, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000C9, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x0000CA, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetValidValue_ReturnValue_1) == 0x0000CB, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000E0, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000F0, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue) == 0x0000F8, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000108, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000118, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000128, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000138, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000148, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000158, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000168, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000178, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000188, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000198, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugPrintSkillList, CallFunc_IsLearnedSkill_ReturnValue) == 0x0001A8, "Member 'BP_PlayerManager_C_DebugPrintSkillList::CallFunc_IsLearnedSkill_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SpawnNotPartyPlayer
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlayerManager_C_SpawnNotPartyPlayer final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bENPC;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMetamorphosis;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0F[0xD];                                     // 0x0003(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class AActor*                                 CreateOwner;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      Player;                                            // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_GetPlayerBPSoftRef_ReturnValue;           // 0x0058(0x0028)(HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadSoftClassActor_ReturnValue;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C10[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsRSBattle_Player;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C11[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_ProtectedSpawnNotPartyPlayer_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C12[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SpawnNotPartyPlayer) == 0x000010, "Wrong alignment on BP_PlayerManager_C_SpawnNotPartyPlayer");
static_assert(sizeof(BP_PlayerManager_C_SpawnNotPartyPlayer) == 0x0000C0, "Wrong size on BP_PlayerManager_C_SpawnNotPartyPlayer");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, bENPC) == 0x000001, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::bENPC' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, bMetamorphosis) == 0x000002, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::bMetamorphosis' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, Transform) == 0x000010, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::Transform' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CreateOwner) == 0x000040, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CreateOwner' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, Player) == 0x000048, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, LPlayer) == 0x000050, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CallFunc_GetPlayerBPSoftRef_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CallFunc_GetPlayerBPSoftRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CallFunc_LoadSoftClassActor_ReturnValue) == 0x000080, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CallFunc_LoadSoftClassActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000088, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, K2Node_ClassDynamicCast_AsRSBattle_Player) == 0x000090, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::K2Node_ClassDynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, K2Node_ClassDynamicCast_bSuccess) == 0x000098, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CallFunc_ProtectedSpawnNotPartyPlayer_ReturnValue) == 0x0000A0, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CallFunc_ProtectedSpawnNotPartyPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, K2Node_DynamicCast_AsRSBattle_Player) == 0x0000B0, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnNotPartyPlayer, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_PlayerManager_C_SpawnNotPartyPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeHologram
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerManager_C_InitializeHologram final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerHologram_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_InitializeHologram) == 0x000010, "Wrong alignment on BP_PlayerManager_C_InitializeHologram");
static_assert(sizeof(BP_PlayerManager_C_InitializeHologram) == 0x000060, "Wrong size on BP_PlayerManager_C_InitializeHologram");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_GetMainPlayer_Player) == 0x000038, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_FinishSpawningActor_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000048, "Member 'BP_PlayerManager_C_InitializeHologram::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PlayerManager_C_InitializeHologram::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeHologram, CallFunc_MakeLiteralByte_ReturnValue) == 0x000052, "Member 'BP_PlayerManager_C_InitializeHologram::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.FinalizeHologram
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_FinalizeHologram final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_FinalizeHologram) == 0x000001, "Wrong alignment on BP_PlayerManager_C_FinalizeHologram");
static_assert(sizeof(BP_PlayerManager_C_FinalizeHologram) == 0x000001, "Wrong size on BP_PlayerManager_C_FinalizeHologram");
static_assert(offsetof(BP_PlayerManager_C_FinalizeHologram, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_FinalizeHologram::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PlayHologramAnimation
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerManager_C_PlayHologramAnimation final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C13[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponMontage;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologramRootMotion;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C14[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MotionIndex;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHologramKind                                 HologramKind;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_PlayHologramAnimation) == 0x000008, "Wrong alignment on BP_PlayerManager_C_PlayHologramAnimation");
static_assert(sizeof(BP_PlayerManager_C_PlayHologramAnimation) == 0x000028, "Wrong size on BP_PlayerManager_C_PlayHologramAnimation");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_PlayHologramAnimation::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, AnimMontage) == 0x000008, "Member 'BP_PlayerManager_C_PlayHologramAnimation::AnimMontage' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, WeaponMontage) == 0x000010, "Member 'BP_PlayerManager_C_PlayHologramAnimation::WeaponMontage' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, bHologramRootMotion) == 0x000018, "Member 'BP_PlayerManager_C_PlayHologramAnimation::bHologramRootMotion' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, MotionIndex) == 0x00001C, "Member 'BP_PlayerManager_C_PlayHologramAnimation::MotionIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, HologramKind) == 0x000020, "Member 'BP_PlayerManager_C_PlayHologramAnimation::HologramKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimation, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_PlayerManager_C_PlayHologramAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.StopHologramAnimation
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_StopHologramAnimation final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_StopHologramAnimation) == 0x000001, "Wrong alignment on BP_PlayerManager_C_StopHologramAnimation");
static_assert(sizeof(BP_PlayerManager_C_StopHologramAnimation) == 0x000001, "Wrong size on BP_PlayerManager_C_StopHologramAnimation");
static_assert(offsetof(BP_PlayerManager_C_StopHologramAnimation, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_StopHologramAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.HologramOn
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_HologramOn final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_HologramOn) == 0x000001, "Wrong alignment on BP_PlayerManager_C_HologramOn");
static_assert(sizeof(BP_PlayerManager_C_HologramOn) == 0x000001, "Wrong size on BP_PlayerManager_C_HologramOn");
static_assert(offsetof(BP_PlayerManager_C_HologramOn, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_HologramOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.HologramOff
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_HologramOff final
{
public:
	bool                                          bForceOff;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_HologramOff) == 0x000001, "Wrong alignment on BP_PlayerManager_C_HologramOff");
static_assert(sizeof(BP_PlayerManager_C_HologramOff) == 0x000002, "Wrong size on BP_PlayerManager_C_HologramOff");
static_assert(offsetof(BP_PlayerManager_C_HologramOff, bForceOff) == 0x000000, "Member 'BP_PlayerManager_C_HologramOff::bForceOff' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_HologramOff, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_HologramOff::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PresetAddPartyMember
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_PresetAddPartyMember final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCheckBattleMemberMain;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotEquipSAS;                                      // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C15[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAddPartyPresetData                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x0020)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_PresetAddPartyMember) == 0x000008, "Wrong alignment on BP_PlayerManager_C_PresetAddPartyMember");
static_assert(sizeof(BP_PlayerManager_C_PresetAddPartyMember) == 0x000038, "Wrong size on BP_PlayerManager_C_PresetAddPartyMember");
static_assert(offsetof(BP_PlayerManager_C_PresetAddPartyMember, PresetName) == 0x000000, "Member 'BP_PlayerManager_C_PresetAddPartyMember::PresetName' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PresetAddPartyMember, IsCheckBattleMemberMain) == 0x000008, "Member 'BP_PlayerManager_C_PresetAddPartyMember::IsCheckBattleMemberMain' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PresetAddPartyMember, bNotEquipSAS) == 0x000009, "Member 'BP_PlayerManager_C_PresetAddPartyMember::bNotEquipSAS' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PresetAddPartyMember, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'BP_PlayerManager_C_PresetAddPartyMember::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PresetAddPartyMember, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_PresetAddPartyMember::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RecoverAllHp
// 0x0088 (0x0088 - 0x0000)
struct BP_PlayerManager_C_RecoverAllHp final
{
public:
	bool                                          bUseParticle;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPlaySE;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C16[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C17[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C18[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C19[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1B[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1C[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_GetHPPercent_self_CastInput;              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RevivePlayer_bSuccess;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_RecoverAllHp) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RecoverAllHp");
static_assert(sizeof(BP_PlayerManager_C_RecoverAllHp) == 0x000088, "Wrong size on BP_PlayerManager_C_RecoverAllHp");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, bUseParticle) == 0x000000, "Member 'BP_PlayerManager_C_RecoverAllHp::bUseParticle' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, bPlaySE) == 0x000001, "Member 'BP_PlayerManager_C_RecoverAllHp::bPlaySE' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_RecoverAllHp::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_MakeLiteralInt_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, Temp_int_Variable) == 0x000018, "Member 'BP_PlayerManager_C_RecoverAllHp::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, Temp_int_Variable_1) == 0x00001C, "Member 'BP_PlayerManager_C_RecoverAllHp::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000029, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_GetPlayer_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, K2Node_DynamicCast_AsRSBattle_Player) == 0x000040, "Member 'BP_PlayerManager_C_RecoverAllHp::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerManager_C_RecoverAllHp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_GetHPPercent_self_CastInput) == 0x000060, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_GetHPPercent_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_GetHPPercent_Percent) == 0x000070, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_Less_FloatFloat_ReturnValue) == 0x000080, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllHp, CallFunc_RevivePlayer_bSuccess) == 0x000081, "Member 'BP_PlayerManager_C_RecoverAllHp::CallFunc_RevivePlayer_bSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RecoverAllBadState
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerManager_C_RecoverAllBadState final
{
public:
	class UCharactersParameterComponent*          LParameter;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1D[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1F[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C20[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharactersParameterComponent*          CallFunc_GetCharactersParameterComponent_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_RecoverAllBadState) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RecoverAllBadState");
static_assert(sizeof(BP_PlayerManager_C_RecoverAllBadState) == 0x000048, "Wrong size on BP_PlayerManager_C_RecoverAllBadState");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, LParameter) == 0x000000, "Member 'BP_PlayerManager_C_RecoverAllBadState::LParameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_RecoverAllBadState::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, Temp_int_Variable) == 0x000014, "Member 'BP_PlayerManager_C_RecoverAllBadState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, Temp_int_Variable_1) == 0x000018, "Member 'BP_PlayerManager_C_RecoverAllBadState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_Conv_IntToByte_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_GetValidValue_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000025, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_GetPlayer_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000034, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_GetCharactersParameterComponent_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_GetCharactersParameterComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_RecoverAllBadState, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_RecoverAllBadState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PlayHologramAnimationSequence
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_PlayHologramAnimationSequence final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHologramAnimKind                       Kind;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_PlayHologramAnimationSequence) == 0x000001, "Wrong alignment on BP_PlayerManager_C_PlayHologramAnimationSequence");
static_assert(sizeof(BP_PlayerManager_C_PlayHologramAnimationSequence) == 0x000003, "Wrong size on BP_PlayerManager_C_PlayHologramAnimationSequence");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimationSequence, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_PlayHologramAnimationSequence::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimationSequence, Kind) == 0x000001, "Member 'BP_PlayerManager_C_PlayHologramAnimationSequence::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayHologramAnimationSequence, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_PlayerManager_C_PlayHologramAnimationSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ActivateResurrectIcon
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_ActivateResurrectIcon final
{
public:
	class ARSBattlePlayer_C*                      DeadPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerRessurectComponent*              CallFunc_GetRessurectComponent_Comp;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ActivateResurrectIcon) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ActivateResurrectIcon");
static_assert(sizeof(BP_PlayerManager_C_ActivateResurrectIcon) == 0x000018, "Wrong size on BP_PlayerManager_C_ActivateResurrectIcon");
static_assert(offsetof(BP_PlayerManager_C_ActivateResurrectIcon, DeadPlayer) == 0x000000, "Member 'BP_PlayerManager_C_ActivateResurrectIcon::DeadPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ActivateResurrectIcon, CallFunc_GetRessurectComponent_Comp) == 0x000008, "Member 'BP_PlayerManager_C_ActivateResurrectIcon::CallFunc_GetRessurectComponent_Comp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ActivateResurrectIcon, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_ActivateResurrectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DeactivateResurrectIcon
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_DeactivateResurrectIcon final
{
public:
	class ARSBattlePlayer_C*                      DeadPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerRessurectComponent*              CallFunc_GetRessurectComponent_Comp;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DeactivateResurrectIcon) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DeactivateResurrectIcon");
static_assert(sizeof(BP_PlayerManager_C_DeactivateResurrectIcon) == 0x000018, "Wrong size on BP_PlayerManager_C_DeactivateResurrectIcon");
static_assert(offsetof(BP_PlayerManager_C_DeactivateResurrectIcon, DeadPlayer) == 0x000000, "Member 'BP_PlayerManager_C_DeactivateResurrectIcon::DeadPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DeactivateResurrectIcon, CallFunc_GetRessurectComponent_Comp) == 0x000008, "Member 'BP_PlayerManager_C_DeactivateResurrectIcon::CallFunc_GetRessurectComponent_Comp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DeactivateResurrectIcon, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_DeactivateResurrectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetRessurectComponent
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_GetRessurectComponent final
{
public:
	class ARSBattlePlayer_C*                      DeadPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerRessurectComponent*              Comp;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerRessurectComponent*              LComp;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetRessurectComponent) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetRessurectComponent");
static_assert(sizeof(BP_PlayerManager_C_GetRessurectComponent) == 0x000030, "Wrong size on BP_PlayerManager_C_GetRessurectComponent");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, DeadPlayer) == 0x000000, "Member 'BP_PlayerManager_C_GetRessurectComponent::DeadPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, Comp) == 0x000008, "Member 'BP_PlayerManager_C_GetRessurectComponent::Comp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, LComp) == 0x000010, "Member 'BP_PlayerManager_C_GetRessurectComponent::LComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, CallFunc_GetRightPlayer_Player) == 0x000018, "Member 'BP_PlayerManager_C_GetRessurectComponent::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, CallFunc_GetLeftPlayer_Player) == 0x000020, "Member 'BP_PlayerManager_C_GetRessurectComponent::CallFunc_GetLeftPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_GetRessurectComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetRessurectComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000029, "Member 'BP_PlayerManager_C_GetRessurectComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetResurrectAblePlayer
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_GetResurrectAblePlayer final
{
public:
	class ARSBattlePlayer_C*                      DeadPlayer;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C21[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player_1;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceSquared2D_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceSquared2D_ReturnValue_1;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableRessurect_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableRessurect_ReturnValue_1;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetResurrectAblePlayer) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetResurrectAblePlayer");
static_assert(sizeof(BP_PlayerManager_C_GetResurrectAblePlayer) == 0x000040, "Wrong size on BP_PlayerManager_C_GetResurrectAblePlayer");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, DeadPlayer) == 0x000000, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::DeadPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_GetRightPlayer_Player) == 0x000010, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_GetLeftPlayer_Player) == 0x000020, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_GetLeftPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_GetRightPlayer_Player_1) == 0x000028, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_GetRightPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_GetDistanceSquared2D_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_GetDistanceSquared2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_GetDistanceSquared2D_ReturnValue_1) == 0x000034, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_GetDistanceSquared2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_IsEnableRessurect_ReturnValue) == 0x000039, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_IsEnableRessurect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectAblePlayer, CallFunc_IsEnableRessurect_ReturnValue_1) == 0x00003A, "Member 'BP_PlayerManager_C_GetResurrectAblePlayer::CallFunc_IsEnableRessurect_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.BeginResurrect
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_BeginResurrect final
{
public:
	class ARSBattlePlayer_C*                      DeadPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeRate;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C22[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerRessurectComponent*              CallFunc_GetRessurectComponent_Comp;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_BeginResurrect) == 0x000008, "Wrong alignment on BP_PlayerManager_C_BeginResurrect");
static_assert(sizeof(BP_PlayerManager_C_BeginResurrect) == 0x000020, "Wrong size on BP_PlayerManager_C_BeginResurrect");
static_assert(offsetof(BP_PlayerManager_C_BeginResurrect, DeadPlayer) == 0x000000, "Member 'BP_PlayerManager_C_BeginResurrect::DeadPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_BeginResurrect, TimeRate) == 0x000008, "Member 'BP_PlayerManager_C_BeginResurrect::TimeRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_BeginResurrect, CallFunc_GetRessurectComponent_Comp) == 0x000010, "Member 'BP_PlayerManager_C_BeginResurrect::CallFunc_GetRessurectComponent_Comp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_BeginResurrect, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_BeginResurrect::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetPlayerCameraViewTarget
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_SetPlayerCameraViewTarget final
{
public:
	float                                         Blend_Time;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      Blend_Func;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C23[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend_Exp;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C24[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      CallFunc_SetPlayerCameraViewTarget_self_CastInput; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraViewTarget_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetPlayerCameraViewTarget) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SetPlayerCameraViewTarget");
static_assert(sizeof(BP_PlayerManager_C_SetPlayerCameraViewTarget) == 0x000030, "Wrong size on BP_PlayerManager_C_SetPlayerCameraViewTarget");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, Blend_Time) == 0x000000, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::Blend_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, Blend_Func) == 0x000004, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::Blend_Func' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, Blend_Exp) == 0x000008, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::Blend_Exp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, CallFunc_GetMainPlayer_Player) == 0x000010, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, CallFunc_SetPlayerCameraViewTarget_self_CastInput) == 0x000018, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::CallFunc_SetPlayerCameraViewTarget_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, CallFunc_SetPlayerCameraViewTarget_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::CallFunc_SetPlayerCameraViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPlayerCameraViewTarget, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_PlayerManager_C_SetPlayerCameraViewTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeRevive
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PlayerManager_C_InitializeRevive final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C25[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NpcReviveDirectionActor_C*          CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C26[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C27[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co0102_C*                           CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_InitializeRevive) == 0x000010, "Wrong alignment on BP_PlayerManager_C_InitializeRevive");
static_assert(sizeof(BP_PlayerManager_C_InitializeRevive) == 0x0000B0, "Wrong size on BP_PlayerManager_C_InitializeRevive");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PlayerManager_C_InitializeRevive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PlayerManager_C_InitializeRevive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_InitializeRevive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_MakeTransform_ReturnValue_1) == 0x000060, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000090, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0000A0, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeRevive, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerManager_C_InitializeRevive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetResurrectCableList
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerManager_C_GetResurrectCableList final
{
public:
	TArray<class ABP_CableBase_C*>                Param_ResurrectCableList;                          // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetResurrectCableList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetResurrectCableList");
static_assert(sizeof(BP_PlayerManager_C_GetResurrectCableList) == 0x000010, "Wrong size on BP_PlayerManager_C_GetResurrectCableList");
static_assert(offsetof(BP_PlayerManager_C_GetResurrectCableList, Param_ResurrectCableList) == 0x000000, "Member 'BP_PlayerManager_C_GetResurrectCableList::Param_ResurrectCableList' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ChangeAccelerator
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_ChangeAccelerator final
{
public:
	float                                         NewCustomTImeDilation;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C28[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C29[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ChangeAccelerator) == 0x000004, "Wrong alignment on BP_PlayerManager_C_ChangeAccelerator");
static_assert(sizeof(BP_PlayerManager_C_ChangeAccelerator) == 0x000020, "Wrong size on BP_PlayerManager_C_ChangeAccelerator");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, NewCustomTImeDilation) == 0x000000, "Member 'BP_PlayerManager_C_ChangeAccelerator::NewCustomTImeDilation' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PlayerManager_C_ChangeAccelerator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_PlayerManager_C_ChangeAccelerator::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_ChangeAccelerator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_ChangeAccelerator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_ChangeAccelerator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_ChangeAccelerator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ChangeAccelerator, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_ChangeAccelerator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DebugCalcDPS
// 0x0200 (0x0200 - 0x0000)
struct BP_PlayerManager_C_DebugCalcDPS final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2A[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttackOwner_Owner;                     // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2B[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2C[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2D[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DebugCalcDPS) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DebugCalcDPS");
static_assert(sizeof(BP_PlayerManager_C_DebugCalcDPS) == 0x000200, "Wrong size on BP_PlayerManager_C_DebugCalcDPS");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, HitResult) == 0x000000, "Member 'BP_PlayerManager_C_DebugCalcDPS::HitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, Damage) == 0x0001C0, "Member 'BP_PlayerManager_C_DebugCalcDPS::Damage' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_GetAttackOwner_Owner) == 0x0001C8, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_GetAttackOwner_Owner' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_IsValid_ReturnValue) == 0x0001D0, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_GetDebuggingManager_Manager) == 0x0001D8, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_IsValid_ReturnValue_1) == 0x0001E0, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001E4, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001E8, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_GetMainPlayer_Player) == 0x0001F0, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001F8, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001FC, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcDPS, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001FD, "Member 'BP_PlayerManager_C_DebugCalcDPS::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DebugUpdateCalcDPS
// 0x0150 (0x0150 - 0x0000)
struct BP_PlayerManager_C_DebugUpdateCalcDPS final
{
public:
	float                                         LDeltaSeconds;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0088(0x0040)(HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x00D0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2F[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0128(0x0018)()
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DebugUpdateCalcDPS) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DebugUpdateCalcDPS");
static_assert(sizeof(BP_PlayerManager_C_DebugUpdateCalcDPS) == 0x000150, "Wrong size on BP_PlayerManager_C_DebugUpdateCalcDPS");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, LDeltaSeconds) == 0x000000, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::LDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, K2Node_MakeStruct_FormatArgumentData_2) == 0x000088, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_GetDebuggingManager_Manager) == 0x0000C8, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, K2Node_MakeStruct_FormatArgumentData_3) == 0x0000D0, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_IsValid_ReturnValue) == 0x000110, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, K2Node_MakeArray_Array) == 0x000118, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_Format_ReturnValue) == 0x000128, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000140, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_Add_FloatFloat_ReturnValue) == 0x000144, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000148, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugUpdateCalcDPS, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00014C, "Member 'BP_PlayerManager_C_DebugUpdateCalcDPS::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsSkillLearnAble
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerManager_C_IsSkillLearnAble final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  InSkillID;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbResult;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C30[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerSkillPoint_skill_point;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSkillLearnPoint_Point;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsSkillLearnAble) == 0x000004, "Wrong alignment on BP_PlayerManager_C_IsSkillLearnAble");
static_assert(sizeof(BP_PlayerManager_C_IsSkillLearnAble) == 0x000014, "Wrong size on BP_PlayerManager_C_IsSkillLearnAble");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_IsSkillLearnAble::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, InSkillID) == 0x000001, "Member 'BP_PlayerManager_C_IsSkillLearnAble::InSkillID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, bOK) == 0x000002, "Member 'BP_PlayerManager_C_IsSkillLearnAble::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, LbResult) == 0x000003, "Member 'BP_PlayerManager_C_IsSkillLearnAble::LbResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, CallFunc_IsSkillLearned_learned) == 0x000004, "Member 'BP_PlayerManager_C_IsSkillLearnAble::CallFunc_IsSkillLearned_learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, CallFunc_GetPlayerSkillPoint_skill_point) == 0x000008, "Member 'BP_PlayerManager_C_IsSkillLearnAble::CallFunc_GetPlayerSkillPoint_skill_point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, CallFunc_GetSkillLearnPoint_Point) == 0x00000C, "Member 'BP_PlayerManager_C_IsSkillLearnAble::CallFunc_GetSkillLearnPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearnAble, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_IsSkillLearnAble::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.LearnSkill
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_LearnSkill final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  InSkillID;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C31[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LApplyPlayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C32[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C33[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSkillLearnPoint_Point;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearnAble_bOK;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_LearnSkill) == 0x000008, "Wrong alignment on BP_PlayerManager_C_LearnSkill");
static_assert(sizeof(BP_PlayerManager_C_LearnSkill) == 0x000038, "Wrong size on BP_PlayerManager_C_LearnSkill");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_LearnSkill::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, InSkillID) == 0x000001, "Member 'BP_PlayerManager_C_LearnSkill::InSkillID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, bSuccess) == 0x000002, "Member 'BP_PlayerManager_C_LearnSkill::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, LApplyPlayer) == 0x000008, "Member 'BP_PlayerManager_C_LearnSkill::LApplyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, LbSuccess) == 0x000010, "Member 'BP_PlayerManager_C_LearnSkill::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_GetUserParamManager_UserParamManager) == 0x000018, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_GetSkillLearnPoint_Point) == 0x000024, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_GetSkillLearnPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_GetMainPlayer_Player) == 0x000028, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_Multiply_IntInt_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_LearnSkill, CallFunc_IsSkillLearnAble_bOK) == 0x000034, "Member 'BP_PlayerManager_C_LearnSkill::CallFunc_IsSkillLearnAble_bOK' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CheckSASHologramAttack
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerManager_C_CheckSASHologramAttack final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C34[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       RequestCharacter;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_CheckHologramAttack_self_CastInput;       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_CheckSASHologramAttack) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CheckSASHologramAttack");
static_assert(sizeof(BP_PlayerManager_C_CheckSASHologramAttack) == 0x000028, "Wrong size on BP_PlayerManager_C_CheckSASHologramAttack");
static_assert(offsetof(BP_PlayerManager_C_CheckSASHologramAttack, Timing) == 0x000000, "Member 'BP_PlayerManager_C_CheckSASHologramAttack::Timing' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckSASHologramAttack, RequestCharacter) == 0x000008, "Member 'BP_PlayerManager_C_CheckSASHologramAttack::RequestCharacter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckSASHologramAttack, CallFunc_GetMainPlayer_Player) == 0x000010, "Member 'BP_PlayerManager_C_CheckSASHologramAttack::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckSASHologramAttack, CallFunc_CheckHologramAttack_self_CastInput) == 0x000018, "Member 'BP_PlayerManager_C_CheckSASHologramAttack::CallFunc_CheckHologramAttack_self_CastInput' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateMaterials
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PlayerManager_C_UpdateMaterials final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C35[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthOpacity;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Location;                                          // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C36[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       MainPlayer;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C37[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C38[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialStealthParam*                  CallFunc_GetMaterialStealthDataAsset_StealthParam; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialStealthParam*                  CallFunc_GetMaterialStealthDataAsset_StealthParam_1; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C39[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3A[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3B[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3C[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_IsIgnoreStealthVelocity_self_CastInput;   // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIgnoreStealthVelocity_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3D[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetLocationHistory_ReturnValue;           // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetMaterialStealthVelocityRate_Opacity;   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3E[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_UpdateMaterials) == 0x000008, "Wrong alignment on BP_PlayerManager_C_UpdateMaterials");
static_assert(sizeof(BP_PlayerManager_C_UpdateMaterials) == 0x0000E8, "Wrong size on BP_PlayerManager_C_UpdateMaterials");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, DeltaSeconds) == 0x000000, "Member 'BP_PlayerManager_C_UpdateMaterials::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, Controller) == 0x000008, "Member 'BP_PlayerManager_C_UpdateMaterials::Controller' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, StealthOpacity) == 0x000010, "Member 'BP_PlayerManager_C_UpdateMaterials::StealthOpacity' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, Location) == 0x000014, "Member 'BP_PlayerManager_C_UpdateMaterials::Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, MainPlayer) == 0x000028, "Member 'BP_PlayerManager_C_UpdateMaterials::MainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_K2_GetPawn_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000048, "Member 'BP_PlayerManager_C_UpdateMaterials::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PlayerManager_C_UpdateMaterials::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_SelectFloat_ReturnValue) == 0x000054, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetMaterialStealthDataAsset_StealthParam) == 0x000058, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetMaterialStealthDataAsset_StealthParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetMaterialStealthDataAsset_StealthParam_1) == 0x000060, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetMaterialStealthDataAsset_StealthParam_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_FInterpTo_ReturnValue) == 0x00006C, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_Add_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, K2Node_DynamicCast_AsRSBattle_Player) == 0x000080, "Member 'BP_PlayerManager_C_UpdateMaterials::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'BP_PlayerManager_C_UpdateMaterials::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_IsIgnoreStealthVelocity_self_CastInput) == 0x000090, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_IsIgnoreStealthVelocity_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_IsIgnoreStealthVelocity_ReturnValue) == 0x0000A0, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_IsIgnoreStealthVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetLocationHistory_ReturnValue) == 0x0000A8, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetLocationHistory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetMaterialStealthVelocityRate_Opacity) == 0x0000B8, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetMaterialStealthVelocityRate_Opacity' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_GetSocketLocation_ReturnValue) == 0x0000BC, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_BreakVector_X) == 0x0000C8, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_BreakVector_Y) == 0x0000CC, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_IsValid_ReturnValue_1) == 0x0000D4, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMaterials, CallFunc_MakeColor_ReturnValue) == 0x0000D8, "Member 'BP_PlayerManager_C_UpdateMaterials::CallFunc_MakeColor_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetAccessoryEquipNum
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_GetAccessoryEquipNum final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LSkillNum;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LExtendNum;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C40[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillLearned_learned_1;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C41[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNpcAccessoryExtendNum_ReturnValue;     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetAccessoryEquipNum) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetAccessoryEquipNum");
static_assert(sizeof(BP_PlayerManager_C_GetAccessoryEquipNum) == 0x000040, "Wrong size on BP_PlayerManager_C_GetAccessoryEquipNum");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, LSkillNum) == 0x000008, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::LSkillNum' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, LExtendNum) == 0x00000C, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::LExtendNum' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, Temp_int_Variable) == 0x000010, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000015, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, Temp_int_Variable_1) == 0x000018, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_Add_IntInt_ReturnValue_2) == 0x000024, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_IsSkillLearned_learned) == 0x000028, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_IsSkillLearned_learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_IsSkillLearned_learned_1) == 0x000029, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_IsSkillLearned_learned_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_GetUserParamManager_UserParamManager) == 0x000030, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_GetNpcAccessoryExtendNum_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_GetNpcAccessoryExtendNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAccessoryEquipNum, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_GetAccessoryEquipNum::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetAttentionCamera
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_SetAttentionCamera final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Look_at_actor;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C42[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Look_at_pos_in;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target_actor_in;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Actor_curve_in;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Change_fov;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C43[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target_fov_in;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fov_curve_in;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetAttentionCamera) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SetAttentionCamera");
static_assert(sizeof(BP_PlayerManager_C_SetAttentionCamera) == 0x000040, "Wrong size on BP_PlayerManager_C_SetAttentionCamera");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Flag_in) == 0x000000, "Member 'BP_PlayerManager_C_SetAttentionCamera::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Look_at_actor) == 0x000001, "Member 'BP_PlayerManager_C_SetAttentionCamera::Look_at_actor' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Look_at_pos_in) == 0x000004, "Member 'BP_PlayerManager_C_SetAttentionCamera::Look_at_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Target_actor_in) == 0x000010, "Member 'BP_PlayerManager_C_SetAttentionCamera::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Actor_curve_in) == 0x000018, "Member 'BP_PlayerManager_C_SetAttentionCamera::Actor_curve_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Change_fov) == 0x000020, "Member 'BP_PlayerManager_C_SetAttentionCamera::Change_fov' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Target_fov_in) == 0x000024, "Member 'BP_PlayerManager_C_SetAttentionCamera::Target_fov_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, Fov_curve_in) == 0x000028, "Member 'BP_PlayerManager_C_SetAttentionCamera::Fov_curve_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, CallFunc_GetMainPlayer_Player) == 0x000030, "Member 'BP_PlayerManager_C_SetAttentionCamera::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCamera, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_SetAttentionCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetAttentionCameraOption
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_SetAttentionCameraOption final
{
public:
	bool                                          Offset_angle_vt;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C44[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset_angle_vt_in;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Offset_angle_Hz;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C45[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset_angle_Hz_in;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetAttentionCameraOption) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SetAttentionCameraOption");
static_assert(sizeof(BP_PlayerManager_C_SetAttentionCameraOption) == 0x000020, "Wrong size on BP_PlayerManager_C_SetAttentionCameraOption");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, Offset_angle_vt) == 0x000000, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::Offset_angle_vt' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, Offset_angle_vt_in) == 0x000004, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::Offset_angle_vt_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, Offset_angle_Hz) == 0x000008, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::Offset_angle_Hz' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, Offset_angle_Hz_in) == 0x00000C, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::Offset_angle_Hz_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, CallFunc_GetMainPlayer_Player) == 0x000010, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetAttentionCameraOption, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_SetAttentionCameraOption::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayerInputTrgBrainField
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_IsPlayerInputTrgBrainField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C46[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTrgBrainField_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayerInputTrgBrainField) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsPlayerInputTrgBrainField");
static_assert(sizeof(BP_PlayerManager_C_IsPlayerInputTrgBrainField) == 0x000018, "Wrong size on BP_PlayerManager_C_IsPlayerInputTrgBrainField");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerInputTrgBrainField, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayerInputTrgBrainField::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerInputTrgBrainField, CallFunc_GetMainPlayer_Player) == 0x000008, "Member 'BP_PlayerManager_C_IsPlayerInputTrgBrainField::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerInputTrgBrainField, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_IsPlayerInputTrgBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerInputTrgBrainField, CallFunc_IsTrgBrainField_ReturnValue) == 0x000011, "Member 'BP_PlayerManager_C_IsPlayerInputTrgBrainField::CallFunc_IsTrgBrainField_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SpawnChildYuito
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_SpawnChildYuito final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class ARSBattlePlayer_C*                      OutChildYuito;                                     // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_SpawnNotPartyPlayer_Player;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_SpawnChildYuito) == 0x000010, "Wrong alignment on BP_PlayerManager_C_SpawnChildYuito");
static_assert(sizeof(BP_PlayerManager_C_SpawnChildYuito) == 0x000040, "Wrong size on BP_PlayerManager_C_SpawnChildYuito");
static_assert(offsetof(BP_PlayerManager_C_SpawnChildYuito, InTransform) == 0x000000, "Member 'BP_PlayerManager_C_SpawnChildYuito::InTransform' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnChildYuito, OutChildYuito) == 0x000030, "Member 'BP_PlayerManager_C_SpawnChildYuito::OutChildYuito' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SpawnChildYuito, CallFunc_SpawnNotPartyPlayer_Player) == 0x000038, "Member 'BP_PlayerManager_C_SpawnChildYuito::CallFunc_SpawnNotPartyPlayer_Player' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RegisterChildYuito
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_RegisterChildYuito final
{
public:
	class ARSBattlePlayer_C*                      InChildYuito;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_RegisterChildYuito) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RegisterChildYuito");
static_assert(sizeof(BP_PlayerManager_C_RegisterChildYuito) == 0x000008, "Wrong size on BP_PlayerManager_C_RegisterChildYuito");
static_assert(offsetof(BP_PlayerManager_C_RegisterChildYuito, InChildYuito) == 0x000000, "Member 'BP_PlayerManager_C_RegisterChildYuito::InChildYuito' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ControlChildYuito
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_ControlChildYuito final
{
public:
	bool                                          bControl;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C47[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LPlayer;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ControlChildYuito) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ControlChildYuito");
static_assert(sizeof(BP_PlayerManager_C_ControlChildYuito) == 0x000030, "Wrong size on BP_PlayerManager_C_ControlChildYuito");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, bControl) == 0x000000, "Member 'BP_PlayerManager_C_ControlChildYuito::bControl' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, LPlayer) == 0x000008, "Member 'BP_PlayerManager_C_ControlChildYuito::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_ControlChildYuito::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, CallFunc_GetPlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_ControlChildYuito::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, CallFunc_GetPlayerController_ReturnValue_1) == 0x000020, "Member 'BP_PlayerManager_C_ControlChildYuito::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_ControlChildYuito::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ControlChildYuito, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_PlayerManager_C_ControlChildYuito::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDrive
// 0x0148 (0x0148 - 0x0000)
struct BP_PlayerManager_C_CheckNpcDrive final
{
public:
	ENpcDriveCheckType                            CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C48[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EnemyActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CombinationVisionPlayerID;                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbCheckFlag;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C49[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LCheckPlayer;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              LCheckList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      LMainPlayer;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4A[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4B[0x1];                                     // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4C[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput_1;             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4D[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecCrashVisionPlayerID_ReturnValue;    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4E[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENpcDriveCheckType                            Temp_byte_Variable;                                // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4F[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleMode_ReturnValue;                 // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C50[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput_2;             // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_2;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C51[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentParameterRate_ReturnValue;      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C52[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C53[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput_3;             // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_3;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C54[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNpcDrive_ReturnValue;                // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue_1;                // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C55[0x2];                                     // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveReadyAble_bOK;                     // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDriveNpc_ReturnValue;             // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C56[0x2];                                     // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C57[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C58[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_CheckNpcDrive) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CheckNpcDrive");
static_assert(sizeof(BP_PlayerManager_C_CheckNpcDrive) == 0x000148, "Wrong size on BP_PlayerManager_C_CheckNpcDrive");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CheckType) == 0x000000, "Member 'BP_PlayerManager_C_CheckNpcDrive::CheckType' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, EnemyActor) == 0x000008, "Member 'BP_PlayerManager_C_CheckNpcDrive::EnemyActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CombinationVisionPlayerID) == 0x000010, "Member 'BP_PlayerManager_C_CheckNpcDrive::CombinationVisionPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, LbCheckFlag) == 0x000011, "Member 'BP_PlayerManager_C_CheckNpcDrive::LbCheckFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, LCheckPlayer) == 0x000018, "Member 'BP_PlayerManager_C_CheckNpcDrive::LCheckPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, LCheckList) == 0x000020, "Member 'BP_PlayerManager_C_CheckNpcDrive::LCheckList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, LMainPlayer) == 0x000030, "Member 'BP_PlayerManager_C_CheckNpcDrive::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_int_Loop_Num_Variable) == 0x000038, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable) == 0x000044, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_1) == 0x000045, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue_1) == 0x000046, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_self_CastInput) == 0x000048, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000059, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_2) == 0x00005A, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00005B, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_self_CastInput_1) == 0x000060, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_ReturnValue_1) == 0x000070, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetBrainCrashManager_Manager) == 0x000078, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, K2Node_SwitchEnum_CmpSuccess) == 0x000080, "Member 'BP_PlayerManager_C_CheckNpcDrive::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsExecCrashVisionPlayerID_ReturnValue) == 0x000081, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsExecCrashVisionPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetEventManager_EventManager) == 0x000088, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x000090, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_3) == 0x000091, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_True_if_break_was_hit_Variable) == 0x000092, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_byte_Variable) == 0x000093, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Not_PreBool_ReturnValue) == 0x000094, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetBattleManager_BattleManager) == 0x000098, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetDebuggingManager_Manager) == 0x0000A0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue_2) == 0x0000A8, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue_3) == 0x0000A9, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsBattleMode_ReturnValue) == 0x0000AA, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsBattleMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_4) == 0x0000AB, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_self_CastInput_2) == 0x0000B0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_ReturnValue_2) == 0x0000C0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetCurrentParameterRate_ReturnValue) == 0x0000C4, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetCurrentParameterRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_5) == 0x0000C8, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetUserParamManager_UserParamManager) == 0x0000D0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue_4) == 0x0000D8, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_self_CastInput_3) == 0x0000E0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetPlayerID_ReturnValue_3) == 0x0000F0, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetPlayerID_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetBondsLevel_ReturnValue) == 0x0000F4, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_6) == 0x0000F8, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_CheckNpcDrive_ReturnValue) == 0x0000F9, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_CheckNpcDrive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_7) == 0x0000FA, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsDriveMode_ReturnValue) == 0x0000FB, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsDriveMode_ReturnValue_1) == 0x0000FC, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsDriveMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsValid_ReturnValue_5) == 0x0000FD, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000100, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000108, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, K2Node_SwitchEnum_CmpSuccess_1) == 0x000109, "Member 'BP_PlayerManager_C_CheckNpcDrive::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsDriveReadyAble_bOK) == 0x00010A, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsDriveReadyAble_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_bool_Variable_8) == 0x00010B, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, K2Node_Select_Default) == 0x00010C, "Member 'BP_PlayerManager_C_CheckNpcDrive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_IsEnableDriveNpc_ReturnValue) == 0x00010D, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_IsEnableDriveNpc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, Temp_int_Loop_Counter_Variable) == 0x000114, "Member 'BP_PlayerManager_C_CheckNpcDrive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Less_IntInt_ReturnValue) == 0x000118, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Add_IntInt_ReturnValue) == 0x00011C, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_BooleanAND_ReturnValue) == 0x000120, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetRightPlayer_Player) == 0x000128, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetLeftPlayer_Player) == 0x000130, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetLeftPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_GetMainPlayer_Player) == 0x000138, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Array_Add_ReturnValue) == 0x000140, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDrive, CallFunc_Array_Add_ReturnValue_1) == 0x000144, "Member 'BP_PlayerManager_C_CheckNpcDrive::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.RegisterSasLinkEnpc
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_RegisterSasLinkEnpc final
{
public:
	class ARSBattlePlayer_C*                      LinkPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_RegisterSasLinkEnpc) == 0x000008, "Wrong alignment on BP_PlayerManager_C_RegisterSasLinkEnpc");
static_assert(sizeof(BP_PlayerManager_C_RegisterSasLinkEnpc) == 0x000008, "Wrong size on BP_PlayerManager_C_RegisterSasLinkEnpc");
static_assert(offsetof(BP_PlayerManager_C_RegisterSasLinkEnpc, LinkPlayer) == 0x000000, "Member 'BP_PlayerManager_C_RegisterSasLinkEnpc::LinkPlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SasLinkEnpc
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_SasLinkEnpc final
{
public:
	E_SASKind                                     Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C59[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_BeginEnpcSAS_self_CastInput;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginEnpcSAS_bDummy;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SasLinkEnpc) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SasLinkEnpc");
static_assert(sizeof(BP_PlayerManager_C_SasLinkEnpc) == 0x000020, "Wrong size on BP_PlayerManager_C_SasLinkEnpc");
static_assert(offsetof(BP_PlayerManager_C_SasLinkEnpc, Kind) == 0x000000, "Member 'BP_PlayerManager_C_SasLinkEnpc::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SasLinkEnpc, CallFunc_BeginEnpcSAS_self_CastInput) == 0x000008, "Member 'BP_PlayerManager_C_SasLinkEnpc::CallFunc_BeginEnpcSAS_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SasLinkEnpc, CallFunc_BeginEnpcSAS_bDummy) == 0x000018, "Member 'BP_PlayerManager_C_SasLinkEnpc::CallFunc_BeginEnpcSAS_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SasLinkEnpc, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerManager_C_SasLinkEnpc::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateBattleMemberAttachment
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerManager_C_UpdateBattleMemberAttachment final
{
public:
	class ARSCharacterBase*                       _Player;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5B[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5C[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5D[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdateBattleMemberAttachment) == 0x000008, "Wrong alignment on BP_PlayerManager_C_UpdateBattleMemberAttachment");
static_assert(sizeof(BP_PlayerManager_C_UpdateBattleMemberAttachment) == 0x000048, "Wrong size on BP_PlayerManager_C_UpdateBattleMemberAttachment");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, _Player) == 0x000000, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, Temp_int_Variable) == 0x000008, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, Temp_int_Variable_1) == 0x00000C, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_Conv_IntToByte_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_GetValidValue_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000019, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_GetPlayer_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_MakeLiteralInt_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, K2Node_DynamicCast_AsRSBattle_Player) == 0x000038, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateBattleMemberAttachment, CallFunc_IsValid_ReturnValue) == 0x000042, "Member 'BP_PlayerManager_C_UpdateBattleMemberAttachment::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetAssistCheckPlayerList
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PlayerManager_C_GetAssistCheckPlayerList final
{
public:
	TMap<class ARSBattlePlayer_C*, int32>         AssistList;                                        // 0x0000(0x0050)(Parm, OutParm)
	TMap<class ARSBattlePlayer_C*, int32>         LAssistList;                                       // 0x0050(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5E[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player_1;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player_1;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_1;    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5F[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue_2;    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C60[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBondsLevel_ReturnValue_1;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetAssistCheckPlayerList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetAssistCheckPlayerList");
static_assert(sizeof(BP_PlayerManager_C_GetAssistCheckPlayerList) == 0x0000E8, "Wrong size on BP_PlayerManager_C_GetAssistCheckPlayerList");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, AssistList) == 0x000000, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::AssistList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, LAssistList) == 0x000050, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::LAssistList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetRightPlayer_Player) == 0x0000A0, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetLeftPlayer_Player) == 0x0000A8, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetLeftPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_RandomBool_ReturnValue) == 0x0000B0, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetLeftPlayer_Player_1) == 0x0000B8, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetLeftPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetRightPlayer_Player_1) == 0x0000C0, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetRightPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x0000C8, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetBattleMemberPlayerID_ReturnValue_1) == 0x0000C9, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetBattleMemberPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetUserParamManager_UserParamManager) == 0x0000D0, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetBattleMemberPlayerID_ReturnValue_2) == 0x0000D8, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetBattleMemberPlayerID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetBondsLevel_ReturnValue) == 0x0000DC, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_GetBondsLevel_ReturnValue_1) == 0x0000E0, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_GetBondsLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E4, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E5, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAssistCheckPlayerList, CallFunc_IsValid_ReturnValue) == 0x0000E6, "Member 'BP_PlayerManager_C_GetAssistCheckPlayerList::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ResetPlayerCollisionOverlap
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_ResetPlayerCollisionOverlap final
{
public:
	class ARSCharacterBase*                       LPlayer;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C61[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetCollisionOverlap_bDummy;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C62[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ResetPlayerCollisionOverlap) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ResetPlayerCollisionOverlap");
static_assert(sizeof(BP_PlayerManager_C_ResetPlayerCollisionOverlap) == 0x000030, "Wrong size on BP_PlayerManager_C_ResetPlayerCollisionOverlap");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, LPlayer) == 0x000000, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000010, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, CallFunc_ResetCollisionOverlap_bDummy) == 0x000021, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::CallFunc_ResetCollisionOverlap_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ResetPlayerCollisionOverlap, CallFunc_GetPlayer_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_ResetPlayerCollisionOverlap::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AddMenuBGPlayerList
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerManager_C_AddMenuBGPlayerList final
{
public:
	class ABP_MenuPlayerBase_C*                   Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AddMenuBGPlayerList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_AddMenuBGPlayerList");
static_assert(sizeof(BP_PlayerManager_C_AddMenuBGPlayerList) == 0x000010, "Wrong size on BP_PlayerManager_C_AddMenuBGPlayerList");
static_assert(offsetof(BP_PlayerManager_C_AddMenuBGPlayerList, Player) == 0x000000, "Member 'BP_PlayerManager_C_AddMenuBGPlayerList::Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddMenuBGPlayerList, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_AddMenuBGPlayerList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetMenuBGPlayerList
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerManager_C_GetMenuBGPlayerList final
{
public:
	TArray<class ABP_MenuPlayerBase_C*>           PlayerList;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetMenuBGPlayerList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetMenuBGPlayerList");
static_assert(sizeof(BP_PlayerManager_C_GetMenuBGPlayerList) == 0x000010, "Wrong size on BP_PlayerManager_C_GetMenuBGPlayerList");
static_assert(offsetof(BP_PlayerManager_C_GetMenuBGPlayerList, PlayerList) == 0x000000, "Member 'BP_PlayerManager_C_GetMenuBGPlayerList::PlayerList' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateMenuBGPlayer
// 0x00F8 (0x00F8 - 0x0000)
struct BP_PlayerManager_C_UpdateMenuBGPlayer final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C63[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            PlayerInfo;                                        // 0x0004(0x00D0)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C64[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C65[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C66[0x1];                                     // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdateMenuBGPlayer) == 0x000004, "Wrong alignment on BP_PlayerManager_C_UpdateMenuBGPlayer");
static_assert(sizeof(BP_PlayerManager_C_UpdateMenuBGPlayer) == 0x0000F8, "Wrong size on BP_PlayerManager_C_UpdateMenuBGPlayer");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, PlayerInfo) == 0x000004, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::PlayerInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, Temp_bool_True_if_break_was_hit_Variable) == 0x0000D4, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, Temp_int_Array_Index_Variable) == 0x0000D8, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0000DC, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, Temp_int_Loop_Num_Variable) == 0x0000E0, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, Temp_int_Loop_Counter_Variable) == 0x0000E4, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_IsValid_ReturnValue) == 0x0000EC, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000ED, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x0000EE, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateMenuBGPlayer, CallFunc_BooleanAND_ReturnValue) == 0x0000F4, "Member 'BP_PlayerManager_C_UpdateMenuBGPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetEnableBrainCrashExtraTime
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_SetEnableBrainCrashExtraTime final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C67[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_SetEnableBrainCrashExtraTime) == 0x000004, "Wrong alignment on BP_PlayerManager_C_SetEnableBrainCrashExtraTime");
static_assert(sizeof(BP_PlayerManager_C_SetEnableBrainCrashExtraTime) == 0x000008, "Wrong size on BP_PlayerManager_C_SetEnableBrainCrashExtraTime");
static_assert(offsetof(BP_PlayerManager_C_SetEnableBrainCrashExtraTime, bEnable) == 0x000000, "Member 'BP_PlayerManager_C_SetEnableBrainCrashExtraTime::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetEnableBrainCrashExtraTime, ExtraTime) == 0x000004, "Member 'BP_PlayerManager_C_SetEnableBrainCrashExtraTime::ExtraTime' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetNpcThinkAssistAttack
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_SetNpcThinkAssistAttack final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetNpcThinkAssistAttack) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetNpcThinkAssistAttack");
static_assert(sizeof(BP_PlayerManager_C_SetNpcThinkAssistAttack) == 0x000001, "Wrong size on BP_PlayerManager_C_SetNpcThinkAssistAttack");
static_assert(offsetof(BP_PlayerManager_C_SetNpcThinkAssistAttack, Flag_in) == 0x000000, "Member 'BP_PlayerManager_C_SetNpcThinkAssistAttack::Flag_in' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsNpcThinkAssistAttack
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_IsNpcThinkAssistAttack final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C68[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_total;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_IsNpcThinkAssistAttack) == 0x000004, "Wrong alignment on BP_PlayerManager_C_IsNpcThinkAssistAttack");
static_assert(sizeof(BP_PlayerManager_C_IsNpcThinkAssistAttack) == 0x000008, "Wrong size on BP_PlayerManager_C_IsNpcThinkAssistAttack");
static_assert(offsetof(BP_PlayerManager_C_IsNpcThinkAssistAttack, Return) == 0x000000, "Member 'BP_PlayerManager_C_IsNpcThinkAssistAttack::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsNpcThinkAssistAttack, L_total) == 0x000004, "Member 'BP_PlayerManager_C_IsNpcThinkAssistAttack::L_total' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PostSetBattleMember
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_PostSetBattleMember final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     ID;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn;                                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C69[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvokeBrainField_InvokeBrainField;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_PostSetBattleMember) == 0x000008, "Wrong alignment on BP_PlayerManager_C_PostSetBattleMember");
static_assert(sizeof(BP_PlayerManager_C_PostSetBattleMember) == 0x000018, "Wrong size on BP_PlayerManager_C_PostSetBattleMember");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, Kind) == 0x000000, "Member 'BP_PlayerManager_C_PostSetBattleMember::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, ID) == 0x000001, "Member 'BP_PlayerManager_C_PostSetBattleMember::ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, Spawn) == 0x000002, "Member 'BP_PlayerManager_C_PostSetBattleMember::Spawn' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'BP_PlayerManager_C_PostSetBattleMember::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_PostSetBattleMember::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, CallFunc_IsUserIsPlayer_IsPlayer) == 0x000011, "Member 'BP_PlayerManager_C_PostSetBattleMember::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, CallFunc_IsInvokeBrainField_InvokeBrainField) == 0x000012, "Member 'BP_PlayerManager_C_PostSetBattleMember::CallFunc_IsInvokeBrainField_InvokeBrainField' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PostSetBattleMember, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000013, "Member 'BP_PlayerManager_C_PostSetBattleMember::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayerStatus
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_IsPlayerStatus final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6A[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayerStatus) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsPlayerStatus");
static_assert(sizeof(BP_PlayerManager_C_IsPlayerStatus) == 0x000020, "Wrong size on BP_PlayerManager_C_IsPlayerStatus");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, Kind) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayerStatus::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, PlayerStatus) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayerStatus::PlayerStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, ReturnValue) == 0x000002, "Member 'BP_PlayerManager_C_IsPlayerStatus::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, CallFunc_GetPlayer_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_IsPlayerStatus::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000010, "Member 'BP_PlayerManager_C_IsPlayerStatus::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerManager_C_IsPlayerStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayerStatus, CallFunc_IsPlayerStatus_Result) == 0x000019, "Member 'BP_PlayerManager_C_IsPlayerStatus::CallFunc_IsPlayerStatus_Result' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DoEndPlay
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_DoEndPlay final
{
public:
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6D[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_DoEndPlay) == 0x000004, "Wrong alignment on BP_PlayerManager_C_DoEndPlay");
static_assert(sizeof(BP_PlayerManager_C_DoEndPlay) == 0x000020, "Wrong size on BP_PlayerManager_C_DoEndPlay");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, Temp_int_Loop_Num_Variable) == 0x000000, "Member 'BP_PlayerManager_C_DoEndPlay::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PlayerManager_C_DoEndPlay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PlayerManager_C_DoEndPlay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_Less_IntInt_ReturnValue) == 0x000019, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoEndPlay, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_DoEndPlay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcReviveDirectionManage
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_GetNpcReviveDirectionManage final
{
public:
	class ABP_NpcReviveDirectionActor_C*          Manage;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetNpcReviveDirectionManage) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetNpcReviveDirectionManage");
static_assert(sizeof(BP_PlayerManager_C_GetNpcReviveDirectionManage) == 0x000008, "Wrong size on BP_PlayerManager_C_GetNpcReviveDirectionManage");
static_assert(offsetof(BP_PlayerManager_C_GetNpcReviveDirectionManage, Manage) == 0x000000, "Member 'BP_PlayerManager_C_GetNpcReviveDirectionManage::Manage' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.OnEventBattleMameberRevive
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_OnEventBattleMameberRevive final
{
public:
	TArray<class ARSBattlePlayer_C*>              LPlayerList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_OnEventBattleMameberRevive) == 0x000008, "Wrong alignment on BP_PlayerManager_C_OnEventBattleMameberRevive");
static_assert(sizeof(BP_PlayerManager_C_OnEventBattleMameberRevive) == 0x000038, "Wrong size on BP_PlayerManager_C_OnEventBattleMameberRevive");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, LPlayerList) == 0x000000, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::LPlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_OnEventBattleMameberRevive, CallFunc_GetPlayersAll_Player) == 0x000028, "Member 'BP_PlayerManager_C_OnEventBattleMameberRevive::CallFunc_GetPlayersAll_Player' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AreaChangeForceWarp
// 0x0120 (0x0120 - 0x0000)
struct BP_PlayerManager_C_AreaChangeForceWarp final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InIdleRestoreDelay;                                // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAjitoNpcWarpOffset_Offset;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C6F[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C70[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue_1;     // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_AreaChangeForceWarp) == 0x000010, "Wrong alignment on BP_PlayerManager_C_AreaChangeForceWarp");
static_assert(sizeof(BP_PlayerManager_C_AreaChangeForceWarp) == 0x000120, "Wrong size on BP_PlayerManager_C_AreaChangeForceWarp");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, InTransform) == 0x000000, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::InTransform' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, InIdleRestoreDelay) == 0x000030, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::InIdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_GetAjitoNpcWarpOffset_Offset) == 0x000034, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_GetAjitoNpcWarpOffset_Offset' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_ComposeTransforms_ReturnValue) == 0x000080, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B0, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_Conv_VectorToTransform_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_Conv_VectorToTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AreaChangeForceWarp, CallFunc_ComposeTransforms_ReturnValue_1) == 0x0000F0, "Member 'BP_PlayerManager_C_AreaChangeForceWarp::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterEquipWeapon
// 0x0300 (0x0300 - 0x0000)
struct BP_PlayerManager_C_CalcMenuParameterEquipWeapon final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C71[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InWeaponID;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C72[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Psychic;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defence;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C73[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LDefence;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPsychic;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LAttack;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LBackup;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C74[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_CalcCharactersParameterTable_Parameter;   // 0x0030(0x01F8)()
	int32                                         CallFunc_Array_Get_Item;                           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x022C(0x00D0)(NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CalcMenuParameterEquipWeapon");
static_assert(sizeof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon) == 0x000300, "Wrong size on BP_PlayerManager_C_CalcMenuParameterEquipWeapon");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, InWeaponID) == 0x000004, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::InWeaponID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, bSuccess) == 0x000008, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, Attack) == 0x00000C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::Attack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, Psychic) == 0x000010, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::Psychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, Defence) == 0x000014, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::Defence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, LbSuccess) == 0x000018, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, LDefence) == 0x00001C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::LDefence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, LPsychic) == 0x000020, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::LPsychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, LAttack) == 0x000024, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::LAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, LBackup) == 0x000028, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::LBackup' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, CallFunc_CalcCharactersParameterTable_Parameter) == 0x000030, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::CallFunc_CalcCharactersParameterTable_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, CallFunc_Array_Get_Item) == 0x000228, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x00022C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipWeapon, CallFunc_IsExistPartyMember_ReturnValue) == 0x0002FC, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipWeapon::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterEquipAccessory
// 0x0310 (0x0310 - 0x0000)
struct BP_PlayerManager_C_CalcMenuParameterEquipAccessory final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAccessory                              InSlot;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C75[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InAccessoryID;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C76[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Psychic;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defence;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HP;                                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LHp;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C77[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LDefence;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPsychic;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LAttack;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LBackup;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAccessory                              Temp_byte_Variable;                                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C78[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0038(0x00D0)(NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C79[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersParameterTable              CallFunc_CalcCharactersParameterTable_Parameter;   // 0x0110(0x01F8)()
	int32                                         CallFunc_Array_Get_Item;                           // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CalcMenuParameterEquipAccessory");
static_assert(sizeof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory) == 0x000310, "Wrong size on BP_PlayerManager_C_CalcMenuParameterEquipAccessory");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, InSlot) == 0x000001, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::InSlot' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, InAccessoryID) == 0x000004, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::InAccessoryID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, bSuccess) == 0x000008, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, Attack) == 0x00000C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::Attack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, Psychic) == 0x000010, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::Psychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, Defence) == 0x000014, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::Defence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, HP) == 0x000018, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::HP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LHp) == 0x00001C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LHp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LbSuccess) == 0x000020, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LDefence) == 0x000024, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LDefence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LPsychic) == 0x000028, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LPsychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LAttack) == 0x00002C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, LBackup) == 0x000030, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::LBackup' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, Temp_byte_Variable) == 0x000034, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, CallFunc_IsExistPartyMember_ReturnValue) == 0x000108, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, K2Node_Select_Default) == 0x00010C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, CallFunc_CalcCharactersParameterTable_Parameter) == 0x000110, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::CallFunc_CalcCharactersParameterTable_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, CallFunc_Array_Get_Item) == 0x000308, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterEquipAccessory, CallFunc_Array_Get_Item_1) == 0x00030C, "Member 'BP_PlayerManager_C_CalcMenuParameterEquipAccessory::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CalcMenuParameterSkill
// 0x0228 (0x0228 - 0x0000)
struct BP_PlayerManager_C_CalcMenuParameterSkill final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  InSkill;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7A[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Psychic;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defence;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LBackup;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LDefence;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPsychic;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LAttack;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7C[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterTable              CallFunc_CalcCharactersParameterTable_Parameter;   // 0x0028(0x01F8)()
	int32                                         CallFunc_Array_Get_Item;                           // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_CalcMenuParameterSkill) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CalcMenuParameterSkill");
static_assert(sizeof(BP_PlayerManager_C_CalcMenuParameterSkill) == 0x000228, "Wrong size on BP_PlayerManager_C_CalcMenuParameterSkill");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, InSkill) == 0x000001, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::InSkill' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, bSuccess) == 0x000002, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, Attack) == 0x000004, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::Attack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, Psychic) == 0x000008, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::Psychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, Defence) == 0x00000C, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::Defence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, LBackup) == 0x000010, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::LBackup' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, LDefence) == 0x000014, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::LDefence' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, LPsychic) == 0x000018, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::LPsychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, LAttack) == 0x00001C, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::LAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, LbSuccess) == 0x000020, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::LbSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, CallFunc_IsSkillLearned_learned) == 0x000021, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::CallFunc_IsSkillLearned_learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, CallFunc_IsExistPartyMember_ReturnValue) == 0x000022, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, CallFunc_CalcCharactersParameterTable_Parameter) == 0x000028, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::CallFunc_CalcCharactersParameterTable_Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CalcMenuParameterSkill, CallFunc_Array_Get_Item) == 0x000220, "Member 'BP_PlayerManager_C_CalcMenuParameterSkill::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.AddBondsValue
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_AddBondsValue final
{
public:
	EAddBondsType                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     TargetPlayer;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C7D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LValue;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAddBondsType                                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C7E[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccessoryEffect_outValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAccessoryEffect_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7F[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_AddBondsValue) == 0x000008, "Wrong alignment on BP_PlayerManager_C_AddBondsValue");
static_assert(sizeof(BP_PlayerManager_C_AddBondsValue) == 0x000030, "Wrong size on BP_PlayerManager_C_AddBondsValue");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, Type) == 0x000000, "Member 'BP_PlayerManager_C_AddBondsValue::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, TargetPlayer) == 0x000001, "Member 'BP_PlayerManager_C_AddBondsValue::TargetPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, LValue) == 0x000004, "Member 'BP_PlayerManager_C_AddBondsValue::LValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, Temp_float_Variable) == 0x000008, "Member 'BP_PlayerManager_C_AddBondsValue::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, Temp_float_Variable_1) == 0x00000C, "Member 'BP_PlayerManager_C_AddBondsValue::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, CallFunc_GetUserParamManager_UserParamManager) == 0x000010, "Member 'BP_PlayerManager_C_AddBondsValue::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, Temp_byte_Variable) == 0x000018, "Member 'BP_PlayerManager_C_AddBondsValue::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000019, "Member 'BP_PlayerManager_C_AddBondsValue::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, CallFunc_GetAccessoryEffect_outValue) == 0x00001C, "Member 'BP_PlayerManager_C_AddBondsValue::CallFunc_GetAccessoryEffect_outValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, CallFunc_GetAccessoryEffect_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_AddBondsValue::CallFunc_GetAccessoryEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, K2Node_MathExpression_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_AddBondsValue::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_AddBondsValue, K2Node_Select_Default) == 0x000028, "Member 'BP_PlayerManager_C_AddBondsValue::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountHP
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerManager_C_GetNpcAssistCountHP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetNpcAssistCountHP) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetNpcAssistCountHP");
static_assert(sizeof(BP_PlayerManager_C_GetNpcAssistCountHP) == 0x000004, "Wrong size on BP_PlayerManager_C_GetNpcAssistCountHP");
static_assert(offsetof(BP_PlayerManager_C_GetNpcAssistCountHP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_GetNpcAssistCountHP::ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountBadStatus
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerManager_C_GetNpcAssistCountBadStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetNpcAssistCountBadStatus) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetNpcAssistCountBadStatus");
static_assert(sizeof(BP_PlayerManager_C_GetNpcAssistCountBadStatus) == 0x000004, "Wrong size on BP_PlayerManager_C_GetNpcAssistCountBadStatus");
static_assert(offsetof(BP_PlayerManager_C_GetNpcAssistCountBadStatus, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_GetNpcAssistCountBadStatus::ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetNpcAssistCountRevive
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerManager_C_GetNpcAssistCountRevive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetNpcAssistCountRevive) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetNpcAssistCountRevive");
static_assert(sizeof(BP_PlayerManager_C_GetNpcAssistCountRevive) == 0x000004, "Wrong size on BP_PlayerManager_C_GetNpcAssistCountRevive");
static_assert(offsetof(BP_PlayerManager_C_GetNpcAssistCountRevive, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_GetNpcAssistCountRevive::ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.Set Assist Count_Internal
// 0x000C (0x000C - 0x0000)
struct BP_PlayerManager_C_Set_Assist_Count_Internal final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BadStatus;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Revive;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_Set_Assist_Count_Internal) == 0x000004, "Wrong alignment on BP_PlayerManager_C_Set_Assist_Count_Internal");
static_assert(sizeof(BP_PlayerManager_C_Set_Assist_Count_Internal) == 0x00000C, "Wrong size on BP_PlayerManager_C_Set_Assist_Count_Internal");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count_Internal, HP) == 0x000000, "Member 'BP_PlayerManager_C_Set_Assist_Count_Internal::HP' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count_Internal, BadStatus) == 0x000004, "Member 'BP_PlayerManager_C_Set_Assist_Count_Internal::BadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_Set_Assist_Count_Internal, Revive) == 0x000008, "Member 'BP_PlayerManager_C_Set_Assist_Count_Internal::Revive' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetSkillLearnPoint
// 0x003C (0x003C - 0x0000)
struct BP_PlayerManager_C_GetSkillLearnPoint final
{
public:
	EPlayerID                                     InPlayerID;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  InSkillID;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C80[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPoint;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillData_return;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C81[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersSkillData                   CallFunc_GetSkillData_skill_data;                  // 0x0010(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C82[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetSkillLearnPoint) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetSkillLearnPoint");
static_assert(sizeof(BP_PlayerManager_C_GetSkillLearnPoint) == 0x00003C, "Wrong size on BP_PlayerManager_C_GetSkillLearnPoint");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, InPlayerID) == 0x000000, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::InPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, InSkillID) == 0x000001, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::InSkillID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, Point) == 0x000004, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::Point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, LPoint) == 0x000008, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::LPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, Temp_bool_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, CallFunc_GetSkillData_return) == 0x00000D, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::CallFunc_GetSkillData_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, CallFunc_GetSkillData_skill_data) == 0x000010, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::CallFunc_GetSkillData_skill_data' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillLearnPoint, K2Node_Select_Default) == 0x000038, "Member 'BP_PlayerManager_C_GetSkillLearnPoint::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeLevelDifferentExpRateData
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_InitializeLevelDifferentExpRateData final
{
public:
	struct FLevelDifferentExpRateData             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x0028)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_InitializeLevelDifferentExpRateData) == 0x000008, "Wrong alignment on BP_PlayerManager_C_InitializeLevelDifferentExpRateData");
static_assert(sizeof(BP_PlayerManager_C_InitializeLevelDifferentExpRateData) == 0x000030, "Wrong size on BP_PlayerManager_C_InitializeLevelDifferentExpRateData");
static_assert(offsetof(BP_PlayerManager_C_InitializeLevelDifferentExpRateData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'BP_PlayerManager_C_InitializeLevelDifferentExpRateData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeLevelDifferentExpRateData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_InitializeLevelDifferentExpRateData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DebugCalcCurrentSkillPoint
// 0x0144 (0x0144 - 0x0000)
struct BP_PlayerManager_C_DebugCalcCurrentSkillPoint final
{
public:
	EPlayerID                                     ID;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C83[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LLevel;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPoint;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C84[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C85[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSkillLearnPoint_Point;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C86[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C87[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C88[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x004C(0x00D0)(NoDestructor)
	bool                                          CallFunc_GetCharacterLevelData_return;             // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C89[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersLevelData                   CallFunc_GetCharacterLevelData_data_table;         // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint) == 0x000004, "Wrong alignment on BP_PlayerManager_C_DebugCalcCurrentSkillPoint");
static_assert(sizeof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint) == 0x000144, "Wrong size on BP_PlayerManager_C_DebugCalcCurrentSkillPoint");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, ID) == 0x000000, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, LLevel) == 0x000008, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::LLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, LPoint) == 0x00000C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::LPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, Temp_int_Variable) == 0x000010, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, Temp_int_Variable_1) == 0x000014, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Conv_IntToByte_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetValidValue_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000021, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000022, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetSkillLearnPoint_Point) == 0x000028, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetSkillLearnPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_IsSkillLearned_learned) == 0x000030, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_IsSkillLearned_learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_MakeLiteralInt_ReturnValue) == 0x000034, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, Temp_int_Variable_2) == 0x000038, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x00004C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetCharacterLevelData_return) == 0x00011C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetCharacterLevelData_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_GetCharacterLevelData_data_table) == 0x000120, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_GetCharacterLevelData_data_table' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Max_ReturnValue) == 0x000138, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_FTrunc_ReturnValue) == 0x00013C, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DebugCalcCurrentSkillPoint, CallFunc_Add_IntInt_ReturnValue_2) == 0x000140, "Member 'BP_PlayerManager_C_DebugCalcCurrentSkillPoint::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ReCalcRemainingSkillPoint
// 0x0144 (0x0144 - 0x0000)
struct BP_PlayerManager_C_ReCalcRemainingSkillPoint final
{
public:
	EPlayerID                                     ID;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C8A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LLevel;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LPoint;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C8B[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C8C[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSkillLearnPoint_Point;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C8D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0030(0x00D0)(NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C8E[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCharacterLevelData_return;             // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C8F[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersLevelData                   CallFunc_GetCharacterLevelData_data_table;         // 0x011C(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C90[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_ReCalcRemainingSkillPoint) == 0x000004, "Wrong alignment on BP_PlayerManager_C_ReCalcRemainingSkillPoint");
static_assert(sizeof(BP_PlayerManager_C_ReCalcRemainingSkillPoint) == 0x000144, "Wrong size on BP_PlayerManager_C_ReCalcRemainingSkillPoint");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, ID) == 0x000000, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, LLevel) == 0x000008, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::LLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, LPoint) == 0x00000C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::LPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, Temp_int_Variable) == 0x000010, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, Temp_int_Variable_1) == 0x000014, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Conv_IntToByte_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetValidValue_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000021, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000022, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetSkillLearnPoint_Point) == 0x000028, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetSkillLearnPoint_Point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_IsSkillLearned_learned) == 0x00002C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_IsSkillLearned_learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Subtract_IntInt_ReturnValue) == 0x000100, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_MakeLiteralInt_ReturnValue) == 0x000104, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, Temp_int_Variable_2) == 0x000108, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Less_IntInt_ReturnValue) == 0x00010C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Add_IntInt_ReturnValue_1) == 0x000110, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000114, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetCharacterLevelData_return) == 0x000118, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetCharacterLevelData_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_GetCharacterLevelData_data_table) == 0x00011C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_GetCharacterLevelData_data_table' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000134, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_FTrunc_ReturnValue) == 0x000138, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Add_IntInt_ReturnValue_2) == 0x00013C, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReCalcRemainingSkillPoint, CallFunc_Max_ReturnValue) == 0x000140, "Member 'BP_PlayerManager_C_ReCalcRemainingSkillPoint::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.ReserveMainPlayerDeadSequence
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerManager_C_ReserveMainPlayerDeadSequence final
{
public:
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_ReserveMainPlayerDeadSequence) == 0x000008, "Wrong alignment on BP_PlayerManager_C_ReserveMainPlayerDeadSequence");
static_assert(sizeof(BP_PlayerManager_C_ReserveMainPlayerDeadSequence) == 0x000010, "Wrong size on BP_PlayerManager_C_ReserveMainPlayerDeadSequence");
static_assert(offsetof(BP_PlayerManager_C_ReserveMainPlayerDeadSequence, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000000, "Member 'BP_PlayerManager_C_ReserveMainPlayerDeadSequence::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_ReserveMainPlayerDeadSequence, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_ReserveMainPlayerDeadSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.StartMainPlayerDeadSequence
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerManager_C_StartMainPlayerDeadSequence final
{
public:
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestRevivalAssist_is_revival;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C91[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_RequestRevivalAssist_AssistPlayer;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_StartMainPlayerDeadSequence) == 0x000008, "Wrong alignment on BP_PlayerManager_C_StartMainPlayerDeadSequence");
static_assert(sizeof(BP_PlayerManager_C_StartMainPlayerDeadSequence) == 0x000028, "Wrong size on BP_PlayerManager_C_StartMainPlayerDeadSequence");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000000, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, CallFunc_GetMainPlayer_Player) == 0x000008, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000010, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, CallFunc_RequestRevivalAssist_is_revival) == 0x00001A, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::CallFunc_RequestRevivalAssist_is_revival' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_StartMainPlayerDeadSequence, CallFunc_RequestRevivalAssist_AssistPlayer) == 0x000020, "Member 'BP_PlayerManager_C_StartMainPlayerDeadSequence::CallFunc_RequestRevivalAssist_AssistPlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DoStatusAssist
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PlayerManager_C_DoStatusAssist final
{
public:
	class ARSBattlePlayer_C*                      L_execPlayer;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSPlayerAIAssistThinkData              L_assistThinkData;                                 // 0x0008(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C92[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C93[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C94[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NeedsStatusAssist_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C95[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUseItemThink_self_CastInput;            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseItemThink_Result;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIOrder                                CallFunc_Get_Order_Order;                          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableAssist_bEnable;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C96[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C97[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ARSBattlePlayer_C*, int32>         CallFunc_GetAssistCheckPlayerList_AssistList;      // 0x0060(0x0050)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C98[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              CallFunc_Map_Keys_Keys;                            // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C99[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DoStatusAssist) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DoStatusAssist");
static_assert(sizeof(BP_PlayerManager_C_DoStatusAssist) == 0x0000E8, "Wrong size on BP_PlayerManager_C_DoStatusAssist");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, L_execPlayer) == 0x000000, "Member 'BP_PlayerManager_C_DoStatusAssist::L_execPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, L_assistThinkData) == 0x000008, "Member 'BP_PlayerManager_C_DoStatusAssist::L_assistThinkData' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, Temp_bool_True_if_break_was_hit_Variable) == 0x00001C, "Member 'BP_PlayerManager_C_DoStatusAssist::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_PlayerManager_C_DoStatusAssist::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_PlayerManager_C_DoStatusAssist::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_PlayerManager_C_DoStatusAssist::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_NeedsStatusAssist_ReturnValue) == 0x000039, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_NeedsStatusAssist_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_IsUseItemThink_self_CastInput) == 0x000040, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_IsUseItemThink_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_IsUseItemThink_Result) == 0x000050, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_IsUseItemThink_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Get_Order_Order) == 0x000051, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Get_Order_Order' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000052, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_IsValid_ReturnValue) == 0x000053, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_IsEnableAssist_bEnable) == 0x000054, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_IsEnableAssist_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_GetAssistCheckPlayerList_AssistList) == 0x000060, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_GetAssistCheckPlayerList_AssistList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Map_Keys_Keys) == 0x0000B8, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Array_Length_ReturnValue) == 0x0000C8, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Map_Values_Values) == 0x0000D0, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoStatusAssist, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E4, "Member 'BP_PlayerManager_C_DoStatusAssist::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateAssist
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_UpdateAssist final
{
public:
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdateAssist) == 0x000001, "Wrong alignment on BP_PlayerManager_C_UpdateAssist");
static_assert(sizeof(BP_PlayerManager_C_UpdateAssist) == 0x000002, "Wrong size on BP_PlayerManager_C_UpdateAssist");
static_assert(offsetof(BP_PlayerManager_C_UpdateAssist, CallFunc_IsEnable_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_UpdateAssist::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateAssist, CallFunc_IsOver_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_UpdateAssist::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsNeedFrameWait
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_IsNeedFrameWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsNeedFrameWait) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsNeedFrameWait");
static_assert(sizeof(BP_PlayerManager_C_IsNeedFrameWait) == 0x000001, "Wrong size on BP_PlayerManager_C_IsNeedFrameWait");
static_assert(offsetof(BP_PlayerManager_C_IsNeedFrameWait, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsNeedFrameWait::ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.InitializeManager
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_InitializeManager final
{
public:
	EManagerProcTiming                            Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_InitializeManager) == 0x000001, "Wrong alignment on BP_PlayerManager_C_InitializeManager");
static_assert(sizeof(BP_PlayerManager_C_InitializeManager) == 0x000002, "Wrong size on BP_PlayerManager_C_InitializeManager");
static_assert(offsetof(BP_PlayerManager_C_InitializeManager, Timing) == 0x000000, "Member 'BP_PlayerManager_C_InitializeManager::Timing' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_InitializeManager, ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_InitializeManager::ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetBattleMemberCore
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerManager_C_SetBattleMemberCore final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     ID;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpawn;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBattleMemberCore_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetBattleMemberCore) == 0x000001, "Wrong alignment on BP_PlayerManager_C_SetBattleMemberCore");
static_assert(sizeof(BP_PlayerManager_C_SetBattleMemberCore) == 0x000005, "Wrong size on BP_PlayerManager_C_SetBattleMemberCore");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMemberCore, Kind) == 0x000000, "Member 'BP_PlayerManager_C_SetBattleMemberCore::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMemberCore, ID) == 0x000001, "Member 'BP_PlayerManager_C_SetBattleMemberCore::ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMemberCore, bSpawn) == 0x000002, "Member 'BP_PlayerManager_C_SetBattleMemberCore::bSpawn' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMemberCore, ReturnValue) == 0x000003, "Member 'BP_PlayerManager_C_SetBattleMemberCore::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetBattleMemberCore, CallFunc_SetBattleMemberCore_ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_SetBattleMemberCore::CallFunc_SetBattleMemberCore_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetHologramManageActor
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_GetHologramManageActor final
{
public:
	class ABP_PlayerHologram_C*                   Param_HologramManageActor;                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetHologramManageActor) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetHologramManageActor");
static_assert(sizeof(BP_PlayerManager_C_GetHologramManageActor) == 0x000008, "Wrong size on BP_PlayerManager_C_GetHologramManageActor");
static_assert(offsetof(BP_PlayerManager_C_GetHologramManageActor, Param_HologramManageActor) == 0x000000, "Member 'BP_PlayerManager_C_GetHologramManageActor::Param_HologramManageActor' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.EventEquipSetoMaskBegin
// 0x0260 (0x0260 - 0x0000)
struct BP_PlayerManager_C_EventEquipSetoMaskBegin final
{
public:
	int32                                         LEquipIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LEquipIDList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FPlayerInfo                            LInfo;                                             // 0x0018(0x00D0)(Edit, BlueprintVisible, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9B[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9C[0x1];                                     // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0100(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9D[0x1];                                     // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9E[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9F[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFAttachmentData                       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0130(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA0[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA1[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExistPartyMember_ReturnValue;           // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA2[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0170(0x00D0)(NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA3[0x2];                                     // 0x0242(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA4[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA5[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_EventEquipSetoMaskBegin) == 0x000008, "Wrong alignment on BP_PlayerManager_C_EventEquipSetoMaskBegin");
static_assert(sizeof(BP_PlayerManager_C_EventEquipSetoMaskBegin) == 0x000260, "Wrong size on BP_PlayerManager_C_EventEquipSetoMaskBegin");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, LEquipIndex) == 0x000000, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::LEquipIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, LEquipIDList) == 0x000008, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::LEquipIDList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, LInfo) == 0x000018, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::LInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_int_Variable) == 0x0000E8, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_int_Variable_1) == 0x0000EC, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_IntToByte_ReturnValue) == 0x0000F0, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Add_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetValidValue_ReturnValue) == 0x0000F8, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x0000F9, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x0000FA, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000FC, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_int_Variable_2) == 0x000100, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_bool_True_if_break_was_hit_Variable) == 0x000105, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Not_PreBool_ReturnValue) == 0x000106, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_int_Array_Index_Variable) == 0x000108, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Get_Item) == 0x00010C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_IntToString_ReturnValue) == 0x000110, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000120, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_StringToName_ReturnValue) == 0x000124, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetDataTableRowFromName_OutRow) == 0x000130, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000150, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Length_ReturnValue) == 0x000154, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, K2Node_SwitchEnum_CmpSuccess) == 0x000158, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Find_ReturnValue) == 0x00015C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_IsExistPartyMember_ReturnValue) == 0x000160, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_IsExistPartyMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Add_ReturnValue) == 0x000164, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Add_ReturnValue_1) == 0x000168, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Array_Add_ReturnValue_2) == 0x00016C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000170, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x000240, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_GetValidValue_ReturnValue_1) == 0x000241, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_MakeLiteralInt_ReturnValue) == 0x000244, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Less_IntInt_ReturnValue_1) == 0x000248, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, Temp_int_Loop_Counter_Variable) == 0x00024C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Less_IntInt_ReturnValue_2) == 0x000250, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_Add_IntInt_ReturnValue_1) == 0x000254, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskBegin, CallFunc_BooleanAND_ReturnValue) == 0x000258, "Member 'BP_PlayerManager_C_EventEquipSetoMaskBegin::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.EventEquipSetoMaskEnd
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerManager_C_EventEquipSetoMaskEnd final
{
public:
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA7[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA8[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_EventEquipSetoMaskEnd) == 0x000004, "Wrong alignment on BP_PlayerManager_C_EventEquipSetoMaskEnd");
static_assert(sizeof(BP_PlayerManager_C_EventEquipSetoMaskEnd) == 0x000028, "Wrong size on BP_PlayerManager_C_EventEquipSetoMaskEnd");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_MakeLiteralInt_ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, Temp_int_Variable) == 0x000004, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, Temp_int_Variable_1) == 0x000008, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00001C, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000020, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventEquipSetoMaskEnd, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PlayerManager_C_EventEquipSetoMaskEnd::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.UpdateTriggerEffect
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerManager_C_UpdateTriggerEffect final
{
public:
	class ABP_TriggerEffectManager_C*             L_trgEffMgr;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessEnable_Return;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA9[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTriggerInputStatus_ReturnValue_1;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAA[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableRessurect_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimKind_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseHologram_bUse;                       // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOnReadyCombinationVision_ReturnValue;   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAB[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_IsOnReadySAS_self_CastInput;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOnReadySAS_ReturnValue;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_1;        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_2;        // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_3;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_4;        // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_5;        // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_6;        // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_ReturnValue_7;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerActionKind                             CallFunc_GetCurrentActionState_Kind;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableAction_bEnable;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableRessurect_ReturnValue_1;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_UpdateTriggerEffect) == 0x000008, "Wrong alignment on BP_PlayerManager_C_UpdateTriggerEffect");
static_assert(sizeof(BP_PlayerManager_C_UpdateTriggerEffect) == 0x000068, "Wrong size on BP_PlayerManager_C_UpdateTriggerEffect");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, L_trgEffMgr) == 0x000000, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::L_trgEffMgr' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsBrainCrashAccessEnable_Return) == 0x000011, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsBrainCrashAccessEnable_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsTriggerInputStatus_ReturnValue) == 0x000012, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsTriggerInputStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000018, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsTriggerInputStatus_ReturnValue_1) == 0x000020, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsTriggerInputStatus_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_GetMainPlayer_Player) == 0x000028, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsEnableRessurect_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsEnableRessurect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsAnimKind_ReturnValue) == 0x000031, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUseHologram_bUse) == 0x000032, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUseHologram_bUse' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsOnReadyCombinationVision_ReturnValue) == 0x000033, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsOnReadyCombinationVision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsOnReadySAS_self_CastInput) == 0x000038, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsOnReadySAS_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsOnReadySAS_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsOnReadySAS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue) == 0x000049, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_1) == 0x00004A, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_2) == 0x00004B, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_3) == 0x00004C, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_4) == 0x00004D, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_5) == 0x00004E, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_6) == 0x00004F, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsUpperActionStatus_ReturnValue_7) == 0x000050, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsUpperActionStatus_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_GetCurrentActionState_Kind) == 0x000051, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_GetCurrentActionState_Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue) == 0x000052, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000053, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_1) == 0x000054, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000055, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_2) == 0x000056, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000057, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_3) == 0x000058, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000059, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_4) == 0x00005A, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00005B, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_5) == 0x00005C, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_6) == 0x00005D, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_7) == 0x00005E, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_8) == 0x00005F, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_9) == 0x000060, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsDisableAction_bEnable) == 0x000061, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsDisableAction_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_10) == 0x000062, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsValid_ReturnValue_2) == 0x000063, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_IsEnableRessurect_ReturnValue_1) == 0x000064, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_IsEnableRessurect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_UpdateTriggerEffect, CallFunc_BooleanOR_ReturnValue_11) == 0x000065, "Member 'BP_PlayerManager_C_UpdateTriggerEffect::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetAjitoNpcWarpOffset
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_GetAjitoNpcWarpOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationAjito_InAjito;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationRestaurant_InAjito;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAD[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetAjitoNpcWarpOffset) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetAjitoNpcWarpOffset");
static_assert(sizeof(BP_PlayerManager_C_GetAjitoNpcWarpOffset) == 0x000040, "Wrong size on BP_PlayerManager_C_GetAjitoNpcWarpOffset");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, Offset) == 0x000000, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::Offset' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, Temp_bool_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, Temp_struct_Variable) == 0x000010, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, Temp_struct_Variable_1) == 0x00001C, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, CallFunc_GetSceneManager_SceneManager) == 0x000028, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, CallFunc_IsLocationAjito_InAjito) == 0x000030, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::CallFunc_IsLocationAjito_InAjito' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, CallFunc_IsLocationRestaurant_InAjito) == 0x000031, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::CallFunc_IsLocationRestaurant_InAjito' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, CallFunc_BooleanOR_ReturnValue) == 0x000032, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetAjitoNpcWarpOffset, K2Node_Select_Default) == 0x000034, "Member 'BP_PlayerManager_C_GetAjitoNpcWarpOffset::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsCanSASUse_fromNative
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerManager_C_IsCanSASUse_fromNative final
{
public:
	E_SASButton                                   Button;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAF[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_IsCanSAS_Use_self_CastInput;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCanSAS_Use_IsSASUse;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsCanSASUse_fromNative) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsCanSASUse_fromNative");
static_assert(sizeof(BP_PlayerManager_C_IsCanSASUse_fromNative) == 0x000038, "Wrong size on BP_PlayerManager_C_IsCanSASUse_fromNative");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, Button) == 0x000000, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::Button' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, CallFunc_GetMainPlayer_Player) == 0x000008, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000010, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, CallFunc_IsCanSAS_Use_self_CastInput) == 0x000020, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::CallFunc_IsCanSAS_Use_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsCanSASUse_fromNative, CallFunc_IsCanSAS_Use_IsSASUse) == 0x000030, "Member 'BP_PlayerManager_C_IsCanSASUse_fromNative::CallFunc_IsCanSAS_Use_IsSASUse' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDriveDefeatedCombinationVision
// 0x0110 (0x0110 - 0x0000)
struct BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision final
{
public:
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EPlayerID                                     LCVPlayerID;                                       // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB0[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActor*                                 LAttacker;                                         // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision");
static_assert(sizeof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision) == 0x000110, "Wrong size on BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision, SkillInfo) == 0x000000, "Member 'BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision::SkillInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision, LCVPlayerID) == 0x0000F0, "Member 'BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision::LCVPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision, LExtraType) == 0x0000F8, "Member 'BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision::LExtraType' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision, LAttacker) == 0x000108, "Member 'BP_PlayerManager_C_CheckNpcDriveDefeatedCombinationVision::LAttacker' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.CheckNpcDriveCombinationVisionHit
// 0x0200 (0x0200 - 0x0000)
struct BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit final
{
public:
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EPlayerID                                     LCVPlayerID;                                       // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB1[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActor*                                 LAttacker;                                         // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_3;                              // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_4;                              // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_5;                              // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_6;                              // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_7;                              // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_8;                              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_9;                              // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_10;                             // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_11;                             // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_12;                             // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_13;                             // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_14;                             // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_15;                             // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_16;                             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_17;                             // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_18;                             // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_19;                             // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_20;                             // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_21;                             // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_22;                             // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_23;                             // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_24;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_25;                             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_26;                             // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_27;                             // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_28;                             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_29;                             // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_30;                             // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_31;                             // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_32;                             // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_33;                             // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_34;                             // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_35;                             // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_36;                             // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_37;                             // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_38;                             // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_39;                             // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_40;                             // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_41;                             // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_42;                             // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_43;                             // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_44;                             // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_45;                             // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_46;                             // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_47;                             // 0x013F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_48;                             // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_49;                             // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_50;                             // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_51;                             // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_52;                             // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_53;                             // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_54;                             // 0x0146(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_55;                             // 0x0147(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_56;                             // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_57;                             // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_58;                             // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_59;                             // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_60;                             // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_61;                             // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_62;                             // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_63;                             // 0x014F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_64;                             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_65;                             // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_66;                             // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_67;                             // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_68;                             // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_69;                             // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_70;                             // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_71;                             // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_72;                             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_73;                             // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_74;                             // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_75;                             // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_76;                             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_77;                             // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_78;                             // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_79;                             // 0x015F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_80;                             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_81;                             // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_82;                             // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_83;                             // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_84;                             // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_85;                             // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_86;                             // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_87;                             // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_88;                             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_89;                             // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_90;                             // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_91;                             // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_92;                             // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_93;                             // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_94;                             // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_95;                             // 0x016F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_96;                             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_97;                             // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_98;                             // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_99;                             // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_100;                            // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_101;                            // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_102;                            // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_103;                            // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_104;                            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_105;                            // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_106;                            // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_107;                            // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_108;                            // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_109;                            // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_110;                            // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_111;                            // 0x017F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_112;                            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_113;                            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_114;                            // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENpcDriveCheckType                            Temp_byte_Variable_115;                            // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENpcDriveCheckType                            Temp_byte_Variable_116;                            // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB2[0x1];                                     // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_117;                            // 0x018D(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB3[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable_118;                            // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_119;                            // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB4[0x5];                                     // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB5[0x6];                                     // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_CallFromCPP_ReturnValue;      // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     K2Node_Select_Default;                             // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENpcDriveCheckType                            K2Node_Select_Default_1;                           // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB6[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_1;           // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CB7[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerAccessoryEffect_CallFromCPP_bOutEquip; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CB8[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerAccessoryEffect_CallFromCPP_OutParam; // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit) == 0x000008, "Wrong alignment on BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit");
static_assert(sizeof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit) == 0x000200, "Wrong size on BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, SkillInfo) == 0x000000, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::SkillInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, LCVPlayerID) == 0x0000F0, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::LCVPlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, LExtraType) == 0x0000F8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::LExtraType' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, LAttacker) == 0x000108, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::LAttacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable) == 0x000110, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_1) == 0x000111, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_2) == 0x000112, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_3) == 0x000113, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_4) == 0x000114, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_5) == 0x000115, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_6) == 0x000116, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_7) == 0x000117, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_8) == 0x000118, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_9) == 0x000119, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_10) == 0x00011A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_11) == 0x00011B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_12) == 0x00011C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_13) == 0x00011D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_14) == 0x00011E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_15) == 0x00011F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_16) == 0x000120, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_17) == 0x000121, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_18) == 0x000122, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_19) == 0x000123, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_20) == 0x000124, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_21) == 0x000125, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_22) == 0x000126, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_23) == 0x000127, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_24) == 0x000128, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_25) == 0x000129, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_26) == 0x00012A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_27) == 0x00012B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_28) == 0x00012C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_29) == 0x00012D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_30) == 0x00012E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_31) == 0x00012F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_32) == 0x000130, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_33) == 0x000131, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_34) == 0x000132, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_35) == 0x000133, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_36) == 0x000134, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_37) == 0x000135, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_38) == 0x000136, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_39) == 0x000137, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_40) == 0x000138, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_41) == 0x000139, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_42) == 0x00013A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_43) == 0x00013B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_44) == 0x00013C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_45) == 0x00013D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_46) == 0x00013E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_47) == 0x00013F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_48) == 0x000140, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_49) == 0x000141, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_50) == 0x000142, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_50' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_51) == 0x000143, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_51' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_52) == 0x000144, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_52' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_53) == 0x000145, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_53' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_54) == 0x000146, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_54' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_55) == 0x000147, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_55' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_56) == 0x000148, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_56' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_57) == 0x000149, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_57' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_58) == 0x00014A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_58' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_59) == 0x00014B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_59' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_60) == 0x00014C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_60' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_61) == 0x00014D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_61' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_62) == 0x00014E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_62' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_63) == 0x00014F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_63' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_64) == 0x000150, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_64' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_65) == 0x000151, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_65' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_66) == 0x000152, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_66' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_67) == 0x000153, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_67' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_68) == 0x000154, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_68' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_69) == 0x000155, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_69' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_70) == 0x000156, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_70' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_71) == 0x000157, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_71' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_72) == 0x000158, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_72' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_73) == 0x000159, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_73' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_74) == 0x00015A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_74' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_75) == 0x00015B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_75' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_76) == 0x00015C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_76' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_77) == 0x00015D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_77' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_78) == 0x00015E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_78' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_79) == 0x00015F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_79' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_80) == 0x000160, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_80' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_81) == 0x000161, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_81' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_82) == 0x000162, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_82' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_83) == 0x000163, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_83' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_84) == 0x000164, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_84' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_85) == 0x000165, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_85' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_86) == 0x000166, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_86' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_87) == 0x000167, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_87' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_88) == 0x000168, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_88' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_89) == 0x000169, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_89' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_90) == 0x00016A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_90' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_91) == 0x00016B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_91' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_92) == 0x00016C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_92' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_93) == 0x00016D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_93' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_94) == 0x00016E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_94' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_95) == 0x00016F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_95' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_96) == 0x000170, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_96' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_97) == 0x000171, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_97' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_98) == 0x000172, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_98' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_99) == 0x000173, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_99' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_100) == 0x000174, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_100' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_101) == 0x000175, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_101' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_102) == 0x000176, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_102' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_103) == 0x000177, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_103' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_104) == 0x000178, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_104' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_105) == 0x000179, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_105' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_106) == 0x00017A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_106' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_107) == 0x00017B, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_107' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_108) == 0x00017C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_108' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_109) == 0x00017D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_109' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_110) == 0x00017E, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_110' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_111) == 0x00017F, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_111' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_112) == 0x000180, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_112' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_113) == 0x000181, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_113' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_114) == 0x000182, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_114' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000183, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_bool_Variable) == 0x000184, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_115) == 0x000185, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_115' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_116) == 0x000186, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_116' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_float_Variable) == 0x000188, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_bool_Variable_1) == 0x00018C, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_117) == 0x00018D, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_117' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Array_Find_ReturnValue) == 0x000190, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_int_Array_Index_Variable) == 0x000194, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000198, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_118) == 0x000199, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_118' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_byte_Variable_119) == 0x00019A, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_byte_Variable_119' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_GetPlayer_ReturnValue) == 0x0001A0, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, Temp_int_Loop_Counter_Variable) == 0x0001A8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001AC, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0001B0, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Array_Get_Item) == 0x0001B1, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_DynamicCast_AsPlayer_Interface) == 0x0001B8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_DynamicCast_bSuccess) == 0x0001C8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_IsDriveMode_CallFromCPP_ReturnValue) == 0x0001C9, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_IsDriveMode_CallFromCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_Select_Default) == 0x0001CA, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_Select_Default_1) == 0x0001CB, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Array_Length_ReturnValue) == 0x0001CC, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001D0, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_DynamicCast_AsPlayer_Interface_1) == 0x0001D8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_DynamicCast_AsPlayer_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, K2Node_DynamicCast_bSuccess_1) == 0x0001E8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_Max_ReturnValue) == 0x0001EC, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_GetPlayerAccessoryEffect_CallFromCPP_bOutEquip) == 0x0001F0, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_GetPlayerAccessoryEffect_CallFromCPP_bOutEquip' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_GetPlayerAccessoryEffect_CallFromCPP_OutParam) == 0x0001F4, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_GetPlayerAccessoryEffect_CallFromCPP_OutParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit, CallFunc_IsValid_ReturnValue) == 0x0001F8, "Member 'BP_PlayerManager_C_CheckNpcDriveCombinationVisionHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.DoNotifyBattleSimulatorEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_DoNotifyBattleSimulatorEnd final
{
public:
	bool                                          bMissionCancel;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CB9[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd) == 0x000008, "Wrong alignment on BP_PlayerManager_C_DoNotifyBattleSimulatorEnd");
static_assert(sizeof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd) == 0x000018, "Wrong size on BP_PlayerManager_C_DoNotifyBattleSimulatorEnd");
static_assert(offsetof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd, bMissionCancel) == 0x000000, "Member 'BP_PlayerManager_C_DoNotifyBattleSimulatorEnd::bMissionCancel' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd, ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_DoNotifyBattleSimulatorEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd, CallFunc_GetPostProcessManager_Manager) == 0x000008, "Member 'BP_PlayerManager_C_DoNotifyBattleSimulatorEnd::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_DoNotifyBattleSimulatorEnd, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_DoNotifyBattleSimulatorEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPhotoModeFacialList
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerManager_C_GetPhotoModeFacialList final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CBA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerFacialAnim>                     FacialList;                                        // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       LPlayer;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerFacialAnim>                     LFacialList;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CBB[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x003C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CBC[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPhotoModeFacialData                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0048(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetPhotoModeFacialList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPhotoModeFacialList");
static_assert(sizeof(BP_PlayerManager_C_GetPhotoModeFacialList) == 0x000060, "Wrong size on BP_PlayerManager_C_GetPhotoModeFacialList");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, Kind) == 0x000000, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, FacialList) == 0x000008, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::FacialList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, LPlayer) == 0x000018, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, LFacialList) == 0x000020, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::LFacialList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, CallFunc_GetPlayer_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, CallFunc_GetName_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, CallFunc_GetDataTableRowFromName_OutRow) == 0x000048, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.PlayPhotoModeFacialAnim
// 0x0088 (0x0088 - 0x0000)
struct BP_PlayerManager_C_PlayPhotoModeFacialAnim final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerFacialAnim                             Anim;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CBD[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CBE[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_AjitoMember_C>    K2Node_DynamicCast_AsBPI_Ajito_Member;             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayPhotoModeFacialInterface_bDummy;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CBF[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_AjitoMember_C>    K2Node_DynamicCast_AsBPI_Ajito_Member_1;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetAjitoPlayerID_PlayerID;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC0[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC1[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationAjito_InAjito;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC2[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_PlayPhotoModeFacialAnim) == 0x000008, "Wrong alignment on BP_PlayerManager_C_PlayPhotoModeFacialAnim");
static_assert(sizeof(BP_PlayerManager_C_PlayPhotoModeFacialAnim) == 0x000088, "Wrong size on BP_PlayerManager_C_PlayPhotoModeFacialAnim");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Kind) == 0x000000, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Anim) == 0x000001, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Anim' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000010, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_AsBPI_Ajito_Member) == 0x000028, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_AsBPI_Ajito_Member' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_PlayPhotoModeFacialInterface_bDummy) == 0x000039, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_PlayPhotoModeFacialInterface_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_AsBPI_Ajito_Member_1) == 0x000040, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_AsBPI_Ajito_Member_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_GetAjitoPlayerID_PlayerID) == 0x000051, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_GetAjitoPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_GetSceneManager_SceneManager) == 0x000060, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_IsLocationAjito_InAjito) == 0x000068, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_IsLocationAjito_InAjito' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_BooleanAND_ReturnValue) == 0x00006A, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, CallFunc_GetPlayer_ReturnValue) == 0x000070, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_AsRSBattle_Player) == 0x000078, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_PlayPhotoModeFacialAnim, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'BP_PlayerManager_C_PlayPhotoModeFacialAnim::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.SetPhotoModeHood
// 0x0098 (0x0098 - 0x0000)
struct BP_PlayerManager_C_SetPhotoModeHood final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC6[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_AjitoMember_C>    K2Node_DynamicCast_AsBPI_Ajito_Member;             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC7[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_AjitoMember_C>    K2Node_DynamicCast_AsBPI_Ajito_Member_1;           // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PhotoModeHoodVisibleInterface_bDummy;     // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetAjitoPlayerID_PlayerID;                // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC8[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC9[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCA[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationAjito_InAjito;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_SetPhotoModeHood) == 0x000008, "Wrong alignment on BP_PlayerManager_C_SetPhotoModeHood");
static_assert(sizeof(BP_PlayerManager_C_SetPhotoModeHood) == 0x000098, "Wrong size on BP_PlayerManager_C_SetPhotoModeHood");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, Kind) == 0x000000, "Member 'BP_PlayerManager_C_SetPhotoModeHood::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, bVisible) == 0x000001, "Member 'BP_PlayerManager_C_SetPhotoModeHood::bVisible' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'BP_PlayerManager_C_SetPhotoModeHood::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PlayerManager_C_SetPhotoModeHood::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_PlayerManager_C_SetPhotoModeHood::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_GetPlayer_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_AsRSBattle_Player) == 0x000020, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000030, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_PlayerManager_C_SetPhotoModeHood::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_AsBPI_Ajito_Member) == 0x000048, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_AsBPI_Ajito_Member' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_AsBPI_Ajito_Member_1) == 0x000060, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_AsBPI_Ajito_Member_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'BP_PlayerManager_C_SetPhotoModeHood::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_PhotoModeHoodVisibleInterface_bDummy) == 0x000071, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_PhotoModeHoodVisibleInterface_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_GetAjitoPlayerID_PlayerID) == 0x000072, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_GetAjitoPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000073, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_GetSceneManager_SceneManager) == 0x000088, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_SetPhotoModeHood, CallFunc_IsLocationAjito_InAjito) == 0x000090, "Member 'BP_PlayerManager_C_SetPhotoModeHood::CallFunc_IsLocationAjito_InAjito' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsVisiblePhotoModeHood
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_IsVisiblePhotoModeHood final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbVisible;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CCB[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisiblePhotoModeHood_bVisible;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsVisiblePhotoModeHood) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsVisiblePhotoModeHood");
static_assert(sizeof(BP_PlayerManager_C_IsVisiblePhotoModeHood) == 0x000020, "Wrong size on BP_PlayerManager_C_IsVisiblePhotoModeHood");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, Kind) == 0x000000, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, bVisible) == 0x000001, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::bVisible' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, LbVisible) == 0x000002, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::LbVisible' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, CallFunc_GetPlayer_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, K2Node_DynamicCast_AsRSBattle_Player) == 0x000010, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood, CallFunc_IsVisiblePhotoModeHood_bVisible) == 0x000019, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood::CallFunc_IsVisiblePhotoModeHood_bVisible' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPhotoModeFacialList_Native
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerManager_C_GetPhotoModeFacialList_Native final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerFacialAnim_Native>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	TArray<EPlayerFacialAnim_Native>              LPlayerFacialList;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EPlayerFacialAnim>                     CallFunc_GetPhotoModeFacialList_FacialList;        // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CCD[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CCE[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetPhotoModeFacialList_Native) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPhotoModeFacialList_Native");
static_assert(sizeof(BP_PlayerManager_C_GetPhotoModeFacialList_Native) == 0x000060, "Wrong size on BP_PlayerManager_C_GetPhotoModeFacialList_Native");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, Kind) == 0x000000, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, LPlayerFacialList) == 0x000018, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::LPlayerFacialList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_GetPhotoModeFacialList_FacialList) == 0x000028, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_GetPhotoModeFacialList_FacialList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, Temp_int_Loop_Num_Variable) == 0x000044, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Conv_IntToByte_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_GetValidValue_ReturnValue) == 0x000049, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPhotoModeFacialList_Native, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_PlayerManager_C_GetPhotoModeFacialList_Native::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsVisiblePhotoModeHood_Native
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_IsVisiblePhotoModeHood_Native final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisiblePhotoModeHood_bVisible;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsVisiblePhotoModeHood_Native) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsVisiblePhotoModeHood_Native");
static_assert(sizeof(BP_PlayerManager_C_IsVisiblePhotoModeHood_Native) == 0x000003, "Wrong size on BP_PlayerManager_C_IsVisiblePhotoModeHood_Native");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood_Native, Kind) == 0x000000, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood_Native::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood_Native, ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood_Native::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsVisiblePhotoModeHood_Native, CallFunc_IsVisiblePhotoModeHood_bVisible) == 0x000002, "Member 'BP_PlayerManager_C_IsVisiblePhotoModeHood_Native::CallFunc_IsVisiblePhotoModeHood_bVisible' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsEnablePhotoModePlayer
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_IsEnablePhotoModePlayer final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbEnable;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetBattleMemberPlayerID_ReturnValue;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CCF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationRestaurant_InAjito;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsEnablePhotoModePlayer) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsEnablePhotoModePlayer");
static_assert(sizeof(BP_PlayerManager_C_IsEnablePhotoModePlayer) == 0x000030, "Wrong size on BP_PlayerManager_C_IsEnablePhotoModePlayer");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, Kind) == 0x000000, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::Kind' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, LbEnable) == 0x000002, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::LbEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_GetBattleMemberPlayerID_ReturnValue) == 0x000003, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_GetBattleMemberPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_GetPlayer_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_GetSceneManager_SceneManager) == 0x000020, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_IsLocationRestaurant_InAjito) == 0x000029, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_IsLocationRestaurant_InAjito' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnablePhotoModePlayer, K2Node_SwitchEnum_CmpSuccess) == 0x00002B, "Member 'BP_PlayerManager_C_IsEnablePhotoModePlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsHoodCostumeID
// 0x0230 (0x0230 - 0x0000)
struct BP_PlayerManager_C_IsHoodCostumeID final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CD0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LCostumeID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             LEquipDataTable;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEquip;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CD2[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_5;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_6;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_7;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_8;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_9;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_10;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_11;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_12;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_13;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_14;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_15;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_16;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_17;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_18;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_19;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_20;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_21;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_22;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_23;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_24;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_25;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_26;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD3[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0110(0x00D0)(NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPlayerCostumeData                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x01E8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD4[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemCategoryID_ReturnValue;            // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default;                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_IsHoodCostumeID) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsHoodCostumeID");
static_assert(sizeof(BP_PlayerManager_C_IsHoodCostumeID) == 0x000230, "Wrong size on BP_PlayerManager_C_IsHoodCostumeID");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_IsHoodCostumeID::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CostumeId) == 0x000004, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CostumeId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_IsHoodCostumeID::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, LCostumeID) == 0x00000C, "Member 'BP_PlayerManager_C_IsHoodCostumeID::LCostumeID' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, LEquipDataTable) == 0x000010, "Member 'BP_PlayerManager_C_IsHoodCostumeID::LEquipDataTable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, LbEquip) == 0x000018, "Member 'BP_PlayerManager_C_IsHoodCostumeID::LbEquip' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_byte_Variable) == 0x000019, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable) == 0x000020, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_1) == 0x000028, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_2) == 0x000030, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_3) == 0x000038, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_4) == 0x000040, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_5) == 0x000048, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_6) == 0x000050, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_7) == 0x000058, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_8) == 0x000060, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_9) == 0x000068, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_10) == 0x000070, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_11) == 0x000078, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_12) == 0x000080, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_13) == 0x000088, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_14) == 0x000090, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_15) == 0x000098, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_16) == 0x0000A0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_17) == 0x0000A8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_18) == 0x0000B0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_19) == 0x0000B8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_20) == 0x0000C0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_21) == 0x0000C8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_22) == 0x0000D0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_23) == 0x0000D8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_24) == 0x0000E0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_25) == 0x0000E8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, Temp_object_Variable_26) == 0x0000F0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_Conv_IntToString_ReturnValue) == 0x000100, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000110, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_Conv_StringToName_ReturnValue) == 0x0001E0, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001E8, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000220, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, CallFunc_GetItemCategoryID_ReturnValue) == 0x000224, "Member 'BP_PlayerManager_C_IsHoodCostumeID::CallFunc_GetItemCategoryID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHoodCostumeID, K2Node_Select_Default) == 0x000228, "Member 'BP_PlayerManager_C_IsHoodCostumeID::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerStart
// 0x0078 (0x0078 - 0x0000)
struct BP_PlayerManager_C_EventManagerStart final
{
public:
	bool                                          EnableTick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visibility;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD5[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CD6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD7[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventManagerInterface> K2Node_DynamicCast_AsEvent_Manager_Interface;      // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeforeCutSceneEventManagerStart_bDummy;   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerStart_ReturnValue;            // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD8[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0068(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_EventManagerStart) == 0x000008, "Wrong alignment on BP_PlayerManager_C_EventManagerStart");
static_assert(sizeof(BP_PlayerManager_C_EventManagerStart) == 0x000078, "Wrong size on BP_PlayerManager_C_EventManagerStart");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, EnableTick) == 0x000000, "Member 'BP_PlayerManager_C_EventManagerStart::EnableTick' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, Visibility) == 0x000001, "Member 'BP_PlayerManager_C_EventManagerStart::Visibility' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, ReturnValue) == 0x000002, "Member 'BP_PlayerManager_C_EventManagerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, PlayerList) == 0x000008, "Member 'BP_PlayerManager_C_EventManagerStart::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerManager_C_EventManagerStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_PlayerManager_C_EventManagerStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000030, "Member 'BP_PlayerManager_C_EventManagerStart::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerManager_C_EventManagerStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, K2Node_DynamicCast_AsEvent_Manager_Interface) == 0x000048, "Member 'BP_PlayerManager_C_EventManagerStart::K2Node_DynamicCast_AsEvent_Manager_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_PlayerManager_C_EventManagerStart::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_BeforeCutSceneEventManagerStart_bDummy) == 0x000059, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_BeforeCutSceneEventManagerStart_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_EventManagerStart_ReturnValue) == 0x00005A, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_EventManagerStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_IsValid_ReturnValue) == 0x00005B, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerStart, CallFunc_GetPlayerList_ReturnValue) == 0x000068, "Member 'BP_PlayerManager_C_EventManagerStart::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.EventManagerEnd
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerManager_C_EventManagerEnd final
{
public:
	bool                                          RestoreEnableTick;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RestoreVisibility;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD9[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CDA[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventManagerInterface> K2Node_DynamicCast_AsEvent_Manager_Interface;      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerEnd_ReturnValue;              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CDB[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CDC[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_EventManagerEnd) == 0x000008, "Wrong alignment on BP_PlayerManager_C_EventManagerEnd");
static_assert(sizeof(BP_PlayerManager_C_EventManagerEnd) == 0x000060, "Wrong size on BP_PlayerManager_C_EventManagerEnd");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, RestoreEnableTick) == 0x000000, "Member 'BP_PlayerManager_C_EventManagerEnd::RestoreEnableTick' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, RestoreVisibility) == 0x000001, "Member 'BP_PlayerManager_C_EventManagerEnd::RestoreVisibility' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, ReturnValue) == 0x000002, "Member 'BP_PlayerManager_C_EventManagerEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, PlayerList) == 0x000008, "Member 'BP_PlayerManager_C_EventManagerEnd::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerManager_C_EventManagerEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_PlayerManager_C_EventManagerEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, K2Node_DynamicCast_AsEvent_Manager_Interface) == 0x000030, "Member 'BP_PlayerManager_C_EventManagerEnd::K2Node_DynamicCast_AsEvent_Manager_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerManager_C_EventManagerEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_EventManagerEnd_ReturnValue) == 0x000042, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_EventManagerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_EventManagerEnd, CallFunc_GetPlayerList_ReturnValue) == 0x000050, "Member 'BP_PlayerManager_C_EventManagerEnd::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetCommandAccelerator
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerManager_C_GetCommandAccelerator final
{
public:
	struct FAcceleratorParam                      Command;                                           // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnable;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CDD[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CDE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Accelerator_ReturnValue;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CDF[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      CallFunc_GetCommandAccelerator_Command;            // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCommandAccelerator_Owner;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetCommandAccelerator) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetCommandAccelerator");
static_assert(sizeof(BP_PlayerManager_C_GetCommandAccelerator) == 0x000050, "Wrong size on BP_PlayerManager_C_GetCommandAccelerator");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, Command) == 0x000000, "Member 'BP_PlayerManager_C_GetCommandAccelerator::Command' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, IsEnable) == 0x00000C, "Member 'BP_PlayerManager_C_GetCommandAccelerator::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, CallFunc_GetPlayer_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_GetCommandAccelerator::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000018, "Member 'BP_PlayerManager_C_GetCommandAccelerator::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerManager_C_GetCommandAccelerator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, K2Node_DynamicCast_AsPlayer_Interface) == 0x000028, "Member 'BP_PlayerManager_C_GetCommandAccelerator::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlayerManager_C_GetCommandAccelerator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, CallFunc_IsActiveSAS_Accelerator_ReturnValue) == 0x000039, "Member 'BP_PlayerManager_C_GetCommandAccelerator::CallFunc_IsActiveSAS_Accelerator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, CallFunc_GetCommandAccelerator_Command) == 0x00003C, "Member 'BP_PlayerManager_C_GetCommandAccelerator::CallFunc_GetCommandAccelerator_Command' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCommandAccelerator, CallFunc_GetCommandAccelerator_Owner) == 0x000048, "Member 'BP_PlayerManager_C_GetCommandAccelerator::CallFunc_GetCommandAccelerator_Owner' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerWeaponActorList
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerManager_C_GetPlayerWeaponActorList final
{
public:
	class AActor*                                 OwnerPlayer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGetPlayerWeaponType                          Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CE0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         WeaponList;                                        // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE1[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetPlayerWeaponList_WeaponList;           // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetPlayerWeaponActorList) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPlayerWeaponActorList");
static_assert(sizeof(BP_PlayerManager_C_GetPlayerWeaponActorList) == 0x000048, "Wrong size on BP_PlayerManager_C_GetPlayerWeaponActorList");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, OwnerPlayer) == 0x000000, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, Type) == 0x000008, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, WeaponList) == 0x000010, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::WeaponList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000020, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerWeaponActorList, CallFunc_GetPlayerWeaponList_WeaponList) == 0x000038, "Member 'BP_PlayerManager_C_GetPlayerWeaponActorList::CallFunc_GetPlayerWeaponList_WeaponList' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetMainPlayerCostumeID
// 0x00F8 (0x00F8 - 0x0000)
struct BP_PlayerManager_C_GetMainPlayerCostumeID final
{
public:
	int32                                         CostumeId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CE2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE3[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x0024(0x00D0)(NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetMainPlayerCostumeID) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetMainPlayerCostumeID");
static_assert(sizeof(BP_PlayerManager_C_GetMainPlayerCostumeID) == 0x0000F8, "Wrong size on BP_PlayerManager_C_GetMainPlayerCostumeID");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, CostumeId) == 0x000000, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::CostumeId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, Temp_byte_Variable) == 0x000004, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, CallFunc_GetPlayer_ReturnValue) == 0x000008, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x000024, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetMainPlayerCostumeID, CallFunc_GetPlayerID_ReturnValue) == 0x0000F4, "Member 'BP_PlayerManager_C_GetMainPlayerCostumeID::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetCameraPitchMaxAngle
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_GetCameraPitchMaxAngle final
{
public:
	float                                         MaxLowAngle;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxUpAngle;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetCameraPitchMaxAngle) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetCameraPitchMaxAngle");
static_assert(sizeof(BP_PlayerManager_C_GetCameraPitchMaxAngle) == 0x000008, "Wrong size on BP_PlayerManager_C_GetCameraPitchMaxAngle");
static_assert(offsetof(BP_PlayerManager_C_GetCameraPitchMaxAngle, MaxLowAngle) == 0x000000, "Member 'BP_PlayerManager_C_GetCameraPitchMaxAngle::MaxLowAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetCameraPitchMaxAngle, MaxUpAngle) == 0x000004, "Member 'BP_PlayerManager_C_GetCameraPitchMaxAngle::MaxUpAngle' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsInAntiWarpField
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_IsInAntiWarpField final
{
public:
	bool                                          bInAntiWarp;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            LOverlapList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class ARSCharacterBase*                       LPlayer;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_IsInAntiWarpField) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsInAntiWarpField");
static_assert(sizeof(BP_PlayerManager_C_IsInAntiWarpField) == 0x000020, "Wrong size on BP_PlayerManager_C_IsInAntiWarpField");
static_assert(offsetof(BP_PlayerManager_C_IsInAntiWarpField, bInAntiWarp) == 0x000000, "Member 'BP_PlayerManager_C_IsInAntiWarpField::bInAntiWarp' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsInAntiWarpField, LOverlapList) == 0x000008, "Member 'BP_PlayerManager_C_IsInAntiWarpField::LOverlapList' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsInAntiWarpField, LPlayer) == 0x000018, "Member 'BP_PlayerManager_C_IsInAntiWarpField::LPlayer' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadRecover
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingDeadRecover final
{
public:
	bool                                          Playing;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingDeadRecover_IsPlaying;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingDeadRecover) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingDeadRecover");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingDeadRecover) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingDeadRecover");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadRecover, Playing) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingDeadRecover::Playing' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadRecover, CallFunc_IsPlayingDeadRecover_IsPlaying) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingDeadRecover::CallFunc_IsPlayingDeadRecover_IsPlaying' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsForceBrainField
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_IsForceBrainField final
{
public:
	bool                                          bInfinite;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsForceBrainField) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsForceBrainField");
static_assert(sizeof(BP_PlayerManager_C_IsForceBrainField) == 0x000001, "Wrong size on BP_PlayerManager_C_IsForceBrainField");
static_assert(offsetof(BP_PlayerManager_C_IsForceBrainField, bInfinite) == 0x000000, "Member 'BP_PlayerManager_C_IsForceBrainField::bInfinite' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsDisableGameOver
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_IsDisableGameOver final
{
public:
	bool                                          Param_bDisableGameOver;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsDisableGameOver) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsDisableGameOver");
static_assert(sizeof(BP_PlayerManager_C_IsDisableGameOver) == 0x000018, "Wrong size on BP_PlayerManager_C_IsDisableGameOver");
static_assert(offsetof(BP_PlayerManager_C_IsDisableGameOver, Param_bDisableGameOver) == 0x000000, "Member 'BP_PlayerManager_C_IsDisableGameOver::Param_bDisableGameOver' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsDisableGameOver, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_PlayerManager_C_IsDisableGameOver::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsDisableGameOver, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_IsDisableGameOver::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetSkillData
// 0x0034 (0x0034 - 0x0000)
struct BP_PlayerManager_C_GetSkillData final
{
public:
	EPlayerSkill                                  Skill_id_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE6[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersSkillData                   Skill_data;                                        // 0x0004(0x0024)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I_index;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetSkillData) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetSkillData");
static_assert(sizeof(BP_PlayerManager_C_GetSkillData) == 0x000034, "Wrong size on BP_PlayerManager_C_GetSkillData");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, Skill_id_in) == 0x000000, "Member 'BP_PlayerManager_C_GetSkillData::Skill_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, Return) == 0x000001, "Member 'BP_PlayerManager_C_GetSkillData::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, Skill_data) == 0x000004, "Member 'BP_PlayerManager_C_GetSkillData::Skill_data' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, I_index) == 0x000028, "Member 'BP_PlayerManager_C_GetSkillData::I_index' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerManager_C_GetSkillData::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetSkillData, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000030, "Member 'BP_PlayerManager_C_GetSkillData::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsDisableBrainFieldFlag
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerManager_C_IsDisableBrainFieldFlag final
{
public:
	bool                                          Param_bDisableBrainFieldFlag;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsDisableBrainFieldFlag) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsDisableBrainFieldFlag");
static_assert(sizeof(BP_PlayerManager_C_IsDisableBrainFieldFlag) == 0x000001, "Wrong size on BP_PlayerManager_C_IsDisableBrainFieldFlag");
static_assert(offsetof(BP_PlayerManager_C_IsDisableBrainFieldFlag, Param_bDisableBrainFieldFlag) == 0x000000, "Member 'BP_PlayerManager_C_IsDisableBrainFieldFlag::Param_bDisableBrainFieldFlag' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsSkillLearned
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerManager_C_IsSkillLearned final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill_id_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Learned;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE7[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      L_userParamMan;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LIndex;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE8[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLearnedSkill_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsSkillLearned) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsSkillLearned");
static_assert(sizeof(BP_PlayerManager_C_IsSkillLearned) == 0x000030, "Wrong size on BP_PlayerManager_C_IsSkillLearned");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_IsSkillLearned::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, Skill_id_in) == 0x000001, "Member 'BP_PlayerManager_C_IsSkillLearned::Skill_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, Learned) == 0x000002, "Member 'BP_PlayerManager_C_IsSkillLearned::Learned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, L_userParamMan) == 0x000008, "Member 'BP_PlayerManager_C_IsSkillLearned::L_userParamMan' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, LIndex) == 0x000010, "Member 'BP_PlayerManager_C_IsSkillLearned::LIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000014, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000015, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'BP_PlayerManager_C_IsSkillLearned::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_GetUserParamManager_UserParamManager) == 0x000020, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsSkillLearned, CallFunc_IsLearnedSkill_ReturnValue) == 0x000029, "Member 'BP_PlayerManager_C_IsSkillLearned::CallFunc_IsLearnedSkill_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetPlayerSkillPoint
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerManager_C_GetPlayerSkillPoint final
{
public:
	EPlayerID                                     Player_id_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CEA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_point;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSkillPoint_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_GetPlayerSkillPoint) == 0x000008, "Wrong alignment on BP_PlayerManager_C_GetPlayerSkillPoint");
static_assert(sizeof(BP_PlayerManager_C_GetPlayerSkillPoint) == 0x000018, "Wrong size on BP_PlayerManager_C_GetPlayerSkillPoint");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerSkillPoint, Player_id_in) == 0x000000, "Member 'BP_PlayerManager_C_GetPlayerSkillPoint::Player_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerSkillPoint, Skill_point) == 0x000004, "Member 'BP_PlayerManager_C_GetPlayerSkillPoint::Skill_point' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerSkillPoint, CallFunc_GetUserParamManager_UserParamManager) == 0x000008, "Member 'BP_PlayerManager_C_GetPlayerSkillPoint::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetPlayerSkillPoint, CallFunc_GetSkillPoint_ReturnValue) == 0x000010, "Member 'BP_PlayerManager_C_GetPlayerSkillPoint::CallFunc_GetSkillPoint_ReturnValue' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.GetLearnedSkillParameter
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerManager_C_GetLearnedSkillParameter final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSkill                                  Skill;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLearned;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CEB[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Parameter;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Parameter2;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LParameter2;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LParameter;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbLearned;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillData_return;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CEC[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersSkillData                   CallFunc_GetSkillData_skill_data;                  // 0x0018(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillLearned_learned;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_GetLearnedSkillParameter) == 0x000004, "Wrong alignment on BP_PlayerManager_C_GetLearnedSkillParameter");
static_assert(sizeof(BP_PlayerManager_C_GetLearnedSkillParameter) == 0x000040, "Wrong size on BP_PlayerManager_C_GetLearnedSkillParameter");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, PlayerId) == 0x000000, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, Skill) == 0x000001, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::Skill' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, bLearned) == 0x000002, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::bLearned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, Parameter) == 0x000004, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::Parameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, Parameter2) == 0x000008, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::Parameter2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, LParameter2) == 0x00000C, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::LParameter2' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, LParameter) == 0x000010, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::LParameter' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, LbLearned) == 0x000014, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::LbLearned' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, CallFunc_GetSkillData_return) == 0x000015, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::CallFunc_GetSkillData_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, CallFunc_GetSkillData_skill_data) == 0x000018, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::CallFunc_GetSkillData_skill_data' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_GetLearnedSkillParameter, CallFunc_IsSkillLearned_learned) == 0x00003C, "Member 'BP_PlayerManager_C_GetLearnedSkillParameter::CallFunc_IsSkillLearned_learned' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsHologramOn
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_IsHologramOn final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseHologram_bUse;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsHologramOn) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsHologramOn");
static_assert(sizeof(BP_PlayerManager_C_IsHologramOn) == 0x000003, "Wrong size on BP_PlayerManager_C_IsHologramOn");
static_assert(offsetof(BP_PlayerManager_C_IsHologramOn, bON) == 0x000000, "Member 'BP_PlayerManager_C_IsHologramOn::bON' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHologramOn, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsHologramOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsHologramOn, CallFunc_IsUseHologram_bUse) == 0x000002, "Member 'BP_PlayerManager_C_IsHologramOn::CallFunc_IsUseHologram_bUse' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsEnpcSASLinkAble
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerManager_C_IsEnpcSASLinkAble final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CED[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnpcSASLinkAble_self_CastInput;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnpcSASLinkAble_bOK;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsEnpcSASLinkAble) == 0x000008, "Wrong alignment on BP_PlayerManager_C_IsEnpcSASLinkAble");
static_assert(sizeof(BP_PlayerManager_C_IsEnpcSASLinkAble) == 0x000020, "Wrong size on BP_PlayerManager_C_IsEnpcSASLinkAble");
static_assert(offsetof(BP_PlayerManager_C_IsEnpcSASLinkAble, bOK) == 0x000000, "Member 'BP_PlayerManager_C_IsEnpcSASLinkAble::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnpcSASLinkAble, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsEnpcSASLinkAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnpcSASLinkAble, CallFunc_IsEnpcSASLinkAble_self_CastInput) == 0x000008, "Member 'BP_PlayerManager_C_IsEnpcSASLinkAble::CallFunc_IsEnpcSASLinkAble_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsEnpcSASLinkAble, CallFunc_IsEnpcSASLinkAble_bOK) == 0x000018, "Member 'BP_PlayerManager_C_IsEnpcSASLinkAble::CallFunc_IsEnpcSASLinkAble_bOK' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsBrainCrashAccessExtraTime
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerManager_C_IsBrainCrashAccessExtraTime final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CEE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraTime;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerManager_C_IsBrainCrashAccessExtraTime) == 0x000004, "Wrong alignment on BP_PlayerManager_C_IsBrainCrashAccessExtraTime");
static_assert(sizeof(BP_PlayerManager_C_IsBrainCrashAccessExtraTime) == 0x000008, "Wrong size on BP_PlayerManager_C_IsBrainCrashAccessExtraTime");
static_assert(offsetof(BP_PlayerManager_C_IsBrainCrashAccessExtraTime, bEnable) == 0x000000, "Member 'BP_PlayerManager_C_IsBrainCrashAccessExtraTime::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsBrainCrashAccessExtraTime, ExtraTime) == 0x000004, "Member 'BP_PlayerManager_C_IsBrainCrashAccessExtraTime::ExtraTime' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsExecResurrect
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_IsExecResurrect final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecRessurect_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecRessurect_ReturnValue_1;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsExecResurrect) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsExecResurrect");
static_assert(sizeof(BP_PlayerManager_C_IsExecResurrect) == 0x000003, "Wrong size on BP_PlayerManager_C_IsExecResurrect");
static_assert(offsetof(BP_PlayerManager_C_IsExecResurrect, bExec) == 0x000000, "Member 'BP_PlayerManager_C_IsExecResurrect::bExec' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecResurrect, CallFunc_IsExecRessurect_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsExecResurrect::CallFunc_IsExecRessurect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecResurrect, CallFunc_IsExecRessurect_ReturnValue_1) == 0x000002, "Member 'BP_PlayerManager_C_IsExecResurrect::CallFunc_IsExecRessurect_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsExecNpcReviveDirection
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerManager_C_IsExecNpcReviveDirection final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecRevive_bExec;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsExecNpcReviveDirection) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsExecNpcReviveDirection");
static_assert(sizeof(BP_PlayerManager_C_IsExecNpcReviveDirection) == 0x000003, "Wrong size on BP_PlayerManager_C_IsExecNpcReviveDirection");
static_assert(offsetof(BP_PlayerManager_C_IsExecNpcReviveDirection, bExec) == 0x000000, "Member 'BP_PlayerManager_C_IsExecNpcReviveDirection::bExec' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecNpcReviveDirection, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerManager_C_IsExecNpcReviveDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecNpcReviveDirection, CallFunc_IsExecRevive_bExec) == 0x000002, "Member 'BP_PlayerManager_C_IsExecNpcReviveDirection::CallFunc_IsExecRevive_bExec' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsExecNpcReviveDirection_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecNpcReviveDirection_bExec;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP");
static_assert(sizeof(BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP");
static_assert(offsetof(BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP, CallFunc_IsExecNpcReviveDirection_bExec) == 0x000001, "Member 'BP_PlayerManager_C_IsExecNpcReviveDirection_CallFromCPP::CallFunc_IsExecNpcReviveDirection_bExec' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsExecResurrect_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsExecResurrect_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecResurrect_bExec;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsExecResurrect_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsExecResurrect_CallFromCPP");
static_assert(sizeof(BP_PlayerManager_C_IsExecResurrect_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerManager_C_IsExecResurrect_CallFromCPP");
static_assert(offsetof(BP_PlayerManager_C_IsExecResurrect_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsExecResurrect_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsExecResurrect_CallFromCPP, CallFunc_IsExecResurrect_bExec) == 0x000001, "Member 'BP_PlayerManager_C_IsExecResurrect_CallFromCPP::CallFunc_IsExecResurrect_bExec' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDeadRecover_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingDeadRecover_Playing;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP, CallFunc_IsPlayingDeadRecover_Playing) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingDeadRecover_CallFromCPP::CallFunc_IsPlayingDeadRecover_Playing' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingDead_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingDead_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingDeadGameOver_IsPlaying;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingDead_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingDead_CallFromCPP");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingDead_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingDead_CallFromCPP");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDead_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingDead_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingDead_CallFromCPP, CallFunc_IsPlayingDeadGameOver_IsPlaying) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingDead_CallFromCPP::CallFunc_IsPlayingDeadGameOver_IsPlaying' has a wrong offset!");

// Function BP_PlayerManager.BP_PlayerManager_C.IsPlayingRecover_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerManager_C_IsPlayingRecover_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingDeadRecover_Playing;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerManager_C_IsPlayingRecover_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerManager_C_IsPlayingRecover_CallFromCPP");
static_assert(sizeof(BP_PlayerManager_C_IsPlayingRecover_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerManager_C_IsPlayingRecover_CallFromCPP");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingRecover_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerManager_C_IsPlayingRecover_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerManager_C_IsPlayingRecover_CallFromCPP, CallFunc_IsPlayingDeadRecover_Playing) == 0x000001, "Member 'BP_PlayerManager_C_IsPlayingRecover_CallFromCPP::CallFunc_IsPlayingDeadRecover_Playing' has a wrong offset!");

}

