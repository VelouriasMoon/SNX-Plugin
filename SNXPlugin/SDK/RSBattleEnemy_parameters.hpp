#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSBattleEnemy

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "StealthWeakData_structs.hpp"
#include "ST_em_ChangeTimeDilation_structs.hpp"
#include "AiParamEnemy_structs.hpp"
#include "MovieScene_structs.hpp"
#include "Enum_EnemyAiType_structs.hpp"
#include "AnimScaleHitStopEnemy_structs.hpp"
#include "ST_emChangeAiTypeInfo_structs.hpp"
#include "Enum_EnemySound_structs.hpp"
#include "FEnemyCrashVisionEffectInfo_structs.hpp"
#include "FEnemyCrashVisionEffectData_structs.hpp"
#include "UniqueObjectContainerEnemyInfo_structs.hpp"
#include "DE_em_ChangeTimeDilation_structs.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"
#include "Enum_EnemySpawnState_structs.hpp"
#include "Enum_EnemyBrainFieldProgress_structs.hpp"
#include "BadStateAddParticleData_structs.hpp"
#include "CharactersParameter_structs.hpp"
#include "WeakObjectRecommendEnemy_structs.hpp"
#include "UMG_structs.hpp"
#include "Enum_EnemyAvoidType_structs.hpp"
#include "Enum_EnemyRange_structs.hpp"
#include "BadStateParticleData_structs.hpp"
#include "Enum_em0300_structs.hpp"
#include "WeakObjectEntryEnemy_structs.hpp"
#include "ST_emEnableWeakData_structs.hpp"
#include "Enum_EnemyMotionParam_structs.hpp"
#include "BattleAIStateType_structs.hpp"


namespace SDK::Params
{

// Function RSBattleEnemy.RSBattleEnemy_C.ExecuteUbergraph_RSBattleEnemy
// 0x0760 (0x0760 - 0x0000)
struct RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBeginActor_1;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bBeginActor;                          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           K2Node_Event_PlayerEndMontage;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E0C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainCrashAccessOn_Dummy;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainCrashAccessOff_Dummy;              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E0D[0x5];                                     // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E0E[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject_1;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SwitchDispCore_Dummy;                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E0F[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_BrainCrash_dummy;               // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E10[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E11[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHCHitResult>                   K2Node_Event_Result;                               // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnHitDamageCall_ret;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bSuperArmor;                          // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E12[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ClaimantName;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_ComponentBoundEvent_hitResult;              // 0x00B8(0x01C0)(ConstParm, ContainsInstancedReference)
	int32                                         K2Node_ComponentBoundEvent_damage;                 // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state_1;            // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E13[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_attacker;               // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_ComponentBoundEvent_bad_state;              // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   K2Node_Event_bad;                                  // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E14[0x2];                                     // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E15[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_IdlingSec;                            // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_IdleRestoreDelay;                     // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnEnemyAssetLoad_Return;                  // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E16[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x02C4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x034D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E17[0x2];                                     // 0x034E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E18[0x3];                                     // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E19[0x3];                                     // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1A[0x7];                                     // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupAnimController_Dummy;                // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1B[0x6];                                     // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_CustomEvent_Montage;                        // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Interrupted;                    // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDestroy_Dummy;                          // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1C[0x2];                                     // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Sin_ReturnValue;                          // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CreateEnemyWeapon_Dummy;                  // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1D[0x2];                                     // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_discoverPos;                          // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcFellOutOfWorld_Dummy;                 // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInBeginPlay_InBegin;                    // 0x0422(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDestroy_Dummy_1;                        // 0x0423(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartHideArmor_dummy;                   // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InitSaveBodyWeakValue_Dummy;              // 0x0425(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1E[0x2];                                     // 0x0426(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddCharaCollisionList_ListNo;             // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E1F[0x3];                                     // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEnemyEnumLength_Length;                // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E20[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0438(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UBP_EnemyFixParam_C*                    CallFunc_GetEnemyFixParam_Param;                   // 0x0448(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetGroundLocationSimple_ReturnValue;      // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E21[0x4];                                     // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          CallFunc_GetCoreCollision_CoreCollision;           // 0x0460(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartAction_Dummy;                      // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x046A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x046B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E22[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0470(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x047A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x047B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x047C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E23[0x3];                                     // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1;        // 0x0480(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyName_dummy;                       // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x048B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckRepopCharaInList_Inlist;             // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventDeath_Dummy;                         // 0x048D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E24[0x2];                                     // 0x048E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TriggerEffectManager_C*             CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager; // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x049A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x049B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E25[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04A0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x04E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E26[0x2];                                     // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetWalkableFloorAngle_ReturnValue;     // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ElapsedTime;                          // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ToTargetLenge;                        // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ForceDisp;                            // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x04F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x04F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E27[0x5];                                     // 0x04F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_ReplaceHitResult_ReturnValue;             // 0x04F8(0x01C0)(ContainsInstancedReference)
	float                                         CallFunc_UpdateOutRangeFade_DeitherValue;          // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x06BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x06BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E28[0x2];                                     // 0x06BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2;        // 0x06C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E29[0x7];                                     // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x06D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDamageParam_dummy;                     // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E2A[0x7];                                     // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x06E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDevelopmentBP_IsDevelopment;            // 0x06F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x06F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E2B[0x1];                                     // 0x06F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorLevelAreaID_locationID;           // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorLevelAreaID_AreaID;               // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnCrashVisionDead_ReturnValue;            // 0x06FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E2C[0x2];                                     // 0x06FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0700(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UBP_EnemyBattleLog_C*                   CallFunc_AddComponent_ReturnValue;                 // 0x0730(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0738(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_SwitchDispCore_Dummy_1;                   // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x0749(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E2D[0x2];                                     // 0x074A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x074C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy) == 0x000010, "Wrong alignment on RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy");
static_assert(sizeof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy) == 0x000760, "Wrong size on RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, EntryPoint) == 0x000000, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::EntryPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_bBeginActor_1) == 0x000004, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_bBeginActor_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsDead_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_bBeginActor) == 0x000007, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_PlayerEndMontage) == 0x000008, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_PlayerEndMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetBattleManager_BattleManager) == 0x000010, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsRSEnemy_Anim_Instance) == 0x000020, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsRSEnemy_Anim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetBlackboard_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_MakeLiteralName_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000040, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsRSEnemy_Anim_Instance_1) == 0x000048, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsRSEnemy_Anim_Instance_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnBrainCrashAccessOn_Dummy) == 0x000051, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnBrainCrashAccessOn_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnBrainCrashAccessOff_Dummy) == 0x000052, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnBrainCrashAccessOff_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetBrainCore_CoreObject) == 0x000058, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetBrainCore_CoreObject_1) == 0x000068, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetBrainCore_CoreObject_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_2) == 0x000070, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_3) == 0x000071, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsVisible_ReturnValue) == 0x000072, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsVisible_ReturnValue_1) == 0x000073, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SwitchDispCore_Dummy) == 0x000074, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SwitchDispCore_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x000078, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_4) == 0x000081, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OutputLog_BrainCrash_dummy) == 0x000082, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OutputLog_BrainCrash_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_DeltaSeconds) == 0x000084, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, Temp_bool_IsClosed_Variable) == 0x000088, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_Result) == 0x000090, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnHitDamageCall_ret) == 0x0000AC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnHitDamageCall_ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_bSuperArmor) == 0x0000AD, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_ClaimantName) == 0x0000B0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_hitResult) == 0x0000B8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_hitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_damage) == 0x000278, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_bad_state_1) == 0x00027C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_bad_state_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_attacker) == 0x000280, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_bad_state) == 0x000288, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_bad_state' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_bad) == 0x000289, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_bad' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00028C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_EndPlayReason) == 0x000290, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_IdlingSec) == 0x000294, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_IdleRestoreDelay) == 0x000298, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_IdleRestoreDelay' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnEnemyAssetLoad_Return) == 0x00029C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnEnemyAssetLoad_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_HitComponent) == 0x0002A0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_OtherActor) == 0x0002A8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_OtherComp) == 0x0002B0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0002B8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_ComponentBoundEvent_Hit) == 0x0002C4, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_bBlockingHit) == 0x00034C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_bInitialOverlap) == 0x00034D, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_Time) == 0x000350, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_Distance) == 0x000354, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_Location) == 0x000358, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_ImpactPoint) == 0x000364, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_Normal) == 0x000370, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_ImpactNormal) == 0x00037C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_PhysMat) == 0x000388, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_HitActor) == 0x000390, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_HitComponent) == 0x000398, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_HitBoneName) == 0x0003A0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_HitItem) == 0x0003A8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_FaceIndex) == 0x0003AC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_TraceStart) == 0x0003B0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakHitResult_TraceEnd) == 0x0003BC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetCollisionObjectType_ReturnValue) == 0x0003C8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakVector_X) == 0x0003CC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakVector_Y) == 0x0003D0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BreakVector_Z) == 0x0003D4, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_SwitchEnum_CmpSuccess) == 0x0003D8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_Abs_ReturnValue) == 0x0003DC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetEnemyManager_Manager) == 0x0003E0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_5) == 0x0003E8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0003F0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_6) == 0x0003F8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SetupAnimController_Dummy) == 0x0003F9, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SetupAnimController_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_CustomEvent_Montage) == 0x000400, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_CustomEvent_Montage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_CustomEvent_Interrupted) == 0x000408, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_CustomEvent_Interrupted' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnDestroy_Dummy) == 0x000409, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnDestroy_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_Sin_ReturnValue) == 0x00040C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000410, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_CreateEnemyWeapon_Dummy) == 0x000411, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_CreateEnemyWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_discoverPos) == 0x000414, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_discoverPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_ProcFellOutOfWorld_Dummy) == 0x000420, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_ProcFellOutOfWorld_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsDead_bDead) == 0x000421, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsInBeginPlay_InBegin) == 0x000422, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsInBeginPlay_InBegin' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnDestroy_Dummy_1) == 0x000423, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnDestroy_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnStartHideArmor_dummy) == 0x000424, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnStartHideArmor_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_InitSaveBodyWeakValue_Dummy) == 0x000425, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_InitSaveBodyWeakValue_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_AddCharaCollisionList_ListNo) == 0x000428, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_AddCharaCollisionList_ListNo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_7) == 0x00042C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetEnemyEnumLength_Length) == 0x000430, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetEnemyEnumLength_Length' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetDisplayName_ReturnValue) == 0x000438, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetEnemyFixParam_Param) == 0x000448, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetEnemyFixParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetGroundLocationSimple_ReturnValue) == 0x000450, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetGroundLocationSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetCoreCollision_CoreCollision) == 0x000460, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetCoreCollision_CoreCollision' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_8) == 0x000468, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnStartAction_Dummy) == 0x000469, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnStartAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_9) == 0x00046A, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_10) == 0x00046B, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000470, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000478, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, Temp_bool_Has_Been_Initd_Variable) == 0x000479, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, Temp_bool_IsClosed_Variable_1) == 0x00047A, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_11) == 0x00047B, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00047C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1) == 0x000480, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess_3) == 0x000488, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SetEnemyName_dummy) == 0x000489, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SetEnemyName_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x00048A, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BooleanAND_ReturnValue) == 0x00048B, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_CheckRepopCharaInList_Inlist) == 0x00048C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_CheckRepopCharaInList_Inlist' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_EventDeath_Dummy) == 0x00048D, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_EventDeath_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager) == 0x000490, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetTriggerEffectManager_BP_TriggerEffectManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_12) == 0x000498, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_MakeLiteralByte_ReturnValue) == 0x000499, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_13) == 0x00049A, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_14) == 0x00049B, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_MakeTransform_ReturnValue) == 0x0004A0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0004D0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_FinishSpawningActor_ReturnValue) == 0x0004D8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x0004E0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x0004E1, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_K2_GetWalkableFloorAngle_ReturnValue) == 0x0004E4, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_K2_GetWalkableFloorAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_ElapsedTime) == 0x0004E8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_ElapsedTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_ToTargetLenge) == 0x0004EC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_ToTargetLenge' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_Event_ForceDisp) == 0x0004F0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_Event_ForceDisp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_15) == 0x0004F1, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_16) == 0x0004F2, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_ReplaceHitResult_ReturnValue) == 0x0004F8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_ReplaceHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_UpdateOutRangeFade_DeitherValue) == 0x0006B8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_UpdateOutRangeFade_DeitherValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_17) == 0x0006BC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_18) == 0x0006BD, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2) == 0x0006C0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess_4) == 0x0006C8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetGameMode_ReturnValue) == 0x0006D0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SetDamageParam_dummy) == 0x0006D8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SetDamageParam_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x0006E0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_DynamicCast_bSuccess_5) == 0x0006F0, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsDevelopmentBP_IsDevelopment) == 0x0006F1, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsDevelopmentBP_IsDevelopment' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsValid_ReturnValue_19) == 0x0006F2, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetActorLevelAreaID_locationID) == 0x0006F4, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetActorLevelAreaID_locationID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_GetActorLevelAreaID_AreaID) == 0x0006F8, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_GetActorLevelAreaID_AreaID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, Temp_bool_Has_Been_Initd_Variable_1) == 0x0006FC, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_OnCrashVisionDead_ReturnValue) == 0x0006FD, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_OnCrashVisionDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, Temp_struct_Variable) == 0x000700, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_AddComponent_ReturnValue) == 0x000730, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_CreateDelegate_OutputDelegate) == 0x000738, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_SwitchDispCore_Dummy_1) == 0x000748, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_SwitchDispCore_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x000749, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy, K2Node_CreateDelegate_OutputDelegate_1) == 0x00074C, "Member 'RSBattleEnemy_C_ExecuteUbergraph_RSBattleEnemy::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateOutRangeFade_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_UpdateOutRangeFade_Native final
{
public:
	float                                         ToTargetLenge;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDisp;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateOutRangeFade_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateOutRangeFade_Native");
static_assert(sizeof(RSBattleEnemy_C_UpdateOutRangeFade_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_UpdateOutRangeFade_Native");
static_assert(offsetof(RSBattleEnemy_C_UpdateOutRangeFade_Native, ToTargetLenge) == 0x000000, "Member 'RSBattleEnemy_C_UpdateOutRangeFade_Native::ToTargetLenge' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateOutRangeFade_Native, ForceDisp) == 0x000004, "Member 'RSBattleEnemy_C_UpdateOutRangeFade_Native::ForceDisp' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdatePreviousElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_UpdatePreviousElapsedTime final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdatePreviousElapsedTime) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdatePreviousElapsedTime");
static_assert(sizeof(RSBattleEnemy_C_UpdatePreviousElapsedTime) == 0x000004, "Wrong size on RSBattleEnemy_C_UpdatePreviousElapsedTime");
static_assert(offsetof(RSBattleEnemy_C_UpdatePreviousElapsedTime, ElapsedTime) == 0x000000, "Member 'RSBattleEnemy_C_UpdatePreviousElapsedTime::ElapsedTime' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.setEmPosDiscover
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetEmPosDiscover final
{
public:
	struct FVector                                DiscoverPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetEmPosDiscover) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetEmPosDiscover");
static_assert(sizeof(RSBattleEnemy_C_SetEmPosDiscover) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetEmPosDiscover");
static_assert(offsetof(RSBattleEnemy_C_SetEmPosDiscover, DiscoverPos) == 0x000000, "Member 'RSBattleEnemy_C_SetEmPosDiscover::DiscoverPos' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReceiveMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_ReceiveMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ReceiveMontageBlendingOut) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ReceiveMontageBlendingOut");
static_assert(sizeof(RSBattleEnemy_C_ReceiveMontageBlendingOut) == 0x000010, "Wrong size on RSBattleEnemy_C_ReceiveMontageBlendingOut");
static_assert(offsetof(RSBattleEnemy_C_ReceiveMontageBlendingOut, Montage) == 0x000000, "Member 'RSBattleEnemy_C_ReceiveMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceiveMontageBlendingOut, Interrupted) == 0x000008, "Member 'RSBattleEnemy_C_ReceiveMontageBlendingOut::Interrupted' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'RSBattleEnemy_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EventPhysicsIdling
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_EventPhysicsIdling final
{
public:
	float                                         IdlingSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleRestoreDelay;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_EventPhysicsIdling) == 0x000004, "Wrong alignment on RSBattleEnemy_C_EventPhysicsIdling");
static_assert(sizeof(RSBattleEnemy_C_EventPhysicsIdling) == 0x000008, "Wrong size on RSBattleEnemy_C_EventPhysicsIdling");
static_assert(offsetof(RSBattleEnemy_C_EventPhysicsIdling, IdlingSec) == 0x000000, "Member 'RSBattleEnemy_C_EventPhysicsIdling::IdlingSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventPhysicsIdling, IdleRestoreDelay) == 0x000004, "Member 'RSBattleEnemy_C_EventPhysicsIdling::IdleRestoreDelay' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ReceiveEndPlay");
static_assert(sizeof(RSBattleEnemy_C_ReceiveEndPlay) == 0x000001, "Wrong size on RSBattleEnemy_C_ReceiveEndPlay");
static_assert(offsetof(RSBattleEnemy_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RSBattleEnemy_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOn
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOn final
{
public:
	EHCBadState                                   bad;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOn) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOn");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOn) == 0x000001, "Wrong size on RSBattleEnemy_C_BadStateEffectOn");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOn, bad) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOn::bad' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature");
static_assert(sizeof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature) == 0x000001, "Wrong size on RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature::bad_state' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature final
{
public:
	EHCBadState                                   bad_state;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E2E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature");
static_assert(sizeof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature) == 0x000010, "Wrong size on RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature, bad_state) == 0x000000, "Member 'RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature::bad_state' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature, Attacker) == 0x000008, "Member 'RSBattleEnemy_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature::Attacker' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature");
static_assert(sizeof(RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature) == 0x0001C8, "Wrong size on RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature, Damage) == 0x0001C0, "Member 'RSBattleEnemy_C_BndEvt__DamageAccept_K2Node_ComponentBoundEvent_0_DamageHitDelegate__DelegateSignature::Damage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetSuperArmor
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetSuperArmor final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E2F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetSuperArmor) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetSuperArmor");
static_assert(sizeof(RSBattleEnemy_C_SetSuperArmor) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetSuperArmor");
static_assert(offsetof(RSBattleEnemy_C_SetSuperArmor, bSuperArmor) == 0x000000, "Member 'RSBattleEnemy_C_SetSuperArmor::bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSuperArmor, ClaimantName) == 0x000004, "Member 'RSBattleEnemy_C_SetSuperArmor::ClaimantName' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageAfter
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_DamageAfter final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DamageAfter) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DamageAfter");
static_assert(sizeof(RSBattleEnemy_C_DamageAfter) == 0x000010, "Wrong size on RSBattleEnemy_C_DamageAfter");
static_assert(offsetof(RSBattleEnemy_C_DamageAfter, Result) == 0x000000, "Member 'RSBattleEnemy_C_DamageAfter::Result' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_ReceiveTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_ReceiveTick");
static_assert(sizeof(RSBattleEnemy_C_ReceiveTick) == 0x000004, "Wrong size on RSBattleEnemy_C_ReceiveTick");
static_assert(offsetof(RSBattleEnemy_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainCrashEnd
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_OnBrainCrashEnd final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E30[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PlayerEndMontage;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainCrashEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnBrainCrashEnd");
static_assert(sizeof(RSBattleEnemy_C_OnBrainCrashEnd) == 0x000010, "Wrong size on RSBattleEnemy_C_OnBrainCrashEnd");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashEnd, bBeginActor) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainCrashEnd::bBeginActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashEnd, PlayerEndMontage) == 0x000008, "Member 'RSBattleEnemy_C_OnBrainCrashEnd::PlayerEndMontage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainCrashStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnBrainCrashStart final
{
public:
	bool                                          bBeginActor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainCrashStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnBrainCrashStart");
static_assert(sizeof(RSBattleEnemy_C_OnBrainCrashStart) == 0x000001, "Wrong size on RSBattleEnemy_C_OnBrainCrashStart");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashStart, bBeginActor) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainCrashStart::bBeginActor' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDeadStaging
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_UpdateDeadStaging final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E31[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldPastSec_l;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E32[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotVanish_NotVanish;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotVanish_NotVanish_1;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E33[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E34[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDeadStaging) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateDeadStaging");
static_assert(sizeof(RSBattleEnemy_C_UpdateDeadStaging) == 0x000060, "Wrong size on RSBattleEnemy_C_UpdateDeadStaging");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDeadStaging::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateDeadStaging::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, OldPastSec_l) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDeadStaging::OldPastSec_l' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue_1) == 0x00000D, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_GetEnemyManager_Manager) == 0x000010, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_GetEnemyManager_Manager_1) == 0x000018, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsValid_ReturnValue_3) == 0x000021, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsNotVanish_NotVanish) == 0x000022, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsNotVanish_NotVanish' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsNotVanish_NotVanish_1) == 0x000023, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsNotVanish_NotVanish_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_IsAvatar_IsAvatar) == 0x000024, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000025, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_Less_FloatFloat_ReturnValue) == 0x000026, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000027, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_Add_FloatFloat_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadStaging, CallFunc_Conv_StringToName_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_UpdateDeadStaging::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartDeadStaging
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartDeadStaging final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartDeadStaging) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartDeadStaging");
static_assert(sizeof(RSBattleEnemy_C_StartDeadStaging) == 0x000001, "Wrong size on RSBattleEnemy_C_StartDeadStaging");
static_assert(offsetof(RSBattleEnemy_C_StartDeadStaging, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StartDeadStaging::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDeadCoreEnemy
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnDeadCoreEnemy final
{
public:
	bool                                          CallFunc_OffStealth_Return;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDeadCoreEnemy) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnDeadCoreEnemy");
static_assert(sizeof(RSBattleEnemy_C_OnDeadCoreEnemy) == 0x000001, "Wrong size on RSBattleEnemy_C_OnDeadCoreEnemy");
static_assert(offsetof(RSBattleEnemy_C_OnDeadCoreEnemy, CallFunc_OffStealth_Return) == 0x000000, "Member 'RSBattleEnemy_C_OnDeadCoreEnemy::CallFunc_OffStealth_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartDamageAnimFunc
// 0x02A8 (0x02A8 - 0x0000)
struct RSBattleEnemy_C_StartDamageAnimFunc final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	int32                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x01C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x01C5(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E35[0x2];                                     // 0x01C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 L_AttackObj;                                       // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x01D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E36[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Hit;                                             // 0x01E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_rot;                                             // 0x01F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttractSelf_ReturnValue;             // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicObjectCombo_Return;              // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E37[0x6];                                     // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E38[0x6];                                     // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E39[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAttackdirection_return;                // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E3A[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAttackDirection_attack_direction;      // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAbsolutelyNoReactionBP_ReturnValue;     // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvincible_bInvincible;                 // 0x024D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x024E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E3B[0x1];                                     // 0x024F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDamageReactionDir_ReactionDir;         // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0274(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E3C[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue; // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E3D[0x2];                                     // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartDamageAnimFunc) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartDamageAnimFunc");
static_assert(sizeof(RSBattleEnemy_C_StartDamageAnimFunc) == 0x0002A8, "Wrong size on RSBattleEnemy_C_StartDamageAnimFunc");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, DamageValue) == 0x0001C0, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, IsDown) == 0x0001C4, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::IsDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, Dummy) == 0x0001C5, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, L_AttackObj) == 0x0001C8, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::L_AttackObj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, L_Dir) == 0x0001D0, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::L_Dir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, LAttacker) == 0x0001E0, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, L_Hit) == 0x0001E8, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::L_Hit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, L_rot) == 0x0001F4, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::L_rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_CheckAttractSelf_ReturnValue) == 0x000200, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_CheckAttractSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsPsychicObjectCombo_Return) == 0x000201, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsPsychicObjectCombo_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_GetDebuggingManager_Manager) == 0x000208, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsValid_ReturnValue) == 0x000210, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsValid_ReturnValue_1) == 0x000211, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000218, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, K2Node_DynamicCast_bSuccess) == 0x000220, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000224, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000230, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_GetAttackdirection_return) == 0x00023C, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_GetAttackdirection_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_GetAttackDirection_attack_direction) == 0x000240, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_GetAttackDirection_attack_direction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsAbsolutelyNoReactionBP_ReturnValue) == 0x00024C, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsAbsolutelyNoReactionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsInvincible_bInvincible) == 0x00024D, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsInvincible_bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsValid_ReturnValue_2) == 0x00024E, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000250, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_GetDamageReactionDir_ReactionDir) == 0x00025C, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_GetDamageReactionDir_ReactionDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000268, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, Temp_byte_Variable) == 0x000274, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_Array_Find_ReturnValue) == 0x000278, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00027C, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue) == 0x00027D, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000280, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00028C, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageAnimFunc, CallFunc_FindLookAtRotation_ReturnValue) == 0x000298, "Member 'RSBattleEnemy_C_StartDamageAnimFunc::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BeginMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_BeginMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BeginMoveBackward) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BeginMoveBackward");
static_assert(sizeof(RSBattleEnemy_C_BeginMoveBackward) == 0x000001, "Wrong size on RSBattleEnemy_C_BeginMoveBackward");
static_assert(offsetof(RSBattleEnemy_C_BeginMoveBackward, Result) == 0x000000, "Member 'RSBattleEnemy_C_BeginMoveBackward::Result' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EndMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_EndMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EndMoveBackward) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EndMoveBackward");
static_assert(sizeof(RSBattleEnemy_C_EndMoveBackward) == 0x000001, "Wrong size on RSBattleEnemy_C_EndMoveBackward");
static_assert(offsetof(RSBattleEnemy_C_EndMoveBackward, Result) == 0x000000, "Member 'RSBattleEnemy_C_EndMoveBackward::Result' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsAbleMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsAbleMove final
{
public:
	bool                                          IsAble;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsAbleMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsAbleMove");
static_assert(sizeof(RSBattleEnemy_C_IsAbleMove) == 0x000001, "Wrong size on RSBattleEnemy_C_IsAbleMove");
static_assert(offsetof(RSBattleEnemy_C_IsAbleMove, IsAble) == 0x000000, "Member 'RSBattleEnemy_C_IsAbleMove::IsAble' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHeadLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetHeadLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTopTargetPoint_Point;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetHeadLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetHeadLocation");
static_assert(sizeof(RSBattleEnemy_C_GetHeadLocation) == 0x000018, "Wrong size on RSBattleEnemy_C_GetHeadLocation");
static_assert(offsetof(RSBattleEnemy_C_GetHeadLocation, Location) == 0x000000, "Member 'RSBattleEnemy_C_GetHeadLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetHeadLocation, CallFunc_GetTopTargetPoint_Point) == 0x00000C, "Member 'RSBattleEnemy_C_GetHeadLocation::CallFunc_GetTopTargetPoint_Point' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDamageActorHit
// 0x0878 (0x0878 - 0x0000)
struct RSBattleEnemy_C_OnDamageActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E3E[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01C8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActor*                                 LAttacker;                                         // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           Dummyresult;                                       // 0x01E0(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FHCHitResult                           Result;                                            // 0x03A0(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class AActor*                                 CallFunc_OnDamageActorHit_DamageInfo_Attack;       // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_OnDamageActorHit_DamageInfo_DamageLocation; // 0x0568(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_OnDamageActorHit_DamageInfo_DamageDir;    // 0x0574(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModifyHitResultPrimitiveWeakPoint_ModifiedPrimitive; // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotTargetNative_ReturnValue;            // 0x0585(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E3F[0x2];                                     // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_ReplaceHitResult_ReturnValue;             // 0x0588(0x01C0)(ContainsInstancedReference)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0751(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay; // 0x0752(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E40[0x5];                                     // 0x0753(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker; // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType; // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType; // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget; // 0x0762(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E41[0x5];                                     // 0x0763(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     CallFunc_CheckPlayNexusDriveTelepoAttack_Skill;    // 0x0768(0x00F0)()
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0858(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_Return;                         // 0x0869(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPsychicObjectIdC_ReturnValue;        // 0x086A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Request_Press_Kill_IsSuccess;             // 0x086B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckUniqueObjState_Dummy;                // 0x086C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x086D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CounterAttack_Dummy;                      // 0x086E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_Return_1;                       // 0x086F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitAttackArmor_bHit;                    // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDamageActorHit_Dummy;                   // 0x0871(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDamageActorHit) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnDamageActorHit");
static_assert(sizeof(RSBattleEnemy_C_OnDamageActorHit) == 0x000878, "Wrong size on RSBattleEnemy_C_OnDamageActorHit");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_OnDamageActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, Dummy) == 0x0001C0, "Member 'RSBattleEnemy_C_OnDamageActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, LExtraType) == 0x0001C8, "Member 'RSBattleEnemy_C_OnDamageActorHit::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, LAttacker) == 0x0001D8, "Member 'RSBattleEnemy_C_OnDamageActorHit::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, Dummyresult) == 0x0001E0, "Member 'RSBattleEnemy_C_OnDamageActorHit::Dummyresult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, Result) == 0x0003A0, "Member 'RSBattleEnemy_C_OnDamageActorHit::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_OnDamageActorHit_DamageInfo_Attack) == 0x000560, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_OnDamageActorHit_DamageInfo_Attack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_OnDamageActorHit_DamageInfo_DamageLocation) == 0x000568, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_OnDamageActorHit_DamageInfo_DamageLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_OnDamageActorHit_DamageInfo_DamageDir) == 0x000574, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_OnDamageActorHit_DamageInfo_DamageDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x000580, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_ModifyHitResultPrimitiveWeakPoint_ModifiedPrimitive) == 0x000584, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_ModifyHitResultPrimitiveWeakPoint_ModifiedPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsNotTargetNative_ReturnValue) == 0x000585, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsNotTargetNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_ReplaceHitResult_ReturnValue) == 0x000588, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_ReplaceHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_GetBattleManager_BattleManager) == 0x000748, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue) == 0x000750, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_1) == 0x000751, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay) == 0x000752, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_bEnablePlay' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker) == 0x000758, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType) == 0x000760, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_SlowType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType) == 0x000761, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget) == 0x000762, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPlayNexusDriveTelepoAttack_Skill) == 0x000768, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPlayNexusDriveTelepoAttack_Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000858, "Member 'RSBattleEnemy_C_OnDamageActorHit::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, K2Node_DynamicCast_bSuccess) == 0x000868, "Member 'RSBattleEnemy_C_OnDamageActorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsHitWeak_Return) == 0x000869, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsHitWeak_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckPsychicObjectIdC_ReturnValue) == 0x00086A, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckPsychicObjectIdC_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_Request_Press_Kill_IsSuccess) == 0x00086B, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_Request_Press_Kill_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CheckUniqueObjState_Dummy) == 0x00086C, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CheckUniqueObjState_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsValid_ReturnValue_2) == 0x00086D, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_CounterAttack_Dummy) == 0x00086E, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_CounterAttack_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsHitWeak_Return_1) == 0x00086F, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsHitWeak_Return_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_IsHitAttackArmor_bHit) == 0x000870, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_IsHitAttackArmor_bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageActorHit, CallFunc_OnDamageActorHit_Dummy) == 0x000871, "Member 'RSBattleEnemy_C_OnDamageActorHit::CallFunc_OnDamageActorHit_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDead
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattleEnemy_C_OnDead final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsUnique;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsCV;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E42[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E43[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_Dead_dummy;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E44[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E45[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E46[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotifyKillEnemy_bDummy;                   // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E47[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_2;       // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer_1;               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E48[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_3;       // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotifyKillEnemy_bDummy_1;                 // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartFinishMove_IsStart;                  // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E49[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy_1;                           // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E4A[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDead) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnDead");
static_assert(sizeof(RSBattleEnemy_C_OnDead) == 0x0000B8, "Wrong size on RSBattleEnemy_C_OnDead");
static_assert(offsetof(RSBattleEnemy_C_OnDead, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnDead::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, LIsUnique) == 0x000001, "Member 'RSBattleEnemy_C_OnDead::LIsUnique' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, LIsCV) == 0x000002, "Member 'RSBattleEnemy_C_OnDead::LIsCV' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, LPlayerFixParam) == 0x000008, "Member 'RSBattleEnemy_C_OnDead::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x000018, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_OutputLog_Dead_dummy) == 0x000021, "Member 'RSBattleEnemy_C_OnDead::CallFunc_OutputLog_Dead_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_GetEnemyManager_Manager) == 0x000028, "Member 'RSBattleEnemy_C_OnDead::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000038, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x000050, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsMainPlayer_bMainPlayer) == 0x000061, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_NotifyKillEnemy_bDummy) == 0x000062, "Member 'RSBattleEnemy_C_OnDead::CallFunc_NotifyKillEnemy_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsValid_ReturnValue_2) == 0x000063, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsBPI_Player_Interface_2) == 0x000068, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsBPI_Player_Interface_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsMainPlayer_bMainPlayer_1) == 0x000079, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsMainPlayer_bMainPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsBPI_Player_Interface_3) == 0x000080, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsBPI_Player_Interface_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_NotifyKillEnemy_bDummy_1) == 0x000091, "Member 'RSBattleEnemy_C_OnDead::CallFunc_NotifyKillEnemy_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsValid_ReturnValue_3) == 0x000092, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_StartFinishMove_IsStart) == 0x000093, "Member 'RSBattleEnemy_C_OnDead::CallFunc_StartFinishMove_IsStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_GetDebuggingManager_Manager) == 0x000098, "Member 'RSBattleEnemy_C_OnDead::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_SetHP_bDummy) == 0x0000A0, "Member 'RSBattleEnemy_C_OnDead::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_IsValid_ReturnValue_4) == 0x0000A1, "Member 'RSBattleEnemy_C_OnDead::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, CallFunc_SetHP_bDummy_1) == 0x0000A2, "Member 'RSBattleEnemy_C_OnDead::CallFunc_SetHP_bDummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x0000A8, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDead, K2Node_DynamicCast_bSuccess_5) == 0x0000B0, "Member 'RSBattleEnemy_C_OnDead::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnRevive
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_OnRevive final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnRevive_Dummy;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnRevive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnRevive");
static_assert(sizeof(RSBattleEnemy_C_OnRevive) == 0x000002, "Wrong size on RSBattleEnemy_C_OnRevive");
static_assert(offsetof(RSBattleEnemy_C_OnRevive, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnRevive::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnRevive, CallFunc_OnRevive_Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnRevive::CallFunc_OnRevive_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBattling
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetBattling final
{
public:
	bool                                          bBattling;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetBattling) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetBattling");
static_assert(sizeof(RSBattleEnemy_C_SetBattling) == 0x000002, "Wrong size on RSBattleEnemy_C_SetBattling");
static_assert(offsetof(RSBattleEnemy_C_SetBattling, bBattling) == 0x000000, "Member 'RSBattleEnemy_C_SetBattling::bBattling' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBattling, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetBattling::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.On Hit Damage
// 0x0458 (0x0458 - 0x0000)
struct RSBattleEnemy_C_On_Hit_Damage final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          LbHitDamage;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsPsychicUnique;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E4B[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           L_result;                                          // 0x0018(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class ARSBattlePlayer_C*                      Player;                                            // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHATETYPE                                     Hate;                                              // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E4C[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E4D[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x01F0(0x01C0)(ContainsInstancedReference)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x03B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Electric_ReturnValue;         // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_Return;                           // 0x03C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E4E[0x5];                                     // 0x03C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_1;           // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Fire_ReturnValue;             // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusFlooded_bBadStatus;            // 0x03DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_ReturnValue;             // 0x03DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusOil_bBadStatus;                // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E4F[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_WaterEnAtkElectric_ReturnValue; // 0x03E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E50[0x6];                                     // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager_1;   // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x03FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_OilEnAtkFire_ReturnValue;     // 0x03FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageDownWait_return;                  // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateDamageDown_Return;            // 0x03FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue; // 0x03FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E51[0x1];                                     // 0x03FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E52[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x041B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E53[0x3];                                     // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E54[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E55[0x3];                                     // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0430(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E56[0x6];                                     // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0448(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_On_Hit_Damage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_On_Hit_Damage");
static_assert(sizeof(RSBattleEnemy_C_On_Hit_Damage) == 0x000458, "Wrong size on RSBattleEnemy_C_On_Hit_Damage");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, Result) == 0x000000, "Member 'RSBattleEnemy_C_On_Hit_Damage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, LbHitDamage) == 0x000010, "Member 'RSBattleEnemy_C_On_Hit_Damage::LbHitDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, LIsPsychicUnique) == 0x000011, "Member 'RSBattleEnemy_C_On_Hit_Damage::LIsPsychicUnique' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, L_result) == 0x000018, "Member 'RSBattleEnemy_C_On_Hit_Damage::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, Player) == 0x0001D8, "Member 'RSBattleEnemy_C_On_Hit_Damage::Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, Hate) == 0x0001E0, "Member 'RSBattleEnemy_C_On_Hit_Damage::Hate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, Temp_int_Array_Index_Variable) == 0x0001E4, "Member 'RSBattleEnemy_C_On_Hit_Damage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_Array_Length_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_Array_Get_Item) == 0x0001F0, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_AsPlayer_Interface) == 0x0003B0, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_bSuccess) == 0x0003C0, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsActiveSAS_Electric_ReturnValue) == 0x0003C1, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsActiveSAS_Electric_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsArmor_Return) == 0x0003C2, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsArmor_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_AsPlayer_Interface_1) == 0x0003C8, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_AsPlayer_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_bSuccess_1) == 0x0003D8, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsActiveSAS_Fire_ReturnValue) == 0x0003D9, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsActiveSAS_Fire_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsBadStatusFlooded_bBadStatus) == 0x0003DA, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsBadStatusFlooded_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsSkillExtraType_ReturnValue) == 0x0003DB, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsSkillExtraType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsBadStatusOil_bBadStatus) == 0x0003DC, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsBadStatusOil_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x0003E0, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsValid_ReturnValue) == 0x0003E8, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_BrainTalkBt_WaterEnAtkElectric_ReturnValue) == 0x0003E9, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_BrainTalkBt_WaterEnAtkElectric_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_GetBrainTalkManager_BrainTalkManager_1) == 0x0003F0, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_GetBrainTalkManager_BrainTalkManager_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsValid_ReturnValue_1) == 0x0003F8, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsValid_ReturnValue_2) == 0x0003F9, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsControlAI_bAI) == 0x0003FA, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_BrainTalkBt_OilEnAtkFire_ReturnValue) == 0x0003FB, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_BrainTalkBt_OilEnAtkFire_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsDamageDownWait_return) == 0x0003FC, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsDamageDownWait_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsEnemyStateDamageDown_Return) == 0x0003FD, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsEnemyStateDamageDown_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue) == 0x0003FE, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsNoDamagePartFromHCHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_AsRSBattle_Player) == 0x000400, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_bSuccess_2) == 0x000408, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000410, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_bSuccess_3) == 0x000418, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsEnemyDamageDown_bool) == 0x000419, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_Stealth_End_Return) == 0x00041A, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_BooleanOR_ReturnValue) == 0x00041B, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_BooleanOR_ReturnValue_1) == 0x00041C, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, Temp_int_Loop_Counter_Variable) == 0x000420, "Member 'RSBattleEnemy_C_On_Hit_Damage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_Less_IntInt_ReturnValue) == 0x000424, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_Add_IntInt_ReturnValue) == 0x000428, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsStateStealth_Return) == 0x00042C, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_K2_SetTimer_ReturnValue) == 0x000430, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_GetDebuggingManager_Manager) == 0x000438, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsValid_ReturnValue_3) == 0x000440, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000441, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000448, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, K2Node_DynamicCast_bSuccess_4) == 0x000450, "Member 'RSBattleEnemy_C_On_Hit_Damage::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000451, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_On_Hit_Damage, CallFunc_IsDead_bDead) == 0x000452, "Member 'RSBattleEnemy_C_On_Hit_Damage::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableMoveRange
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_IsEnableMoveRange final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E57[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E58[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E59[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableMoveRange) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsEnableMoveRange");
static_assert(sizeof(RSBattleEnemy_C_IsEnableMoveRange) == 0x000030, "Wrong size on RSBattleEnemy_C_IsEnableMoveRange");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableMoveRange::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsEnableMoveRange::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_Abs_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_GetBrainFieldManager_Manager) == 0x000020, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_InBranField_InBrainDield) == 0x000029, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_InBranField_InBrainDield' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableMoveRange, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00002A, "Member 'RSBattleEnemy_C_IsEnableMoveRange::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetTargetPlayer
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_SetTargetPlayer final
{
public:
	EHATETYPE                                     Data;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E5A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0020(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetTargetPlayer) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetTargetPlayer");
static_assert(sizeof(RSBattleEnemy_C_SetTargetPlayer) == 0x000048, "Wrong size on RSBattleEnemy_C_SetTargetPlayer");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, Data) == 0x000000, "Member 'RSBattleEnemy_C_SetTargetPlayer::Data' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattleEnemy_C_SetTargetPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_SetTargetPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_GetPlayerManager_PlayerManager) == 0x000010, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_GetPlayerList_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_IsDead_bDead) == 0x000030, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_SetTargetPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateLayoutStartUp
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_UpdateLayoutStartUp final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StateAliveIsInitLayout_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5D[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateLayoutStartUp) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateLayoutStartUp");
static_assert(sizeof(RSBattleEnemy_C_UpdateLayoutStartUp) == 0x000040, "Wrong size on RSBattleEnemy_C_UpdateLayoutStartUp");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_StateAliveIsInitLayout_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_StateAliveIsInitLayout_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_GetPlayerPawn_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00001C, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_VSize_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLayoutStartUp, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_UpdateLayoutStartUp::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDistanceAngleCheck
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_IsDistanceAngleCheck final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoHeight;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SelfLocation;                                      // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelfLocationOn;                                    // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Bool;                                              // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E60[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_Location;                                        // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_TargetLocation;                                  // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDistanceAngleCheck_ReturnValue;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDistanceAngleCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsDistanceAngleCheck");
static_assert(sizeof(RSBattleEnemy_C_IsDistanceAngleCheck) == 0x000058, "Wrong size on RSBattleEnemy_C_IsDistanceAngleCheck");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, Target) == 0x000000, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::Target' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, TargetLocation) == 0x000008, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, Range) == 0x000014, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, Angle) == 0x000018, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::Angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, Rot) == 0x00001C, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, NoHeight) == 0x000028, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::NoHeight' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, SelfLocation) == 0x00002C, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::SelfLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, SelfLocationOn) == 0x000038, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::SelfLocationOn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, Bool) == 0x000039, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, L_Location) == 0x00003C, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, L_TargetLocation) == 0x000048, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::L_TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDistanceAngleCheck, CallFunc_IsDistanceAngleCheck_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_IsDistanceAngleCheck::CallFunc_IsDistanceAngleCheck_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsShortDistance
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsShortDistance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsShortDistance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsShortDistance");
static_assert(sizeof(RSBattleEnemy_C_IsShortDistance) == 0x000002, "Wrong size on RSBattleEnemy_C_IsShortDistance");
static_assert(offsetof(RSBattleEnemy_C_IsShortDistance, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsShortDistance::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsShortDistance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsShortDistance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMiddleDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsMiddleDistance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsMiddleDistance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsMiddleDistance");
static_assert(sizeof(RSBattleEnemy_C_IsMiddleDistance) == 0x000004, "Wrong size on RSBattleEnemy_C_IsMiddleDistance");
static_assert(offsetof(RSBattleEnemy_C_IsMiddleDistance, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsMiddleDistance::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMiddleDistance, Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsMiddleDistance::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMiddleDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsMiddleDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMiddleDistance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsMiddleDistance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnHitDamageCall
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_OnHitDamageCall final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageMontage_Damage_Enable;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnHitDamageCall) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnHitDamageCall");
static_assert(sizeof(RSBattleEnemy_C_OnHitDamageCall) == 0x000018, "Wrong size on RSBattleEnemy_C_OnHitDamageCall");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamageCall, Result) == 0x000000, "Member 'RSBattleEnemy_C_OnHitDamageCall::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamageCall, Ret) == 0x000010, "Member 'RSBattleEnemy_C_OnHitDamageCall::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamageCall, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_OnHitDamageCall::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamageCall, CallFunc_DamageMontage_Damage_Enable) == 0x000012, "Member 'RSBattleEnemy_C_OnHitDamageCall::CallFunc_DamageMontage_Damage_Enable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsLongDistance
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsLongDistance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsLongDistance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsLongDistance");
static_assert(sizeof(RSBattleEnemy_C_IsLongDistance) == 0x000002, "Wrong size on RSBattleEnemy_C_IsLongDistance");
static_assert(offsetof(RSBattleEnemy_C_IsLongDistance, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsLongDistance::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsLongDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsLongDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDamagePartHit
// 0x0218 (0x0218 - 0x0000)
struct RSBattleEnemy_C_DebugDamagePartHit final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	int32                                         Da_age;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue; // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E61[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E62[0x6];                                     // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugDamagePartHit) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDamagePartHit");
static_assert(sizeof(RSBattleEnemy_C_DebugDamagePartHit) == 0x000218, "Wrong size on RSBattleEnemy_C_DebugDamagePartHit");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, Result) == 0x000000, "Member 'RSBattleEnemy_C_DebugDamagePartHit::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, Da_age) == 0x0001C0, "Member 'RSBattleEnemy_C_DebugDamagePartHit::Da_age' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue) == 0x0001C4, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_IsDebugEnemyDamagePartHitPrint_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_Conv_IntToString_ReturnValue) == 0x0001C8, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x0001D8, "Member 'RSBattleEnemy_C_DebugDamagePartHit::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'RSBattleEnemy_C_DebugDamagePartHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_IsValid_ReturnValue) == 0x0001E1, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_GetDisplayName_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_Concat_StrStr_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDamagePartHit, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000208, "Member 'RSBattleEnemy_C_DebugDamagePartHit::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.MainTick
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_MainTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E63[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           L_color;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBadStateMaterial_Dummy;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateFitGround_Dummy;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E64[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Update_Hit_Damage_Material_Armor_Time;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateDeadStaging_dummy;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WeakMaterialRate_ret;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MainTickSometime_Dummy;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MainTick_Dummy;                           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E65[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E66[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_MainTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_MainTick");
static_assert(sizeof(RSBattleEnemy_C_MainTick) == 0x000038, "Wrong size on RSBattleEnemy_C_MainTick");
static_assert(offsetof(RSBattleEnemy_C_MainTick, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_MainTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_MainTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, L_color) == 0x000008, "Member 'RSBattleEnemy_C_MainTick::L_color' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_GetEnemySpawn_return) == 0x000018, "Member 'RSBattleEnemy_C_MainTick::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_UpdateBadStateMaterial_Dummy) == 0x000019, "Member 'RSBattleEnemy_C_MainTick::CallFunc_UpdateBadStateMaterial_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_UpdateFitGround_Dummy) == 0x00001A, "Member 'RSBattleEnemy_C_MainTick::CallFunc_UpdateFitGround_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_Update_Hit_Damage_Material_Armor_Time) == 0x00001C, "Member 'RSBattleEnemy_C_MainTick::CallFunc_Update_Hit_Damage_Material_Armor_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_UpdateDeadStaging_dummy) == 0x000020, "Member 'RSBattleEnemy_C_MainTick::CallFunc_UpdateDeadStaging_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_WeakMaterialRate_ret) == 0x000021, "Member 'RSBattleEnemy_C_MainTick::CallFunc_WeakMaterialRate_ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_MainTickSometime_Dummy) == 0x000022, "Member 'RSBattleEnemy_C_MainTick::CallFunc_MainTickSometime_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_MainTick_Dummy) == 0x000023, "Member 'RSBattleEnemy_C_MainTick::CallFunc_MainTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_MainTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'RSBattleEnemy_C_MainTick::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_IsDead_bDead) == 0x000026, "Member 'RSBattleEnemy_C_MainTick::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_MainTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_MainTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, Temp_int_Variable) == 0x000030, "Member 'RSBattleEnemy_C_MainTick::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTick, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_MainTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageMotionEnd
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_DamageMotionEnd final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMotionEnd_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMotionEnd_ReturnValue_1;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue_1;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E67[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DamageMotionEnd) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DamageMotionEnd");
static_assert(sizeof(RSBattleEnemy_C_DamageMotionEnd) == 0x000040, "Wrong size on RSBattleEnemy_C_DamageMotionEnd");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, DeltaTime) == 0x000000, "Member 'RSBattleEnemy_C_DamageMotionEnd::DeltaTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_IsMotionEnd_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_IsMotionEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1) == 0x000007, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000008, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000009, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00000A, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00000B, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00000C, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00000D, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00000E, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_IsMotionEnd_ReturnValue_1) == 0x00000F, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_IsMotionEnd_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00001D, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00001E, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00001F, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_GetEnemyAliveAnimKind_ReturnValue_1) == 0x00002C, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_GetEnemyAliveAnimKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_RInterpTo_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x00003C, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x00003D, "Member 'RSBattleEnemy_C_DamageMotionEnd::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemySound
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_GetEnemySound final
{
public:
	Enum_EnemySound                               Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemySound                               CallFunc_GetEnemySoundEnum_SoundEnum;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemySound) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemySound");
static_assert(sizeof(RSBattleEnemy_C_GetEnemySound) == 0x000003, "Wrong size on RSBattleEnemy_C_GetEnemySound");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySound, Return) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemySound::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySound, CallFunc_IsBattling_bBatting) == 0x000001, "Member 'RSBattleEnemy_C_GetEnemySound::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySound, CallFunc_GetEnemySoundEnum_SoundEnum) == 0x000002, "Member 'RSBattleEnemy_C_GetEnemySound::CallFunc_GetEnemySoundEnum_SoundEnum' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetCursorLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetTargetCursorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetCursorLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetCursorLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTargetCursorLocation");
static_assert(sizeof(RSBattleEnemy_C_GetTargetCursorLocation) == 0x000018, "Wrong size on RSBattleEnemy_C_GetTargetCursorLocation");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorLocation, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetCursorLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorLocation, CallFunc_GetTargetCursorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetTargetCursorLocation::CallFunc_GetTargetCursorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCrashDamageLocation
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_GetBrainCrashDamageLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocketName;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCrashDamageLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetBrainCrashDamageLocation");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCrashDamageLocation) == 0x000030, "Wrong size on RSBattleEnemy_C_GetBrainCrashDamageLocation");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashDamageLocation, WorldLocation) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCrashDamageLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashDamageLocation, TargetSocketName) == 0x00000C, "Member 'RSBattleEnemy_C_GetBrainCrashDamageLocation::TargetSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashDamageLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_GetBrainCrashDamageLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashDamageLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetBrainCrashDamageLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashDamageLocation, CallFunc_DoesSocketExist_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_GetBrainCrashDamageLocation::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDamageDownWait
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsDamageDownWait final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       L_DamageDownAnim;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageDownWait_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDamageDownWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDamageDownWait");
static_assert(sizeof(RSBattleEnemy_C_IsDamageDownWait) == 0x000003, "Wrong size on RSBattleEnemy_C_IsDamageDownWait");
static_assert(offsetof(RSBattleEnemy_C_IsDamageDownWait, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsDamageDownWait::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageDownWait, L_DamageDownAnim) == 0x000001, "Member 'RSBattleEnemy_C_IsDamageDownWait::L_DamageDownAnim' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageDownWait, CallFunc_IsDamageDownWait_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsDamageDownWait::CallFunc_IsDamageDownWait_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageDownCheck
// 0x0100 (0x0100 - 0x0000)
struct RSBattleEnemy_C_DamageDownCheck final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_downInfinity;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E68[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              L_basic;                                           // 0x0008(0x0068)(Edit, BlueprintVisible)
	bool                                          CallFunc_CallFuncDamageDownStart_dummy;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LaunchDown_IsEnd;                         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjState_ReturnState;             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E69[0x5];                                     // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIdleResetMoveMode_bReset;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusElectric_bBadStatus;           // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6A[0x1];                                     // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0088(0x0068)()
	bool                                          CallFunc_FlyDown_IsEnd;                            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6B[0x2];                                     // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue_1;      // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DamageDownCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DamageDownCheck");
static_assert(sizeof(RSBattleEnemy_C_DamageDownCheck) == 0x000100, "Wrong size on RSBattleEnemy_C_DamageDownCheck");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, Timer) == 0x000000, "Member 'RSBattleEnemy_C_DamageDownCheck::Timer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, L_downInfinity) == 0x000004, "Member 'RSBattleEnemy_C_DamageDownCheck::L_downInfinity' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, L_basic) == 0x000008, "Member 'RSBattleEnemy_C_DamageDownCheck::L_basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_CallFuncDamageDownStart_dummy) == 0x000070, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_CallFuncDamageDownStart_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_LaunchDown_IsEnd) == 0x000071, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_LaunchDown_IsEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsUniqueObjState_ReturnState) == 0x000072, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsUniqueObjState_ReturnState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GetDebuggingManager_Manager) == 0x000078, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsIdleResetMoveMode_bReset) == 0x000081, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsIdleResetMoveMode_bReset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000082, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsFlying_ReturnValue) == 0x000083, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000085, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_IsBadStatusElectric_bBadStatus) == 0x000086, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_IsBadStatusElectric_bBadStatus' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GetParameterBasic_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_FlyDown_IsEnd) == 0x0000F0, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_FlyDown_IsEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000F1, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000F4, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, K2Node_SwitchEnum_CmpSuccess) == 0x0000F9, "Member 'RSBattleEnemy_C_DamageDownCheck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_GetEnemyAliveAnimKind_ReturnValue_1) == 0x0000FA, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_GetEnemyAliveAnimKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageDownCheck, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000FB, "Member 'RSBattleEnemy_C_DamageDownCheck::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.FlyDown
// 0x0130 (0x0130 - 0x0000)
struct RSBattleEnemy_C_FlyDown final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_End;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceivedNotifyAnimEnd_Received;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMotionEnd_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E6F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCheckCapsuleRadius_Radius;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E70[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRootLocation_RootLocation;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E71[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E72[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0090(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_FlyDown) == 0x000008, "Wrong alignment on RSBattleEnemy_C_FlyDown");
static_assert(sizeof(RSBattleEnemy_C_FlyDown) == 0x000130, "Wrong size on RSBattleEnemy_C_FlyDown");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, IsEnd) == 0x000000, "Member 'RSBattleEnemy_C_FlyDown::IsEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, L_End) == 0x000001, "Member 'RSBattleEnemy_C_FlyDown::L_End' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, ObjType) == 0x000008, "Member 'RSBattleEnemy_C_FlyDown::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_ReceivedNotifyAnimEnd_Received) == 0x000020, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_ReceivedNotifyAnimEnd_Received' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsMotionEnd_ReturnValue) == 0x000023, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsMotionEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, K2Node_MakeArray_Array) == 0x000028, "Member 'RSBattleEnemy_C_FlyDown::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsValid_ReturnValue_3) == 0x000038, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_GetCheckCapsuleRadius_Radius) == 0x00003C, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_GetCheckCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_IsValid_ReturnValue_4) == 0x000040, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_GetRootLocation_RootLocation) == 0x000054, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_GetRootLocation_RootLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, K2Node_MakeArray_Array_1) == 0x000070, "Member 'RSBattleEnemy_C_FlyDown::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, Temp_object_Variable) == 0x000090, "Member 'RSBattleEnemy_C_FlyDown::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x0000A0, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyDown, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000128, "Member 'RSBattleEnemy_C_FlyDown::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateEnemyHp
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_UpdateEnemyHp final
{
public:
	bool                                          BossOnly;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bad_status;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E73[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E74[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetBoss_ret;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E75[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E76[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue_1;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game_1;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateEnemyHp) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateEnemyHp");
static_assert(sizeof(RSBattleEnemy_C_UpdateEnemyHp) == 0x000060, "Wrong size on RSBattleEnemy_C_UpdateEnemyHp");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, BossOnly) == 0x000000, "Member 'RSBattleEnemy_C_UpdateEnemyHp::BossOnly' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, bad_status) == 0x000001, "Member 'RSBattleEnemy_C_UpdateEnemyHp::bad_status' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetHP_HP) == 0x000014, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetPlayerController_ReturnValue_1) == 0x000018, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_IsTargetBoss_ret) == 0x000020, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_IsTargetBoss_ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetHUD_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, K2Node_DynamicCast_AsHUDMain_Game) == 0x000030, "Member 'RSBattleEnemy_C_UpdateEnemyHp::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattleEnemy_C_UpdateEnemyHp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetPlayerController_ReturnValue_2) == 0x000040, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, CallFunc_GetHUD_ReturnValue_1) == 0x000048, "Member 'RSBattleEnemy_C_UpdateEnemyHp::CallFunc_GetHUD_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, K2Node_DynamicCast_AsHUDMain_Game_1) == 0x000050, "Member 'RSBattleEnemy_C_UpdateEnemyHp::K2Node_DynamicCast_AsHUDMain_Game_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnemyHp, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'RSBattleEnemy_C_UpdateEnemyHp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsTargetBoss
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_IsTargetBoss final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E77[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsTargetBoss) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsTargetBoss");
static_assert(sizeof(RSBattleEnemy_C_IsTargetBoss) == 0x000020, "Wrong size on RSBattleEnemy_C_IsTargetBoss");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, Ret) == 0x000000, "Member 'RSBattleEnemy_C_IsTargetBoss::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, Return) == 0x000001, "Member 'RSBattleEnemy_C_IsTargetBoss::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsTargetBoss::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, K2Node_DynamicCast_AsRSBattle_Player) == 0x000010, "Member 'RSBattleEnemy_C_IsTargetBoss::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_IsTargetBoss::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_IsTargetBoss::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetBoss, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00001A, "Member 'RSBattleEnemy_C_IsTargetBoss::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.NoNavMoveRotation
// 0x0068 (0x0068 - 0x0000)
struct RSBattleEnemy_C_NoNavMoveRotation final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E78[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyMoveAnimKind                             CallFunc_GetMove_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E79[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_NoNavMoveRotation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_NoNavMoveRotation");
static_assert(sizeof(RSBattleEnemy_C_NoNavMoveRotation) == 0x000068, "Wrong size on RSBattleEnemy_C_NoNavMoveRotation");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, Sec) == 0x000000, "Member 'RSBattleEnemy_C_NoNavMoveRotation::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_IsBattling_bBatting) == 0x000004, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_GetMove_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_GetMove_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00002D, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002E, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002F, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000030, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_BooleanOR_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000034, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000040, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_RInterpTo_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NoNavMoveRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_NoNavMoveRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PlayAnimDamageMontage
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_PlayAnimDamageMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E7A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PlayAnimDamageMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_PlayAnimDamageMontage");
static_assert(sizeof(RSBattleEnemy_C_PlayAnimDamageMontage) == 0x000028, "Wrong size on RSBattleEnemy_C_PlayAnimDamageMontage");
static_assert(offsetof(RSBattleEnemy_C_PlayAnimDamageMontage, Montage) == 0x000000, "Member 'RSBattleEnemy_C_PlayAnimDamageMontage::Montage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayAnimDamageMontage, NewLocalVar_0) == 0x000008, "Member 'RSBattleEnemy_C_PlayAnimDamageMontage::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayAnimDamageMontage, CallFunc_PlayAnimMontage_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_PlayAnimDamageMontage::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayAnimDamageMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_PlayAnimDamageMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayAnimDamageMontage, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_PlayAnimDamageMontage::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestDamageMotion
// 0x04C0 (0x04C0 - 0x0000)
struct RSBattleEnemy_C_RequestDamageMotion final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSideDamage;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E7B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E7C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackObj;                                         // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasStartDamage;                                    // 0x0138(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPriorityToWince;                                 // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             LWorkExtraType;                                    // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsDamageReactionAfterDead;                        // 0x013B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbStartCrashChance;                                // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbTriggerAttack;                                   // 0x013D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E7D[0x2];                                     // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LForceExtraTypeList;                               // 0x0140(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FString                                 LFindForcePrefix;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          LIsDamageDown;                                     // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LBadStateReaction;                                 // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_ExecReactionLarge;                               // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsHitWeak;                                       // 0x0163(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E7E[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0168(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_IsForceWince;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_isStartDamage;                                   // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsDamageMove;                                    // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageAnimKind                           L_DamageAnim;                                      // 0x017B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_BasicData;                                       // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_isLeft;                                          // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_isRight;                                         // 0x0185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E7F[0x2];                                     // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_angle;                                           // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_isRot;                                           // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_isBack;                                          // 0x018D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E80[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_blowLimit;                                       // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTrigger_ReturnValue;                    // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PutoutInformation_IsRight;                // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PutoutInformation_IsLeft;                 // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PutoutInformation_IsBack;                 // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E81[0x2];                                     // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget;             // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType;                // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E82[0x2];                                     // 0x01C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget_1;           // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType_1;              // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget_2;           // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType_2;              // 0x01CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDuringLaunchDamage_ReturnValue;         // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E83[0x2];                                     // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E84[0x2];                                     // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartCrashChance_bStart;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E85[0x2];                                     // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E86[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_DamageDown_dummy;               // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E87[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1;        // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OutputLog_Reaction_Dummy;                 // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x020B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E88[0x2];                                     // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1; // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E89[0x2];                                     // 0x021E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0225(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0226(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8A[0x1];                                     // 0x0227(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8B[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8C[0x6];                                     // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2;        // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_Reaction_Dummy_1;               // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x024B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item_1;                         // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x024D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x024E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8D[0x1];                                     // 0x024F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestAddDamageL_IsSuccess;              // 0x0257(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjState_ReturnState;             // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_3;        // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x025B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueReactionSmallCondition_bReactionSmall; // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSetWinceCounter_Return;                 // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestPressDown_IsSuccess;               // 0x025E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8E[0x1];                                     // 0x025F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObject_ReturnValue;               // 0x0272(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item_2;                         // 0x0273(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8F[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartDamageLarge_Dummy;                 // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestBlowMotion_IsSuccess;              // 0x027F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueKnockBackCondition_bKnockBack;    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E90[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestLaunchMotion_IsSuccess;            // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinuityDamageMotion_Dummy;           // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartDamageSmall_Dummy;                 // 0x0293(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartDamageLarge_Dummy_1;               // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartDamageDown_Dummy;                  // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E91[0x2];                                     // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     K2Node_MakeArray_Array;                            // 0x0298(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E92[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E93[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestDownMotion_IsSuccess;              // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E94[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_5;                      // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_5;                     // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_5;                       // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             CallFunc_Array_Get_Item_3;                         // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x03A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_ReturnValue;             // 0x03A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x03A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E95[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager_2;            // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinuityDamageMotion_Dummy_1;         // 0x03C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinuityDamageMotion_Dummy_2;         // 0x03C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x03C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x03C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x03C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x03CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E96[0x1];                                     // 0x03CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x03D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x03D9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E97[0x2];                                     // 0x03DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E98[0x3];                                     // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x03E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E99[0x2];                                     // 0x03EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_6;                      // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_6;                     // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_6;                       // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_6;                // 0x03F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_2;            // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_7;                      // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_7;                     // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_7;                       // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_7;                // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x0428(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9A[0x3];                                     // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageAnimKindKnockBack_ReturnValue;    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleDamageAnimKindKnockBack_ReturnValue; // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9B[0x1];                                     // 0x0433(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetParamBasicAccumulation_Accumulation;   // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Param_Table_Resistance_Resistance;    // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9C[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0440(0x0068)()
	bool                                          CallFunc_IsDamageAnimKindKnockBack_ReturnValue_1;  // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageAnimKindWince_ReturnValue;        // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleDamageAnimKindWince_ReturnValue; // 0x04AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9D[0x1];                                     // 0x04AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetParamBasicAccumulation_Accumulation_1; // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9E[0x3];                                     // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_Param_Table_Resistance_Resistance_1;  // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x04B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestDamageMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestDamageMotion");
static_assert(sizeof(RSBattleEnemy_C_RequestDamageMotion) == 0x0004C0, "Wrong size on RSBattleEnemy_C_RequestDamageMotion");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Rot) == 0x000000, "Member 'RSBattleEnemy_C_RequestDamageMotion::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_RequestDamageMotion::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_RequestDamageMotion::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, IsSideDamage) == 0x000024, "Member 'RSBattleEnemy_C_RequestDamageMotion::IsSideDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_RequestDamageMotion::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_RequestDamageMotion::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Skill) == 0x000038, "Member 'RSBattleEnemy_C_RequestDamageMotion::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Attacker) == 0x000128, "Member 'RSBattleEnemy_C_RequestDamageMotion::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, AttackObj) == 0x000130, "Member 'RSBattleEnemy_C_RequestDamageMotion::AttackObj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, WasStartDamage) == 0x000138, "Member 'RSBattleEnemy_C_RequestDamageMotion::WasStartDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LbPriorityToWince) == 0x000139, "Member 'RSBattleEnemy_C_RequestDamageMotion::LbPriorityToWince' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LWorkExtraType) == 0x00013A, "Member 'RSBattleEnemy_C_RequestDamageMotion::LWorkExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LIsDamageReactionAfterDead) == 0x00013B, "Member 'RSBattleEnemy_C_RequestDamageMotion::LIsDamageReactionAfterDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LbStartCrashChance) == 0x00013C, "Member 'RSBattleEnemy_C_RequestDamageMotion::LbStartCrashChance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LbTriggerAttack) == 0x00013D, "Member 'RSBattleEnemy_C_RequestDamageMotion::LbTriggerAttack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LForceExtraTypeList) == 0x000140, "Member 'RSBattleEnemy_C_RequestDamageMotion::LForceExtraTypeList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LFindForcePrefix) == 0x000150, "Member 'RSBattleEnemy_C_RequestDamageMotion::LFindForcePrefix' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LIsDamageDown) == 0x000160, "Member 'RSBattleEnemy_C_RequestDamageMotion::LIsDamageDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, LBadStateReaction) == 0x000161, "Member 'RSBattleEnemy_C_RequestDamageMotion::LBadStateReaction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_ExecReactionLarge) == 0x000162, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_ExecReactionLarge' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_IsHitWeak) == 0x000163, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_IsHitWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_extraType) == 0x000168, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_IsForceWince) == 0x000178, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_IsForceWince' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_isStartDamage) == 0x000179, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_isStartDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_IsDamageMove) == 0x00017A, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_IsDamageMove' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_DamageAnim) == 0x00017B, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_DamageAnim' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_BasicData) == 0x00017C, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_BasicData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_TableData) == 0x000180, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_isLeft) == 0x000184, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_isLeft' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_isRight) == 0x000185, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_isRight' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_angle) == 0x000188, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_isRot) == 0x00018C, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_isRot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_isBack) == 0x00018D, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_isBack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, L_blowLimit) == 0x000190, "Member 'RSBattleEnemy_C_RequestDamageMotion::L_blowLimit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsTrigger_ReturnValue) == 0x000194, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsTrigger_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_PutoutInformation_IsRight) == 0x000195, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_PutoutInformation_IsRight' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_PutoutInformation_IsLeft) == 0x000196, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_PutoutInformation_IsLeft' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_PutoutInformation_IsBack) == 0x000197, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_PutoutInformation_IsBack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Loop_Counter_Variable) == 0x000198, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Add_IntInt_ReturnValue) == 0x00019C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Array_Index_Variable) == 0x0001A0, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll) == 0x0001A4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch) == 0x0001A8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw) == 0x0001AC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue) == 0x0001B0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_bool_True_if_break_was_hit_Variable) == 0x0001BC, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Not_PreBool_ReturnValue) == 0x0001BD, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Loop_Counter_Variable_1) == 0x0001C0, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_IgnoreTarget) == 0x0001C4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_IgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_CauseType) == 0x0001C5, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001C8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_IgnoreTarget_1) == 0x0001CC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_IgnoreTarget_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_CauseType_1) == 0x0001CD, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_CauseType_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_IgnoreTarget_2) == 0x0001CE, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_IgnoreTarget_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetHitStopParam_CauseType_2) == 0x0001CF, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetHitStopParam_CauseType_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsDuringLaunchDamage_ReturnValue) == 0x0001D0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsDuringLaunchDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_bool_True_if_break_was_hit_Variable_1) == 0x0001D1, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Length_ReturnValue) == 0x0001D4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001D8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0001D9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Array_Index_Variable_1) == 0x0001DC, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_StartCrashChance_bStart) == 0x0001E0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_StartCrashChance_bStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_bool_True_if_break_was_hit_Variable_2) == 0x0001E1, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001E2, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue) == 0x0001E3, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_1) == 0x0001E4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_2) == 0x0001E5, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Array_Index_Variable_2) == 0x0001E8, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x0001F0, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OutputLog_DamageDown_dummy) == 0x0001F9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OutputLog_DamageDown_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_3) == 0x0001FA, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x0001FB, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_SwitchEnum_CmpSuccess) == 0x0001FC, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1) == 0x000200, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_AsBP_Enemy_Battle_Log_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_bSuccess_1) == 0x000208, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000209, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OutputLog_Reaction_Dummy) == 0x00020A, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OutputLog_Reaction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00020B, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00020C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_4) == 0x00020D, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Loop_Counter_Variable_2) == 0x000210, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Add_IntInt_ReturnValue_2) == 0x000214, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_5) == 0x000218, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1) == 0x000219, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_6) == 0x00021A, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Get_Item) == 0x00021B, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00021C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00021D, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Length_ReturnValue_1) == 0x000220, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Less_IntInt_ReturnValue) == 0x000224, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_7) == 0x000225, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanAND_ReturnValue) == 0x000226, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000228, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Loop_Counter_Variable_3) == 0x00022C, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Less_IntInt_ReturnValue_1) == 0x000230, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Add_IntInt_ReturnValue_3) == 0x000234, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_8) == 0x000238, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000239, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2) == 0x000240, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_AsBP_Enemy_Battle_Log_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_bSuccess_2) == 0x000248, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000249, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OutputLog_Reaction_Dummy_1) == 0x00024A, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OutputLog_Reaction_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanOR_ReturnValue) == 0x00024B, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Get_Item_1) == 0x00024C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_9) == 0x00024D, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00024E, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Length_ReturnValue_2) == 0x000250, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Less_IntInt_ReturnValue_2) == 0x000254, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanAND_ReturnValue_1) == 0x000255, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000256, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_RequestAddDamageL_IsSuccess) == 0x000257, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_RequestAddDamageL_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsUniqueObjState_ReturnState) == 0x000258, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsUniqueObjState_ReturnState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_bool_True_if_break_was_hit_Variable_3) == 0x000259, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Not_PreBool_ReturnValue_3) == 0x00025A, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanAND_ReturnValue_2) == 0x00025B, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsUniqueReactionSmallCondition_bReactionSmall) == 0x00025C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsUniqueReactionSmallCondition_bReactionSmall' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsSetWinceCounter_Return) == 0x00025D, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsSetWinceCounter_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_RequestPressDown_IsSuccess) == 0x00025E, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_RequestPressDown_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000260, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_DynamicCast_bSuccess_3) == 0x000270, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_10) == 0x000271, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsUniqueObject_ReturnValue) == 0x000272, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsUniqueObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Get_Item_2) == 0x000273, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000274, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Length_ReturnValue_3) == 0x000278, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Less_IntInt_ReturnValue_3) == 0x00027C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanAND_ReturnValue_3) == 0x00027D, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OnStartDamageLarge_Dummy) == 0x00027E, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OnStartDamageLarge_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_RequestBlowMotion_IsSuccess) == 0x00027F, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_RequestBlowMotion_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsUniqueKnockBackCondition_bKnockBack) == 0x000280, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsUniqueKnockBackCondition_bKnockBack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetDebuggingManager_Manager) == 0x000288, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_11) == 0x000290, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_RequestLaunchMotion_IsSuccess) == 0x000291, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_RequestLaunchMotion_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsContinuityDamageMotion_Dummy) == 0x000292, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsContinuityDamageMotion_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OnStartDamageSmall_Dummy) == 0x000293, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OnStartDamageSmall_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OnStartDamageLarge_Dummy_1) == 0x000294, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OnStartDamageLarge_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_OnStartDamageDown_Dummy) == 0x000295, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_OnStartDamageDown_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, K2Node_MakeArray_Array) == 0x000298, "Member 'RSBattleEnemy_C_RequestDamageMotion::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002A8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002B4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_VSize_ReturnValue) == 0x0002C0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0002C4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002D0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Normal_ReturnValue) == 0x0002D4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_ComposeRotators_ReturnValue) == 0x0002E0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_1) == 0x0002EC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_1) == 0x0002F0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_1) == 0x0002F4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_2) == 0x0002F8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_2) == 0x0002FC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_2) == 0x000300, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_1) == 0x000304, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_2) == 0x000310, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00031C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_VSize_ReturnValue_1) == 0x000328, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00032C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000338, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Normal_ReturnValue_1) == 0x00033C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_RequestDownMotion_IsSuccess) == 0x000348, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_RequestDownMotion_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_ComposeRotators_ReturnValue_1) == 0x00034C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_3) == 0x000358, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_3) == 0x00035C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_3) == 0x000360, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_4) == 0x000364, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_4) == 0x000368, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_4) == 0x00036C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_3) == 0x000370, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_4) == 0x00037C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_5) == 0x000388, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_5) == 0x00038C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_5) == 0x000390, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_5) == 0x000394, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_int_Array_Index_Variable_3) == 0x0003A0, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Get_Item_3) == 0x0003A4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x0003A5, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsSkillExtraType_ReturnValue) == 0x0003A6, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsSkillExtraType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x0003A7, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0003A8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetDebuggingManager_Manager_1) == 0x0003B0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetDebuggingManager_Manager_2) == 0x0003B8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetDebuggingManager_Manager_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_12) == 0x0003C0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_13) == 0x0003C1, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsContinuityDamageMotion_Dummy_1) == 0x0003C2, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsContinuityDamageMotion_Dummy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsContinuityDamageMotion_Dummy_2) == 0x0003C3, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsContinuityDamageMotion_Dummy_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x0003C4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0003C5, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x0003C6, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x0003C7, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x0003C8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0003C9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0003CA, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0003CC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_byte_Variable) == 0x0003D8, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_byte_Variable_1) == 0x0003D9, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Find_ReturnValue) == 0x0003DC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0003E0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Find_ReturnValue_1) == 0x0003E4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0003E8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BooleanOR_ReturnValue_1) == 0x0003E9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_6) == 0x0003EC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_6) == 0x0003F0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_6) == 0x0003F4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_6) == 0x0003F8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_ComposeRotators_ReturnValue_2) == 0x000404, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_ComposeRotators_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Roll_7) == 0x000410, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Roll_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Pitch_7) == 0x000414, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Pitch_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_BreakRotator_Yaw_7) == 0x000418, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_BreakRotator_Yaw_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_MakeRotator_ReturnValue_7) == 0x00041C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_MakeRotator_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, Temp_byte_Variable_2) == 0x000428, "Member 'RSBattleEnemy_C_RequestDamageMotion::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Array_Find_ReturnValue_2) == 0x00042C, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsDamageAnimKindKnockBack_ReturnValue) == 0x000430, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsDamageAnimKindKnockBack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000431, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsPossibleDamageAnimKindKnockBack_ReturnValue) == 0x000432, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsPossibleDamageAnimKindKnockBack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetParamBasicAccumulation_Accumulation) == 0x000434, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetParamBasicAccumulation_Accumulation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Get_Param_Table_Resistance_Resistance) == 0x000438, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Get_Param_Table_Resistance_Resistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetParameterBasic_ReturnValue) == 0x000440, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsDamageAnimKindKnockBack_ReturnValue_1) == 0x0004A8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsDamageAnimKindKnockBack_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsDamageAnimKindWince_ReturnValue) == 0x0004A9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsDamageAnimKindWince_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsPossibleDamageAnimKindWince_ReturnValue) == 0x0004AA, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsPossibleDamageAnimKindWince_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GetParamBasicAccumulation_Accumulation_1) == 0x0004AC, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GetParamBasicAccumulation_Accumulation_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x0004B0, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_Get_Param_Table_Resistance_Resistance_1) == 0x0004B4, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_Get_Param_Table_Resistance_Resistance_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsValid_ReturnValue_14) == 0x0004B8, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageMotion, CallFunc_IsDead_bDead) == 0x0004B9, "Member 'RSBattleEnemy_C_RequestDamageMotion::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAliveAnim
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetAliveAnim final
{
public:
	EnemyAliveAnimKind                            Alive;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAliveAnim) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetAliveAnim");
static_assert(sizeof(RSBattleEnemy_C_SetAliveAnim) == 0x000002, "Wrong size on RSBattleEnemy_C_SetAliveAnim");
static_assert(offsetof(RSBattleEnemy_C_SetAliveAnim, Alive) == 0x000000, "Member 'RSBattleEnemy_C_SetAliveAnim::Alive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAliveAnim, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetAliveAnim::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Get Param Table Resistance
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_Get_Param_Table_Resistance final
{
public:
	EEnemyDamageType                              Damage;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Resistance;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Data;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamTableResistance_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_Get_Param_Table_Resistance) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Get_Param_Table_Resistance");
static_assert(sizeof(RSBattleEnemy_C_Get_Param_Table_Resistance) == 0x000010, "Wrong size on RSBattleEnemy_C_Get_Param_Table_Resistance");
static_assert(offsetof(RSBattleEnemy_C_Get_Param_Table_Resistance, Damage) == 0x000000, "Member 'RSBattleEnemy_C_Get_Param_Table_Resistance::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Get_Param_Table_Resistance, Resistance) == 0x000004, "Member 'RSBattleEnemy_C_Get_Param_Table_Resistance::Resistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Get_Param_Table_Resistance, Data) == 0x000008, "Member 'RSBattleEnemy_C_Get_Param_Table_Resistance::Data' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Get_Param_Table_Resistance, CallFunc_GetParamTableResistance_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_Get_Param_Table_Resistance::CallFunc_GetParamTableResistance_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetParamBasicAccumulation
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetParamBasicAccumulation final
{
public:
	EEnemyDamageType                              Damage;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EA0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Accumulation;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Data;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamBasicAccumulation_ReturnValue;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetParamBasicAccumulation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetParamBasicAccumulation");
static_assert(sizeof(RSBattleEnemy_C_GetParamBasicAccumulation) == 0x000010, "Wrong size on RSBattleEnemy_C_GetParamBasicAccumulation");
static_assert(offsetof(RSBattleEnemy_C_GetParamBasicAccumulation, Damage) == 0x000000, "Member 'RSBattleEnemy_C_GetParamBasicAccumulation::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetParamBasicAccumulation, Accumulation) == 0x000004, "Member 'RSBattleEnemy_C_GetParamBasicAccumulation::Accumulation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetParamBasicAccumulation, Data) == 0x000008, "Member 'RSBattleEnemy_C_GetParamBasicAccumulation::Data' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetParamBasicAccumulation, CallFunc_GetParamBasicAccumulation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetParamBasicAccumulation::CallFunc_GetParamBasicAccumulation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDamageAnim
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_SetDamageAnim final
{
public:
	EnemyDamageAnimKind                           Alive;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EA1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDamageAnim) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDamageAnim");
static_assert(sizeof(RSBattleEnemy_C_SetDamageAnim) == 0x000020, "Wrong size on RSBattleEnemy_C_SetDamageAnim");
static_assert(offsetof(RSBattleEnemy_C_SetDamageAnim, Alive) == 0x000000, "Member 'RSBattleEnemy_C_SetDamageAnim::Alive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageAnim, Primitive) == 0x000008, "Member 'RSBattleEnemy_C_SetDamageAnim::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageAnim, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RSBattleEnemy_C_SetDamageAnim::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageAnim, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetDamageAnim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageAnim, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'RSBattleEnemy_C_SetDamageAnim::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDamageDownAnim
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetDamageDownAnim final
{
public:
	EnemyDamageDownAnimKind                       Damage;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetDamageDownAnim) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetDamageDownAnim");
static_assert(sizeof(RSBattleEnemy_C_SetDamageDownAnim) == 0x000001, "Wrong size on RSBattleEnemy_C_SetDamageDownAnim");
static_assert(offsetof(RSBattleEnemy_C_SetDamageDownAnim, Damage) == 0x000000, "Member 'RSBattleEnemy_C_SetDamageDownAnim::Damage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDamageAngle
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_IsDamageAngle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotZ;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA2[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDistanceAngleCheck_bool;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDamageAngle) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsDamageAngle");
static_assert(sizeof(RSBattleEnemy_C_IsDamageAngle) == 0x000028, "Wrong size on RSBattleEnemy_C_IsDamageAngle");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, Location) == 0x000000, "Member 'RSBattleEnemy_C_IsDamageAngle::Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, Angle) == 0x00000C, "Member 'RSBattleEnemy_C_IsDamageAngle::Angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, RotZ) == 0x000010, "Member 'RSBattleEnemy_C_IsDamageAngle::RotZ' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, Ret) == 0x000014, "Member 'RSBattleEnemy_C_IsDamageAngle::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsDamageAngle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageAngle, CallFunc_IsDistanceAngleCheck_bool) == 0x000024, "Member 'RSBattleEnemy_C_IsDamageAngle::CallFunc_IsDistanceAngleCheck_bool' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.TimerDecrement
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_TimerDecrement final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_time;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_TimerDecrement) == 0x000004, "Wrong alignment on RSBattleEnemy_C_TimerDecrement");
static_assert(sizeof(RSBattleEnemy_C_TimerDecrement) == 0x000018, "Wrong size on RSBattleEnemy_C_TimerDecrement");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, Base) == 0x000000, "Member 'RSBattleEnemy_C_TimerDecrement::Base' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, Time) == 0x000004, "Member 'RSBattleEnemy_C_TimerDecrement::Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_TimerDecrement::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, L_time) == 0x00000C, "Member 'RSBattleEnemy_C_TimerDecrement::L_time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_TimerDecrement::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TimerDecrement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_TimerDecrement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateTargetDistance
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_UpdateTargetDistance final
{
public:
	class ARSBattleCharacter_C*                   TmpTarget;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_PrevDiscovered;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LTarget;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EA4[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA5[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA6[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerIndex_Index;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EA7[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEnemyBaseLocation_BaseLocation;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA8[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EA9[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcTargetInfo_l_TargetDistance;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTargetInfo_l_TargetHeight;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTargetInfo_l_TargetAngle;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_CalcTargetInfo_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateTargetDistance) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateTargetDistance");
static_assert(sizeof(RSBattleEnemy_C_UpdateTargetDistance) == 0x000090, "Wrong size on RSBattleEnemy_C_UpdateTargetDistance");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, TmpTarget) == 0x000000, "Member 'RSBattleEnemy_C_UpdateTargetDistance::TmpTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, L_PrevDiscovered) == 0x000008, "Member 'RSBattleEnemy_C_UpdateTargetDistance::L_PrevDiscovered' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, LTarget) == 0x000010, "Member 'RSBattleEnemy_C_UpdateTargetDistance::LTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, Ret) == 0x000018, "Member 'RSBattleEnemy_C_UpdateTargetDistance::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, Temp_byte_Variable) == 0x000019, "Member 'RSBattleEnemy_C_UpdateTargetDistance::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000020, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_AsPlayer_Interface) == 0x000038, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_GetPlayerIndex_Index) == 0x00004C, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_GetPlayerIndex_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_GetPlayerID_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_GetEnemyBaseLocation_BaseLocation) == 0x000054, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_GetEnemyBaseLocation_BaseLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_AsRSBattle_Character) == 0x000068, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'RSBattleEnemy_C_UpdateTargetDistance::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_IsBattling_bBatting) == 0x000071, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_CalcTargetInfo_l_TargetDistance) == 0x000074, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_CalcTargetInfo_l_TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_CalcTargetInfo_l_TargetHeight) == 0x000078, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_CalcTargetInfo_l_TargetHeight' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_CalcTargetInfo_l_TargetAngle) == 0x00007C, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_CalcTargetInfo_l_TargetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_CalcTargetInfo_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_CalcTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateTargetDistance, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_UpdateTargetDistance::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BrainCrashDamage
// 0x02D0 (0x02D0 - 0x0000)
struct RSBattleEnemy_C_BrainCrashDamage final
{
public:
	int32                                         LDamage;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LBeforeHitInvincibleParts;                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EAA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       BrainCrashAction;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EAB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           HitResult;                                         // 0x0018(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	float                                         Temp_float_Variable;                               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EAC[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcBrainCrashDamage_damage;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EAD[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EAE[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddScore_EnemyDamage_ReturnValue;         // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EAF[0x2];                                     // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB0[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo;                 // 0x020C(0x0008)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyIgnoreDamage_ReturnValue;          // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB1[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo_1;               // 0x0218(0x0008)(NoDestructor)
	int32                                         CallFunc_CalcBrainCrashDamage_damage_1;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EB2[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB3[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LeaveBrainCrashAccess_Dummy;              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB4[0x6];                                     // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB5[0x2];                                     // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead; // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0262(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB6[0x1];                                     // 0x0263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBrainCrashEffectLocation_ReturnValue;  // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0278(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead_1;                           // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB7[0x2];                                     // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElectric_ReturnValue;                   // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead_2;                           // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB8[0x1];                                     // 0x0283(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EB9[0x6];                                     // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EBA[0x1];                                     // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHp_ReturnValue;                        // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BrainCrashDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BrainCrashDamage");
static_assert(sizeof(RSBattleEnemy_C_BrainCrashDamage) == 0x0002D0, "Wrong size on RSBattleEnemy_C_BrainCrashDamage");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, LDamage) == 0x000000, "Member 'RSBattleEnemy_C_BrainCrashDamage::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, LBeforeHitInvincibleParts) == 0x000004, "Member 'RSBattleEnemy_C_BrainCrashDamage::LBeforeHitInvincibleParts' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_BrainCrashDamage::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, BrainCrashAction) == 0x000010, "Member 'RSBattleEnemy_C_BrainCrashDamage::BrainCrashAction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, HitResult) == 0x000018, "Member 'RSBattleEnemy_C_BrainCrashDamage::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, Temp_float_Variable) == 0x0001D8, "Member 'RSBattleEnemy_C_BrainCrashDamage::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsBossEnemy_bBoss) == 0x0001DC, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetHPPercent_ReturnValue) == 0x0001E0, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_CalcBrainCrashDamage_damage) == 0x0001E4, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_CalcBrainCrashDamage_damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x0001F0, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_AddScore_EnemyDamage_ReturnValue) == 0x0001FC, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_AddScore_EnemyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_OnDead_Dummy) == 0x000200, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, Temp_bool_Variable) == 0x000201, "Member 'RSBattleEnemy_C_BrainCrashDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetId_ReturnValue) == 0x000204, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000208, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, K2Node_MakeStruct_HCHitEffectInfo) == 0x00020C, "Member 'RSBattleEnemy_C_BrainCrashDamage::K2Node_MakeStruct_HCHitEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_1) == 0x000214, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsEnemyIgnoreDamage_ReturnValue) == 0x000215, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsEnemyIgnoreDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, K2Node_MakeStruct_HCHitEffectInfo_1) == 0x000218, "Member 'RSBattleEnemy_C_BrainCrashDamage::K2Node_MakeStruct_HCHitEffectInfo_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_CalcBrainCrashDamage_damage_1) == 0x000220, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_CalcBrainCrashDamage_damage_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetBrainCore_CoreObject) == 0x000228, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetPlayerManager_PlayerManager) == 0x000230, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_2) == 0x000238, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetPlayer_ReturnValue) == 0x000240, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_LeaveBrainCrashAccess_Dummy) == 0x000248, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_LeaveBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsVisible_ReturnValue) == 0x000249, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetEnemyManager_Manager) == 0x000250, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_3) == 0x000258, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsAvatar_IsAvatar) == 0x000259, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, K2Node_Select_Default) == 0x00025C, "Member 'RSBattleEnemy_C_BrainCrashDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead) == 0x000260, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_4) == 0x000261, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsDead_bDead) == 0x000262, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetBrainCrashEffectLocation_ReturnValue) == 0x000264, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetBrainCrashEffectLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000270, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, Temp_byte_Variable) == 0x000278, "Member 'RSBattleEnemy_C_BrainCrashDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsDead_bDead_1) == 0x000279, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsDead_bDead_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_Array_AddUnique_ReturnValue) == 0x00027C, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_5) == 0x000280, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsElectric_ReturnValue) == 0x000281, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsElectric_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsDead_bDead_2) == 0x000282, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsDead_bDead_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000284, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_BreakRotator_Roll) == 0x000290, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_BreakRotator_Pitch) == 0x000294, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_BreakRotator_Yaw) == 0x000298, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_MakeRotator_ReturnValue) == 0x00029C, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_6) == 0x0002A8, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0002A9, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetPlayerPawn_ReturnValue) == 0x0002B0, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, K2Node_DynamicCast_AsRSBattle_Player) == 0x0002B8, "Member 'RSBattleEnemy_C_BrainCrashDamage::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, K2Node_DynamicCast_bSuccess) == 0x0002C0, "Member 'RSBattleEnemy_C_BrainCrashDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_7) == 0x0002C1, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_IsValid_ReturnValue_8) == 0x0002C2, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_GetHp_ReturnValue) == 0x0002C4, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_GetHp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashDamage, CallFunc_Max_ReturnValue) == 0x0002C8, "Member 'RSBattleEnemy_C_BrainCrashDamage::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateMotionFootParam
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattleEnemy_C_UpdateMotionFootParam final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EBB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_GetMotionFootParamCheck_MotionParam;      // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EBC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition;       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation;       // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition_1;     // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation_1;     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue_1;              // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateMotionFootParam) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateMotionFootParam");
static_assert(sizeof(RSBattleEnemy_C_UpdateMotionFootParam) == 0x0000A0, "Wrong size on RSBattleEnemy_C_UpdateMotionFootParam");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, Sec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_GetMotionFootParamCheck_MotionParam) == 0x000008, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_GetMotionFootParamCheck_MotionParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_TransformFromBoneSpace_OutPosition) == 0x00001C, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_TransformFromBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_TransformFromBoneSpace_OutRotation) == 0x000028, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_TransformFromBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_NegateRotator_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_TransformFromBoneSpace_OutPosition_1) == 0x000040, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_TransformFromBoneSpace_OutPosition_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_TransformFromBoneSpace_OutRotation_1) == 0x00004C, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_TransformFromBoneSpace_OutRotation_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_NegateRotator_ReturnValue_1) == 0x000064, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_NegateRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000070, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00007C, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_BreakVector_X) == 0x000088, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_BreakVector_Y) == 0x00008C, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_BreakVector_Z) == 0x000090, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_Round_ReturnValue) == 0x000094, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootParam, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_UpdateMotionFootParam::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMotionFootParamCheck
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_GetMotionFootParamCheck final
{
public:
	TArray<bool>                                  MotionParam;                                       // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<bool>                                  L_check;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_num;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EBD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EBE[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMotionFootParamCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetMotionFootParamCheck");
static_assert(sizeof(RSBattleEnemy_C_GetMotionFootParamCheck) == 0x000048, "Wrong size on RSBattleEnemy_C_GetMotionFootParamCheck");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, MotionParam) == 0x000000, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::MotionParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, L_check) == 0x000010, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::L_check' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, L_num) == 0x000020, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::L_num' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, Temp_int_Variable) == 0x000024, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_FFloor_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_Percent_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMotionFootParamCheck, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_GetMotionFootParamCheck::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMotionFootParam
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_IsMotionFootParam final
{
public:
	Enum_EnemyMotionParam                         MotionParam;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EBF[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsMotionFootParam) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsMotionFootParam");
static_assert(sizeof(RSBattleEnemy_C_IsMotionFootParam) == 0x000014, "Wrong size on RSBattleEnemy_C_IsMotionFootParam");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, MotionParam) == 0x000000, "Member 'RSBattleEnemy_C_IsMotionFootParam::MotionParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsMotionFootParam::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsMotionFootParam::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, CallFunc_Array_Get_Item) == 0x000008, "Member 'RSBattleEnemy_C_IsMotionFootParam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, CallFunc_NotEqual_NameName_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_IsMotionFootParam::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionFootParam, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_IsMotionFootParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateMotionFootLock
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_UpdateMotionFootLock final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyMotionParam                         L_MotionParam;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EC0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetCurrentMontage_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC2[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMotionFootParam_Ret;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateMotionFootLock) == 0x000010, "Wrong alignment on RSBattleEnemy_C_UpdateMotionFootLock");
static_assert(sizeof(RSBattleEnemy_C_UpdateMotionFootLock) == 0x000070, "Wrong size on RSBattleEnemy_C_UpdateMotionFootLock");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, Sec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, L_MotionParam) == 0x000004, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::L_MotionParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, Temp_float_Variable) == 0x000008, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_GetCurrentMontage_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_GetCurrentMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000024, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_IsMotionFootParam_Ret) == 0x000028, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_IsMotionFootParam_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, Temp_float_Variable_1) == 0x00002C, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMotionFootLock, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_UpdateMotionFootLock::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDeadBoss
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_UpdateDeadBoss final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDeadBoss) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateDeadBoss");
static_assert(sizeof(RSBattleEnemy_C_UpdateDeadBoss) == 0x00000C, "Wrong size on RSBattleEnemy_C_UpdateDeadBoss");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadBoss, Sec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDeadBoss::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadBoss, CallFunc_IsDead_bDead) == 0x000004, "Member 'RSBattleEnemy_C_UpdateDeadBoss::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadBoss, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateDeadBoss::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDeadBoss, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDeadBoss::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetPhysics
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetPhysics final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          On;                                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IncludeSelf;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetPhysics) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetPhysics");
static_assert(sizeof(RSBattleEnemy_C_SetPhysics) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetPhysics");
static_assert(offsetof(RSBattleEnemy_C_SetPhysics, Param_Name) == 0x000000, "Member 'RSBattleEnemy_C_SetPhysics::Param_Name' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetPhysics, On) == 0x000008, "Member 'RSBattleEnemy_C_SetPhysics::On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetPhysics, IncludeSelf) == 0x000009, "Member 'RSBattleEnemy_C_SetPhysics::IncludeSelf' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AddRagdollPower
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_AddRagdollPower final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Power;                                             // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_AddRagdollPower) == 0x000004, "Wrong alignment on RSBattleEnemy_C_AddRagdollPower");
static_assert(sizeof(RSBattleEnemy_C_AddRagdollPower) == 0x000014, "Wrong size on RSBattleEnemy_C_AddRagdollPower");
static_assert(offsetof(RSBattleEnemy_C_AddRagdollPower, Param_Name) == 0x000000, "Member 'RSBattleEnemy_C_AddRagdollPower::Param_Name' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddRagdollPower, Power) == 0x000008, "Member 'RSBattleEnemy_C_AddRagdollPower::Power' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetRagdollDamage
// 0x02A0 (0x02A0 - 0x0000)
struct RSBattleEnemy_C_SetRagdollDamage final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FRotator                               L_Rotation;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_HitObj;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC6[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EC7[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x0038(0x01C0)(ContainsInstancedReference)
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAttackdirection_return;                // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC8[0x2];                                     // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAttackDirection_attack_direction;      // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EC9[0x3];                                     // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        CallFunc_GetObjectSize_object_size;                // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ECA[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ECB[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetRagdollDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetRagdollDamage");
static_assert(sizeof(RSBattleEnemy_C_SetRagdollDamage) == 0x0002A0, "Wrong size on RSBattleEnemy_C_SetRagdollDamage");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, Result) == 0x000000, "Member 'RSBattleEnemy_C_SetRagdollDamage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, L_Rotation) == 0x000010, "Member 'RSBattleEnemy_C_SetRagdollDamage::L_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, L_HitObj) == 0x00001C, "Member 'RSBattleEnemy_C_SetRagdollDamage::L_HitObj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_SetRagdollDamage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, Temp_int_Array_Index_Variable) == 0x000030, "Member 'RSBattleEnemy_C_SetRagdollDamage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x0001F8, "Member 'RSBattleEnemy_C_SetRagdollDamage::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'RSBattleEnemy_C_SetRagdollDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_GetAttackdirection_return) == 0x000201, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_GetAttackdirection_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_GetAttackDirection_attack_direction) == 0x000204, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_GetAttackDirection_attack_direction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_IsValid_ReturnValue) == 0x000210, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000214, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_GetObjectSize_object_size) == 0x000220, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_GetObjectSize_object_size' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000224, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, K2Node_SwitchEnum_CmpSuccess) == 0x000230, "Member 'RSBattleEnemy_C_SetRagdollDamage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_FindLookAtRotation_ReturnValue) == 0x000234, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000240, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00024C, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x000258, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000264, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_MakeVector_ReturnValue) == 0x000268, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000274, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_MakeVector_ReturnValue_1) == 0x000278, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000284, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_MakeVector_ReturnValue_2) == 0x000288, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRagdollDamage, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000294, "Member 'RSBattleEnemy_C_SetRagdollDamage::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetRotationRate
// 0x0024 (0x0024 - 0x0000)
struct RSBattleEnemy_C_SetRotationRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reset;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ECC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetRotationRate) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetRotationRate");
static_assert(sizeof(RSBattleEnemy_C_SetRotationRate) == 0x000024, "Wrong size on RSBattleEnemy_C_SetRotationRate");
static_assert(offsetof(RSBattleEnemy_C_SetRotationRate, Rate) == 0x000000, "Member 'RSBattleEnemy_C_SetRotationRate::Rate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRotationRate, Reset) == 0x000004, "Member 'RSBattleEnemy_C_SetRotationRate::Reset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRotationRate, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetRotationRate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRotationRate, CallFunc_MakeRotator_ReturnValue_1) == 0x000014, "Member 'RSBattleEnemy_C_SetRotationRate::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRotationRate, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetRotationRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcIntegerScale
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_CalcIntegerScale final
{
public:
	TArray<int32>                                 Num;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ECD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Return;                                            // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 Local;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ECE[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcIntegerScale) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcIntegerScale");
static_assert(sizeof(RSBattleEnemy_C_CalcIntegerScale) == 0x000060, "Wrong size on RSBattleEnemy_C_CalcIntegerScale");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Num) == 0x000000, "Member 'RSBattleEnemy_C_CalcIntegerScale::Num' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Scale) == 0x000010, "Member 'RSBattleEnemy_C_CalcIntegerScale::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Return) == 0x000018, "Member 'RSBattleEnemy_C_CalcIntegerScale::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Local) == 0x000028, "Member 'RSBattleEnemy_C_CalcIntegerScale::Local' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'RSBattleEnemy_C_CalcIntegerScale::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'RSBattleEnemy_C_CalcIntegerScale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Array_Get_Item) == 0x000044, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_FTrunc_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcIntegerScale, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_CalcIntegerScale::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcFloatScale
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_CalcFloatScale final
{
public:
	TArray<float>                                 Num;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ECF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Return;                                            // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<float>                                 Local;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED0[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcFloatScale) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcFloatScale");
static_assert(sizeof(RSBattleEnemy_C_CalcFloatScale) == 0x000058, "Wrong size on RSBattleEnemy_C_CalcFloatScale");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Num) == 0x000000, "Member 'RSBattleEnemy_C_CalcFloatScale::Num' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Scale) == 0x000010, "Member 'RSBattleEnemy_C_CalcFloatScale::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Return) == 0x000018, "Member 'RSBattleEnemy_C_CalcFloatScale::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Local) == 0x000028, "Member 'RSBattleEnemy_C_CalcFloatScale::Local' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'RSBattleEnemy_C_CalcFloatScale::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'RSBattleEnemy_C_CalcFloatScale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Array_Get_Item) == 0x000044, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFloatScale, CallFunc_Array_Add_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_CalcFloatScale::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPsychicObjectCombo
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_IsPsychicObjectCombo final
{
public:
	struct FHCHitResult                           HCHitResult;                                       // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Ret;                                             // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicObjectCombo_ReturnValue;         // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPsychicObjectCombo) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsPsychicObjectCombo");
static_assert(sizeof(RSBattleEnemy_C_IsPsychicObjectCombo) == 0x0001C8, "Wrong size on RSBattleEnemy_C_IsPsychicObjectCombo");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicObjectCombo, HCHitResult) == 0x000000, "Member 'RSBattleEnemy_C_IsPsychicObjectCombo::HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicObjectCombo, Return) == 0x0001C0, "Member 'RSBattleEnemy_C_IsPsychicObjectCombo::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicObjectCombo, L_Ret) == 0x0001C1, "Member 'RSBattleEnemy_C_IsPsychicObjectCombo::L_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicObjectCombo, CallFunc_IsPsychicObjectCombo_ReturnValue) == 0x0001C2, "Member 'RSBattleEnemy_C_IsPsychicObjectCombo::CallFunc_IsPsychicObjectCombo_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.FlyUp
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattleEnemy_C_FlyUp final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED1[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED2[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0044(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_FlyUp) == 0x000004, "Wrong alignment on RSBattleEnemy_C_FlyUp");
static_assert(sizeof(RSBattleEnemy_C_FlyUp) == 0x0000D0, "Wrong size on RSBattleEnemy_C_FlyUp");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, Sec) == 0x000000, "Member 'RSBattleEnemy_C_FlyUp::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_BreakVector_X) == 0x000014, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_BreakVector_Y) == 0x000018, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_BreakVector_Z) == 0x00001C, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_GetFloatValue_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000044, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FlyUp, CallFunc_IsFlying_ReturnValue) == 0x0000CD, "Member 'RSBattleEnemy_C_FlyUp::CallFunc_IsFlying_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AddEnemyListManager
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_AddEnemyListManager final
{
public:
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_AddEnemyListManager) == 0x000008, "Wrong alignment on RSBattleEnemy_C_AddEnemyListManager");
static_assert(sizeof(RSBattleEnemy_C_AddEnemyListManager) == 0x000010, "Wrong size on RSBattleEnemy_C_AddEnemyListManager");
static_assert(offsetof(RSBattleEnemy_C_AddEnemyListManager, CallFunc_GetEnemyManager_Manager) == 0x000000, "Member 'RSBattleEnemy_C_AddEnemyListManager::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddEnemyListManager, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_AddEnemyListManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAiDataTable
// 0x0208 (0x0208 - 0x0000)
struct RSBattleEnemy_C_GetAiDataTable final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoProblemNotFound;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          Param;                                             // 0x0008(0x00A0)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         LIdx;                                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ED4[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ED5[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00E0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0120(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0130(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FAiParamEnemy                          CallFunc_Map_Find_Value;                           // 0x0158(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED6[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetAiDataTable) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetAiDataTable");
static_assert(sizeof(RSBattleEnemy_C_GetAiDataTable) == 0x000208, "Wrong size on RSBattleEnemy_C_GetAiDataTable");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, Enum) == 0x000000, "Member 'RSBattleEnemy_C_GetAiDataTable::Enum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, NoProblemNotFound) == 0x000001, "Member 'RSBattleEnemy_C_GetAiDataTable::NoProblemNotFound' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, Param) == 0x000008, "Member 'RSBattleEnemy_C_GetAiDataTable::Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, LIdx) == 0x0000A8, "Member 'RSBattleEnemy_C_GetAiDataTable::LIdx' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_GetAiDataTableString_Param) == 0x0000B0, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Conv_StringToText_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, K2Node_MakeStruct_FormatArgumentData) == 0x0000E0, "Member 'RSBattleEnemy_C_GetAiDataTable::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, K2Node_MakeArray_Array) == 0x000120, "Member 'RSBattleEnemy_C_GetAiDataTable::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Format_ReturnValue) == 0x000130, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Conv_TextToString_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Map_Find_Value) == 0x000158, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Map_Find_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Map_Length_ReturnValue) == 0x0001FC, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTable, CallFunc_Greater_IntInt_ReturnValue) == 0x000200, "Member 'RSBattleEnemy_C_GetAiDataTable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAiDataTableString
// 0x00B0 (0x00B0 - 0x0000)
struct RSBattleEnemy_C_GetAiDataTableString final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ED7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	Enum_em0300                                   NewLocalVar_1;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8ED8[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
};
static_assert(alignof(RSBattleEnemy_C_GetAiDataTableString) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetAiDataTableString");
static_assert(sizeof(RSBattleEnemy_C_GetAiDataTableString) == 0x0000B0, "Wrong size on RSBattleEnemy_C_GetAiDataTableString");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, Enum) == 0x000000, "Member 'RSBattleEnemy_C_GetAiDataTableString::Enum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, Param) == 0x000008, "Member 'RSBattleEnemy_C_GetAiDataTableString::Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, NewLocalVar_1) == 0x000018, "Member 'RSBattleEnemy_C_GetAiDataTableString::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, CallFunc_GetObjectName_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetAiDataTableString::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetAiDataTableString::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'RSBattleEnemy_C_GetAiDataTableString::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, K2Node_MakeArray_Array) == 0x000088, "Member 'RSBattleEnemy_C_GetAiDataTableString::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiDataTableString, CallFunc_Format_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_GetAiDataTableString::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Set Enemy Target Battle
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattleEnemy_C_Set_Enemy_Target_Battle final
{
public:
	class ABP_EnemyManager_C*                     EnemyManager;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeFlagNative_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED9[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattlefieldManager_C*               CallFunc_GetBattlefieldManager_BP_BattlefieldManager; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBattlefieldInfo                       CallFunc_GetBattlefieldInfo_BFInfo;                // 0x0020(0x0088)()
	bool                                          CallFunc_GetBattlefieldInfo_IsExist;               // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EDA[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue; // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EDB[0x6];                                     // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Set_Enemy_Target_Battle) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Set_Enemy_Target_Battle");
static_assert(sizeof(RSBattleEnemy_C_Set_Enemy_Target_Battle) == 0x0000F8, "Wrong size on RSBattleEnemy_C_Set_Enemy_Target_Battle");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, EnemyManager) == 0x000000, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::EnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetEnemyManager_EnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_IsStealthSeeFlagNative_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_IsStealthSeeFlagNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetBattlefieldManager_BP_BattlefieldManager) == 0x000018, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetBattlefieldManager_BP_BattlefieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetBattlefieldInfo_BFInfo) == 0x000020, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetBattlefieldInfo_BFInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetBattlefieldInfo_IsExist) == 0x0000A8, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetBattlefieldInfo_IsExist' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0000A9, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x0000AA, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_BooleanAND_ReturnValue) == 0x0000AB, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_Conv_IntToString_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_Conv_StringToName_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_IsStateStealth_Return) == 0x0000D8, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue) == 0x0000D9, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetBattleManager_BattleManager) == 0x0000E0, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_GetEnemyManager_Manager) == 0x0000E8, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Set_Enemy_Target_Battle, CallFunc_IsDead_bDead) == 0x0000F0, "Member 'RSBattleEnemy_C_Set_Enemy_Target_Battle::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetEnemyTargetBattle
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_ResetEnemyTargetBattle final
{
public:
	EReasonBattleEnd                              CallFunc_GetReasonBattleEnd_Reason;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EDC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetEnemyTargetBattle) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ResetEnemyTargetBattle");
static_assert(sizeof(RSBattleEnemy_C_ResetEnemyTargetBattle) == 0x000020, "Wrong size on RSBattleEnemy_C_ResetEnemyTargetBattle");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTargetBattle, CallFunc_GetReasonBattleEnd_Reason) == 0x000000, "Member 'RSBattleEnemy_C_ResetEnemyTargetBattle::CallFunc_GetReasonBattleEnd_Reason' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTargetBattle, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattleEnemy_C_ResetEnemyTargetBattle::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTargetBattle, CallFunc_GetEnemyManager_Manager) == 0x000010, "Member 'RSBattleEnemy_C_ResetEnemyTargetBattle::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTargetBattle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_ResetEnemyTargetBattle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTargetBattle, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'RSBattleEnemy_C_ResetEnemyTargetBattle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnAttackActorHit
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_OnAttackActorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackActorHit_Dummy;                   // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnAttackActorHit) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnAttackActorHit");
static_assert(sizeof(RSBattleEnemy_C_OnAttackActorHit) == 0x0001C8, "Wrong size on RSBattleEnemy_C_OnAttackActorHit");
static_assert(offsetof(RSBattleEnemy_C_OnAttackActorHit, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_OnAttackActorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnAttackActorHit, Dummy) == 0x0001C0, "Member 'RSBattleEnemy_C_OnAttackActorHit::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnAttackActorHit, CallFunc_OnAttackActorHit_Dummy) == 0x0001C1, "Member 'RSBattleEnemy_C_OnAttackActorHit::CallFunc_OnAttackActorHit_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDamageElecDown
// 0x0005 (0x0005 - 0x0000)
struct RSBattleEnemy_C_SetDamageElecDown final
{
public:
	EHCBadState                                   bad;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isEnemyDamageLaunch_bool;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageDownWait_return;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDamageElecDown) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetDamageElecDown");
static_assert(sizeof(RSBattleEnemy_C_SetDamageElecDown) == 0x000005, "Wrong size on RSBattleEnemy_C_SetDamageElecDown");
static_assert(offsetof(RSBattleEnemy_C_SetDamageElecDown, bad) == 0x000000, "Member 'RSBattleEnemy_C_SetDamageElecDown::bad' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageElecDown, CallFunc_isEnemyDamageLaunch_bool) == 0x000001, "Member 'RSBattleEnemy_C_SetDamageElecDown::CallFunc_isEnemyDamageLaunch_bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageElecDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_SetDamageElecDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageElecDown, CallFunc_IsDamageDownWait_return) == 0x000003, "Member 'RSBattleEnemy_C_SetDamageElecDown::CallFunc_IsDamageDownWait_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageElecDown, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetDamageElecDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDamageAnim
// 0x000A (0x000A - 0x0000)
struct RSBattleEnemy_C_UpdateDamageAnim final
{
public:
	bool                                          DamageEnd;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DamageDownEnd;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LDamageDown;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LDamage;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAction_Dummy;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDamageAnim) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UpdateDamageAnim");
static_assert(sizeof(RSBattleEnemy_C_UpdateDamageAnim) == 0x00000A, "Wrong size on RSBattleEnemy_C_UpdateDamageAnim");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, DamageEnd) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDamageAnim::DamageEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, DamageDownEnd) == 0x000001, "Member 'RSBattleEnemy_C_UpdateDamageAnim::DamageDownEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, LDamageDown) == 0x000002, "Member 'RSBattleEnemy_C_UpdateDamageAnim::LDamageDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, LDamage) == 0x000003, "Member 'RSBattleEnemy_C_UpdateDamageAnim::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_ResetAction_Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_ResetAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_UpdateDamageAnim::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAnimRootMotionScale
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetAnimRootMotionScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAnimRootMotionScale) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetAnimRootMotionScale");
static_assert(sizeof(RSBattleEnemy_C_SetAnimRootMotionScale) == 0x000008, "Wrong size on RSBattleEnemy_C_SetAnimRootMotionScale");
static_assert(offsetof(RSBattleEnemy_C_SetAnimRootMotionScale, Scale) == 0x000000, "Member 'RSBattleEnemy_C_SetAnimRootMotionScale::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimRootMotionScale, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetAnimRootMotionScale::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsFloodedAnimRootMotionScale
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsFloodedAnimRootMotionScale final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFloodedAnimRootMotionScale_ReturnValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsFloodedAnimRootMotionScale) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsFloodedAnimRootMotionScale");
static_assert(sizeof(RSBattleEnemy_C_IsFloodedAnimRootMotionScale) == 0x000003, "Wrong size on RSBattleEnemy_C_IsFloodedAnimRootMotionScale");
static_assert(offsetof(RSBattleEnemy_C_IsFloodedAnimRootMotionScale, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsFloodedAnimRootMotionScale::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsFloodedAnimRootMotionScale, Return) == 0x000001, "Member 'RSBattleEnemy_C_IsFloodedAnimRootMotionScale::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsFloodedAnimRootMotionScale, CallFunc_IsFloodedAnimRootMotionScale_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsFloodedAnimRootMotionScale::CallFunc_IsFloodedAnimRootMotionScale_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateBrainCrashMotionCheck
// 0x00E8 (0x00E8 - 0x0000)
struct RSBattleEnemy_C_UpdateBrainCrashMotionCheck final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EDD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              L_basic;                                           // 0x0008(0x0068)(Edit, BlueprintVisible)
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0070(0x0068)()
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EDE[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyBrainCrashAnimKind                       CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue;   // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateBrainCrashMotionCheck");
static_assert(sizeof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck) == 0x0000E8, "Wrong size on RSBattleEnemy_C_UpdateBrainCrashMotionCheck");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, Timer) == 0x000000, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::Timer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, L_basic) == 0x000008, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::L_basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_GetParameterBasic_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000DC, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_IsValid_ReturnValue) == 0x0000E1, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E2, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue) == 0x0000E3, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBrainCrashMotionCheck, K2Node_SwitchEnum_CmpSuccess) == 0x0000E4, "Member 'RSBattleEnemy_C_UpdateBrainCrashMotionCheck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainFieldStart
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_OnBrainFieldStart final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainFieldStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnBrainFieldStart");
static_assert(sizeof(RSBattleEnemy_C_OnBrainFieldStart) == 0x000002, "Wrong size on RSBattleEnemy_C_OnBrainFieldStart");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldStart, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainFieldStart::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldStart, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnBrainFieldStart::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainFieldEnd
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_OnBrainFieldEnd final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainFieldEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnBrainFieldEnd");
static_assert(sizeof(RSBattleEnemy_C_OnBrainFieldEnd) == 0x000003, "Wrong size on RSBattleEnemy_C_OnBrainFieldEnd");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldEnd, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainFieldEnd::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldEnd, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnBrainFieldEnd::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldEnd, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_OnBrainFieldEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMoveRootMotion
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetMoveRootMotion final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetMoveRootMotion) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetMoveRootMotion");
static_assert(sizeof(RSBattleEnemy_C_SetMoveRootMotion) == 0x000002, "Wrong size on RSBattleEnemy_C_SetMoveRootMotion");
static_assert(offsetof(RSBattleEnemy_C_SetMoveRootMotion, On) == 0x000000, "Member 'RSBattleEnemy_C_SetMoveRootMotion::On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveRootMotion, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetMoveRootMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StopDamageMontage
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StopDamageMontage final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StopDamageMontage) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StopDamageMontage");
static_assert(sizeof(RSBattleEnemy_C_StopDamageMontage) == 0x000001, "Wrong size on RSBattleEnemy_C_StopDamageMontage");
static_assert(offsetof(RSBattleEnemy_C_StopDamageMontage, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StopDamageMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.NotDamageMontage
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_NotDamageMontage final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotDamageMotion_bNotDamageMotion;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotDamageMontage_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_NotDamageMontage) == 0x000001, "Wrong alignment on RSBattleEnemy_C_NotDamageMontage");
static_assert(sizeof(RSBattleEnemy_C_NotDamageMontage) == 0x000003, "Wrong size on RSBattleEnemy_C_NotDamageMontage");
static_assert(offsetof(RSBattleEnemy_C_NotDamageMontage, Return) == 0x000000, "Member 'RSBattleEnemy_C_NotDamageMontage::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NotDamageMontage, CallFunc_IsNotDamageMotion_bNotDamageMotion) == 0x000001, "Member 'RSBattleEnemy_C_NotDamageMontage::CallFunc_IsNotDamageMotion_bNotDamageMotion' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_NotDamageMontage, CallFunc_NotDamageMontage_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_NotDamageMontage::CallFunc_NotDamageMontage_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageMontage
// 0x01F0 (0x01F0 - 0x0000)
struct RSBattleEnemy_C_DamageMontage final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Damage_Enable;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EDF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableDamageAddReaction_ReturnValue;   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE0[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x0028(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_IsDead_bDead;                             // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget;             // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType;                // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotDamageMontage_return;                  // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DamageMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DamageMontage");
static_assert(sizeof(RSBattleEnemy_C_DamageMontage) == 0x0001F0, "Wrong size on RSBattleEnemy_C_DamageMontage");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, Result) == 0x000000, "Member 'RSBattleEnemy_C_DamageMontage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, Damage_Enable) == 0x000010, "Member 'RSBattleEnemy_C_DamageMontage::Damage_Enable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, Attacker) == 0x000018, "Member 'RSBattleEnemy_C_DamageMontage::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, Ret) == 0x000020, "Member 'RSBattleEnemy_C_DamageMontage::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_IsDisableDamageAddReaction_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_IsDisableDamageAddReaction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_Array_Get_Item) == 0x000028, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_IsDead_bDead) == 0x0001E8, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_IsValid_ReturnValue_1) == 0x0001E9, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_GetHitStopParam_IgnoreTarget) == 0x0001EA, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_GetHitStopParam_IgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_GetHitStopParam_CauseType) == 0x0001EB, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_GetHitStopParam_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMontage, CallFunc_NotDamageMontage_return) == 0x0001EC, "Member 'RSBattleEnemy_C_DamageMontage::CallFunc_NotDamageMontage_return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakMaterialRate
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_WeakMaterialRate final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE1[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LEmissivePowerValue;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLocalVar_3;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EE2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         LMesh;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          LMultiWeak;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LWeakSlotName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         LWeakSlotNameList;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FST_emEnableWeakData>           LWeakDataList;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreUpdateWeakMaterialRate_r_isMultiWeak;  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStopWeakEmissive_IsStop;                // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE4[0x1];                                     // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcWeakAttackMaterialRate_ReturnValue;   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_WeakMaterialRate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakMaterialRate");
static_assert(sizeof(RSBattleEnemy_C_WeakMaterialRate) == 0x000070, "Wrong size on RSBattleEnemy_C_WeakMaterialRate");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_WeakMaterialRate::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, Ret) == 0x000004, "Member 'RSBattleEnemy_C_WeakMaterialRate::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LEmissivePowerValue) == 0x000008, "Member 'RSBattleEnemy_C_WeakMaterialRate::LEmissivePowerValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, CurveValue) == 0x00000C, "Member 'RSBattleEnemy_C_WeakMaterialRate::CurveValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, NewLocalVar_3) == 0x000010, "Member 'RSBattleEnemy_C_WeakMaterialRate::NewLocalVar_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LMesh) == 0x000018, "Member 'RSBattleEnemy_C_WeakMaterialRate::LMesh' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LMultiWeak) == 0x000028, "Member 'RSBattleEnemy_C_WeakMaterialRate::LMultiWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LWeakSlotName) == 0x000030, "Member 'RSBattleEnemy_C_WeakMaterialRate::LWeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LWeakSlotNameList) == 0x000040, "Member 'RSBattleEnemy_C_WeakMaterialRate::LWeakSlotNameList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, LWeakDataList) == 0x000050, "Member 'RSBattleEnemy_C_WeakMaterialRate::LWeakDataList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, L_Value) == 0x000060, "Member 'RSBattleEnemy_C_WeakMaterialRate::L_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_WeakMaterialRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, CallFunc_PreUpdateWeakMaterialRate_r_isMultiWeak) == 0x000065, "Member 'RSBattleEnemy_C_WeakMaterialRate::CallFunc_PreUpdateWeakMaterialRate_r_isMultiWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, CallFunc_IsStopWeakEmissive_IsStop) == 0x000066, "Member 'RSBattleEnemy_C_WeakMaterialRate::CallFunc_IsStopWeakEmissive_IsStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialRate, CallFunc_CalcWeakAttackMaterialRate_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_WeakMaterialRate::CallFunc_CalcWeakAttackMaterialRate_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakMaterialEmissiveRate
// 0x00C8 (0x00C8 - 0x0000)
struct RSBattleEnemy_C_WeakMaterialEmissiveRate final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LCurveValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_time;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStopWeakEmissive_IsStop;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EE6[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes_1;                   // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE7[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE8[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EE9[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EEA[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EEB[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EEC[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EED[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EEE[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakMaterialEmissiveRate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakMaterialEmissiveRate");
static_assert(sizeof(RSBattleEnemy_C_WeakMaterialEmissiveRate) == 0x0000C8, "Wrong size on RSBattleEnemy_C_WeakMaterialEmissiveRate");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, Sec) == 0x000000, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, LCurveValue) == 0x000004, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::LCurveValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, L_time) == 0x000008, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::L_time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, Temp_int_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_IsStopWeakEmissive_IsStop) == 0x000014, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_IsStopWeakEmissive_IsStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_GetBodyMeshes_Meshes) == 0x000018, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Array_Get_Item) == 0x000028, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_GetBodyMeshes_Meshes_1) == 0x000038, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_GetBodyMeshes_Meshes_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, Temp_int_Variable_1) == 0x000050, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_FClamp_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Add_FloatFloat_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000070, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_BooleanOR_ReturnValue) == 0x000071, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000072, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_FClamp_ReturnValue_1) == 0x00007C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_GetFloatValue_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Lerp_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_FClamp_ReturnValue_2) == 0x000090, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_IsValid_ReturnValue) == 0x000094, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_IsHideWeak_IsHideWeak) == 0x000095, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x000096, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000097, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_BooleanOR_ReturnValue_1) == 0x000098, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_GetVectorValue_ReturnValue) == 0x0000A0, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_BreakVector_X) == 0x0000AC, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_BreakVector_Y) == 0x0000B0, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_BreakVector_Z) == 0x0000B4, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x0000B8, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_FClamp_ReturnValue_3) == 0x0000C0, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialEmissiveRate, CallFunc_IsValid_ReturnValue_1) == 0x0000C4, "Member 'RSBattleEnemy_C_WeakMaterialEmissiveRate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitWeak
// 0x0100 (0x0100 - 0x0000)
struct RSBattleEnemy_C_IsHitWeak final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0008(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreWeak;                                      // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x00FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_ReturnValue;                    // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitWeak) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitWeak");
static_assert(sizeof(RSBattleEnemy_C_IsHitWeak) == 0x000100, "Wrong size on RSBattleEnemy_C_IsHitWeak");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, Primitive) == 0x000000, "Member 'RSBattleEnemy_C_IsHitWeak::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, SkillInfo) == 0x000008, "Member 'RSBattleEnemy_C_IsHitWeak::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, Return) == 0x0000F8, "Member 'RSBattleEnemy_C_IsHitWeak::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, L_IgnoreWeak) == 0x0000F9, "Member 'RSBattleEnemy_C_IsHitWeak::L_IgnoreWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, L_return) == 0x0000FA, "Member 'RSBattleEnemy_C_IsHitWeak::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak, CallFunc_IsHitWeak_ReturnValue) == 0x0000FB, "Member 'RSBattleEnemy_C_IsHitWeak::CallFunc_IsHitWeak_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitPart
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_IsHitPart final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         No;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitPart_ReturnValue;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitPart) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitPart");
static_assert(sizeof(RSBattleEnemy_C_IsHitPart) == 0x000010, "Wrong size on RSBattleEnemy_C_IsHitPart");
static_assert(offsetof(RSBattleEnemy_C_IsHitPart, Primitive) == 0x000000, "Member 'RSBattleEnemy_C_IsHitPart::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitPart, No) == 0x000008, "Member 'RSBattleEnemy_C_IsHitPart::No' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitPart, Return) == 0x00000C, "Member 'RSBattleEnemy_C_IsHitPart::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitPart, L_return) == 0x00000D, "Member 'RSBattleEnemy_C_IsHitPart::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitPart, CallFunc_IsHitPart_ReturnValue) == 0x00000E, "Member 'RSBattleEnemy_C_IsHitPart::CallFunc_IsHitPart_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakMaterialHitDamage
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_WeakMaterialHitDamage final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          L_Hit;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WeakMaterialHitDamage_ReturnValue;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakMaterialHitDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakMaterialHitDamage");
static_assert(sizeof(RSBattleEnemy_C_WeakMaterialHitDamage) == 0x000018, "Wrong size on RSBattleEnemy_C_WeakMaterialHitDamage");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialHitDamage, Result) == 0x000000, "Member 'RSBattleEnemy_C_WeakMaterialHitDamage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialHitDamage, L_Hit) == 0x000010, "Member 'RSBattleEnemy_C_WeakMaterialHitDamage::L_Hit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialHitDamage, CallFunc_IsHideWeak_IsHideWeak) == 0x000011, "Member 'RSBattleEnemy_C_WeakMaterialHitDamage::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialHitDamage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_WeakMaterialHitDamage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakMaterialHitDamage, CallFunc_WeakMaterialHitDamage_ReturnValue) == 0x000013, "Member 'RSBattleEnemy_C_WeakMaterialHitDamage::CallFunc_WeakMaterialHitDamage_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotTarget
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsNotTarget final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Ret;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotTargetNative_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotTarget) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotTarget");
static_assert(sizeof(RSBattleEnemy_C_IsNotTarget) == 0x000003, "Wrong size on RSBattleEnemy_C_IsNotTarget");
static_assert(offsetof(RSBattleEnemy_C_IsNotTarget, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsNotTarget::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotTarget, L_Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsNotTarget::L_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotTarget, CallFunc_IsNotTargetNative_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsNotTarget::CallFunc_IsNotTargetNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEvent
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEvent final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Ret;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEvent) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEvent");
static_assert(sizeof(RSBattleEnemy_C_IsEvent) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEvent");
static_assert(offsetof(RSBattleEnemy_C_IsEvent, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEvent::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEvent, L_Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsEvent::L_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEvent, CallFunc_IsEvent_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEvent::CallFunc_IsEvent_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DeadCleanup
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_DeadCleanup final
{
public:
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwitchDispCore_Dummy;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EEF[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LeaveBrainCrashAccess_Dummy;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackedEnemyDead_Dummy;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DeadCleanup) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DeadCleanup");
static_assert(sizeof(RSBattleEnemy_C_DeadCleanup) == 0x000038, "Wrong size on RSBattleEnemy_C_DeadCleanup");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, Param_LEnemyManager) == 0x000000, "Member 'RSBattleEnemy_C_DeadCleanup::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_SwitchDispCore_Dummy) == 0x000008, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_SwitchDispCore_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00000A, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000010, "Member 'RSBattleEnemy_C_DeadCleanup::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_DeadCleanup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_LeaveBrainCrashAccess_Dummy) == 0x000021, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_LeaveBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_OnAttackedEnemyDead_Dummy) == 0x000022, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_OnAttackedEnemyDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_GetEnemyManager_Manager) == 0x000028, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadCleanup, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_DeadCleanup::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateMoveTimer
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_UpdateMoveTimer final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateMoveTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateMoveTimer");
static_assert(sizeof(RSBattleEnemy_C_UpdateMoveTimer) == 0x00000C, "Wrong size on RSBattleEnemy_C_UpdateMoveTimer");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveTimer, Sec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateMoveTimer::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveTimer, Param_Name) == 0x000004, "Member 'RSBattleEnemy_C_UpdateMoveTimer::Param_Name' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMoveCheck
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_IsMoveCheck final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_IsMoveCheck) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsMoveCheck");
static_assert(sizeof(RSBattleEnemy_C_IsMoveCheck) == 0x00000C, "Wrong size on RSBattleEnemy_C_IsMoveCheck");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheck, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsMoveCheck::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheck, Param_Name) == 0x000004, "Member 'RSBattleEnemy_C_IsMoveCheck::Param_Name' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMoveRun
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetMoveRun final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetMoveRun) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetMoveRun");
static_assert(sizeof(RSBattleEnemy_C_SetMoveRun) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetMoveRun");
static_assert(offsetof(RSBattleEnemy_C_SetMoveRun, Return) == 0x000000, "Member 'RSBattleEnemy_C_SetMoveRun::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveRun, Param_Name) == 0x000004, "Member 'RSBattleEnemy_C_SetMoveRun::Param_Name' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMoveWalk
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetMoveWalk final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetMoveWalk) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetMoveWalk");
static_assert(sizeof(RSBattleEnemy_C_SetMoveWalk) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetMoveWalk");
static_assert(offsetof(RSBattleEnemy_C_SetMoveWalk, Return) == 0x000000, "Member 'RSBattleEnemy_C_SetMoveWalk::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveWalk, Param_Name) == 0x000004, "Member 'RSBattleEnemy_C_SetMoveWalk::Param_Name' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAiTimer
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetAiTimer final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EF4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AiTimer;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCTTimer_LastTimer;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetAiTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetAiTimer");
static_assert(sizeof(RSBattleEnemy_C_GetAiTimer) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetAiTimer");
static_assert(offsetof(RSBattleEnemy_C_GetAiTimer, Enum) == 0x000000, "Member 'RSBattleEnemy_C_GetAiTimer::Enum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiTimer, AiTimer) == 0x000004, "Member 'RSBattleEnemy_C_GetAiTimer::AiTimer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiTimer, CallFunc_GetCTTimer_LastTimer) == 0x000008, "Member 'RSBattleEnemy_C_GetAiTimer::CallFunc_GetCTTimer_LastTimer' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAiTimer
// 0x00A8 (0x00A8 - 0x0000)
struct RSBattleEnemy_C_SetAiTimer final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF5[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          CallFunc_GetAiDataTable_Param;                     // 0x0008(0x00A0)(HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetAiTimer) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetAiTimer");
static_assert(sizeof(RSBattleEnemy_C_SetAiTimer) == 0x0000A8, "Wrong size on RSBattleEnemy_C_SetAiTimer");
static_assert(offsetof(RSBattleEnemy_C_SetAiTimer, Enum) == 0x000000, "Member 'RSBattleEnemy_C_SetAiTimer::Enum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAiTimer, Return) == 0x000001, "Member 'RSBattleEnemy_C_SetAiTimer::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAiTimer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_SetAiTimer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAiTimer, CallFunc_GetAiDataTable_Param) == 0x000008, "Member 'RSBattleEnemy_C_SetAiTimer::CallFunc_GetAiDataTable_Param' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateWeakUIDisplay
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_UpdateWeakUIDisplay final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetEnemy_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateWeakUIDisplay) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateWeakUIDisplay");
static_assert(sizeof(RSBattleEnemy_C_UpdateWeakUIDisplay) == 0x000014, "Wrong size on RSBattleEnemy_C_UpdateWeakUIDisplay");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakUIDisplay, CallFunc_IsTargetEnemy_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_UpdateWeakUIDisplay::CallFunc_IsTargetEnemy_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakDamageHitCheck
// 0x0580 (0x0580 - 0x0000)
struct RSBattleEnemy_C_WeakDamageHitCheck final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x0020(0x01C0)(ContainsInstancedReference)
	struct FHCHitResult                           CallFunc_Array_Get_Item_1;                         // 0x01E0(0x01C0)(ContainsInstancedReference)
	struct FHCHitResult                           CallFunc_ReplaceHitResult_ReturnHitResult;         // 0x03A0(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_IsHitWeak_Return;                         // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_Return_1;                       // 0x0561(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitCrashDamage_Return;                  // 0x0562(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF6[0x1];                                     // 0x0563(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x056C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0571(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF7[0x2];                                     // 0x0572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0574(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakDamageHitCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakDamageHitCheck");
static_assert(sizeof(RSBattleEnemy_C_WeakDamageHitCheck) == 0x000580, "Wrong size on RSBattleEnemy_C_WeakDamageHitCheck");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, Result) == 0x000000, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Array_Get_Item) == 0x000020, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Array_Get_Item_1) == 0x0001E0, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_ReplaceHitResult_ReturnHitResult) == 0x0003A0, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_ReplaceHitResult_ReturnHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_IsHitWeak_Return) == 0x000560, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_IsHitWeak_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_IsHitWeak_Return_1) == 0x000561, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_IsHitWeak_Return_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_IsHitCrashDamage_Return) == 0x000562, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_IsHitCrashDamage_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Array_Length_ReturnValue) == 0x000564, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Array_Length_ReturnValue_1) == 0x000568, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, Temp_int_Loop_Counter_Variable_1) == 0x00056C, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Less_IntInt_ReturnValue) == 0x000570, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Less_IntInt_ReturnValue_1) == 0x000571, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_Add_IntInt_ReturnValue_1) == 0x000574, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakDamageHitCheck, CallFunc_IsHideWeak_IsHideWeak) == 0x000578, "Member 'RSBattleEnemy_C_WeakDamageHitCheck::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakObjectRecommend
// 0x0110 (0x0110 - 0x0000)
struct RSBattleEnemy_C_WeakObjectRecommend final
{
public:
	int32                                         L_index;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  L_WeakObject;                                      // 0x0004(0x0034)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_angle;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF8[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeakObjectEntryEnemy                  CallFunc_Array_Get_Item;                           // 0x0064(0x0034)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EF9[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFA[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFB[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition;       // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation;       // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFC[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDistanceAngleCheck_bool;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakObjectRecommend) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakObjectRecommend");
static_assert(sizeof(RSBattleEnemy_C_WeakObjectRecommend) == 0x000110, "Wrong size on RSBattleEnemy_C_WeakObjectRecommend");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, L_index) == 0x000000, "Member 'RSBattleEnemy_C_WeakObjectRecommend::L_index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, L_WeakObject) == 0x000004, "Member 'RSBattleEnemy_C_WeakObjectRecommend::L_WeakObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, L_Location) == 0x000038, "Member 'RSBattleEnemy_C_WeakObjectRecommend::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, L_angle) == 0x000044, "Member 'RSBattleEnemy_C_WeakObjectRecommend::L_angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, L_Distance) == 0x000048, "Member 'RSBattleEnemy_C_WeakObjectRecommend::L_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'RSBattleEnemy_C_WeakObjectRecommend::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'RSBattleEnemy_C_WeakObjectRecommend::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_GetDebuggingManager_Manager) == 0x000058, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Array_Get_Item) == 0x000064, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_NotEqual_NameName_ReturnValue) == 0x00009D, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000AC, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000AD, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, K2Node_SwitchEnum_CmpSuccess) == 0x0000AE, "Member 'RSBattleEnemy_C_WeakObjectRecommend::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000BC, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_IsValid_ReturnValue_1) == 0x0000C8, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_TransformFromBoneSpace_OutPosition) == 0x0000E4, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_TransformFromBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_TransformFromBoneSpace_OutRotation) == 0x0000F0, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_TransformFromBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_GetPlayerPawn_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectRecommend, CallFunc_IsDistanceAngleCheck_bool) == 0x000108, "Member 'RSBattleEnemy_C_WeakObjectRecommend::CallFunc_IsDistanceAngleCheck_bool' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AddWeakObjectRecommend
// 0x0118 (0x0118 - 0x0000)
struct RSBattleEnemy_C_AddWeakObjectRecommend final
{
public:
	struct FWeakObjectRecommendEnemy              Param;                                             // 0x0000(0x002C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  L_WeakObject;                                      // 0x002C(0x0034)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectRecommendEnemy              L_param;                                           // 0x0060(0x002C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hit;                                             // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFD[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  CallFunc_Array_Get_Item;                           // 0x009C(0x0034)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFE[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8EFF[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  K2Node_MakeStruct_WeakObjectEntryEnemy;            // 0x00E0(0x0034)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_AddWeakObjectRecommend) == 0x000004, "Wrong alignment on RSBattleEnemy_C_AddWeakObjectRecommend");
static_assert(sizeof(RSBattleEnemy_C_AddWeakObjectRecommend) == 0x000118, "Wrong size on RSBattleEnemy_C_AddWeakObjectRecommend");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, Param) == 0x000000, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, L_WeakObject) == 0x00002C, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::L_WeakObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, L_param) == 0x000060, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, L_Hit) == 0x00008C, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::L_Hit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, Temp_int_Array_Index_Variable) == 0x000090, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Array_Get_Item) == 0x00009C, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D1, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Array_Length_ReturnValue_1) == 0x0000DC, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, K2Node_MakeStruct_WeakObjectEntryEnemy) == 0x0000E0, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::K2Node_MakeStruct_WeakObjectEntryEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddWeakObjectRecommend, CallFunc_Array_Add_ReturnValue) == 0x000114, "Member 'RSBattleEnemy_C_AddWeakObjectRecommend::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RemoveWeakObjectRecommend
// 0x00D8 (0x00D8 - 0x0000)
struct RSBattleEnemy_C_RemoveWeakObjectRecommend final
{
public:
	struct FWeakObjectRecommendEnemy              Param;                                             // 0x0000(0x002C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Lndex;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  L_WeakObject;                                      // 0x0030(0x0034)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectRecommendEnemy              L_param;                                           // 0x0064(0x002C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeakObjectEntryEnemy                  CallFunc_Array_Get_Item;                           // 0x009C(0x0034)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RemoveWeakObjectRecommend) == 0x000004, "Wrong alignment on RSBattleEnemy_C_RemoveWeakObjectRecommend");
static_assert(sizeof(RSBattleEnemy_C_RemoveWeakObjectRecommend) == 0x0000D8, "Wrong size on RSBattleEnemy_C_RemoveWeakObjectRecommend");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, Param) == 0x000000, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, L_Lndex) == 0x00002C, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::L_Lndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, L_WeakObject) == 0x000030, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::L_WeakObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, L_param) == 0x000064, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, Temp_int_Array_Index_Variable) == 0x000090, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_Array_Get_Item) == 0x00009C, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D5, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RemoveWeakObjectRecommend, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000D6, "Member 'RSBattleEnemy_C_RemoveWeakObjectRecommend::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DedugDrawWeakObjectRecommend
// 0x0150 (0x0150 - 0x0000)
struct RSBattleEnemy_C_DedugDrawWeakObjectRecommend final
{
public:
	struct FWeakObjectEntryEnemy                  L_WeakObject;                                      // 0x0000(0x0034)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_color;                                           // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_angle;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F00[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F01[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F02[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeakObjectEntryEnemy                  CallFunc_Array_Get_Item;                           // 0x0078(0x0034)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetEnemy_ReturnValue;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F03[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F04[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition;       // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation;       // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DedugDrawWeakObjectRecommend");
static_assert(sizeof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend) == 0x000150, "Wrong size on RSBattleEnemy_C_DedugDrawWeakObjectRecommend");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, L_WeakObject) == 0x000000, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::L_WeakObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, L_color) == 0x000034, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::L_color' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, L_angle) == 0x000044, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::L_angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, L_Distance) == 0x000048, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::L_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, L_Location) == 0x00004C, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, Temp_int_Array_Index_Variable) == 0x000058, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_GetDebuggingManager_Manager) == 0x000060, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000069, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_NotEqual_NameName_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Array_Get_Item) == 0x000078, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BD, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000BE, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000BF, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_IsTargetEnemy_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_IsTargetEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000C4, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_IsValid_ReturnValue_1) == 0x0000C8, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_GetSocketLocation_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_TransformFromBoneSpace_OutPosition) == 0x0000D8, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_TransformFromBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_TransformFromBoneSpace_OutRotation) == 0x0000E4, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_TransformFromBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000FC, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_BreakRotator_Roll) == 0x000108, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_BreakRotator_Pitch) == 0x00010C, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_BreakRotator_Yaw) == 0x000110, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000114, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_MakeRotator_ReturnValue_1) == 0x000120, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_Add_VectorVector_ReturnValue) == 0x00012C, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_ComposeRotators_ReturnValue) == 0x000138, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DedugDrawWeakObjectRecommend, CallFunc_GetForwardVector_ReturnValue) == 0x000144, "Member 'RSBattleEnemy_C_DedugDrawWeakObjectRecommend::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEventVisible
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_SetEventVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEventVisible_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEventVisible) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEventVisible");
static_assert(sizeof(RSBattleEnemy_C_SetEventVisible) == 0x000003, "Wrong size on RSBattleEnemy_C_SetEventVisible");
static_assert(offsetof(RSBattleEnemy_C_SetEventVisible, Visible) == 0x000000, "Member 'RSBattleEnemy_C_SetEventVisible::Visible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEventVisible, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetEventVisible::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEventVisible, CallFunc_SetEventVisible_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_SetEventVisible::CallFunc_SetEventVisible_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCrashEffectLocation
// 0x0078 (0x0078 - 0x0000)
struct RSBattleEnemy_C_GetBrainCrashEffectLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBrainCrashDamageLocation_WorldLocation; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBrainCrashDamageLocation_WorldLocation_1; // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F05[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F06[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCrashEffectLocation) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBrainCrashEffectLocation");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCrashEffectLocation) == 0x000078, "Wrong size on RSBattleEnemy_C_GetBrainCrashEffectLocation");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_GetBrainCrashDamageLocation_WorldLocation) == 0x00000C, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_GetBrainCrashDamageLocation_WorldLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_GetBrainCrashDamageLocation_WorldLocation_1) == 0x000020, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_GetBrainCrashDamageLocation_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, K2Node_DynamicCast_AsRSBattle_Player) == 0x000030, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashEffectLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_GetBrainCrashEffectLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakObjectUIIconUpdate
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_WeakObjectUIIconUpdate final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Draw;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsDraw;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F07[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeakObjectRecommendEnemy              L_param;                                           // 0x0008(0x002C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F08[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F09[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakObjectUIIconUpdate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakObjectUIIconUpdate");
static_assert(sizeof(RSBattleEnemy_C_WeakObjectUIIconUpdate) == 0x000060, "Wrong size on RSBattleEnemy_C_WeakObjectUIIconUpdate");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, Param_Index) == 0x000000, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, Draw) == 0x000004, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::Draw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, L_IsDraw) == 0x000005, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::L_IsDraw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, L_param) == 0x000008, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, CallFunc_GetHUD_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, K2Node_DynamicCast_AsHUDMain_Game) == 0x000050, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakObjectUIIconUpdate, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'RSBattleEnemy_C_WeakObjectUIIconUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcTick
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_CalcTick final
{
public:
	bool                                          CallFunc_CalcTickNative_IsHitCheck;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F0A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcTickNative_DistanceFromEnemyInitToPlayer; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTickNative_HeightFromEnemyInitToPlayer; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTickNative_DistanceFromEnemyToPlayer; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTickNative_HeightFromEnemyToPlayer;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_CalcTick");
static_assert(sizeof(RSBattleEnemy_C_CalcTick) == 0x000014, "Wrong size on RSBattleEnemy_C_CalcTick");
static_assert(offsetof(RSBattleEnemy_C_CalcTick, CallFunc_CalcTickNative_IsHitCheck) == 0x000000, "Member 'RSBattleEnemy_C_CalcTick::CallFunc_CalcTickNative_IsHitCheck' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTick, CallFunc_CalcTickNative_DistanceFromEnemyInitToPlayer) == 0x000004, "Member 'RSBattleEnemy_C_CalcTick::CallFunc_CalcTickNative_DistanceFromEnemyInitToPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTick, CallFunc_CalcTickNative_HeightFromEnemyInitToPlayer) == 0x000008, "Member 'RSBattleEnemy_C_CalcTick::CallFunc_CalcTickNative_HeightFromEnemyInitToPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTick, CallFunc_CalcTickNative_DistanceFromEnemyToPlayer) == 0x00000C, "Member 'RSBattleEnemy_C_CalcTick::CallFunc_CalcTickNative_DistanceFromEnemyToPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTick, CallFunc_CalcTickNative_HeightFromEnemyToPlayer) == 0x000010, "Member 'RSBattleEnemy_C_CalcTick::CallFunc_CalcTickNative_HeightFromEnemyToPlayer' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMoveTo
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetMoveTo final
{
public:
	class FName                                   L_MoveTo;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetMoveTo) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetMoveTo");
static_assert(sizeof(RSBattleEnemy_C_SetMoveTo) == 0x000018, "Wrong size on RSBattleEnemy_C_SetMoveTo");
static_assert(offsetof(RSBattleEnemy_C_SetMoveTo, L_MoveTo) == 0x000000, "Member 'RSBattleEnemy_C_SetMoveTo::L_MoveTo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveTo, CallFunc_GetBlackboard_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetMoveTo::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveTo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetMoveTo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAttackWeakHit
// 0x01D0 (0x01D0 - 0x0000)
struct RSBattleEnemy_C_SetAttackWeakHit final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           Result;                                            // 0x0008(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_Return;                         // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnAttackWeakHit_bDummy;                   // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAttackWeakHit) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetAttackWeakHit");
static_assert(sizeof(RSBattleEnemy_C_SetAttackWeakHit) == 0x0001D0, "Wrong size on RSBattleEnemy_C_SetAttackWeakHit");
static_assert(offsetof(RSBattleEnemy_C_SetAttackWeakHit, Player) == 0x000000, "Member 'RSBattleEnemy_C_SetAttackWeakHit::Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAttackWeakHit, Result) == 0x000008, "Member 'RSBattleEnemy_C_SetAttackWeakHit::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAttackWeakHit, CallFunc_IsHideWeak_IsHideWeak) == 0x0001C8, "Member 'RSBattleEnemy_C_SetAttackWeakHit::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAttackWeakHit, CallFunc_IsHitWeak_Return) == 0x0001C9, "Member 'RSBattleEnemy_C_SetAttackWeakHit::CallFunc_IsHitWeak_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAttackWeakHit, CallFunc_OnAttackWeakHit_bDummy) == 0x0001CA, "Member 'RSBattleEnemy_C_SetAttackWeakHit::CallFunc_OnAttackWeakHit_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetHomeLocation
// 0x0160 (0x0160 - 0x0000)
struct RSBattleEnemy_C_SetHomeLocation final
{
public:
	class FName                                   L_Actor;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_HomeLocation;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F0B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F0C[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F0D[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F0E[0x1];                                     // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F0F[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetHomeLocation) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetHomeLocation");
static_assert(sizeof(RSBattleEnemy_C_SetHomeLocation) == 0x000160, "Wrong size on RSBattleEnemy_C_SetHomeLocation");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, L_Actor) == 0x000000, "Member 'RSBattleEnemy_C_SetHomeLocation::L_Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, L_HomeLocation) == 0x000008, "Member 'RSBattleEnemy_C_SetHomeLocation::L_HomeLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, L_Location) == 0x000010, "Member 'RSBattleEnemy_C_SetHomeLocation::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, Temp_object_Variable) == 0x000020, "Member 'RSBattleEnemy_C_SetHomeLocation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_GetBlackboard_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_LineTraceSingle_OutHit) == 0x000058, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_LineTraceSingle_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E1, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000E2, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_Time) == 0x0000E4, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_Distance) == 0x0000E8, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_Location) == 0x0000EC, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F8, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_Normal) == 0x000104, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x000110, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_PhysMat) == 0x000120, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_HitActor) == 0x000128, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_HitComponent) == 0x000130, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_HitBoneName) == 0x000138, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_HitItem) == 0x000140, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_FaceIndex) == 0x000144, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_TraceStart) == 0x000148, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHomeLocation, CallFunc_BreakHitResult_TraceEnd) == 0x000154, "Member 'RSBattleEnemy_C_SetHomeLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetTargetHate
// 0x0088 (0x0088 - 0x0000)
struct RSBattleEnemy_C_SetTargetHate final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsTargetPlayPlayer;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsTargetPlayer;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F10[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      L_TargetPlayer;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHATETYPE                                     L_Down;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHATETYPE                                     L_data;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F11[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F12[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F13[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F14[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F15[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsDead_self_CastInput;                    // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F16[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetTargetHate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetTargetHate");
static_assert(sizeof(RSBattleEnemy_C_SetTargetHate) == 0x000088, "Wrong size on RSBattleEnemy_C_SetTargetHate");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, TargetActor) == 0x000000, "Member 'RSBattleEnemy_C_SetTargetHate::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, L_IsTargetPlayPlayer) == 0x000008, "Member 'RSBattleEnemy_C_SetTargetHate::L_IsTargetPlayPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, L_IsTargetPlayer) == 0x000009, "Member 'RSBattleEnemy_C_SetTargetHate::L_IsTargetPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, L_TargetPlayer) == 0x000010, "Member 'RSBattleEnemy_C_SetTargetHate::L_TargetPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, L_Down) == 0x000018, "Member 'RSBattleEnemy_C_SetTargetHate::L_Down' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, L_data) == 0x000019, "Member 'RSBattleEnemy_C_SetTargetHate::L_data' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_SetTargetHate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, K2Node_DynamicCast_AsRSBattle_Player) == 0x000020, "Member 'RSBattleEnemy_C_SetTargetHate::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_SetTargetHate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_GetEnemyManager_Manager) == 0x000030, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000050, "Member 'RSBattleEnemy_C_SetTargetHate::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'RSBattleEnemy_C_SetTargetHate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000059, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'RSBattleEnemy_C_SetTargetHate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_IsDead_self_CastInput) == 0x000060, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_IsDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_IsDead_bDead) == 0x000070, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_Less_IntInt_ReturnValue) == 0x000071, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_GetPlayerPawn_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTargetHate, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000080, "Member 'RSBattleEnemy_C_SetTargetHate::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetHate
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_GetTargetHate final
{
public:
	TArray<class AActor*>                         Target;                                            // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         L_target;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F17[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHateTargetParam>               CallFunc_GetHateTargetParam_ReturnValue;           // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHateTargetParam                       CallFunc_Array_Get_Item;                           // 0x0044(0x0020)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F18[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetHate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetTargetHate");
static_assert(sizeof(RSBattleEnemy_C_GetTargetHate) == 0x000070, "Wrong size on RSBattleEnemy_C_GetTargetHate");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, Target) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetHate::Target' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, L_target) == 0x000010, "Member 'RSBattleEnemy_C_GetTargetHate::L_target' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_GetTargetHate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_GetTargetHate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_GetHateTargetParam_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_GetHateTargetParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_Array_Get_Item) == 0x000044, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetHate, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_GetTargetHate::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetTargetHate
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ResetTargetHate final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetTargetHate) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ResetTargetHate");
static_assert(sizeof(RSBattleEnemy_C_ResetTargetHate) == 0x000001, "Wrong size on RSBattleEnemy_C_ResetTargetHate");
static_assert(offsetof(RSBattleEnemy_C_ResetTargetHate, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_ResetTargetHate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetLockHate
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_GetTargetLockHate final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsEnemy;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsEnd;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F19[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 L_ConfusionActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_length;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F1A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   L_Actor;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetTargetLock_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetLockHate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetTargetLockHate");
static_assert(sizeof(RSBattleEnemy_C_GetTargetLockHate) == 0x000038, "Wrong size on RSBattleEnemy_C_GetTargetLockHate");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, Actor) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetLockHate::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, L_IsEnemy) == 0x000008, "Member 'RSBattleEnemy_C_GetTargetLockHate::L_IsEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, L_IsEnd) == 0x000009, "Member 'RSBattleEnemy_C_GetTargetLockHate::L_IsEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, L_ConfusionActor) == 0x000010, "Member 'RSBattleEnemy_C_GetTargetLockHate::L_ConfusionActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, L_length) == 0x000018, "Member 'RSBattleEnemy_C_GetTargetLockHate::L_length' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, L_Actor) == 0x000020, "Member 'RSBattleEnemy_C_GetTargetLockHate::L_Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, CallFunc_GetTargetLock_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetTargetLockHate::CallFunc_GetTargetLock_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetLockHate, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetTargetLockHate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SubEnemyListManager
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SubEnemyListManager final
{
public:
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SubEnemyListManager) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SubEnemyListManager");
static_assert(sizeof(RSBattleEnemy_C_SubEnemyListManager) == 0x000010, "Wrong size on RSBattleEnemy_C_SubEnemyListManager");
static_assert(offsetof(RSBattleEnemy_C_SubEnemyListManager, CallFunc_GetEnemyManager_Manager) == 0x000000, "Member 'RSBattleEnemy_C_SubEnemyListManager::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SubEnemyListManager, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SubEnemyListManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMoveCheck
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_SetMoveCheck final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMoveWalk_Return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMoveRun_Return;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetMoveCheck) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetMoveCheck");
static_assert(sizeof(RSBattleEnemy_C_SetMoveCheck) == 0x000003, "Wrong size on RSBattleEnemy_C_SetMoveCheck");
static_assert(offsetof(RSBattleEnemy_C_SetMoveCheck, Return) == 0x000000, "Member 'RSBattleEnemy_C_SetMoveCheck::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveCheck, CallFunc_SetMoveWalk_Return) == 0x000001, "Member 'RSBattleEnemy_C_SetMoveCheck::CallFunc_SetMoveWalk_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMoveCheck, CallFunc_SetMoveRun_Return) == 0x000002, "Member 'RSBattleEnemy_C_SetMoveCheck::CallFunc_SetMoveRun_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMoveCheckDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsMoveCheckDistance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Ret;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsMoveCheckDistance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsMoveCheckDistance");
static_assert(sizeof(RSBattleEnemy_C_IsMoveCheckDistance) == 0x000004, "Wrong size on RSBattleEnemy_C_IsMoveCheckDistance");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheckDistance, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsMoveCheckDistance::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheckDistance, L_Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsMoveCheckDistance::L_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheckDistance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsMoveCheckDistance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMoveCheckDistance, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsMoveCheckDistance::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.isSuperArmor
// 0x0006 (0x0006 - 0x0000)
struct RSBattleEnemy_C_IsSuperArmor final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCounterSuperArmor_SuperArmor;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageSuperArmor_return;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuperArmor_bSuperArmor;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSuperArmor) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSuperArmor");
static_assert(sizeof(RSBattleEnemy_C_IsSuperArmor) == 0x000006, "Wrong size on RSBattleEnemy_C_IsSuperArmor");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, bSuperArmor) == 0x000000, "Member 'RSBattleEnemy_C_IsSuperArmor::bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, CallFunc_IsCounterSuperArmor_SuperArmor) == 0x000001, "Member 'RSBattleEnemy_C_IsSuperArmor::CallFunc_IsCounterSuperArmor_SuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, CallFunc_IsDamageSuperArmor_return) == 0x000002, "Member 'RSBattleEnemy_C_IsSuperArmor::CallFunc_IsDamageSuperArmor_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, CallFunc_IsSuperArmor_bSuperArmor) == 0x000003, "Member 'RSBattleEnemy_C_IsSuperArmor::CallFunc_IsSuperArmor_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsSuperArmor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuperArmor, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'RSBattleEnemy_C_IsSuperArmor::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDamageSuperArmor
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsDamageSuperArmor final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       L_DamageDownAnim;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageSuperArmor_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDamageSuperArmor) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDamageSuperArmor");
static_assert(sizeof(RSBattleEnemy_C_IsDamageSuperArmor) == 0x000004, "Wrong size on RSBattleEnemy_C_IsDamageSuperArmor");
static_assert(offsetof(RSBattleEnemy_C_IsDamageSuperArmor, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsDamageSuperArmor::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageSuperArmor, L_return) == 0x000001, "Member 'RSBattleEnemy_C_IsDamageSuperArmor::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageSuperArmor, L_DamageDownAnim) == 0x000002, "Member 'RSBattleEnemy_C_IsDamageSuperArmor::L_DamageDownAnim' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDamageSuperArmor, CallFunc_IsDamageSuperArmor_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsDamageSuperArmor::CallFunc_IsDamageSuperArmor_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBaseMontage
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_SetBaseMontage final
{
public:
	class UAnimMontage*                           Param_BaseMontage;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPlayRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F1B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NewLocalVar_2;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1C[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1E[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyCrashChanceAnimKind                      CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue;  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1F[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetBaseMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetBaseMontage");
static_assert(sizeof(RSBattleEnemy_C_SetBaseMontage) == 0x000060, "Wrong size on RSBattleEnemy_C_SetBaseMontage");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, Param_BaseMontage) == 0x000000, "Member 'RSBattleEnemy_C_SetBaseMontage::Param_BaseMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, LPlayRate) == 0x000008, "Member 'RSBattleEnemy_C_SetBaseMontage::LPlayRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, NewLocalVar_2) == 0x000010, "Member 'RSBattleEnemy_C_SetBaseMontage::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsRootMotionAnimMontage_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsRootMotionAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001A, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_GetMainPlayer_Player) == 0x000030, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000038, "Member 'RSBattleEnemy_C_SetBaseMontage::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'RSBattleEnemy_C_SetBaseMontage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_GetAccelerating_Accelerating) == 0x00004A, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsValid_ReturnValue_3) == 0x000050, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue) == 0x000051, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, K2Node_SwitchEnum_CmpSuccess) == 0x000052, "Member 'RSBattleEnemy_C_SetBaseMontage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000053, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_IsValid_ReturnValue_4) == 0x000055, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontage, CallFunc_PlayAnimMontage_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_SetBaseMontage::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBaseMontage
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetBaseMontage final
{
public:
	class UAnimMontage*                           Param_BaseMontage;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBaseMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBaseMontage");
static_assert(sizeof(RSBattleEnemy_C_GetBaseMontage) == 0x000008, "Wrong size on RSBattleEnemy_C_GetBaseMontage");
static_assert(offsetof(RSBattleEnemy_C_GetBaseMontage, Param_BaseMontage) == 0x000000, "Member 'RSBattleEnemy_C_GetBaseMontage::Param_BaseMontage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMotionEnd
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_IsMotionEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F20[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UASAnimInstance*                        K2Node_DynamicCast_AsASAnim_Instance;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsASNodePlayEnd_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsMotionEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsMotionEnd");
static_assert(sizeof(RSBattleEnemy_C_IsMotionEnd) == 0x000030, "Wrong size on RSBattleEnemy_C_IsMotionEnd");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsMotionEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_GetBaseMontage_BaseMontage) == 0x000008, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_GetBaseMontage_BaseMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, K2Node_DynamicCast_AsASAnim_Instance) == 0x000018, "Member 'RSBattleEnemy_C_IsMotionEnd::K2Node_DynamicCast_AsASAnim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_IsMotionEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000022, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_Not_PreBool_ReturnValue_1) == 0x000023, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_IsASNodePlayEnd_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_IsASNodePlayEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_BooleanOR_ReturnValue) == 0x000026, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_BooleanAND_ReturnValue_1) == 0x000027, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd, CallFunc_BooleanOR_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_IsMotionEnd::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugWeakHitArea
// 0x0080 (0x0080 - 0x0000)
struct RSBattleEnemy_C_DebugWeakHitArea final
{
public:
	struct FVector                                L_Vector;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F21[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          L_Element;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDamagePartCollisionComponent*          CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F22[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDamagePartDir_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F23[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugDrawAttackCollision_ReturnValue;   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugWeakHitArea) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugWeakHitArea");
static_assert(sizeof(RSBattleEnemy_C_DebugWeakHitArea) == 0x000080, "Wrong size on RSBattleEnemy_C_DebugWeakHitArea");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, L_Vector) == 0x000000, "Member 'RSBattleEnemy_C_DebugWeakHitArea::L_Vector' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, L_Element) == 0x000010, "Member 'RSBattleEnemy_C_DebugWeakHitArea::L_Element' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_DebugWeakHitArea::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_DebugWeakHitArea::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_GetDamagePartDir_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_GetDamagePartDir_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_IsDead_bDead) == 0x000068, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugWeakHitArea, CallFunc_IsDebugDrawAttackCollision_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_DebugWeakHitArea::CallFunc_IsDebugDrawAttackCollision_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetWeakComponent
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_SetWeakComponent final
{
public:
	TArray<class UDamagePartCollisionComponent*>  L_DamagePartCollisionArray;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UDamagePartCollisionComponent*          L_Element;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F24[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F25[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDamagePartCollisionComponent*>  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetWeakComponent) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetWeakComponent");
static_assert(sizeof(RSBattleEnemy_C_SetWeakComponent) == 0x000050, "Wrong size on RSBattleEnemy_C_SetWeakComponent");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, L_DamagePartCollisionArray) == 0x000000, "Member 'RSBattleEnemy_C_SetWeakComponent::L_DamagePartCollisionArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, L_Element) == 0x000010, "Member 'RSBattleEnemy_C_SetWeakComponent::L_Element' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_SetWeakComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_SetWeakComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_Array_Get_Item) == 0x000028, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakComponent, CallFunc_Array_Add_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SetWeakComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsIgnoreHitCheck
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_IsIgnoreHitCheck final
{
public:
	class UPrimitiveComponent*                    PPrimitive;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitPosition;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0016(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIgnoreHitCheck_ReturnValue;             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_Return;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F26[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDamagePartDir_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x003D(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F27[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F28[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRangeCheck_ReturnValue;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsIgnoreHitCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsIgnoreHitCheck");
static_assert(sizeof(RSBattleEnemy_C_IsIgnoreHitCheck) == 0x000070, "Wrong size on RSBattleEnemy_C_IsIgnoreHitCheck");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, PPrimitive) == 0x000000, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::PPrimitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, HitPosition) == 0x000008, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, L_return) == 0x000015, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, Temp_byte_Variable) == 0x000016, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_IsIgnoreHitCheck_ReturnValue) == 0x000017, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_IsIgnoreHitCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000018, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_IsArmor_Return) == 0x000021, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_IsArmor_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_GetDamagePartDir_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_GetDamagePartDir_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_Array_Contains_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, Temp_byte_Variable_1) == 0x00003D, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_Array_Contains_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreHitCheck, CallFunc_IsRangeCheck_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_IsIgnoreHitCheck::CallFunc_IsRangeCheck_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHitObjectType
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_GetHitObjectType final
{
public:
	TArray<EObjectTypeQuery>                      ObjectType;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      L_ObjectType;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetHitObjectType) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetHitObjectType");
static_assert(sizeof(RSBattleEnemy_C_GetHitObjectType) == 0x000030, "Wrong size on RSBattleEnemy_C_GetHitObjectType");
static_assert(offsetof(RSBattleEnemy_C_GetHitObjectType, ObjectType) == 0x000000, "Member 'RSBattleEnemy_C_GetHitObjectType::ObjectType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetHitObjectType, L_ObjectType) == 0x000010, "Member 'RSBattleEnemy_C_GetHitObjectType::L_ObjectType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetHitObjectType, K2Node_MakeArray_Array) == 0x000020, "Member 'RSBattleEnemy_C_GetHitObjectType::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcFinalDamageByDefence
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_CalcFinalDamageByDefence final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F29[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDamage;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalDamageByDefence_ReturnValue;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F2A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F2B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcFinalDamageByDefence_ReturnValue_1;   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcFinalDamageByDefence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcFinalDamageByDefence");
static_assert(sizeof(RSBattleEnemy_C_CalcFinalDamageByDefence) == 0x000038, "Wrong size on RSBattleEnemy_C_CalcFinalDamageByDefence");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, Damage) == 0x000000, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, AttackActor) == 0x000008, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, LDamage) == 0x000014, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, CallFunc_GetDebuggingManager_Manager) == 0x000020, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, CallFunc_CalcFinalDamageByDefence_ReturnValue_1) == 0x00002C, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::CallFunc_CalcFinalDamageByDefence_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcFinalDamageByDefence, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_CalcFinalDamageByDefence::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStealth
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_OnStealth final
{
public:
	bool                                          IsDirectly;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F2C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F2D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F2E[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F2F[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyStealthSeeEnable_Return;          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStealth) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnStealth");
static_assert(sizeof(RSBattleEnemy_C_OnStealth) == 0x000060, "Wrong size on RSBattleEnemy_C_OnStealth");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, IsDirectly) == 0x000000, "Member 'RSBattleEnemy_C_OnStealth::IsDirectly' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Return) == 0x000001, "Member 'RSBattleEnemy_C_OnStealth::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_OnStealth::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax) == 0x000028, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, Temp_int_Loop_Num_Variable_1) == 0x00003C, "Member 'RSBattleEnemy_C_OnStealth::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_GetEnemyManager_Manager) == 0x000048, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_IsValid_ReturnValue_2) == 0x000050, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_IsStealthSeeEnable_Return) == 0x000051, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_SetEnemyStealthSeeEnable_Return) == 0x000052, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_SetEnemyStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_IsStealthMode_ReturnValue) == 0x000053, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, CallFunc_GetHPPercent_Percent) == 0x000054, "Member 'RSBattleEnemy_C_OnStealth::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStealth, K2Node_SwitchEnum_CmpSuccess) == 0x000058, "Member 'RSBattleEnemy_C_OnStealth::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateStealth
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_UpdateStealth final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F30[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LStealthRate;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F31[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F32[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager_1;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return_1;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F33[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthEnable_Return;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F34[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChangeStealth_Return;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F35[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_1; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F36[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OffStealth_Return;                        // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_2; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateStealth) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateStealth");
static_assert(sizeof(RSBattleEnemy_C_UpdateStealth) == 0x000060, "Wrong size on RSBattleEnemy_C_UpdateStealth");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, Sec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateStealth::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_UpdateStealth::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, LStealthRate) == 0x000010, "Member 'RSBattleEnemy_C_UpdateStealth::LStealthRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsStealthSeeEnable_Return) == 0x000021, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_GetEnemyManager_Manager_1) == 0x000028, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_GetEnemyManager_Manager_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsStealthSeeEnable_Return_1) == 0x000031, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsStealthSeeEnable_Return_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax) == 0x000034, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsStealthMode_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsStealthEnable_Return) == 0x000039, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsStealthEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_ChangeStealth_Return) == 0x000041, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_ChangeStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_1) == 0x000044, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, K2Node_SwitchEnum_CmpSuccess) == 0x000051, "Member 'RSBattleEnemy_C_UpdateStealth::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_IsValid_ReturnValue_2) == 0x000052, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_OffStealth_Return) == 0x000053, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_OffStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_2) == 0x000054, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealth, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_UpdateStealth::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsStealthEnable
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsStealthEnable final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthEnableNative_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsStealthEnable) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsStealthEnable");
static_assert(sizeof(RSBattleEnemy_C_IsStealthEnable) == 0x000003, "Wrong size on RSBattleEnemy_C_IsStealthEnable");
static_assert(offsetof(RSBattleEnemy_C_IsStealthEnable, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsStealthEnable::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsStealthEnable, L_return) == 0x000001, "Member 'RSBattleEnemy_C_IsStealthEnable::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsStealthEnable, CallFunc_IsStealthEnableNative_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsStealthEnable::CallFunc_IsStealthEnableNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OffStealth
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_OffStealth final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F37[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         L_MeshArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F38[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F39[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyStealthSeeEnable_Return;          // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OffStealth) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OffStealth");
static_assert(sizeof(RSBattleEnemy_C_OffStealth) == 0x000060, "Wrong size on RSBattleEnemy_C_OffStealth");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, Return) == 0x000000, "Member 'RSBattleEnemy_C_OffStealth::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, L_MeshArray) == 0x000008, "Member 'RSBattleEnemy_C_OffStealth::L_MeshArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, Param_LEnemyManager) == 0x000018, "Member 'RSBattleEnemy_C_OffStealth::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, Temp_int_Variable) == 0x000020, "Member 'RSBattleEnemy_C_OffStealth::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_GetBodyMeshes_Meshes) == 0x000028, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_GetEnemyManager_Manager) == 0x000040, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_Array_Get_Item) == 0x000048, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_IsValid_ReturnValue) == 0x000055, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_IsStealthSeeEnable_Return) == 0x000056, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_SetEnemyStealthSeeEnable_Return) == 0x000057, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_SetEnemyStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OffStealth, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_OffStealth::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ChangeStealth
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_ChangeStealth final
{
public:
	bool                                          StealthSee;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ChangeStealth) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ChangeStealth");
static_assert(sizeof(RSBattleEnemy_C_ChangeStealth) == 0x000002, "Wrong size on RSBattleEnemy_C_ChangeStealth");
static_assert(offsetof(RSBattleEnemy_C_ChangeStealth, StealthSee) == 0x000000, "Member 'RSBattleEnemy_C_ChangeStealth::StealthSee' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeStealth, Return) == 0x000001, "Member 'RSBattleEnemy_C_ChangeStealth::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsRandomLocationCheckGround
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsRandomLocationCheckGround final
{
public:
	bool                                          IsCheck;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsRandomLocationCheckGround) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsRandomLocationCheckGround");
static_assert(sizeof(RSBattleEnemy_C_IsRandomLocationCheckGround) == 0x000001, "Wrong size on RSBattleEnemy_C_IsRandomLocationCheckGround");
static_assert(offsetof(RSBattleEnemy_C_IsRandomLocationCheckGround, IsCheck) == 0x000000, "Member 'RSBattleEnemy_C_IsRandomLocationCheckGround::IsCheck' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetRandomLocationCheckGround
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetRandomLocationCheckGround final
{
public:
	bool                                          IsCheck;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetRandomLocationCheckGround) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetRandomLocationCheckGround");
static_assert(sizeof(RSBattleEnemy_C_SetRandomLocationCheckGround) == 0x000001, "Wrong size on RSBattleEnemy_C_SetRandomLocationCheckGround");
static_assert(offsetof(RSBattleEnemy_C_SetRandomLocationCheckGround, IsCheck) == 0x000000, "Member 'RSBattleEnemy_C_SetRandomLocationCheckGround::IsCheck' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetRandomLocationCheckGroundHeight
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetRandomLocationCheckGroundHeight final
{
public:
	float                                         Top;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Bottom;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetRandomLocationCheckGroundHeight) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetRandomLocationCheckGroundHeight");
static_assert(sizeof(RSBattleEnemy_C_SetRandomLocationCheckGroundHeight) == 0x000008, "Wrong size on RSBattleEnemy_C_SetRandomLocationCheckGroundHeight");
static_assert(offsetof(RSBattleEnemy_C_SetRandomLocationCheckGroundHeight, Top) == 0x000000, "Member 'RSBattleEnemy_C_SetRandomLocationCheckGroundHeight::Top' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetRandomLocationCheckGroundHeight, Bottom) == 0x000004, "Member 'RSBattleEnemy_C_SetRandomLocationCheckGroundHeight::Bottom' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyAssetLoad
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_OnEnemyAssetLoad final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadSequence_Dummy;                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadSound_Dummy;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3B[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UParticleSystem>> K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         CallFunc_Array_Get_Item;                           // 0x0020(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3C[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3D[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3E[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyAssetLoad) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnEnemyAssetLoad");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyAssetLoad) == 0x000070, "Wrong size on RSBattleEnemy_C_OnEnemyAssetLoad");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, Return) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_LoadSequence_Dummy) == 0x000009, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_LoadSequence_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_LoadSound_Dummy) == 0x00000A, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_LoadSound_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, K2Node_MakeArray_Array) == 0x000010, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_Array_Get_Item) == 0x000020, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_LoadSoftObject_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, K2Node_DynamicCast_AsParticle_System) == 0x000058, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetLoad, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_OnEnemyAssetLoad::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LandCheck
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattleEnemy_C_LandCheck final
{
public:
	bool                                          IsLand;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F3F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LandCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LandCheck");
static_assert(sizeof(RSBattleEnemy_C_LandCheck) == 0x0000D0, "Wrong size on RSBattleEnemy_C_LandCheck");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, IsLand) == 0x000000, "Member 'RSBattleEnemy_C_LandCheck::IsLand' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, Temp_object_Variable) == 0x000008, "Member 'RSBattleEnemy_C_LandCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000040, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LandCheck, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_LandCheck::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.HitDamageMaterialArmor
// 0x0350 (0x0350 - 0x0000)
struct RSBattleEnemy_C_HitDamageMaterialArmor final
{
public:
	TArray<struct FHCHitResult>                   Result;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FHCHitResult                           LHitResult;                                        // 0x0010(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          L_IsForceBreak;                                    // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F40[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     L_skill;                                           // 0x01D8(0x00F0)(Edit, BlueprintVisible)
	bool                                          LIsArmorBreak;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F41[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      Player;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsHitArmor;                                      // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F42[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x02E4(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F43[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_ArmorBreak_dummy;               // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnArmorBreak_Dammy;                       // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget;             // 0x02FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType;                // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F44[0x3];                                     // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetArmorFlashControl_Dummy;               // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F45[0x2];                                     // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F46[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F47[0x2];                                     // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F48[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0328(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_Return;                           // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F49[0x6];                                     // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F4A[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHpPart_ReturnValue;                    // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x034A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_HitDamageMaterialArmor) == 0x000008, "Wrong alignment on RSBattleEnemy_C_HitDamageMaterialArmor");
static_assert(sizeof(RSBattleEnemy_C_HitDamageMaterialArmor) == 0x000350, "Wrong size on RSBattleEnemy_C_HitDamageMaterialArmor");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Result) == 0x000000, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, LHitResult) == 0x000010, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, L_IsForceBreak) == 0x0001D0, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::L_IsForceBreak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, L_skill) == 0x0001D8, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::L_skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, LIsArmorBreak) == 0x0002C8, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::LIsArmorBreak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Player) == 0x0002D0, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, L_IsHitArmor) == 0x0002D8, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::L_IsHitArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Temp_int_Array_Index_Variable) == 0x0002DC, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Array_Length_ReturnValue) == 0x0002E0, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Temp_byte_Variable) == 0x0002E4, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Temp_int_Loop_Num_Variable) == 0x0002E8, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Temp_bool_True_if_break_was_hit_Variable) == 0x0002EC, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_SwitchEnum_CmpSuccess) == 0x0002ED, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Not_PreBool_ReturnValue) == 0x0002EE, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_IsValid_ReturnValue) == 0x0002EF, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x0002F0, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_bSuccess) == 0x0002F8, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_OutputLog_ArmorBreak_dummy) == 0x0002F9, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_OutputLog_ArmorBreak_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_OnArmorBreak_Dammy) == 0x0002FA, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_OnArmorBreak_Dammy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_GetHitStopParam_IgnoreTarget) == 0x0002FB, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_GetHitStopParam_IgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_GetHitStopParam_CauseType) == 0x0002FC, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_GetHitStopParam_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Array_Find_ReturnValue) == 0x000300, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000304, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_SetArmorFlashControl_Dummy) == 0x000305, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_SetArmorFlashControl_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, Temp_int_Loop_Counter_Variable) == 0x000308, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_AsRSBattle_Player) == 0x000310, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_bSuccess_1) == 0x000318, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Less_IntInt_ReturnValue) == 0x000319, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Add_IntInt_ReturnValue) == 0x00031C, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_BooleanAND_ReturnValue) == 0x000320, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000328, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_bSuccess_2) == 0x000330, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_IsArmor_Return) == 0x000331, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_IsArmor_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000338, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, K2Node_DynamicCast_bSuccess_3) == 0x000340, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_GetHpPart_ReturnValue) == 0x000344, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_GetHpPart_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000348, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000349, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_HitDamageMaterialArmor, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00034A, "Member 'RSBattleEnemy_C_HitDamageMaterialArmor::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Update Hit Damage Material Armor
// 0x001C (0x001C - 0x0000)
struct RSBattleEnemy_C_Update_Hit_Damage_Material_Armor final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_Flash;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Limit;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_time;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateHitDamageMaterialArmor_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Update_Hit_Damage_Material_Armor");
static_assert(sizeof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor) == 0x00001C, "Wrong size on RSBattleEnemy_C_Update_Hit_Damage_Material_Armor");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, Sec) == 0x000000, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, Time) == 0x000004, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, L_Flash) == 0x000008, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::L_Flash' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, L_Limit) == 0x000010, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::L_Limit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, L_time) == 0x000014, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::L_time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Update_Hit_Damage_Material_Armor, CallFunc_UpdateHitDamageMaterialArmor_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_Update_Hit_Damage_Material_Armor::CallFunc_UpdateHitDamageMaterialArmor_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SeeThroughWeakSphereUseOnOff
// 0x0080 (0x0080 - 0x0000)
struct RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F4B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         L_MeshArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         L_On;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F4C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F4D[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F4E[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F4F[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff");
static_assert(sizeof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff) == 0x000080, "Wrong size on RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, On) == 0x000000, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, L_MeshArray) == 0x000008, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::L_MeshArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, L_On) == 0x000018, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::L_On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, Temp_int_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_GetBodyMeshes_Meshes) == 0x000028, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, Temp_int_Variable_1) == 0x000048, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Conv_IntToString_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Conv_StringToName_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'RSBattleEnemy_C_SeeThroughWeakSphereUseOnOff::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.WeakHitStop
// 0x0618 (0x0618 - 0x0000)
struct RSBattleEnemy_C_WeakHitStop final
{
public:
	TArray<struct FHCHitResult>                   HitResult;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsMaterialChange;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F50[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           LHitResult;                                        // 0x0018(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           LCauseType;                                        // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            LCurrentHitStop;                                   // 0x01E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LAttackDrop;                                       // 0x01E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F51[0x1];                                     // 0x01E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_Priority;                                        // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerHitStopComponent_C*           L_HitStop;                                         // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNormalAttack;                                    // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_StartHitStop;                                    // 0x01F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F52[0x6];                                     // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHitStopSpeedRate;                                 // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHitStopSeconds;                                   // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     LSkill;                                            // 0x0208(0x00F0)(Edit, BlueprintVisible)
	bool                                          LAllThrow;                                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            L_HitStopType;                                     // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F53[0x6];                                     // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      Player;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F54[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0325(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x0326(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F55[0x1];                                     // 0x0327(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F56[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           CallFunc_Array_Get_Item;                           // 0x0338(0x01C0)(ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStartCauseType_bStart;                  // 0x04FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_GetHitStopParam_SuccessType;              // 0x04FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IsSuccess;                // 0x04FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F57[0x3];                                     // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHitStopParam_Seconds;                  // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_Rate;                     // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_DelayTime;                // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x050C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F58[0x3];                                     // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x051A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F59[0x5];                                     // 0x051B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0529(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_3;                              // 0x052A(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x052B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStartCauseType_bStart_1;                // 0x052C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStartCauseType_bStart_2;                // 0x052D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5A[0x2];                                     // 0x052E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5B[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_4;                              // 0x0550(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0551(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5C[0x2];                                     // 0x0552(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0559(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x055A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x055B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5D[0x4];                                     // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0560(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5E[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component_1; // 0x0570(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x057A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5F[0x5];                                     // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0589(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F60[0x6];                                     // 0x058A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0590(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x05A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x05A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_GetHitStopParam_SuccessType_1;            // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IsSuccess_1;              // 0x05A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F61[0x2];                                     // 0x05A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHitStopParam_Seconds_1;                // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_Rate_1;                   // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_DelayTime_1;              // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             CallFunc_Array_Get_Item_1;                         // 0x05B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F62[0x3];                                     // 0x05B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x05BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F63[0x2];                                     // 0x05BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_3;            // 0x05C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F64[0x2];                                     // 0x05C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x05CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_4;            // 0x05CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_GetHitStopParam_SuccessType_2;            // 0x05CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IsSuccess_2;              // 0x05CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHitStopParam_Seconds_2;                // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_Rate_2;                   // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_DelayTime_2;              // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F65[0x3];                                     // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x05E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x05EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F66[0x5];                                     // 0x05EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x05F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F67[0x7];                                     // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_WeakHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_WeakHitStop");
static_assert(sizeof(RSBattleEnemy_C_WeakHitStop) == 0x000618, "Wrong size on RSBattleEnemy_C_WeakHitStop");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_WeakHitStop::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, IsMaterialChange) == 0x000010, "Member 'RSBattleEnemy_C_WeakHitStop::IsMaterialChange' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LHitResult) == 0x000018, "Member 'RSBattleEnemy_C_WeakHitStop::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Param_LEnemyManager) == 0x0001D8, "Member 'RSBattleEnemy_C_WeakHitStop::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LCauseType) == 0x0001E0, "Member 'RSBattleEnemy_C_WeakHitStop::LCauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LCurrentHitStop) == 0x0001E1, "Member 'RSBattleEnemy_C_WeakHitStop::LCurrentHitStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LAttackDrop) == 0x0001E2, "Member 'RSBattleEnemy_C_WeakHitStop::LAttackDrop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, L_Priority) == 0x0001E4, "Member 'RSBattleEnemy_C_WeakHitStop::L_Priority' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, L_HitStop) == 0x0001E8, "Member 'RSBattleEnemy_C_WeakHitStop::L_HitStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, IsNormalAttack) == 0x0001F0, "Member 'RSBattleEnemy_C_WeakHitStop::IsNormalAttack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, L_StartHitStop) == 0x0001F1, "Member 'RSBattleEnemy_C_WeakHitStop::L_StartHitStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LPlayerFixParam) == 0x0001F8, "Member 'RSBattleEnemy_C_WeakHitStop::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LHitStopSpeedRate) == 0x000200, "Member 'RSBattleEnemy_C_WeakHitStop::LHitStopSpeedRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LHitStopSeconds) == 0x000204, "Member 'RSBattleEnemy_C_WeakHitStop::LHitStopSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LSkill) == 0x000208, "Member 'RSBattleEnemy_C_WeakHitStop::LSkill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, LAllThrow) == 0x0002F8, "Member 'RSBattleEnemy_C_WeakHitStop::LAllThrow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, L_HitStopType) == 0x0002F9, "Member 'RSBattleEnemy_C_WeakHitStop::L_HitStopType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Player) == 0x000300, "Member 'RSBattleEnemy_C_WeakHitStop::Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Attacker) == 0x000308, "Member 'RSBattleEnemy_C_WeakHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_int_Loop_Counter_Variable) == 0x000310, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Length_ReturnValue) == 0x000314, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Add_IntInt_ReturnValue) == 0x000318, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_bool_True_if_break_was_hit_Variable) == 0x00031C, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_int_Array_Index_Variable) == 0x000320, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Not_PreBool_ReturnValue) == 0x000324, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_byte_Variable) == 0x000325, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_byte_Variable_1) == 0x000326, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_int_Loop_Counter_Variable_1) == 0x000328, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Less_IntInt_ReturnValue) == 0x00032C, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Add_IntInt_ReturnValue_1) == 0x000330, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_int_Array_Index_Variable_1) == 0x000334, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Get_Item) == 0x000338, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_SwitchEnum_CmpSuccess) == 0x0004F8, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue) == 0x0004F9, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsStartCauseType_bStart) == 0x0004FA, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsStartCauseType_bStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_SuccessType) == 0x0004FB, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_SuccessType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_IsSuccess) == 0x0004FC, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Seconds) == 0x000500, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Seconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Rate) == 0x000504, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Rate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_DelayTime) == 0x000508, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_DelayTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_byte_Variable_2) == 0x00050C, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Find_ReturnValue) == 0x000510, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Find_ReturnValue_1) == 0x000514, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000518, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000519, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_1) == 0x00051A, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetEnemyManager_Manager) == 0x000520, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_2) == 0x000528, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_3) == 0x000529, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_byte_Variable_3) == 0x00052A, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_4) == 0x00052B, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsStartCauseType_bStart_1) == 0x00052C, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsStartCauseType_bStart_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsStartCauseType_bStart_2) == 0x00052D, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsStartCauseType_bStart_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_PrivateGetMainPlayer_Player) == 0x000530, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_AsRSBattle_Player) == 0x000538, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_bSuccess) == 0x000540, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000548, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, Temp_byte_Variable_4) == 0x000550, "Member 'RSBattleEnemy_C_WeakHitStop::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_5) == 0x000551, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Find_ReturnValue_2) == 0x000554, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000558, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000559, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_6) == 0x00055A, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_7) == 0x00055B, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000560, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_bSuccess_1) == 0x000568, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_AsDamage_Part_Collision_Component_1) == 0x000570, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_AsDamage_Part_Collision_Component_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_bSuccess_2) == 0x000578, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000579, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00057A, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000580, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_bSuccess_3) == 0x000588, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_8) == 0x000589, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000590, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_DynamicCast_bSuccess_4) == 0x0005A0, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsMainPlayer_bMainPlayer) == 0x0005A1, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_9) == 0x0005A2, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_SwitchEnum_CmpSuccess_1) == 0x0005A3, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_SuccessType_1) == 0x0005A4, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_SuccessType_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_IsSuccess_1) == 0x0005A5, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_IsSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Seconds_1) == 0x0005A8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Seconds_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Rate_1) == 0x0005AC, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Rate_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_DelayTime_1) == 0x0005B0, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_DelayTime_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Get_Item_1) == 0x0005B4, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Length_ReturnValue_1) == 0x0005B8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_SwitchEnum_CmpSuccess_2) == 0x0005BC, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Less_IntInt_ReturnValue_1) == 0x0005BD, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Find_ReturnValue_3) == 0x0005C0, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_BooleanAND_ReturnValue) == 0x0005C4, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_NotEqual_IntInt_ReturnValue_3) == 0x0005C5, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_NotEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_Array_Find_ReturnValue_4) == 0x0005C8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_SwitchEnum_CmpSuccess_3) == 0x0005CC, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_NotEqual_IntInt_ReturnValue_4) == 0x0005CD, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_NotEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_SuccessType_2) == 0x0005CE, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_SuccessType_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_IsSuccess_2) == 0x0005CF, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_IsSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Seconds_2) == 0x0005D0, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Seconds_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_Rate_2) == 0x0005D4, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_Rate_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetHitStopParam_DelayTime_2) == 0x0005D8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetHitStopParam_DelayTime_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0005DC, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetBattleManager_BattleManager) == 0x0005E0, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_10) == 0x0005E8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_11) == 0x0005E9, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, K2Node_SwitchEnum_CmpSuccess_4) == 0x0005EA, "Member 'RSBattleEnemy_C_WeakHitStop::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetPlayerFixParam_Param) == 0x0005F0, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x0005F8, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_12) == 0x000600, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_GetMainPlayer_Player) == 0x000608, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_WeakHitStop, CallFunc_IsValid_ReturnValue_13) == 0x000610, "Member 'RSBattleEnemy_C_WeakHitStop::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCTTimer
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetCTTimer final
{
public:
	uint8                                         EnemyEnum;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F68[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTimer;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCoolDownTimerBP_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCTTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCTTimer");
static_assert(sizeof(RSBattleEnemy_C_GetCTTimer) == 0x000010, "Wrong size on RSBattleEnemy_C_GetCTTimer");
static_assert(offsetof(RSBattleEnemy_C_GetCTTimer, EnemyEnum) == 0x000000, "Member 'RSBattleEnemy_C_GetCTTimer::EnemyEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCTTimer, LastTimer) == 0x000004, "Member 'RSBattleEnemy_C_GetCTTimer::LastTimer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCTTimer, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetCTTimer::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCTTimer, CallFunc_GetCoolDownTimerBP_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetCTTimer::CallFunc_GetCoolDownTimerBP_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetCTTimer
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetCTTimer final
{
public:
	uint8                                         EnemyEnum;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F69[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetCTTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetCTTimer");
static_assert(sizeof(RSBattleEnemy_C_SetCTTimer) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetCTTimer");
static_assert(offsetof(RSBattleEnemy_C_SetCTTimer, EnemyEnum) == 0x000000, "Member 'RSBattleEnemy_C_SetCTTimer::EnemyEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetCTTimer, Value) == 0x000004, "Member 'RSBattleEnemy_C_SetCTTimer::Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetCTTimer, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetCTTimer::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetActionTime
// 0x00C0 (0x00C0 - 0x0000)
struct RSBattleEnemy_C_GetActionTime final
{
public:
	uint8                                         EnemyEnum;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F6A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Max;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Min;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_time;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F6B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          CallFunc_GetAiDataTable_Param;                     // 0x0018(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F6C[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetActionTime) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetActionTime");
static_assert(sizeof(RSBattleEnemy_C_GetActionTime) == 0x0000C0, "Wrong size on RSBattleEnemy_C_GetActionTime");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, EnemyEnum) == 0x000000, "Member 'RSBattleEnemy_C_GetActionTime::EnemyEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, Time) == 0x000004, "Member 'RSBattleEnemy_C_GetActionTime::Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, L_Max) == 0x000008, "Member 'RSBattleEnemy_C_GetActionTime::L_Max' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, L_Min) == 0x00000C, "Member 'RSBattleEnemy_C_GetActionTime::L_Min' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, L_time) == 0x000010, "Member 'RSBattleEnemy_C_GetActionTime::L_time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, CallFunc_GetAiDataTable_Param) == 0x000018, "Member 'RSBattleEnemy_C_GetActionTime::CallFunc_GetAiDataTable_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_GetActionTime::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetActionTime, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000BC, "Member 'RSBattleEnemy_C_GetActionTime::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemySoundEnum
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetEnemySoundEnum final
{
public:
	Enum_EnemySound                               SoundEnum;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemySoundEnum) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemySoundEnum");
static_assert(sizeof(RSBattleEnemy_C_GetEnemySoundEnum) == 0x000001, "Wrong size on RSBattleEnemy_C_GetEnemySoundEnum");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySoundEnum, SoundEnum) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemySoundEnum::SoundEnum' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Stealth End
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_Stealth_End final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F6D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F6E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F6F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnemyFindPlayerType                          CallFunc_GetFindPlayerType_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F70[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F71[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Stealth_End) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Stealth_End");
static_assert(sizeof(RSBattleEnemy_C_Stealth_End) == 0x000040, "Wrong size on RSBattleEnemy_C_Stealth_End");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Return) == 0x000000, "Member 'RSBattleEnemy_C_Stealth_End::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Loop_Num_Variable_1) == 0x000018, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'RSBattleEnemy_C_Stealth_End::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Less_IntInt_ReturnValue_1) == 0x000024, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_GetFindPlayerType_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_GetFindPlayerType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002D, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_IsValid_ReturnValue_1) == 0x000035, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_Stealth_End::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Stealth_End, K2Node_SwitchEnum_CmpSuccess) == 0x00003C, "Member 'RSBattleEnemy_C_Stealth_End::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CounterAttack
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_CounterAttack final
{
public:
	EHCSkillAttackType                            AttackType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F72[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsHitWeek;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CounterAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CounterAttack");
static_assert(sizeof(RSBattleEnemy_C_CounterAttack) == 0x000018, "Wrong size on RSBattleEnemy_C_CounterAttack");
static_assert(offsetof(RSBattleEnemy_C_CounterAttack, AttackType) == 0x000000, "Member 'RSBattleEnemy_C_CounterAttack::AttackType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CounterAttack, Attacker) == 0x000008, "Member 'RSBattleEnemy_C_CounterAttack::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CounterAttack, Param_IsHitWeek) == 0x000010, "Member 'RSBattleEnemy_C_CounterAttack::Param_IsHitWeek' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CounterAttack, Dummy) == 0x000011, "Member 'RSBattleEnemy_C_CounterAttack::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetRandomRangeLocation
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_GetRandomRangeLocation final
{
public:
	struct FVector                                SrcLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMin;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMax;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckWall;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F73[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLocation;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsFind;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F74[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_SelectLocation;                                  // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F75[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F76[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANavigationData*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F77[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomRangeLocationCore_NewLocation;   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRandomRangeLocationCore_IsSuccess;     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F78[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetRandomRangeLocation) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetRandomRangeLocation");
static_assert(sizeof(RSBattleEnemy_C_GetRandomRangeLocation) == 0x000090, "Wrong size on RSBattleEnemy_C_GetRandomRangeLocation");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, SrcLocation) == 0x000000, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::SrcLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, TargetLocation) == 0x00000C, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, RangeMin) == 0x000018, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::RangeMin' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, RangeMax) == 0x00001C, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::RangeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CheckWall) == 0x000020, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CheckWall' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, NewLocation) == 0x000024, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, IsSuccess) == 0x000030, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, L_IsFind) == 0x000031, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::L_IsFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, L_SelectLocation) == 0x000034, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::L_SelectLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, Temp_bool_True_if_break_was_hit_Variable) == 0x000040, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, Temp_int_Array_Index_Variable) == 0x000044, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_GetAllActorsOfClass_OutActors) == 0x000050, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_Array_Get_Item) == 0x000068, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_GetRandomRangeLocationCore_NewLocation) == 0x000070, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_GetRandomRangeLocationCore_NewLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_GetRandomRangeLocationCore_IsSuccess) == 0x00007C, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_GetRandomRangeLocationCore_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocation, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'RSBattleEnemy_C_GetRandomRangeLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetInvisibleHPGauge
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetInvisibleHPGauge final
{
public:
	bool                                          bInvisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetInvisibleHPGauge) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetInvisibleHPGauge");
static_assert(sizeof(RSBattleEnemy_C_SetInvisibleHPGauge) == 0x000001, "Wrong size on RSBattleEnemy_C_SetInvisibleHPGauge");
static_assert(offsetof(RSBattleEnemy_C_SetInvisibleHPGauge, bInvisible) == 0x000000, "Member 'RSBattleEnemy_C_SetInvisibleHPGauge::bInvisible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DeadDropItem
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_DeadDropItem final
{
public:
	class FName                                   CallFunc_GetEnemyDeadReplaceLogName_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterLV_LV;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F79[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F7A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F7B[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F7C[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0068(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DeadDropItem) == 0x000010, "Wrong alignment on RSBattleEnemy_C_DeadDropItem");
static_assert(sizeof(RSBattleEnemy_C_DeadDropItem) == 0x000090, "Wrong size on RSBattleEnemy_C_DeadDropItem");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetEnemyDeadReplaceLogName_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetEnemyDeadReplaceLogName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetCharacterLV_LV) == 0x000008, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetCharacterLV_LV' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetPlayerManager_PlayerManager) == 0x000010, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetBattleManager_BattleManager) == 0x000020, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetId_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_GetName_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_Conv_IntToString_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadDropItem, CallFunc_Conv_StringToName_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_DeadDropItem::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DeadAvatar
// 0x0088 (0x0088 - 0x0000)
struct RSBattleEnemy_C_DeadAvatar final
{
public:
	class UParticleSystem*                        LUseEffect;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F7D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarOwner_AvatarOwner;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOriginal_IsOriginal;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F7E[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F7F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy_1;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F80[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F81[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsDead_self_CastInput;                    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F82[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_SetHP_self_CastInput;                     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DeadAvatar) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DeadAvatar");
static_assert(sizeof(RSBattleEnemy_C_DeadAvatar) == 0x000088, "Wrong size on RSBattleEnemy_C_DeadAvatar");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, LUseEffect) == 0x000000, "Member 'RSBattleEnemy_C_DeadAvatar::LUseEffect' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattleEnemy_C_DeadAvatar::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_DeadAvatar::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_GetAvatarOwner_AvatarOwner) == 0x000018, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_GetAvatarOwner_AvatarOwner' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000020, "Member 'RSBattleEnemy_C_DeadAvatar::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_DeadAvatar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_IsOriginal_IsOriginal) == 0x000029, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_IsOriginal_IsOriginal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, K2Node_DynamicCast_AsRSBattle_Enemy_1) == 0x000040, "Member 'RSBattleEnemy_C_DeadAvatar::K2Node_DynamicCast_AsRSBattle_Enemy_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'RSBattleEnemy_C_DeadAvatar::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_Max_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_IsDead_self_CastInput) == 0x000058, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_IsDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_IsDead_bDead) == 0x000068, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_SetHP_self_CastInput) == 0x000070, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_SetHP_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_SetHP_bDummy) == 0x000080, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadAvatar, CallFunc_OnDead_Dummy) == 0x000081, "Member 'RSBattleEnemy_C_DeadAvatar::CallFunc_OnDead_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetStealthTargetActor
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetStealthTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetStealthTargetActor) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetStealthTargetActor");
static_assert(sizeof(RSBattleEnemy_C_GetStealthTargetActor) == 0x000008, "Wrong size on RSBattleEnemy_C_GetStealthTargetActor");
static_assert(offsetof(RSBattleEnemy_C_GetStealthTargetActor, TargetActor) == 0x000000, "Member 'RSBattleEnemy_C_GetStealthTargetActor::TargetActor' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSeeThroughBreak
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_IsSeeThroughBreak final
{
public:
	bool                                          StealthSeeBreak;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSeeBreak;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRealThings_bReal;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F83[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableAvatar_bEnable;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChangeStealth_Return;                     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSeeThroughBreak) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsSeeThroughBreak");
static_assert(sizeof(RSBattleEnemy_C_IsSeeThroughBreak) == 0x00000C, "Wrong size on RSBattleEnemy_C_IsSeeThroughBreak");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, StealthSeeBreak) == 0x000000, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::StealthSeeBreak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, IsSeeBreak) == 0x000001, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::IsSeeBreak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_IsRealThings_bReal) == 0x000002, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_IsRealThings_bReal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_GetId_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_IsEnableAvatar_bEnable) == 0x000009, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_IsEnableAvatar_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_IsStateStealth_Return) == 0x00000A, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSeeThroughBreak, CallFunc_ChangeStealth_Return) == 0x00000B, "Member 'RSBattleEnemy_C_IsSeeThroughBreak::CallFunc_ChangeStealth_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DeadStart
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_DeadStart final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F84[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0004(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DeadStart) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DeadStart");
static_assert(sizeof(RSBattleEnemy_C_DeadStart) == 0x000010, "Wrong size on RSBattleEnemy_C_DeadStart");
static_assert(offsetof(RSBattleEnemy_C_DeadStart, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DeadStart::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadStart, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_DeadStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadStart, CallFunc_IsAvatar_IsAvatar) == 0x000002, "Member 'RSBattleEnemy_C_DeadStart::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadStart, CallFunc_GetName_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DeadStart::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DeadStart, CallFunc_IsValid_ReturnValue_1) == 0x00000C, "Member 'RSBattleEnemy_C_DeadStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnableDamageCollision
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattleEnemy_C_SetEnableDamageCollision final
{
public:
	class FString                                 CollisionName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ECollisionEnabled                             CollisionEnable;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F85[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0018(0x0018)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F86[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F87[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F88[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDamagePartCollisionComponent*>  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x00C0(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UDamagePartCollisionComponent*          CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F89[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnableDamageCollision) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnableDamageCollision");
static_assert(sizeof(RSBattleEnemy_C_SetEnableDamageCollision) == 0x0000F8, "Wrong size on RSBattleEnemy_C_SetEnableDamageCollision");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CollisionName) == 0x000000, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CollisionName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CollisionEnable) == 0x000010, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CollisionEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Conv_StringToText_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, Temp_int_Array_Index_Variable) == 0x000030, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, K2Node_MakeArray_Array) == 0x000078, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Format_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Conv_TextToString_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_Less_IntInt_ReturnValue) == 0x0000DC, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_GetObjectName_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollision, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_SetEnableDamageCollision::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Dead Effect
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_Dead_Effect final
{
public:
	bool                                          IsAvatar;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F8A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        LDeadParticle;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead; // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_1; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_2; // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F8B[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F8C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnAttachDeadVanishEffect_DeadEffectParticle; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_Dead_Effect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Dead_Effect");
static_assert(sizeof(RSBattleEnemy_C_Dead_Effect) == 0x000048, "Wrong size on RSBattleEnemy_C_Dead_Effect");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, IsAvatar) == 0x000000, "Member 'RSBattleEnemy_C_Dead_Effect::IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, LDeadParticle) == 0x000008, "Member 'RSBattleEnemy_C_Dead_Effect::LDeadParticle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead) == 0x00001C, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, Temp_bool_Variable) == 0x00001D, "Member 'RSBattleEnemy_C_Dead_Effect::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_IsValid_ReturnValue) == 0x00001E, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_IsValid_ReturnValue_1) == 0x00001F, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_1) == 0x000020, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_2) == 0x000021, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, K2Node_Select_Default) == 0x000028, "Member 'RSBattleEnemy_C_Dead_Effect::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, Temp_bool_Variable_1) == 0x000030, "Member 'RSBattleEnemy_C_Dead_Effect::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, K2Node_Select_Default_1) == 0x000038, "Member 'RSBattleEnemy_C_Dead_Effect::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Dead_Effect, CallFunc_SpawnAttachDeadVanishEffect_DeadEffectParticle) == 0x000040, "Member 'RSBattleEnemy_C_Dead_Effect::CallFunc_SpawnAttachDeadVanishEffect_DeadEffectParticle' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayAction
// 0x0478 (0x0478 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F8D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TmpThinkTypeString;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EEnemyThinkActionType                         TmpThinkActionType;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F8E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_TargetDistance;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_TargetAngle;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F8F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_TargetName;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EnemyBrainCrashAnimKind                       L_BrainCrashKind;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDeadAnimKind                             L_DeadKind;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       L_DamageDownKind;                                  // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageAnimKind                           L_DamageKind;                                      // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyActionAnimKind                           L_ActionKind;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAttackAnimKind                           L_AttackKind;                                      // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyMoveAnimKind                             L_MoveKind;                                        // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            L_AliveKind;                                       // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_InKindString;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_KindString;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_ActionString;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   L_ActionKey;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2; // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3; // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F90[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyThinkActionType                         CallFunc_GetThinkActionType_ReturnValue;           // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F91[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00D8(0x0018)()
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0100(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F92[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0158(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0170(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0188(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x01C8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0208(0x0018)()
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5; // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0230(0x0040)(HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6; // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_7; // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x0298(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x02B0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x02C8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0308(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x0348(0x0018)()
	uint8                                         CallFunc_GetValueAsEnum_ReturnValue;               // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F93[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0368(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x03A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x03B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_5;          // 0x03C8(0x0018)()
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_8; // 0x03E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x03F0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0430(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0440(0x0018)()
	EnemyBrainCrashAnimKind                       CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue;   // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F94[0x7];                                     // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0460(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EnemyDeadAnimKind                             CallFunc_GetEnemyDeadAnimKind_ReturnValue;         // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyActionAnimKind                           CallFunc_GetEnemyActionAnimKind_ReturnValue;       // 0x0473(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAttackAnimKind                           CallFunc_GetEnemyAttackAnimKind_ReturnValue;       // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyMoveAnimKind                             CallFunc_GetMove_ReturnValue;                      // 0x0475(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0476(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayAction) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayAction");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayAction) == 0x000478, "Wrong size on RSBattleEnemy_C_DebugDisplayAction");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayAction::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, TmpThinkTypeString) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayAction::TmpThinkTypeString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, TmpThinkActionType) == 0x000018, "Member 'RSBattleEnemy_C_DebugDisplayAction::TmpThinkActionType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_TargetDistance) == 0x00001C, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_TargetAngle) == 0x000020, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_TargetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_TargetName) == 0x000028, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_TargetName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_BrainCrashKind) == 0x000038, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_BrainCrashKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_DeadKind) == 0x000039, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_DeadKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_DamageDownKind) == 0x00003A, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_DamageDownKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_DamageKind) == 0x00003B, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_DamageKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_ActionKind) == 0x00003C, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_ActionKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_AttackKind) == 0x00003D, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_AttackKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_MoveKind) == 0x00003E, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_MoveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_AliveKind) == 0x00003F, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_AliveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_InKindString) == 0x000040, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_InKindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_KindString) == 0x000050, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_KindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_ActionString) == 0x000060, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_ActionString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, L_ActionKey) == 0x000070, "Member 'RSBattleEnemy_C_DebugDisplayAction::L_ActionKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000088, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2) == 0x000098, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3) == 0x0000A8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_SwitchEnum_CmpSuccess) == 0x0000B8, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_IsValid_ReturnValue) == 0x0000D4, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetThinkActionType_ReturnValue) == 0x0000D5, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetThinkActionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData) == 0x000100, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetObjectName_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_FloatToText_ReturnValue) == 0x000158, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000170, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_1) == 0x000188, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_2) == 0x0001C8, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000208, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5) == 0x000220, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_3) == 0x000230, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetBlackboard_ReturnValue) == 0x000270, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6) == 0x000278, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_7) == 0x000288, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue_2) == 0x000298, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue_3) == 0x0002B0, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_4) == 0x0002C8, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_5) == 0x000308, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue_4) == 0x000348, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetValueAsEnum_ReturnValue) == 0x000360, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetValueAsEnum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_6) == 0x000368, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetAiDataTableString_Param) == 0x0003A8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetObjectName_ReturnValue_1) == 0x0003B8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_StringToText_ReturnValue_5) == 0x0003C8, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_StringToText_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_8) == 0x0003E0, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeStruct_FormatArgumentData_7) == 0x0003F0, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, K2Node_MakeArray_Array) == 0x000430, "Member 'RSBattleEnemy_C_DebugDisplayAction::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Format_ReturnValue) == 0x000440, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue) == 0x000458, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyBrainCrashAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_Conv_TextToString_ReturnValue) == 0x000460, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyDeadAnimKind_ReturnValue) == 0x000470, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyDeadAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000471, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x000472, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyActionAnimKind_ReturnValue) == 0x000473, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyActionAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyAttackAnimKind_ReturnValue) == 0x000474, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyAttackAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetMove_ReturnValue) == 0x000475, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetMove_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAction, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000476, "Member 'RSBattleEnemy_C_DebugDisplayAction::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayFront
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayFront final
{
public:
	bool                                          CallFunc_DebugDisplayAiBasic_Dummy;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugEnemyDrawData_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugDisplayUniqueConditionDescription_Dummy; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugDisplayMotionInfo_Dummy;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F95[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugDisplayAction_Dummy;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayFront) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayFront");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayFront) == 0x000018, "Wrong size on RSBattleEnemy_C_DebugDisplayFront");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_DebugDisplayAiBasic_Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_DebugDisplayAiBasic_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_IsDebugEnemyDrawData_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_IsDebugEnemyDrawData_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_DebugDisplayUniqueConditionDescription_Dummy) == 0x000002, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_DebugDisplayUniqueConditionDescription_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_DebugDisplayMotionInfo_Dummy) == 0x000003, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_DebugDisplayMotionInfo_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayFront, CallFunc_DebugDisplayAction_Dummy) == 0x000011, "Member 'RSBattleEnemy_C_DebugDisplayFront::CallFunc_DebugDisplayAction_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnableDamageCollisions
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_SetEnableDamageCollisions final
{
public:
	TArray<class FString>                         CollisionNames;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	ECollisionEnabled                             CollisionEnable;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F96[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F97[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetEnableDamageCollisions) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnableDamageCollisions");
static_assert(sizeof(RSBattleEnemy_C_SetEnableDamageCollisions) == 0x000038, "Wrong size on RSBattleEnemy_C_SetEnableDamageCollisions");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CollisionNames) == 0x000000, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CollisionNames' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CollisionEnable) == 0x000010, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CollisionEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CallFunc_Array_Get_Item) == 0x000020, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDamageCollisions, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_SetEnableDamageCollisions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetSpawnCollisionState
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_SetSpawnCollisionState final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F98[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F99[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F9A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F9B[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetSpawnCollisionState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetSpawnCollisionState");
static_assert(sizeof(RSBattleEnemy_C_SetSpawnCollisionState) == 0x000050, "Wrong size on RSBattleEnemy_C_SetSpawnCollisionState");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, ClaimantName) == 0x000000, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_IsValid_ReturnValue_1) == 0x000015, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_IsValid_ReturnValue_2) == 0x000016, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_GetChildrenComponents_Children) == 0x000018, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000040, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnCollisionState, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_SetSpawnCollisionState::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDelayDead
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_UpdateDelayDead final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldPastSec_l;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F9C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHCHitResult>                   K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_OnDamageActorHit_Dummy;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDelayDead) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateDelayDead");
static_assert(sizeof(RSBattleEnemy_C_UpdateDelayDead) == 0x000030, "Wrong size on RSBattleEnemy_C_UpdateDelayDead");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDelayDead::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, OldPastSec_l) == 0x000004, "Member 'RSBattleEnemy_C_UpdateDelayDead::OldPastSec_l' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDelayDead::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateDelayDead::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, K2Node_MakeArray_Array) == 0x000018, "Member 'RSBattleEnemy_C_UpdateDelayDead::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDead, CallFunc_OnDamageActorHit_Dummy) == 0x000028, "Member 'RSBattleEnemy_C_UpdateDelayDead::CallFunc_OnDamageActorHit_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDelayDead
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_SetDelayDead final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F9D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldPastSec_l;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F9E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F9F[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA0[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FA1[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDelayDead) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDelayDead");
static_assert(sizeof(RSBattleEnemy_C_SetDelayDead) == 0x000070, "Wrong size on RSBattleEnemy_C_SetDelayDead");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, Return) == 0x000000, "Member 'RSBattleEnemy_C_SetDelayDead::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, OldPastSec_l) == 0x000004, "Member 'RSBattleEnemy_C_SetDelayDead::OldPastSec_l' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattleEnemy_C_SetDelayDead::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_SetDelayDead::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_GetMainPlayer_Player) == 0x000028, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_GetChildrenComponents_Children) == 0x000038, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_SetHP_bDummy) == 0x000048, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_Array_Get_Item) == 0x000050, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000060, "Member 'RSBattleEnemy_C_SetDelayDead::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'RSBattleEnemy_C_SetDelayDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDead, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x00006A, "Member 'RSBattleEnemy_C_SetDelayDead::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InitializeActionTable
// 0x0238 (0x0238 - 0x0000)
struct RSBattleEnemy_C_InitializeActionTable final
{
public:
	Enum_em0300                                   NewLocalVar_1;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FA2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FA3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA4[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA5[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA6[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0110(0x0040)(HasGetValueTypeHash)
	struct FAiParamEnemyInfo                      K2Node_MakeStruct_AiParamEnemyInfo;                // 0x0150(0x00A0)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01F0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0200(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEnemyEnumLength_Length;                // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InitializeActionTable) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InitializeActionTable");
static_assert(sizeof(RSBattleEnemy_C_InitializeActionTable) == 0x000238, "Wrong size on RSBattleEnemy_C_InitializeActionTable");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, NewLocalVar_1) == 0x000000, "Member 'RSBattleEnemy_C_InitializeActionTable::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_MakeLiteralInt_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, Temp_int_Variable) == 0x000008, "Member 'RSBattleEnemy_C_InitializeActionTable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, Temp_int_Variable_1) == 0x00000C, "Member 'RSBattleEnemy_C_InitializeActionTable::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Conv_IntToByte_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_GetAiDataTableString_Param) == 0x000018, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Conv_StringToName_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_GetObjectName_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Conv_StringToText_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, K2Node_MakeStruct_FormatArgumentData) == 0x000110, "Member 'RSBattleEnemy_C_InitializeActionTable::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, K2Node_MakeStruct_AiParamEnemyInfo) == 0x000150, "Member 'RSBattleEnemy_C_InitializeActionTable::K2Node_MakeStruct_AiParamEnemyInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, K2Node_MakeArray_Array) == 0x0001F0, "Member 'RSBattleEnemy_C_InitializeActionTable::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Format_ReturnValue) == 0x000200, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Conv_TextToString_ReturnValue) == 0x000218, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_GetEnemyEnumLength_Length) == 0x000228, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_GetEnemyEnumLength_Length' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Subtract_IntInt_ReturnValue) == 0x00022C, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitializeActionTable, CallFunc_Greater_IntInt_ReturnValue) == 0x000230, "Member 'RSBattleEnemy_C_InitializeActionTable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSkipLowPriorityTick
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_IsSkipLowPriorityTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSimple;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Skip;                                              // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA7[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_BaseDelta;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalMax;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalDefault;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalTime;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_ResultSkip;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorTimeDilation_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FA9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUpdateEnemy_CanUpdate;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FAA[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSkipLowPriorityTick) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsSkipLowPriorityTick");
static_assert(sizeof(RSBattleEnemy_C_IsSkipLowPriorityTick) == 0x000040, "Wrong size on RSBattleEnemy_C_IsSkipLowPriorityTick");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, IsSimple) == 0x000004, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::IsSimple' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, Skip) == 0x000005, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::Skip' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, L_BaseDelta) == 0x000008, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::L_BaseDelta' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, L_IntervalMax) == 0x00000C, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::L_IntervalMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, L_IntervalDefault) == 0x000010, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::L_IntervalDefault' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, L_IntervalTime) == 0x000014, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::L_IntervalTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, L_ResultSkip) == 0x000018, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::L_ResultSkip' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_GetActorTimeDilation_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_GetActorTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_GetEnemyManager_Manager) == 0x000028, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_CanUpdateEnemy_CanUpdate) == 0x000031, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_CanUpdateEnemy_CanUpdate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000032, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSkipLowPriorityTick, CallFunc_Less_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_IsSkipLowPriorityTick::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayAiData
// 0x0178 (0x0178 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayAiData final
{
public:
	int32                                         LSelectNum;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FAB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 LAiTableDataKeys;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TargetDistance;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_TargetAngle;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_TargetName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EnemyBrainCrashAnimKind                       L_BrainCrashKind;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDeadAnimKind                             L_DeadKind;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       L_DamageDownKind;                                  // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageAnimKind                           L_DamageKind;                                      // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyActionAnimKind                           L_ActionKind;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAttackAnimKind                           L_AttackKind;                                      // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyMoveAnimKind                             L_MoveKind;                                        // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            L_AliveKind;                                       // 0x0037(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_InKindString;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_KindString;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_ActionString;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   L_ActionKey;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FAC[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0018)()
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FAD[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FAE[0x5];                                     // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x0110(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FAF[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB0[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayAiData) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayAiData");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayAiData) == 0x000178, "Wrong size on RSBattleEnemy_C_DebugDisplayAiData");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, LSelectNum) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayAiData::LSelectNum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, LAiTableDataKeys) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayAiData::LAiTableDataKeys' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_TargetDistance) == 0x000018, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_TargetAngle) == 0x00001C, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_TargetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_TargetName) == 0x000020, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_TargetName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_BrainCrashKind) == 0x000030, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_BrainCrashKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_DeadKind) == 0x000031, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_DeadKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_DamageDownKind) == 0x000032, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_DamageDownKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_DamageKind) == 0x000033, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_DamageKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_ActionKind) == 0x000034, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_ActionKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_AttackKind) == 0x000035, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_AttackKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_MoveKind) == 0x000036, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_MoveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_AliveKind) == 0x000037, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_AliveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_InKindString) == 0x000038, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_InKindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_KindString) == 0x000048, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_KindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_ActionString) == 0x000058, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_ActionString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, L_ActionKey) == 0x000068, "Member 'RSBattleEnemy_C_DebugDisplayAiData::L_ActionKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, Temp_int_Array_Index_Variable) == 0x000070, "Member 'RSBattleEnemy_C_DebugDisplayAiData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'RSBattleEnemy_C_DebugDisplayAiData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'RSBattleEnemy_C_DebugDisplayAiData::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugDisplayAiData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Conv_TextToString_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_GetDebuggingManager_Manager) == 0x000100, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_IsValid_ReturnValue) == 0x000109, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Array_Get_Item) == 0x00010A, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Map_Keys_Keys) == 0x000110, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_GetAiDataTableString_Param) == 0x000120, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Concat_StrStr_ReturnValue) == 0x000130, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Array_Length_ReturnValue) == 0x000140, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000144, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_Max_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_GetPlayerPawn_ReturnValue) == 0x000150, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, K2Node_DynamicCast_AsRSBattle_Player) == 0x000158, "Member 'RSBattleEnemy_C_DebugDisplayAiData::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'RSBattleEnemy_C_DebugDisplayAiData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_IsValid_ReturnValue_1) == 0x000161, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000168, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_IsValid_ReturnValue_2) == 0x000170, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiData, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000171, "Member 'RSBattleEnemy_C_DebugDisplayAiData::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugSetAiData
// 0x0110 (0x0110 - 0x0000)
struct RSBattleEnemy_C_DebugSetAiData final
{
public:
	int32                                         AiEnum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Probability;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 LKeys;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UBP_Ai_Enemy_C*                         LAiEnemyComponent;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DebugAiRowName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LDataTableRowNames;                                // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FAiParamEnemy                          L_ChangeValue;                                     // 0x0038(0x00A0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                L_Vector;                                          // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FB1[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          L_Element;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Ai_Enemy_C*                         CallFunc_GetComponentByClass_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB2[0x5];                                     // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x0100(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugSetAiData) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugSetAiData");
static_assert(sizeof(RSBattleEnemy_C_DebugSetAiData) == 0x000110, "Wrong size on RSBattleEnemy_C_DebugSetAiData");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, AiEnum) == 0x000000, "Member 'RSBattleEnemy_C_DebugSetAiData::AiEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, Probability) == 0x000004, "Member 'RSBattleEnemy_C_DebugSetAiData::Probability' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, LKeys) == 0x000008, "Member 'RSBattleEnemy_C_DebugSetAiData::LKeys' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, LAiEnemyComponent) == 0x000018, "Member 'RSBattleEnemy_C_DebugSetAiData::LAiEnemyComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, DebugAiRowName) == 0x000020, "Member 'RSBattleEnemy_C_DebugSetAiData::DebugAiRowName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, LDataTableRowNames) == 0x000028, "Member 'RSBattleEnemy_C_DebugSetAiData::LDataTableRowNames' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, L_ChangeValue) == 0x000038, "Member 'RSBattleEnemy_C_DebugSetAiData::L_ChangeValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, L_Vector) == 0x0000D8, "Member 'RSBattleEnemy_C_DebugSetAiData::L_Vector' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, L_Element) == 0x0000E8, "Member 'RSBattleEnemy_C_DebugSetAiData::L_Element' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, CallFunc_GetComponentByClass_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugSetAiData::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'RSBattleEnemy_C_DebugSetAiData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, CallFunc_IsValid_ReturnValue) == 0x0000F9, "Member 'RSBattleEnemy_C_DebugSetAiData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000FA, "Member 'RSBattleEnemy_C_DebugSetAiData::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugSetAiData, CallFunc_Map_Keys_Keys) == 0x000100, "Member 'RSBattleEnemy_C_DebugSetAiData::CallFunc_Map_Keys_Keys' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugResetAiData
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_DebugResetAiData final
{
public:
	int32                                         L_length;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugResetAiData) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DebugResetAiData");
static_assert(sizeof(RSBattleEnemy_C_DebugResetAiData) == 0x000004, "Wrong size on RSBattleEnemy_C_DebugResetAiData");
static_assert(offsetof(RSBattleEnemy_C_DebugResetAiData, L_length) == 0x000000, "Member 'RSBattleEnemy_C_DebugResetAiData::L_length' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOnFlame
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOnFlame final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB4[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateOnMaterial_Dummy;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB6[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> CallFunc_Kick_Bad_State_Effect_NewParam;           // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOnFlame) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOnFlame");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOnFlame) == 0x000038, "Wrong size on RSBattleEnemy_C_BadStateEffectOnFlame");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000008, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_IsStateStealth_Return) == 0x00001C, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_Stealth_End_Return) == 0x000024, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_Less_IntInt_ReturnValue) == 0x000025, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_BadStateOnMaterial_Dummy) == 0x000026, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_BadStateOnMaterial_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlame, CallFunc_Kick_Bad_State_Effect_NewParam) == 0x000028, "Member 'RSBattleEnemy_C_BadStateEffectOnFlame::CallFunc_Kick_Bad_State_Effect_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOffFlame
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOffFlame final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateOffMaterial_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOffFlame) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOffFlame");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOffFlame) == 0x000002, "Wrong size on RSBattleEnemy_C_BadStateEffectOffFlame");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffFlame, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOffFlame::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffFlame, CallFunc_BadStateOffMaterial_Dummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateEffectOffFlame::CallFunc_BadStateOffMaterial_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Kick Bad State Effect
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_Kick_Bad_State_Effect final
{
public:
	TArray<struct FBadStateParticleData>          ParticleParams;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bAttachLocationOnly;                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> NewParam;                                          // 0x0018(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class URSParticleSystemComponentBase*> L_Handles;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FB8[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> CallFunc_KickBadStateEffectOne_OutHandles;         // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Kick_Bad_State_Effect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Kick_Bad_State_Effect");
static_assert(sizeof(RSBattleEnemy_C_Kick_Bad_State_Effect) == 0x000060, "Wrong size on RSBattleEnemy_C_Kick_Bad_State_Effect");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, ParticleParams) == 0x000000, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::ParticleParams' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, bAttachLocationOnly) == 0x000010, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::bAttachLocationOnly' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, NewParam) == 0x000018, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, L_Handles) == 0x000028, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::L_Handles' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, Temp_int_Array_Index_Variable) == 0x000038, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, CallFunc_KickBadStateEffectOne_OutHandles) == 0x000048, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::CallFunc_KickBadStateEffectOne_OutHandles' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Kick_Bad_State_Effect, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_Kick_Bad_State_Effect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StopBadStateEffect
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_StopBadStateEffect final
{
public:
	TArray<class URSParticleSystemComponentBase*> ParticleHandles;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FB9[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_StopBadStateEffect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StopBadStateEffect");
static_assert(sizeof(RSBattleEnemy_C_StopBadStateEffect) == 0x000028, "Wrong size on RSBattleEnemy_C_StopBadStateEffect");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, ParticleHandles) == 0x000000, "Member 'RSBattleEnemy_C_StopBadStateEffect::ParticleHandles' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_StopBadStateEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, Temp_int_Array_Index_Variable) == 0x000014, "Member 'RSBattleEnemy_C_StopBadStateEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RSBattleEnemy_C_StopBadStateEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_StopBadStateEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'RSBattleEnemy_C_StopBadStateEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopBadStateEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_StopBadStateEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.KickBadStateEffectOne
// 0x0080 (0x0080 - 0x0000)
struct RSBattleEnemy_C_KickBadStateEffectOne final
{
public:
	struct FBadStateParticleData                  ParticleParam;                                     // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bAttachLocationOnly;                               // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FBA[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> OutHandles;                                        // 0x0030(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class URSParticleSystemComponentBase*> L_Handles;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FBB[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FBC[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FBD[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_KickBadStateEffectOne) == 0x000008, "Wrong alignment on RSBattleEnemy_C_KickBadStateEffectOne");
static_assert(sizeof(RSBattleEnemy_C_KickBadStateEffectOne) == 0x000080, "Wrong size on RSBattleEnemy_C_KickBadStateEffectOne");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, ParticleParam) == 0x000000, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::ParticleParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, bAttachLocationOnly) == 0x000028, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::bAttachLocationOnly' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, OutHandles) == 0x000030, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::OutHandles' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, L_Handles) == 0x000040, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::L_Handles' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, Temp_int_Loop_Num_Variable) == 0x000050, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickBadStateEffectOne, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_KickBadStateEffectOne::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOnElec
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOnElec final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FBE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FBF[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateOnMaterial_Dummy;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC0[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> CallFunc_Kick_Bad_State_Effect_NewParam;           // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOnElec) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOnElec");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOnElec) == 0x000030, "Wrong size on RSBattleEnemy_C_BadStateEffectOnElec");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_IsStateStealth_Return) == 0x000010, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_Less_IntInt_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_Stealth_End_Return) == 0x000018, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_BadStateOnMaterial_Dummy) == 0x000019, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_BadStateOnMaterial_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnElec, CallFunc_Kick_Bad_State_Effect_NewParam) == 0x000020, "Member 'RSBattleEnemy_C_BadStateEffectOnElec::CallFunc_Kick_Bad_State_Effect_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOffElec
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOffElec final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateOffMaterial_Dummy;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOffElec) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOffElec");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOffElec) == 0x000002, "Wrong size on RSBattleEnemy_C_BadStateEffectOffElec");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffElec, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOffElec::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffElec, CallFunc_BadStateOffMaterial_Dummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateEffectOffElec::CallFunc_BadStateOffMaterial_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOnOil
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOnOil final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC2[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC3[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnOil_bDummy;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC4[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> CallFunc_Kick_Bad_State_Effect_NewParam;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOnOil) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOnOil");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOnOil) == 0x000048, "Wrong size on RSBattleEnemy_C_BadStateEffectOnOil");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_IsStealthSeeEnable_Return) == 0x00001A, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_GetEnemyManager_Manager) == 0x000020, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_IsStateStealth_Return) == 0x000034, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_BadStateEffectOnOil_bDummy) == 0x000035, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_BadStateEffectOnOil_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnOil, CallFunc_Kick_Bad_State_Effect_NewParam) == 0x000038, "Member 'RSBattleEnemy_C_BadStateEffectOnOil::CallFunc_Kick_Bad_State_Effect_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOffOil
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOffOil final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffOil_bDummy;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOffOil) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOffOil");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOffOil) == 0x000003, "Wrong size on RSBattleEnemy_C_BadStateEffectOffOil");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffOil, bNoMaterial) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOffOil::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffOil, bDummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateEffectOffOil::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffOil, CallFunc_BadStateEffectOffOil_bDummy) == 0x000002, "Member 'RSBattleEnemy_C_BadStateEffectOffOil::CallFunc_BadStateEffectOffOil_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOnFlooded
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOnFlooded final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC6[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC8[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOnFlooded_bDummy;           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FC9[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URSParticleSystemComponentBase*> CallFunc_Kick_Bad_State_Effect_NewParam;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOnFlooded) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOnFlooded");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOnFlooded) == 0x000040, "Wrong size on RSBattleEnemy_C_BadStateEffectOnFlooded");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_IsValid_ReturnValue_1) == 0x00000D, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_IsStealthSeeEnable_Return) == 0x00000E, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_IsStateStealth_Return) == 0x00002C, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_BadStateEffectOnFlooded_bDummy) == 0x00002D, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_BadStateEffectOnFlooded_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOnFlooded, CallFunc_Kick_Bad_State_Effect_NewParam) == 0x000030, "Member 'RSBattleEnemy_C_BadStateEffectOnFlooded::CallFunc_Kick_Bad_State_Effect_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectOffFlooded
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectOffFlooded final
{
public:
	bool                                          bNoMaterial;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectOffFlooded_bDummy;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectOffFlooded) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BadStateEffectOffFlooded");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectOffFlooded) == 0x000003, "Wrong size on RSBattleEnemy_C_BadStateEffectOffFlooded");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffFlooded, bNoMaterial) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectOffFlooded::bNoMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffFlooded, bDummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateEffectOffFlooded::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectOffFlooded, CallFunc_BadStateEffectOffFlooded_bDummy) == 0x000002, "Member 'RSBattleEnemy_C_BadStateEffectOffFlooded::CallFunc_BadStateEffectOffFlooded_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RestoreHateData
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_RestoreHateData final
{
public:
	bool                                          FindTarget;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FCA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FCB[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FCC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FCD[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FCE[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FCF[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FD0[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD1[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item_2;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RestoreHateData) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RestoreHateData");
static_assert(sizeof(RSBattleEnemy_C_RestoreHateData) == 0x000090, "Wrong size on RSBattleEnemy_C_RestoreHateData");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, FindTarget) == 0x000000, "Member 'RSBattleEnemy_C_RestoreHateData::FindTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_bool_True_if_break_was_hit_Variable) == 0x000001, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_bool_True_if_break_was_hit_Variable_1) == 0x00000D, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Not_PreBool_ReturnValue_1) == 0x000014, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_GetPlayerList_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, K2Node_DynamicCast_AsPlayer_Interface) == 0x000060, "Member 'RSBattleEnemy_C_RestoreHateData::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'RSBattleEnemy_C_RestoreHateData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Less_IntInt_ReturnValue) == 0x000071, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_GetPlayerID_ReturnValue) == 0x000072, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_BooleanAND_ReturnValue) == 0x000073, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Array_Length_ReturnValue_1) == 0x000074, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_Array_Get_Item_2) == 0x000080, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_BooleanAND_ReturnValue_1) == 0x000088, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_IsValid_ReturnValue_2) == 0x000089, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, Temp_byte_Variable) == 0x00008A, "Member 'RSBattleEnemy_C_RestoreHateData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00008B, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreHateData, CallFunc_IsBattling_bBatting) == 0x00008C, "Member 'RSBattleEnemy_C_RestoreHateData::CallFunc_IsBattling_bBatting' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetHateData
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_SetHateData final
{
public:
	class ARSCharacterBase*                       TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FD2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetHateData) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetHateData");
static_assert(sizeof(RSBattleEnemy_C_SetHateData) == 0x000028, "Wrong size on RSBattleEnemy_C_SetHateData");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, TargetActor) == 0x000000, "Member 'RSBattleEnemy_C_SetHateData::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, Param_Index) == 0x000008, "Member 'RSBattleEnemy_C_SetHateData::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'RSBattleEnemy_C_SetHateData::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_SetHateData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, CallFunc_GetPlayerID_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_SetHateData::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, Temp_byte_Variable) == 0x000022, "Member 'RSBattleEnemy_C_SetHateData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHateData, CallFunc_IsDead_bDead) == 0x000023, "Member 'RSBattleEnemy_C_SetHateData::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsContinuityDamageMotion
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsContinuityDamageMotion final
{
public:
	EnemyAliveAnimKind                            AliveAnimKind;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinuityDamageMotion_ReturnValue;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsContinuityDamageMotion) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsContinuityDamageMotion");
static_assert(sizeof(RSBattleEnemy_C_IsContinuityDamageMotion) == 0x000003, "Wrong size on RSBattleEnemy_C_IsContinuityDamageMotion");
static_assert(offsetof(RSBattleEnemy_C_IsContinuityDamageMotion, AliveAnimKind) == 0x000000, "Member 'RSBattleEnemy_C_IsContinuityDamageMotion::AliveAnimKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsContinuityDamageMotion, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_IsContinuityDamageMotion::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsContinuityDamageMotion, CallFunc_IsContinuityDamageMotion_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsContinuityDamageMotion::CallFunc_IsContinuityDamageMotion_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReplaceHitResult
// 0x0710 (0x0710 - 0x0000)
struct RSBattleEnemy_C_ReplaceHitResult final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FHCHitResult                           ReturnHitResult;                                   // 0x01C0(0x01C0)(Parm, OutParm, ContainsInstancedReference)
	struct FHCHitResult                           L_hitResult;                                       // 0x0380(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<EHCSkillExtraType>                     L_ExtraTypes;                                      // 0x0540(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCHitResult                           CallFunc_ReplaceHitResult_ReturnValue;             // 0x0550(0x01C0)(ContainsInstancedReference)
};
static_assert(alignof(RSBattleEnemy_C_ReplaceHitResult) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ReplaceHitResult");
static_assert(sizeof(RSBattleEnemy_C_ReplaceHitResult) == 0x000710, "Wrong size on RSBattleEnemy_C_ReplaceHitResult");
static_assert(offsetof(RSBattleEnemy_C_ReplaceHitResult, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_ReplaceHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReplaceHitResult, ReturnHitResult) == 0x0001C0, "Member 'RSBattleEnemy_C_ReplaceHitResult::ReturnHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReplaceHitResult, L_hitResult) == 0x000380, "Member 'RSBattleEnemy_C_ReplaceHitResult::L_hitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReplaceHitResult, L_ExtraTypes) == 0x000540, "Member 'RSBattleEnemy_C_ReplaceHitResult::L_ExtraTypes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReplaceHitResult, CallFunc_ReplaceHitResult_ReturnValue) == 0x000550, "Member 'RSBattleEnemy_C_ReplaceHitResult::CallFunc_ReplaceHitResult_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetCanDropData
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetCanDropData final
{
public:
	bool                                          Param_CanDropData;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetCanDropData) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetCanDropData");
static_assert(sizeof(RSBattleEnemy_C_SetCanDropData) == 0x000001, "Wrong size on RSBattleEnemy_C_SetCanDropData");
static_assert(offsetof(RSBattleEnemy_C_SetCanDropData, Param_CanDropData) == 0x000000, "Member 'RSBattleEnemy_C_SetCanDropData::Param_CanDropData' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCanDropData
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetCanDropData final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetCanDropData) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetCanDropData");
static_assert(sizeof(RSBattleEnemy_C_GetCanDropData) == 0x000001, "Wrong size on RSBattleEnemy_C_GetCanDropData");
static_assert(offsetof(RSBattleEnemy_C_GetCanDropData, Return) == 0x000000, "Member 'RSBattleEnemy_C_GetCanDropData::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetupAnimController
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_SetupAnimController final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_8FD4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAnimControllerComponent*          CallFunc_GetEnemyAnimControllerComponentFromActor_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetupAnimController) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetupAnimController");
static_assert(sizeof(RSBattleEnemy_C_SetupAnimController) == 0x000028, "Wrong size on RSBattleEnemy_C_SetupAnimController");
static_assert(offsetof(RSBattleEnemy_C_SetupAnimController, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_SetupAnimController::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetupAnimController, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'RSBattleEnemy_C_SetupAnimController::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetupAnimController, CallFunc_GetEnemyAnimControllerComponentFromActor_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetupAnimController::CallFunc_GetEnemyAnimControllerComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetupAnimController, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetupAnimController::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetStealth
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_SetStealth final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FD6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FD7[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthEnable_Return;                   // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChangeStealth_Return;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD8[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return_1;              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD9[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetStealth) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetStealth");
static_assert(sizeof(RSBattleEnemy_C_SetStealth) == 0x000058, "Wrong size on RSBattleEnemy_C_SetStealth");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_SetStealth::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_SetStealth::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, Temp_int_Variable) == 0x000010, "Member 'RSBattleEnemy_C_SetStealth::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_GetBodyMeshes_Meshes) == 0x000018, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_IsValid_ReturnValue) == 0x00003D, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_IsStealthSeeEnable_Return) == 0x00003E, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_IsStealthEnable_Return) == 0x00003F, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_IsStealthEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_ChangeStealth_Return) == 0x000041, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_ChangeStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_GetEnemyManager_Manager) == 0x000048, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_IsStealthSeeEnable_Return_1) == 0x000051, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_IsStealthSeeEnable_Return_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealth, CallFunc_GetHPPercent_Percent) == 0x000054, "Member 'RSBattleEnemy_C_SetStealth::CallFunc_GetHPPercent_Percent' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcAccumulationByDefence
// 0x0098 (0x0098 - 0x0000)
struct RSBattleEnemy_C_CalcAccumulationByDefence final
{
public:
	float                                         RefWince;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefKnockback;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefDown;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLaunch;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlame;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefElectric;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefFlooded;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefOil;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefConfusion;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashScale;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefCrashCapCheckRate;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FDA[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FDB[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_CalcCrashCap;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EnemyFixParam_C*                    LFixParam;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcDown;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcKnockBack;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcWince;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_CalcCrash;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueEffectiveSas_IsEffectiveSas;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FDC[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsUniqueEffectiveSas_WinceRate;           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsUniqueEffectiveSas_KnockBackRate;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsUniqueEffectiveSas_DownRate;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsUniqueEffectiveSas_CrashRate;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcAccumulationByDefence_ReturnValue;    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FDD[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSuperArmor_bSuperArmor;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccumulationByDefence_CheckInvincible_ReturnValue; // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isEnemyDamageknockBack_bool;              // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FDE[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcAccumulationByDefence_OutWince;       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAccumulationByDefence_OutKnockback;   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAccumulationByDefence_OutDown;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAccumulationByDefence_OutCrashScale;  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAccumulationByDefence_OutCrashCapCheckRate; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcAccumulationByDefence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcAccumulationByDefence");
static_assert(sizeof(RSBattleEnemy_C_CalcAccumulationByDefence) == 0x000098, "Wrong size on RSBattleEnemy_C_CalcAccumulationByDefence");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefWince) == 0x000000, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefWince' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefKnockback) == 0x000004, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefKnockback' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefDown) == 0x000008, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefLaunch) == 0x00000C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefLaunch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefFlame) == 0x000010, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefFlame' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefElectric) == 0x000014, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefElectric' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefFlooded) == 0x000018, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefFlooded' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefOil) == 0x00001C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefOil' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefConfusion) == 0x000020, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefConfusion' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefCrashScale) == 0x000024, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, RefCrashCapCheckRate) == 0x000028, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::RefCrashCapCheckRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, AttackActor) == 0x000030, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, L_CalcCrashCap) == 0x00003C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::L_CalcCrashCap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, LFixParam) == 0x000040, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::LFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, L_CalcDown) == 0x000048, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::L_CalcDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, L_CalcKnockBack) == 0x00004C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::L_CalcKnockBack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, L_CalcWince) == 0x000050, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::L_CalcWince' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, L_CalcCrash) == 0x000054, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::L_CalcCrash' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsUniqueEffectiveSas_IsEffectiveSas) == 0x000058, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsUniqueEffectiveSas_IsEffectiveSas' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsUniqueEffectiveSas_WinceRate) == 0x00005C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsUniqueEffectiveSas_WinceRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsUniqueEffectiveSas_KnockBackRate) == 0x000060, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsUniqueEffectiveSas_KnockBackRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsUniqueEffectiveSas_DownRate) == 0x000064, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsUniqueEffectiveSas_DownRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsUniqueEffectiveSas_CrashRate) == 0x000068, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsUniqueEffectiveSas_CrashRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000074, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000078, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00007C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_IsSuperArmor_bSuperArmor) == 0x000080, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_IsSuperArmor_bSuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_CheckInvincible_ReturnValue) == 0x000081, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_CheckInvincible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_isEnemyDamageknockBack_bool) == 0x000082, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_isEnemyDamageknockBack_bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_OutWince) == 0x000084, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_OutWince' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_OutKnockback) == 0x000088, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_OutKnockback' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_OutDown) == 0x00008C, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_OutDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_OutCrashScale) == 0x000090, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_OutCrashScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcAccumulationByDefence, CallFunc_CalcAccumulationByDefence_OutCrashCapCheckRate) == 0x000094, "Member 'RSBattleEnemy_C_CalcAccumulationByDefence::CallFunc_CalcAccumulationByDefence_OutCrashCapCheckRate' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateSpawn
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_UpdateSpawn final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LAbsoluteDetectName;                               // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdateRepop_ReturnValue;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnStartUpdate_bEnd;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FDF[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateSpawn) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateSpawn");
static_assert(sizeof(RSBattleEnemy_C_UpdateSpawn) == 0x000018, "Wrong size on RSBattleEnemy_C_UpdateSpawn");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateSpawn::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, LAbsoluteDetectName) == 0x000004, "Member 'RSBattleEnemy_C_UpdateSpawn::LAbsoluteDetectName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateSpawn::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, CallFunc_IsUpdateRepop_ReturnValue) == 0x00000D, "Member 'RSBattleEnemy_C_UpdateSpawn::CallFunc_IsUpdateRepop_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, CallFunc_SpawnStartUpdate_bEnd) == 0x00000E, "Member 'RSBattleEnemy_C_UpdateSpawn::CallFunc_SpawnStartUpdate_bEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateSpawn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSpawn, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'RSBattleEnemy_C_UpdateSpawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SpawnWaitUpdate
// 0x0088 (0x0088 - 0x0000)
struct RSBattleEnemy_C_SpawnWaitUpdate final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_Rotation;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetSpawnRotation_Rotation;                // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSpawnLocation_Location;                // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpdateRepop_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE0[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE1[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE2[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SpawnWaitUpdate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SpawnWaitUpdate");
static_assert(sizeof(RSBattleEnemy_C_SpawnWaitUpdate) == 0x000088, "Wrong size on RSBattleEnemy_C_SpawnWaitUpdate");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, L_Rotation) == 0x000004, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::L_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_GetSpawnRotation_Rotation) == 0x000010, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_GetSpawnRotation_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_GetSpawnLocation_Location) == 0x00001C, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_GetSpawnLocation_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_IsUpdateRepop_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_IsUpdateRepop_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_ComposeRotators_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00003D, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_GetPlayerPawn_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_FindLookAtRotation_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_BreakRotator_Roll) == 0x000070, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_BreakRotator_Pitch) == 0x000074, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_BreakRotator_Yaw) == 0x000078, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnWaitUpdate, CallFunc_MakeRotator_ReturnValue) == 0x00007C, "Member 'RSBattleEnemy_C_SpawnWaitUpdate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SpawnStartUpdate
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattleEnemy_C_SpawnStartUpdate final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LNewRotation;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LEnd;                                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE4[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                L_ChildrenComp;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         L_CollisionNum;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpdateRepop_ReturnValue;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdateRepop_ReturnValue_1;              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartAction_Dummy;                      // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSpawnLocation_Location;                // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE5[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetSpawnRotation_Rotation;                // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEnemyTarget_NewParam;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE6[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE7[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SpawnStartUpdate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SpawnStartUpdate");
static_assert(sizeof(RSBattleEnemy_C_SpawnStartUpdate) == 0x0000B8, "Wrong size on RSBattleEnemy_C_SpawnStartUpdate");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_SpawnStartUpdate::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, bEnd) == 0x000004, "Member 'RSBattleEnemy_C_SpawnStartUpdate::bEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, LNewRotation) == 0x000008, "Member 'RSBattleEnemy_C_SpawnStartUpdate::LNewRotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, LEnd) == 0x000014, "Member 'RSBattleEnemy_C_SpawnStartUpdate::LEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, L_ChildrenComp) == 0x000018, "Member 'RSBattleEnemy_C_SpawnStartUpdate::L_ChildrenComp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, L_CollisionNum) == 0x000028, "Member 'RSBattleEnemy_C_SpawnStartUpdate::L_CollisionNum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, ClaimantName) == 0x00002C, "Member 'RSBattleEnemy_C_SpawnStartUpdate::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_IsUpdateRepop_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_IsUpdateRepop_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_IsUpdateRepop_ReturnValue_1) == 0x000035, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_IsUpdateRepop_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000036, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_OnStartAction_Dummy) == 0x000037, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_OnStartAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_GetSpawnLocation_Location) == 0x000038, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_GetSpawnLocation_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_GetSpawnRotation_Rotation) == 0x000048, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_GetSpawnRotation_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_SetEnemyTarget_NewParam) == 0x000058, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_SetEnemyTarget_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_GetPlayerPawn_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000078, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_FindLookAtRotation_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_MakeRotator_ReturnValue) == 0x00009C, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartUpdate, CallFunc_ComposeRotators_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_SpawnStartUpdate::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReceivedNotifyAnimEnd
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_ReceivedNotifyAnimEnd final
{
public:
	bool                                          Received;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FE9[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceivedNotifyAnimEnd_Received;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ReceivedNotifyAnimEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ReceivedNotifyAnimEnd");
static_assert(sizeof(RSBattleEnemy_C_ReceivedNotifyAnimEnd) == 0x000028, "Wrong size on RSBattleEnemy_C_ReceivedNotifyAnimEnd");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, Received) == 0x000000, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::Received' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_GetBaseMontage_BaseMontage) == 0x000008, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_GetBaseMontage_BaseMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_ReceivedNotifyAnimEnd_Received) == 0x000020, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_ReceivedNotifyAnimEnd_Received' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000022, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000023, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDelayDeath
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetDelayDeath final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDelayDeath_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDelayDeath) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetDelayDeath");
static_assert(sizeof(RSBattleEnemy_C_SetDelayDeath) == 0x000002, "Wrong size on RSBattleEnemy_C_SetDelayDeath");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDeath, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_SetDelayDeath::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDelayDeath, CallFunc_IsDelayDeath_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetDelayDeath::CallFunc_IsDelayDeath_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateHitStop
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_UpdateHitStop final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FEA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FEB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateHitStop");
static_assert(sizeof(RSBattleEnemy_C_UpdateHitStop) == 0x000020, "Wrong size on RSBattleEnemy_C_UpdateHitStop");
static_assert(offsetof(RSBattleEnemy_C_UpdateHitStop, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateHitStop::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateHitStop, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'RSBattleEnemy_C_UpdateHitStop::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateHitStop, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateHitStop, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateHitStop::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateHitStop, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_UpdateHitStop::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LoadSound
// 0x0180 (0x0180 - 0x0000)
struct RSBattleEnemy_C_LoadSound final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FEC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     L_Manager;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FED[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FEE[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_ObjectSoftRefToName_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0040(0x0018)()
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FEF[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	class USoundAtomCueSheet*                     K2Node_DynamicCast_AsSound_Atom_Cue_Sheet;         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF0[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_RegisterCueSheet_ReturnValue;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF1[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0110(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF2[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0168(0x0018)()
};
static_assert(alignof(RSBattleEnemy_C_LoadSound) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LoadSound");
static_assert(sizeof(RSBattleEnemy_C_LoadSound) == 0x000180, "Wrong size on RSBattleEnemy_C_LoadSound");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_LoadSound::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, L_Manager) == 0x000008, "Member 'RSBattleEnemy_C_LoadSound::L_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'RSBattleEnemy_C_LoadSound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_LoadSound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_LoadSound::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_GetSoundManager_SoundManager) == 0x000028, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_ObjectSoftRefToName_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_ObjectSoftRefToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Conv_NameToText_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_LoadSoftObject_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'RSBattleEnemy_C_LoadSound::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_MakeArray_Array) == 0x0000A8, "Member 'RSBattleEnemy_C_LoadSound::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_DynamicCast_AsSound_Atom_Cue_Sheet) == 0x0000D0, "Member 'RSBattleEnemy_C_LoadSound::K2Node_DynamicCast_AsSound_Atom_Cue_Sheet' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'RSBattleEnemy_C_LoadSound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Array_AddUnique_ReturnValue) == 0x0000DC, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_GetObjectName_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_RegisterCueSheet_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_RegisterCueSheet_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Conv_StringToText_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_MakeStruct_FormatArgumentData_1) == 0x000110, "Member 'RSBattleEnemy_C_LoadSound::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000150, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, K2Node_MakeArray_Array_1) == 0x000158, "Member 'RSBattleEnemy_C_LoadSound::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSound, CallFunc_Format_ReturnValue_1) == 0x000168, "Member 'RSBattleEnemy_C_LoadSound::CallFunc_Format_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UnloadSound
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_UnloadSound final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FF4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF5[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnregisterCueSheet_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF6[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UnloadSound) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UnloadSound");
static_assert(sizeof(RSBattleEnemy_C_UnloadSound) == 0x000030, "Wrong size on RSBattleEnemy_C_UnloadSound");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_UnloadSound::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_UnloadSound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattleEnemy_C_UnloadSound::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_GetSoundManager_SoundManager) == 0x000010, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_UnloadSound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_IsValid_ReturnValue_1) == 0x000024, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_UnregisterCueSheet_ReturnValue) == 0x000025, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_UnregisterCueSheet_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_Less_IntInt_ReturnValue) == 0x000026, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSound, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_UnloadSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDestroy
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_OnDestroy final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DestroyEnemyWeapon_Dummy;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyAssetUnload_Dummy;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDestroy) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnDestroy");
static_assert(sizeof(RSBattleEnemy_C_OnDestroy) == 0x000004, "Wrong size on RSBattleEnemy_C_OnDestroy");
static_assert(offsetof(RSBattleEnemy_C_OnDestroy, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnDestroy::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDestroy, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_OnDestroy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDestroy, CallFunc_DestroyEnemyWeapon_Dummy) == 0x000002, "Member 'RSBattleEnemy_C_OnDestroy::CallFunc_DestroyEnemyWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDestroy, CallFunc_OnEnemyAssetUnload_Dummy) == 0x000003, "Member 'RSBattleEnemy_C_OnDestroy::CallFunc_OnEnemyAssetUnload_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyAssetUnload
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_OnEnemyAssetUnload final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnloadSequence_Dummy;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnloadSound_Dummy;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyAssetUnload) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnEnemyAssetUnload");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyAssetUnload) == 0x000003, "Wrong size on RSBattleEnemy_C_OnEnemyAssetUnload");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetUnload, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyAssetUnload::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetUnload, CallFunc_UnloadSequence_Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnEnemyAssetUnload::CallFunc_UnloadSequence_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyAssetUnload, CallFunc_UnloadSound_Dummy) == 0x000002, "Member 'RSBattleEnemy_C_OnEnemyAssetUnload::CallFunc_UnloadSound_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateReturn
// 0x00E0 (0x00E0 - 0x0000)
struct RSBattleEnemy_C_UpdateReturn final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FF7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                L_ComponentList;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF8[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateReturn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateReturn");
static_assert(sizeof(RSBattleEnemy_C_UpdateReturn) == 0x0000E0, "Wrong size on RSBattleEnemy_C_UpdateReturn");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateReturn::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, L_ComponentList) == 0x000008, "Member 'RSBattleEnemy_C_UpdateReturn::L_ComponentList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, ClaimantName) == 0x000018, "Member 'RSBattleEnemy_C_UpdateReturn::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000030, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B9, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000BC, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D4, "Member 'RSBattleEnemy_C_UpdateReturn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateReturn, K2Node_SwitchEnum_CmpSuccess) == 0x0000D8, "Member 'RSBattleEnemy_C_UpdateReturn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetAction
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_ResetAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FF9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FFA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Ai_Enemy_C*                         K2Node_DynamicCast_AsBP_Ai_Enemy;                  // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAction_Dummy;                        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetAction) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ResetAction");
static_assert(sizeof(RSBattleEnemy_C_ResetAction) == 0x000040, "Wrong size on RSBattleEnemy_C_ResetAction");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_ResetAction::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_Array_Get_Item) == 0x000020, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_GetBlackboard_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, K2Node_DynamicCast_AsBP_Ai_Enemy) == 0x000030, "Member 'RSBattleEnemy_C_ResetAction::K2Node_DynamicCast_AsBP_Ai_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattleEnemy_C_ResetAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_ResetAction_Dummy) == 0x000039, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_ResetAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAction, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'RSBattleEnemy_C_ResetAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LoadSequence
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattleEnemy_C_LoadSequence final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbIsNotValidPlayer;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbCh0100;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FFB[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          L_LoadReference;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FFC[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FFD[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FFE[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FFF[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9000[0x5];                                     // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_2;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9001[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_1;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9002[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_2;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_2; // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9003[0x5];                                     // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_3;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_4;             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9004[0x6];                                     // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_3;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9005[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence_4;             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_3; // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_4; // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnloadSequence_Dummy;                     // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LoadSequence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LoadSequence");
static_assert(sizeof(RSBattleEnemy_C_LoadSequence) == 0x0000F8, "Wrong size on RSBattleEnemy_C_LoadSequence");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_LoadSequence::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, LbIsNotValidPlayer) == 0x000001, "Member 'RSBattleEnemy_C_LoadSequence::LbIsNotValidPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, LbCh0100) == 0x000002, "Member 'RSBattleEnemy_C_LoadSequence::LbCh0100' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, L_LoadReference) == 0x000008, "Member 'RSBattleEnemy_C_LoadSequence::L_LoadReference' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, Temp_byte_Variable) == 0x000030, "Member 'RSBattleEnemy_C_LoadSequence::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_GetPlayerManager_PlayerManager) == 0x000038, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_LoadSoftObject_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsLevel_Sequence) == 0x000058, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsLevel_Sequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000061, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_GetMainPlayer_Player) == 0x000068, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsPlayer_Interface) == 0x000070, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_2) == 0x000081, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_GetPlayerID_ReturnValue) == 0x000082, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_LoadSoftObject_ReturnValue_1) == 0x000088, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_LoadSoftObject_ReturnValue_2) == 0x000090, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_LoadSoftObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_3) == 0x000098, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_4) == 0x000099, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsLevel_Sequence_1) == 0x0000A0, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsLevel_Sequence_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsLevel_Sequence_2) == 0x0000B0, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsLevel_Sequence_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x0000B9, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValidSoftObjectReference_ReturnValue_2) == 0x0000BA, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValidSoftObjectReference_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_LoadSoftObject_ReturnValue_3) == 0x0000C0, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_LoadSoftObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_LoadSoftObject_ReturnValue_4) == 0x0000C8, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_LoadSoftObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_5) == 0x0000D0, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValid_ReturnValue_6) == 0x0000D1, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsLevel_Sequence_3) == 0x0000D8, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsLevel_Sequence_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess_4) == 0x0000E0, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_AsLevel_Sequence_4) == 0x0000E8, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_AsLevel_Sequence_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, K2Node_DynamicCast_bSuccess_5) == 0x0000F0, "Member 'RSBattleEnemy_C_LoadSequence::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValidSoftObjectReference_ReturnValue_3) == 0x0000F1, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValidSoftObjectReference_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_IsValidSoftObjectReference_ReturnValue_4) == 0x0000F2, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_IsValidSoftObjectReference_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LoadSequence, CallFunc_UnloadSequence_Dummy) == 0x0000F3, "Member 'RSBattleEnemy_C_LoadSequence::CallFunc_UnloadSequence_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UnloadSequence
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_UnloadSequence final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UnloadSequence) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UnloadSequence");
static_assert(sizeof(RSBattleEnemy_C_UnloadSequence) == 0x000002, "Wrong size on RSBattleEnemy_C_UnloadSequence");
static_assert(offsetof(RSBattleEnemy_C_UnloadSequence, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_UnloadSequence::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UnloadSequence, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_UnloadSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartFinishMove
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_StartFinishMove final
{
public:
	bool                                          IsStart;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsStart;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9006[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattlefieldManager*                    CallFunc_GetBattleFieldManager_BattleFieldManager; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAvatar_IsAvatar_1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9007[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFinishMoveManager_FinishMove_Manager;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9008[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FinishMoveActorManager_C*           K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9009[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_900A[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBfFenceStatus_Exist;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetBfFenceStatus_IsVisible;               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_900B[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGroupEnemyCount_GroupCount;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartFinishMove) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartFinishMove");
static_assert(sizeof(RSBattleEnemy_C_StartFinishMove) == 0x000070, "Wrong size on RSBattleEnemy_C_StartFinishMove");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, IsStart) == 0x000000, "Member 'RSBattleEnemy_C_StartFinishMove::IsStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, L_IsStart) == 0x000001, "Member 'RSBattleEnemy_C_StartFinishMove::L_IsStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetBattleFieldManager_BattleFieldManager) == 0x000010, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetBattleFieldManager_BattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x00001A, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsAvatar_IsAvatar) == 0x00001B, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsAvatar_IsAvatar_1) == 0x000020, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsAvatar_IsAvatar_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_Greater_IntInt_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetFinishMoveManager_FinishMove_Manager) == 0x000028, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetFinishMoveManager_FinishMove_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager) == 0x000038, "Member 'RSBattleEnemy_C_StartFinishMove::K2Node_DynamicCast_AsBP_Finish_Move_Actor_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattleEnemy_C_StartFinishMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetDebuggingManager_Manager) == 0x000048, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsValid_ReturnValue_3) == 0x000050, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetEnemyManager_Manager) == 0x000058, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetBfFenceStatus_Exist) == 0x000060, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetBfFenceStatus_Exist' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetBfFenceStatus_IsVisible) == 0x000061, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetBfFenceStatus_IsVisible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_IsValid_ReturnValue_4) == 0x000062, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_GetGroupEnemyCount_GroupCount) == 0x000064, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_GetGroupEnemyCount_GroupCount' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartFinishMove, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000069, "Member 'RSBattleEnemy_C_StartFinishMove::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckDeadHitStop
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_CheckDeadHitStop final
{
public:
	class AActor*                                 L_attacker;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_900C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_900D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckDeadHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckDeadHitStop");
static_assert(sizeof(RSBattleEnemy_C_CheckDeadHitStop) == 0x000048, "Wrong size on RSBattleEnemy_C_CheckDeadHitStop");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, L_attacker) == 0x000000, "Member 'RSBattleEnemy_C_CheckDeadHitStop::L_attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, LPlayerFixParam) == 0x000008, "Member 'RSBattleEnemy_C_CheckDeadHitStop::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000018, "Member 'RSBattleEnemy_C_CheckDeadHitStop::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_CheckDeadHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_IsMainPlayer_bMainPlayer) == 0x000029, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_IsValid_ReturnValue_1) == 0x00002B, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, K2Node_SwitchEnum_CmpSuccess) == 0x00002C, "Member 'RSBattleEnemy_C_CheckDeadHitStop::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x000030, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_GetMainPlayer_Player) == 0x000038, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckDeadHitStop, CallFunc_IsValid_ReturnValue_3) == 0x000041, "Member 'RSBattleEnemy_C_CheckDeadHitStop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDelayDeath
// 0x0100 (0x0100 - 0x0000)
struct RSBattleEnemy_C_UpdateDelayDeath final
{
public:
	class UDataTable*                             L_dataTable;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHP_HP;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_900E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0010(0x0068)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_900F[0x1];                                     // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x007C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9010[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9011[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9012[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueObjectContainerEnemyInfo        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00B8(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCrashResistanceMax_ReturnValue;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9013[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDelayDeath) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateDelayDeath");
static_assert(sizeof(RSBattleEnemy_C_UpdateDelayDeath) == 0x000100, "Wrong size on RSBattleEnemy_C_UpdateDelayDeath");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, L_dataTable) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDelayDeath::L_dataTable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetHP_HP) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetParameterBasic_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Not_PreBool_ReturnValue_1) == 0x00007A, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetName_ReturnValue) == 0x00007C, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Conv_NameToString_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Conv_StringToName_ReturnValue) == 0x0000AC, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000B8, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_IsValid_ReturnValue_1) == 0x0000E9, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_OnDead_Dummy) == 0x0000EA, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_IsValid_ReturnValue_2) == 0x0000EB, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GetCrashResistanceMax_ReturnValue) == 0x0000EC, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GetCrashResistanceMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000F4, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDelayDeath, CallFunc_Less_IntInt_ReturnValue) == 0x0000FC, "Member 'RSBattleEnemy_C_UpdateDelayDeath::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartCrashDamageMaterial
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_StartCrashDamageMaterial final
{
public:
	float                                         L_CrashResistance;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9014[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 L_CrashResistanceList;                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_HighDamage;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartCrashDamageMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartCrashDamageMaterial");
static_assert(sizeof(RSBattleEnemy_C_StartCrashDamageMaterial) == 0x000020, "Wrong size on RSBattleEnemy_C_StartCrashDamageMaterial");
static_assert(offsetof(RSBattleEnemy_C_StartCrashDamageMaterial, L_CrashResistance) == 0x000000, "Member 'RSBattleEnemy_C_StartCrashDamageMaterial::L_CrashResistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashDamageMaterial, L_CrashResistanceList) == 0x000008, "Member 'RSBattleEnemy_C_StartCrashDamageMaterial::L_CrashResistanceList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashDamageMaterial, L_HighDamage) == 0x000018, "Member 'RSBattleEnemy_C_StartCrashDamageMaterial::L_HighDamage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateCrashDamageMaterial
// 0x0078 (0x0078 - 0x0000)
struct RSBattleEnemy_C_UpdateCrashDamageMaterial final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDeltaSec;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9015[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9016[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9017[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9018[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateCrashDamageMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateCrashDamageMaterial");
static_assert(sizeof(RSBattleEnemy_C_UpdateCrashDamageMaterial) == 0x000078, "Wrong size on RSBattleEnemy_C_UpdateCrashDamageMaterial");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, LDeltaSec) == 0x000004, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::LDeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, Temp_int_Variable) == 0x000008, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, Temp_int_Variable_1) == 0x000010, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_GetBodyMeshes_Meshes) == 0x000018, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Array_Get_Item) == 0x000028, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Less_IntInt_ReturnValue_1) == 0x000048, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_GetVectorValue_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_BreakVector_X) == 0x000064, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_BreakVector_Y) == 0x000068, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_BreakVector_Z) == 0x00006C, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000071, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateCrashDamageMaterial, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000072, "Member 'RSBattleEnemy_C_UpdateCrashDamageMaterial::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitCrashDamage
// 0x0120 (0x0120 - 0x0000)
struct RSBattleEnemy_C_IsHitCrashDamage final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0008(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9019[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                L_DebuggingManager;                                // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IgnoreWeak;                                      // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_901A[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageDownWait_return;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWeak_Return;                         // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitCrashDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitCrashDamage");
static_assert(sizeof(RSBattleEnemy_C_IsHitCrashDamage) == 0x000120, "Wrong size on RSBattleEnemy_C_IsHitCrashDamage");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, Primitive) == 0x000000, "Member 'RSBattleEnemy_C_IsHitCrashDamage::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, SkillInfo) == 0x000008, "Member 'RSBattleEnemy_C_IsHitCrashDamage::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, Return) == 0x0000F8, "Member 'RSBattleEnemy_C_IsHitCrashDamage::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, L_DebuggingManager) == 0x000100, "Member 'RSBattleEnemy_C_IsHitCrashDamage::L_DebuggingManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, L_IgnoreWeak) == 0x000108, "Member 'RSBattleEnemy_C_IsHitCrashDamage::L_IgnoreWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, L_return) == 0x000109, "Member 'RSBattleEnemy_C_IsHitCrashDamage::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, CallFunc_GetDebuggingManager_Manager) == 0x000110, "Member 'RSBattleEnemy_C_IsHitCrashDamage::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_IsHitCrashDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, CallFunc_IsDamageDownWait_return) == 0x000119, "Member 'RSBattleEnemy_C_IsHitCrashDamage::CallFunc_IsDamageDownWait_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitCrashDamage, CallFunc_IsHitWeak_Return) == 0x00011A, "Member 'RSBattleEnemy_C_IsHitCrashDamage::CallFunc_IsHitWeak_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueDownCondition
// 0x0138 (0x0138 - 0x0000)
struct RSBattleEnemy_C_IsUniqueDownCondition final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_901B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_901C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDown;                                             // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueDownCondition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsUniqueDownCondition");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueDownCondition) == 0x000138, "Wrong size on RSBattleEnemy_C_IsUniqueDownCondition");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, Rot) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, Skill) == 0x000038, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, Attacker) == 0x000128, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDownCondition, bDown) == 0x000130, "Member 'RSBattleEnemy_C_IsUniqueDownCondition::bDown' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetLockOnTargetInterface
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetLockOnTargetInterface final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetTargetLockHate_actor;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetLockOnTargetInterface) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetLockOnTargetInterface");
static_assert(sizeof(RSBattleEnemy_C_GetLockOnTargetInterface) == 0x000010, "Wrong size on RSBattleEnemy_C_GetLockOnTargetInterface");
static_assert(offsetof(RSBattleEnemy_C_GetLockOnTargetInterface, TargetActor) == 0x000000, "Member 'RSBattleEnemy_C_GetLockOnTargetInterface::TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLockOnTargetInterface, CallFunc_GetTargetLockHate_actor) == 0x000008, "Member 'RSBattleEnemy_C_GetLockOnTargetInterface::CallFunc_GetTargetLockHate_actor' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartDamageDown
// 0x0168 (0x0168 - 0x0000)
struct RSBattleEnemy_C_OnStartDamageDown final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_901D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0030(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_901E[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_901F[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9020[0x6];                                     // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_EnemyDown_ReturnValue;        // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartDamageDown) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnStartDamageDown");
static_assert(sizeof(RSBattleEnemy_C_OnStartDamageDown) == 0x000168, "Wrong size on RSBattleEnemy_C_OnStartDamageDown");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Rot) == 0x000000, "Member 'RSBattleEnemy_C_OnStartDamageDown::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_OnStartDamageDown::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_OnStartDamageDown::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_OnStartDamageDown::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Skill) == 0x000030, "Member 'RSBattleEnemy_C_OnStartDamageDown::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Attacker) == 0x000120, "Member 'RSBattleEnemy_C_OnStartDamageDown::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Dummy) == 0x000128, "Member 'RSBattleEnemy_C_OnStartDamageDown::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, Temp_byte_Variable) == 0x000129, "Member 'RSBattleEnemy_C_OnStartDamageDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, K2Node_DynamicCast_AsRSBattle_Player) == 0x000130, "Member 'RSBattleEnemy_C_OnStartDamageDown::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'RSBattleEnemy_C_OnStartDamageDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, K2Node_DynamicCast_AsPlayer_Interface) == 0x000140, "Member 'RSBattleEnemy_C_OnStartDamageDown::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, K2Node_DynamicCast_bSuccess_1) == 0x000150, "Member 'RSBattleEnemy_C_OnStartDamageDown::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, CallFunc_GetPlayerID_ReturnValue) == 0x000151, "Member 'RSBattleEnemy_C_OnStartDamageDown::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000158, "Member 'RSBattleEnemy_C_OnStartDamageDown::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, CallFunc_IsValid_ReturnValue) == 0x000160, "Member 'RSBattleEnemy_C_OnStartDamageDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageDown, CallFunc_BrainTalkBt_EnemyDown_ReturnValue) == 0x000161, "Member 'RSBattleEnemy_C_OnStartDamageDown::CallFunc_BrainTalkBt_EnemyDown_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartDamageSmall
// 0x0130 (0x0130 - 0x0000)
struct RSBattleEnemy_C_OnStartDamageSmall final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9021[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0030(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartDamageSmall) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnStartDamageSmall");
static_assert(sizeof(RSBattleEnemy_C_OnStartDamageSmall) == 0x000130, "Wrong size on RSBattleEnemy_C_OnStartDamageSmall");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, Rot) == 0x000000, "Member 'RSBattleEnemy_C_OnStartDamageSmall::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_OnStartDamageSmall::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_OnStartDamageSmall::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_OnStartDamageSmall::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, Skill) == 0x000030, "Member 'RSBattleEnemy_C_OnStartDamageSmall::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, Attacker) == 0x000120, "Member 'RSBattleEnemy_C_OnStartDamageSmall::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageSmall, Dummy) == 0x000128, "Member 'RSBattleEnemy_C_OnStartDamageSmall::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartDamageLarge
// 0x0130 (0x0130 - 0x0000)
struct RSBattleEnemy_C_OnStartDamageLarge final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9022[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0030(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartDamageLarge) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnStartDamageLarge");
static_assert(sizeof(RSBattleEnemy_C_OnStartDamageLarge) == 0x000130, "Wrong size on RSBattleEnemy_C_OnStartDamageLarge");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, Rot) == 0x000000, "Member 'RSBattleEnemy_C_OnStartDamageLarge::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_OnStartDamageLarge::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_OnStartDamageLarge::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_OnStartDamageLarge::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, Skill) == 0x000030, "Member 'RSBattleEnemy_C_OnStartDamageLarge::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, Attacker) == 0x000120, "Member 'RSBattleEnemy_C_OnStartDamageLarge::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartDamageLarge, Dummy) == 0x000128, "Member 'RSBattleEnemy_C_OnStartDamageLarge::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAiUniqueCondition
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_GetAiUniqueCondition final
{
public:
	uint8                                         ConditionNo;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetAiUniqueCondition) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetAiUniqueCondition");
static_assert(sizeof(RSBattleEnemy_C_GetAiUniqueCondition) == 0x000002, "Wrong size on RSBattleEnemy_C_GetAiUniqueCondition");
static_assert(offsetof(RSBattleEnemy_C_GetAiUniqueCondition, ConditionNo) == 0x000000, "Member 'RSBattleEnemy_C_GetAiUniqueCondition::ConditionNo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAiUniqueCondition, bResult) == 0x000001, "Member 'RSBattleEnemy_C_GetAiUniqueCondition::bResult' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateOnHateAdd
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_BadStateOnHateAdd final
{
public:
	EHCBadState                                   BadState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9023[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9024[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateOnHateAdd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateOnHateAdd");
static_assert(sizeof(RSBattleEnemy_C_BadStateOnHateAdd) == 0x000028, "Wrong size on RSBattleEnemy_C_BadStateOnHateAdd");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, BadState) == 0x000000, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::BadState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, Attacker) == 0x000008, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, K2Node_DynamicCast_AsRSBattle_Character) == 0x000018, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnHateAdd, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'RSBattleEnemy_C_BadStateOnHateAdd::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayHateData
// 0x0110 (0x0110 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayHateData final
{
public:
	class ABP_PlayerManager_C*                    L_playerManager;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHateTargetParam>               L_HateTargetParam;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9025[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9026[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9027[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBasisHate_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentTarget_bTarget;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9028[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetTargetLock_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FHateTargetParam                       CallFunc_Array_Get_Item_1;                         // 0x0090(0x0020)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9029[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FHateTargetParam>               CallFunc_GetHateTargetParam_ReturnValue;           // 0x0100(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayHateData) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayHateData");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayHateData) == 0x000110, "Wrong size on RSBattleEnemy_C_DebugDisplayHateData");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, L_playerManager) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayHateData::L_playerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, L_HateTargetParam) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayHateData::L_HateTargetParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'RSBattleEnemy_C_DebugDisplayHateData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_DebugDisplayHateData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetPlayerList_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetPlayer_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Array_Get_Item) == 0x000050, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetBasisHate_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetBasisHate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_IsCurrentTarget_bTarget) == 0x000060, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_IsCurrentTarget_bTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetTargetLock_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetTargetLock_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetDisplayName_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Concat_StrStr_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B4, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Conv_FloatToString_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetDisplayName_ReturnValue_1) == 0x0000D0, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000E0, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayHateData, CallFunc_GetHateTargetParam_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_DebugDisplayHateData::CallFunc_GetHateTargetParam_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestLaunchMotion
// 0x0150 (0x0150 - 0x0000)
struct RSBattleEnemy_C_RequestLaunchMotion final
{
public:
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsSuccess;                                         // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsSuccess_3;                                     // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsSuccess_2;                                     // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             LType;                                             // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess_1;                                     // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902A[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageAnimKindBlow_ReturnValue;         // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x010F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestLaunchMotion_ReturnValue;          // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902B[0x1];                                     // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestLaunchMotion_Damage_ReturnValue;   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902C[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902D[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestLaunchMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestLaunchMotion");
static_assert(sizeof(RSBattleEnemy_C_RequestLaunchMotion) == 0x000150, "Wrong size on RSBattleEnemy_C_RequestLaunchMotion");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, Skill) == 0x000000, "Member 'RSBattleEnemy_C_RequestLaunchMotion::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, IsSuccess) == 0x0000F0, "Member 'RSBattleEnemy_C_RequestLaunchMotion::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, L_IsSuccess_3) == 0x0000F1, "Member 'RSBattleEnemy_C_RequestLaunchMotion::L_IsSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, L_IsSuccess_2) == 0x0000F2, "Member 'RSBattleEnemy_C_RequestLaunchMotion::L_IsSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, LType) == 0x0000F3, "Member 'RSBattleEnemy_C_RequestLaunchMotion::LType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, L_IsSuccess_1) == 0x0000F4, "Member 'RSBattleEnemy_C_RequestLaunchMotion::L_IsSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, L_extraType) == 0x0000F8, "Member 'RSBattleEnemy_C_RequestLaunchMotion::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_Array_Length_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_IsDamageAnimKindBlow_ReturnValue) == 0x00010C, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_IsDamageAnimKindBlow_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_IsValid_ReturnValue) == 0x00010D, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x00010E, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00010F, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000110, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000111, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_RequestLaunchMotion_ReturnValue) == 0x000112, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_RequestLaunchMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, Temp_int_Array_Index_Variable) == 0x000114, "Member 'RSBattleEnemy_C_RequestLaunchMotion::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_RequestLaunchMotion_Damage_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_RequestLaunchMotion_Damage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_Array_Get_Item) == 0x000119, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00011A, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00011B, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00011C, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00011D, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00011E, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00011F, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, Temp_bool_True_if_break_was_hit_Variable) == 0x000120, "Member 'RSBattleEnemy_C_RequestLaunchMotion::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000121, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000124, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_BreakVector_X) == 0x000130, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_BreakVector_Y) == 0x000134, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_BreakVector_Z) == 0x000138, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, Temp_int_Loop_Counter_Variable) == 0x00013C, "Member 'RSBattleEnemy_C_RequestLaunchMotion::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_Less_IntInt_ReturnValue) == 0x000140, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_Add_IntInt_ReturnValue) == 0x000144, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestLaunchMotion, CallFunc_BooleanAND_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_RequestLaunchMotion::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckReactionHitStop
// 0x03B8 (0x03B8 - 0x0000)
struct RSBattleEnemy_C_CheckReactionHitStop final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           CauseType;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreTarget;                                     // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902E[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0010(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<EPlayerHitStopType>                    L_ForceHitStopTypes;                               // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActor*                                 LTargetActor;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               LPlayerFixParam;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerHitStopType>                    LCauseTypeList;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LTry;                                              // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_902F[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerHitStopComponent_C*           L_HitStop;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               L_param;                                           // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerHitStopType>                    K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x0160(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9030[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0331(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStartCauseType_bStart;                  // 0x0332(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9031[0x1];                                     // 0x0333(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9032[0x5];                                     // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0348(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x035A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            CallFunc_GetHitStopParam_SuccessType;              // 0x035B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHitStopParam_IsSuccess;                // 0x035C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9033[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHitStopParam_Seconds;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_Rate;                     // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHitStopParam_DelayTime;                // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9034[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9035[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0392(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9036[0x5];                                     // 0x0393(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9037[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetLockCanHitStop_IsTargetHitStop;   // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckReactionHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckReactionHitStop");
static_assert(sizeof(RSBattleEnemy_C_CheckReactionHitStop) == 0x0003B8, "Wrong size on RSBattleEnemy_C_CheckReactionHitStop");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, Attacker) == 0x000000, "Member 'RSBattleEnemy_C_CheckReactionHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, Type) == 0x000008, "Member 'RSBattleEnemy_C_CheckReactionHitStop::Type' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CauseType) == 0x000009, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, bIgnoreTarget) == 0x00000A, "Member 'RSBattleEnemy_C_CheckReactionHitStop::bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, Skill) == 0x000010, "Member 'RSBattleEnemy_C_CheckReactionHitStop::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, L_ForceHitStopTypes) == 0x000100, "Member 'RSBattleEnemy_C_CheckReactionHitStop::L_ForceHitStopTypes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, LTargetActor) == 0x000110, "Member 'RSBattleEnemy_C_CheckReactionHitStop::LTargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, Param_LEnemyManager) == 0x000118, "Member 'RSBattleEnemy_C_CheckReactionHitStop::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, LPlayerFixParam) == 0x000120, "Member 'RSBattleEnemy_C_CheckReactionHitStop::LPlayerFixParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, LCauseTypeList) == 0x000128, "Member 'RSBattleEnemy_C_CheckReactionHitStop::LCauseTypeList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, LTry) == 0x000138, "Member 'RSBattleEnemy_C_CheckReactionHitStop::LTry' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, L_HitStop) == 0x000140, "Member 'RSBattleEnemy_C_CheckReactionHitStop::L_HitStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, L_param) == 0x000148, "Member 'RSBattleEnemy_C_CheckReactionHitStop::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_MakeArray_Array) == 0x000150, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_MakeStruct_HCHitResult) == 0x000160, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_MakeStruct_HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue) == 0x000320, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetEnemyManager_Manager) == 0x000328, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_1) == 0x000330, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, Temp_byte_Variable) == 0x000331, "Member 'RSBattleEnemy_C_CheckReactionHitStop::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsStartCauseType_bStart) == 0x000332, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsStartCauseType_bStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_Array_Find_ReturnValue) == 0x000334, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetBattleManager_BattleManager) == 0x000338, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000340, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_2) == 0x000341, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_3) == 0x000342, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000348, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_DynamicCast_bSuccess) == 0x000358, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_4) == 0x000359, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsMainPlayer_bMainPlayer) == 0x00035A, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetHitStopParam_SuccessType) == 0x00035B, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetHitStopParam_SuccessType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetHitStopParam_IsSuccess) == 0x00035C, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetHitStopParam_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetHitStopParam_Seconds) == 0x000360, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetHitStopParam_Seconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetHitStopParam_Rate) == 0x000364, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetHitStopParam_Rate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetHitStopParam_DelayTime) == 0x000368, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetHitStopParam_DelayTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_PrivateGetMainPlayer_Player) == 0x000370, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_DynamicCast_AsRSBattle_Player) == 0x000378, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, K2Node_DynamicCast_bSuccess_1) == 0x000380, "Member 'RSBattleEnemy_C_CheckReactionHitStop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000388, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000390, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_Array_Contains_ReturnValue) == 0x000391, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_BooleanOR_ReturnValue) == 0x000392, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x000398, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_5) == 0x0003A0, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_GetMainPlayer_Player) == 0x0003A8, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsValid_ReturnValue_6) == 0x0003B0, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckReactionHitStop, CallFunc_IsTargetLockCanHitStop_IsTargetHitStop) == 0x0003B1, "Member 'RSBattleEnemy_C_CheckReactionHitStop::CallFunc_IsTargetLockCanHitStop_IsTargetHitStop' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestDownMotion
// 0x0170 (0x0170 - 0x0000)
struct RSBattleEnemy_C_RequestDownMotion final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9038[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9039[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Actor;                                             // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Obj;                                               // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LTry;                                              // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_903A[0x2];                                     // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_TableData;                                       // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHitStopParam_IgnoreTarget;             // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCHitStopCauseType                           CallFunc_GetHitStopParam_CauseType;                // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_903B[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObject_ReturnValue;               // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleDamageAnimKindDown_ReturnValue; // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_903C[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueDownCondition_bDown;              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestDownMotion_ReturnValue;            // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestDownMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestDownMotion");
static_assert(sizeof(RSBattleEnemy_C_RequestDownMotion) == 0x000170, "Wrong size on RSBattleEnemy_C_RequestDownMotion");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, Rot) == 0x000000, "Member 'RSBattleEnemy_C_RequestDownMotion::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_RequestDownMotion::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_RequestDownMotion::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_RequestDownMotion::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_RequestDownMotion::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, Skill) == 0x000038, "Member 'RSBattleEnemy_C_RequestDownMotion::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, Actor) == 0x000128, "Member 'RSBattleEnemy_C_RequestDownMotion::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, Obj) == 0x000130, "Member 'RSBattleEnemy_C_RequestDownMotion::Obj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, IsSuccess) == 0x000138, "Member 'RSBattleEnemy_C_RequestDownMotion::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, LTry) == 0x000139, "Member 'RSBattleEnemy_C_RequestDownMotion::LTry' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, L_TableData) == 0x00013C, "Member 'RSBattleEnemy_C_RequestDownMotion::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, L_IsSuccess) == 0x000140, "Member 'RSBattleEnemy_C_RequestDownMotion::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsStateStealth_Return) == 0x000141, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_Stealth_End_Return) == 0x000142, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_GetHitStopParam_IgnoreTarget) == 0x000143, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_GetHitStopParam_IgnoreTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_GetHitStopParam_CauseType) == 0x000144, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_GetHitStopParam_CauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000148, "Member 'RSBattleEnemy_C_RequestDownMotion::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'RSBattleEnemy_C_RequestDownMotion::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsValid_ReturnValue) == 0x000159, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsUniqueObject_ReturnValue) == 0x00015A, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsUniqueObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsPossibleDamageAnimKindDown_ReturnValue) == 0x00015B, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsPossibleDamageAnimKindDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_GetDebuggingManager_Manager) == 0x000160, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsUniqueDownCondition_bDown) == 0x000168, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsUniqueDownCondition_bDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_IsValid_ReturnValue_1) == 0x000169, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDownMotion, CallFunc_RequestDownMotion_ReturnValue) == 0x00016A, "Member 'RSBattleEnemy_C_RequestDownMotion::CallFunc_RequestDownMotion_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueKnockBackCondition
// 0x0138 (0x0138 - 0x0000)
struct RSBattleEnemy_C_IsUniqueKnockBackCondition final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_903D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_903E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKnockBack;                                        // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueKnockBackCondition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsUniqueKnockBackCondition");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueKnockBackCondition) == 0x000138, "Wrong size on RSBattleEnemy_C_IsUniqueKnockBackCondition");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, Rot) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, Skill) == 0x000038, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, Attacker) == 0x000128, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueKnockBackCondition, bKnockBack) == 0x000130, "Member 'RSBattleEnemy_C_IsUniqueKnockBackCondition::bKnockBack' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestReactionLMotion
// 0x0150 (0x0150 - 0x0000)
struct RSBattleEnemy_C_RequestReactionLMotion final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_903F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9040[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Actor;                                             // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsTrigger;                                         // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9041[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_CommonInfo_ReturnValue;  // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueKnockBackCondition_bKnockBack;    // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestReactionLMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestReactionLMotion");
static_assert(sizeof(RSBattleEnemy_C_RequestReactionLMotion) == 0x000150, "Wrong size on RSBattleEnemy_C_RequestReactionLMotion");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, Rot) == 0x000000, "Member 'RSBattleEnemy_C_RequestReactionLMotion::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_RequestReactionLMotion::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_RequestReactionLMotion::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_RequestReactionLMotion::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_RequestReactionLMotion::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, Skill) == 0x000038, "Member 'RSBattleEnemy_C_RequestReactionLMotion::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, Actor) == 0x000128, "Member 'RSBattleEnemy_C_RequestReactionLMotion::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, IsSuccess) == 0x000130, "Member 'RSBattleEnemy_C_RequestReactionLMotion::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, IsTrigger) == 0x000131, "Member 'RSBattleEnemy_C_RequestReactionLMotion::IsTrigger' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, L_extraType) == 0x000138, "Member 'RSBattleEnemy_C_RequestReactionLMotion::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, L_TableData) == 0x000148, "Member 'RSBattleEnemy_C_RequestReactionLMotion::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, L_IsSuccess) == 0x00014C, "Member 'RSBattleEnemy_C_RequestReactionLMotion::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, CallFunc_IsSkillExtraType_CommonInfo_ReturnValue) == 0x00014D, "Member 'RSBattleEnemy_C_RequestReactionLMotion::CallFunc_IsSkillExtraType_CommonInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestReactionLMotion, CallFunc_IsUniqueKnockBackCondition_bKnockBack) == 0x00014E, "Member 'RSBattleEnemy_C_RequestReactionLMotion::CallFunc_IsUniqueKnockBackCondition_bKnockBack' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestBlowMotion
// 0x0170 (0x0170 - 0x0000)
struct RSBattleEnemy_C_RequestBlowMotion final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9042[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9043[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Actor;                                             // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsTrigger;                                       // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9044[0x2];                                     // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_blowLimit;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_BasicData;                                       // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9045[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageAnimKindLaunch_ReturnValue;       // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleDamageAnimKindBlow_ReturnValue; // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_CommonInfo_ReturnValue;  // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9046[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestBlowMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestBlowMotion");
static_assert(sizeof(RSBattleEnemy_C_RequestBlowMotion) == 0x000170, "Wrong size on RSBattleEnemy_C_RequestBlowMotion");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, Rot) == 0x000000, "Member 'RSBattleEnemy_C_RequestBlowMotion::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_RequestBlowMotion::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_RequestBlowMotion::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_RequestBlowMotion::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_RequestBlowMotion::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, Skill) == 0x000038, "Member 'RSBattleEnemy_C_RequestBlowMotion::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, Actor) == 0x000128, "Member 'RSBattleEnemy_C_RequestBlowMotion::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, IsSuccess) == 0x000130, "Member 'RSBattleEnemy_C_RequestBlowMotion::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_IsTrigger) == 0x000131, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_IsTrigger' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_blowLimit) == 0x000134, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_blowLimit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_BasicData) == 0x000138, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_BasicData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_extraType) == 0x000140, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_TableData) == 0x000150, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, L_IsSuccess) == 0x000154, "Member 'RSBattleEnemy_C_RequestBlowMotion::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_IsDamageAnimKindLaunch_ReturnValue) == 0x000155, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_IsDamageAnimKindLaunch_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_IsPossibleDamageAnimKindBlow_ReturnValue) == 0x000156, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_IsPossibleDamageAnimKindBlow_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000157, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_IsSkillExtraType_CommonInfo_ReturnValue) == 0x000158, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_IsSkillExtraType_CommonInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_GetDebuggingManager_Manager) == 0x000160, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestBlowMotion, CallFunc_IsValid_ReturnValue) == 0x000168, "Member 'RSBattleEnemy_C_RequestBlowMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ForceDownMotion
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_ForceDownMotion final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCHitStopCauseType                           HitStopCauseType;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPossibleDamageAnimKindDown_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ForceDownMotion) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ForceDownMotion");
static_assert(sizeof(RSBattleEnemy_C_ForceDownMotion) == 0x000010, "Wrong size on RSBattleEnemy_C_ForceDownMotion");
static_assert(offsetof(RSBattleEnemy_C_ForceDownMotion, Attacker) == 0x000000, "Member 'RSBattleEnemy_C_ForceDownMotion::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ForceDownMotion, HitStopCauseType) == 0x000008, "Member 'RSBattleEnemy_C_ForceDownMotion::HitStopCauseType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ForceDownMotion, CallFunc_IsPossibleDamageAnimKindDown_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_ForceDownMotion::CallFunc_IsPossibleDamageAnimKindDown_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BeginAvatar
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_BeginAvatar final
{
public:
	bool                                          IsAvatar;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BeginAvatar) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BeginAvatar");
static_assert(sizeof(RSBattleEnemy_C_BeginAvatar) == 0x000002, "Wrong size on RSBattleEnemy_C_BeginAvatar");
static_assert(offsetof(RSBattleEnemy_C_BeginAvatar, IsAvatar) == 0x000000, "Member 'RSBattleEnemy_C_BeginAvatar::IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginAvatar, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_BeginAvatar::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestDamageShake
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_RequestDamageShake final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IsSuccess;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestDamageShake) == 0x000001, "Wrong alignment on RSBattleEnemy_C_RequestDamageShake");
static_assert(sizeof(RSBattleEnemy_C_RequestDamageShake) == 0x000002, "Wrong size on RSBattleEnemy_C_RequestDamageShake");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageShake, IsSuccess) == 0x000000, "Member 'RSBattleEnemy_C_RequestDamageShake::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestDamageShake, L_IsSuccess) == 0x000001, "Member 'RSBattleEnemy_C_RequestDamageShake::L_IsSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateBossHpDisplay
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_UpdateBossHpDisplay final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9047[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventManager_C*                     CallFunc_GetEventManager_EventManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutSceneEvent_IsCutSceneEvent;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9048[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateBossHpDisplay) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateBossHpDisplay");
static_assert(sizeof(RSBattleEnemy_C_UpdateBossHpDisplay) == 0x000038, "Wrong size on RSBattleEnemy_C_UpdateBossHpDisplay");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_GetEventManager_EventManager) == 0x000008, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_GetEventManager_EventManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_IsCutSceneEvent_IsCutSceneEvent) == 0x000011, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_IsCutSceneEvent_IsCutSceneEvent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_GetHUD_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, K2Node_DynamicCast_AsHUDMain_Game) == 0x000028, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBossHpDisplay, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'RSBattleEnemy_C_UpdateBossHpDisplay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CreateEnemyWeapon
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CreateEnemyWeapon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CreateEnemyWeapon) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CreateEnemyWeapon");
static_assert(sizeof(RSBattleEnemy_C_CreateEnemyWeapon) == 0x000001, "Wrong size on RSBattleEnemy_C_CreateEnemyWeapon");
static_assert(offsetof(RSBattleEnemy_C_CreateEnemyWeapon, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_CreateEnemyWeapon::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnArmorBreak
// 0x01E8 (0x01E8 - 0x0000)
struct RSBattleEnemy_C_OnArmorBreak final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dammy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterAttribute                           Temp_byte_Variable;                                // 0x01C1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9049[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DestroyShell_ReturnValue;     // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_904A[0x1];                                     // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnArmorBreak) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnArmorBreak");
static_assert(sizeof(RSBattleEnemy_C_OnArmorBreak) == 0x0001E8, "Wrong size on RSBattleEnemy_C_OnArmorBreak");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_OnArmorBreak::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, Dammy) == 0x0001C0, "Member 'RSBattleEnemy_C_OnArmorBreak::Dammy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, Temp_byte_Variable) == 0x0001C1, "Member 'RSBattleEnemy_C_OnArmorBreak::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x0001C8, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_IsValid_ReturnValue) == 0x0001D0, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_Array_RemoveItem_ReturnValue) == 0x0001D1, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_BrainTalkBt_DestroyShell_ReturnValue) == 0x0001D2, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_BrainTalkBt_DestroyShell_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001D4, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorBreak, CallFunc_IsValid_ReturnValue_1) == 0x0001E0, "Member 'RSBattleEnemy_C_OnArmorBreak::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartReactionLFlash
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_StartReactionLFlash final
{
public:
	float                                         L_CrashResistance;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_904B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 L_CrashResistanceList;                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_HighDamage;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_904C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetEnemyBrainCrashWeakColor_Color;        // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEnemyBrainCrashWeakColor_Intensity;    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartReactionLFlash) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartReactionLFlash");
static_assert(sizeof(RSBattleEnemy_C_StartReactionLFlash) == 0x000040, "Wrong size on RSBattleEnemy_C_StartReactionLFlash");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, L_CrashResistance) == 0x000000, "Member 'RSBattleEnemy_C_StartReactionLFlash::L_CrashResistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, L_CrashResistanceList) == 0x000008, "Member 'RSBattleEnemy_C_StartReactionLFlash::L_CrashResistanceList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, L_HighDamage) == 0x000018, "Member 'RSBattleEnemy_C_StartReactionLFlash::L_HighDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, CallFunc_GetEnemyBrainCrashWeakColor_Color) == 0x00001C, "Member 'RSBattleEnemy_C_StartReactionLFlash::CallFunc_GetEnemyBrainCrashWeakColor_Color' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, CallFunc_GetEnemyBrainCrashWeakColor_Intensity) == 0x00002C, "Member 'RSBattleEnemy_C_StartReactionLFlash::CallFunc_GetEnemyBrainCrashWeakColor_Intensity' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, CallFunc_GetDebuggingManager_Manager) == 0x000030, "Member 'RSBattleEnemy_C_StartReactionLFlash::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionLFlash, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_StartReactionLFlash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SelectShake
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_SelectShake final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReturnClass;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnScale;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_904D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_CalcCameraShake_OutputShakeClass;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcCameraShake_OutputScale;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SelectShake) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SelectShake");
static_assert(sizeof(RSBattleEnemy_C_SelectShake) == 0x000038, "Wrong size on RSBattleEnemy_C_SelectShake");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, ShakeClass) == 0x000000, "Member 'RSBattleEnemy_C_SelectShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, Scale) == 0x000008, "Member 'RSBattleEnemy_C_SelectShake::Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, ShakeLocation) == 0x00000C, "Member 'RSBattleEnemy_C_SelectShake::ShakeLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, ReturnClass) == 0x000018, "Member 'RSBattleEnemy_C_SelectShake::ReturnClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, ReturnScale) == 0x000020, "Member 'RSBattleEnemy_C_SelectShake::ReturnScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, CallFunc_CalcCameraShake_OutputShakeClass) == 0x000028, "Member 'RSBattleEnemy_C_SelectShake::CallFunc_CalcCameraShake_OutputShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SelectShake, CallFunc_CalcCameraShake_OutputScale) == 0x000030, "Member 'RSBattleEnemy_C_SelectShake::CallFunc_CalcCameraShake_OutputScale' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CreateBrainCore
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattleEnemy_C_CreateBrainCore final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCreateBossCore_bCreateBossCore;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_904E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_co2000_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_904F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWeakEffectParam_Dummy;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9050[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_co2100_C*                           CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_2; // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CreateBrainCore) == 0x000010, "Wrong alignment on RSBattleEnemy_C_CreateBrainCore");
static_assert(sizeof(RSBattleEnemy_C_CreateBrainCore) == 0x0000A0, "Wrong size on RSBattleEnemy_C_CreateBrainCore");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_IsCreateBossCore_bCreateBossCore) == 0x000030, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_IsCreateBossCore_bCreateBossCore' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_FinishSpawningActor_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_MakeTransform_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_SetWeakEffectParam_Dummy) == 0x000080, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_SetWeakEffectParam_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000088, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000090, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000098, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CreateBrainCore, CallFunc_IsValidSoftObjectReference_ReturnValue_2) == 0x000099, "Member 'RSBattleEnemy_C_CreateBrainCore::CallFunc_IsValidSoftObjectReference_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartCrashChance
// 0x0230 (0x0230 - 0x0000)
struct RSBattleEnemy_C_StartCrashChance final
{
public:
	struct FHCSkillCommonInfo                     SkillInfo;                                         // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bStart;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9051[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 L_attacker;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_result;                                          // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9052[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9053[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVisionFog_ReturnValue;                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeFlagNative_ReturnValue;       // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9054[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_GetBrainCrashSequence_Sequence;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9055[0x5];                                     // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue;     // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9056[0x6];                                     // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9057[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleFlyEnemy_C*                   K2Node_DynamicCast_AsBP_Battle_Fly_Enemy;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9058[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9059[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_CrashChanceStart_dummy;         // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_905A[0x5];                                     // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_905B[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_GetBrainCrashSequence_Sequence_1;         // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x021E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_905C[0x1];                                     // 0x021F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue_1;         // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartCrashChance) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartCrashChance");
static_assert(sizeof(RSBattleEnemy_C_StartCrashChance) == 0x000230, "Wrong size on RSBattleEnemy_C_StartCrashChance");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, SkillInfo) == 0x000000, "Member 'RSBattleEnemy_C_StartCrashChance::SkillInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, bStart) == 0x0000F0, "Member 'RSBattleEnemy_C_StartCrashChance::bStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, L_attacker) == 0x0000F8, "Member 'RSBattleEnemy_C_StartCrashChance::L_attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, L_result) == 0x000100, "Member 'RSBattleEnemy_C_StartCrashChance::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetEnemyManager_Manager) == 0x000108, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetPlayerPawn_ReturnValue) == 0x000110, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000120, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsInVisionFog_ReturnValue) == 0x000129, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsInVisionFog_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsStealthSeeFlagNative_ReturnValue) == 0x00012A, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsStealthSeeFlagNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_OnDead_Dummy) == 0x00012B, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_Not_PreBool_ReturnValue) == 0x00012C, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_SetHP_bDummy) == 0x00012D, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_1) == 0x00012E, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x00012F, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsAvatar_IsAvatar) == 0x000130, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetBrainCrashSequence_Sequence) == 0x000138, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetBrainCrashSequence_Sequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_2) == 0x000140, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_Stealth_End_Return) == 0x000141, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsStateStealth_Return) == 0x000142, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000148, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_3) == 0x000150, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue) == 0x000151, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BrainTalkBt_DispCrashTrg_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetSoundManager_SoundManager) == 0x000158, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_4) == 0x000160, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_AsBP_Battle_Fly_Enemy) == 0x000168, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_AsBP_Battle_Fly_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_bBlockingHit) == 0x000171, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_bInitialOverlap) == 0x000172, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_Time) == 0x000174, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_Distance) == 0x000178, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_Location) == 0x00017C, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_ImpactPoint) == 0x000188, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_Normal) == 0x000194, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A0, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_PhysMat) == 0x0001B0, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_HitActor) == 0x0001B8, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_HitComponent) == 0x0001C0, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_HitBoneName) == 0x0001C8, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_HitItem) == 0x0001D0, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_FaceIndex) == 0x0001D4, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_TraceStart) == 0x0001D8, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BreakHitResult_TraceEnd) == 0x0001E4, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x0001F0, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, K2Node_DynamicCast_bSuccess_2) == 0x0001F8, "Member 'RSBattleEnemy_C_StartCrashChance::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_5) == 0x0001F9, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_OutputLog_CrashChanceStart_dummy) == 0x0001FA, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_OutputLog_CrashChanceStart_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetPlayerManager_PlayerManager) == 0x000200, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000208, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetBrainCrashSequence_Sequence_1) == 0x000210, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetBrainCrashSequence_Sequence_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000218, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_6) == 0x000219, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00021A, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00021B, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BooleanAND_ReturnValue) == 0x00021C, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_BooleanAND_ReturnValue_1) == 0x00021D, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00021E, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_GetDebuggingManager_Manager) == 0x000220, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_7) == 0x000228, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsValid_ReturnValue_8) == 0x000229, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCrashChance, CallFunc_IsBrainCrashAccess_ReturnValue_1) == 0x00022A, "Member 'RSBattleEnemy_C_StartCrashChance::CallFunc_IsBrainCrashAccess_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateOnMaterial
// 0x0080 (0x0080 - 0x0000)
struct RSBattleEnemy_C_BadStateOnMaterial final
{
public:
	EHCSkillAttribute                             Attribute;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_905D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_905E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_905F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9060[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9061[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9062[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyStateDataCell                    CallFunc_GetBadStateMaterialParam_Param;           // 0x0048(0x0030)()
	bool                                          CallFunc_GetBadStateMaterialParam_Find;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateOnMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateOnMaterial");
static_assert(sizeof(RSBattleEnemy_C_BadStateOnMaterial) == 0x000080, "Wrong size on RSBattleEnemy_C_BadStateOnMaterial");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, Attribute) == 0x000000, "Member 'RSBattleEnemy_C_BadStateOnMaterial::Attribute' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateOnMaterial::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateOnMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattleEnemy_C_BadStateOnMaterial::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_GetBodyMeshes_Meshes) == 0x000010, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'RSBattleEnemy_C_BadStateOnMaterial::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattleEnemy_C_BadStateOnMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_GetEnemyManager_Manager) == 0x000038, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_GetBadStateMaterialParam_Param) == 0x000048, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_GetBadStateMaterialParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOnMaterial, CallFunc_GetBadStateMaterialParam_Find) == 0x000078, "Member 'RSBattleEnemy_C_BadStateOnMaterial::CallFunc_GetBadStateMaterialParam_Find' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateOffMaterial
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_BadStateOffMaterial final
{
public:
	EHCSkillAttribute                             Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             L_LastBadState;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9063[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9064[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes_1;                   // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9065[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9066[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateOffMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateOffMaterial");
static_assert(sizeof(RSBattleEnemy_C_BadStateOffMaterial) == 0x000060, "Wrong size on RSBattleEnemy_C_BadStateOffMaterial");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Attr) == 0x000000, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Attr' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, L_LastBadState) == 0x000002, "Member 'RSBattleEnemy_C_BadStateOffMaterial::L_LastBadState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_GetBodyMeshes_Meshes) == 0x000020, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_GetBodyMeshes_Meshes_1) == 0x000030, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_GetBodyMeshes_Meshes_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, K2Node_SwitchEnum_CmpSuccess) == 0x000054, "Member 'RSBattleEnemy_C_BadStateOffMaterial::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, Temp_int_Loop_Num_Variable_1) == 0x000058, "Member 'RSBattleEnemy_C_BadStateOffMaterial::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateOffMaterial, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005D, "Member 'RSBattleEnemy_C_BadStateOffMaterial::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestPressDown
// 0x0150 (0x0150 - 0x0000)
struct RSBattleEnemy_C_RequestPressDown final
{
public:
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Obj;                                               // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       LDamageDownAnimKind;                               // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LDownLoopSuccess;                                  // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9067[0x5];                                     // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0108(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9068[0x2];                                     // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9069[0x2];                                     // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906A[0x2];                                     // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageDownWait_return;                  // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906B[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906C[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestPressDown) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestPressDown");
static_assert(sizeof(RSBattleEnemy_C_RequestPressDown) == 0x000150, "Wrong size on RSBattleEnemy_C_RequestPressDown");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Skill) == 0x000000, "Member 'RSBattleEnemy_C_RequestPressDown::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Attacker) == 0x0000F0, "Member 'RSBattleEnemy_C_RequestPressDown::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Obj) == 0x0000F8, "Member 'RSBattleEnemy_C_RequestPressDown::Obj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, IsSuccess) == 0x000100, "Member 'RSBattleEnemy_C_RequestPressDown::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, LDamageDownAnimKind) == 0x000101, "Member 'RSBattleEnemy_C_RequestPressDown::LDamageDownAnimKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, LDownLoopSuccess) == 0x000102, "Member 'RSBattleEnemy_C_RequestPressDown::LDownLoopSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, L_extraType) == 0x000108, "Member 'RSBattleEnemy_C_RequestPressDown::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, L_TableData) == 0x000118, "Member 'RSBattleEnemy_C_RequestPressDown::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, L_IsSuccess) == 0x00011C, "Member 'RSBattleEnemy_C_RequestPressDown::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Temp_bool_True_if_break_was_hit_Variable) == 0x00011D, "Member 'RSBattleEnemy_C_RequestPressDown::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Temp_int_Array_Index_Variable) == 0x000120, "Member 'RSBattleEnemy_C_RequestPressDown::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_Not_PreBool_ReturnValue) == 0x000124, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_Array_Get_Item) == 0x000125, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000128, "Member 'RSBattleEnemy_C_RequestPressDown::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'RSBattleEnemy_C_RequestPressDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000131, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_IsValid_ReturnValue) == 0x000132, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_IsValid_ReturnValue_1) == 0x000133, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000134, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000135, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_Array_Length_ReturnValue) == 0x000138, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_IsDamageDownWait_return) == 0x00013C, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_IsDamageDownWait_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, Temp_int_Loop_Counter_Variable) == 0x000140, "Member 'RSBattleEnemy_C_RequestPressDown::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_Less_IntInt_ReturnValue) == 0x000144, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_Add_IntInt_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestPressDown, CallFunc_BooleanAND_ReturnValue) == 0x00014C, "Member 'RSBattleEnemy_C_RequestPressDown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdatePressDown
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_UpdatePressDown final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_End;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SetEnemyPressDownEnd_Dammy;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906E[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdatePressDown) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdatePressDown");
static_assert(sizeof(RSBattleEnemy_C_UpdatePressDown) == 0x000030, "Wrong size on RSBattleEnemy_C_UpdatePressDown");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdatePressDown::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, L_End) == 0x000004, "Member 'RSBattleEnemy_C_UpdatePressDown::L_End' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, ObjType) == 0x000008, "Member 'RSBattleEnemy_C_UpdatePressDown::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, K2Node_MakeArray_Array) == 0x000018, "Member 'RSBattleEnemy_C_UpdatePressDown::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, CallFunc_SetEnemyPressDownEnd_Dammy) == 0x000028, "Member 'RSBattleEnemy_C_UpdatePressDown::CallFunc_SetEnemyPressDownEnd_Dammy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_UpdatePressDown::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdatePressDown, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_UpdatePressDown::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Request Press Kill
// 0x0188 (0x0188 - 0x0000)
struct RSBattleEnemy_C_Request_Press_Kill final
{
public:
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsSuccess;                                         // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906F[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             L_dataTable;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9070[0x2];                                     // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0118(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9071[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDelayDeath_dummy;                      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9072[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueObjectContainerEnemyInfo        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0150(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_CommonInfo_ReturnValue;  // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Request_Press_Kill) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Request_Press_Kill");
static_assert(sizeof(RSBattleEnemy_C_Request_Press_Kill) == 0x000188, "Wrong size on RSBattleEnemy_C_Request_Press_Kill");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, Skill) == 0x000000, "Member 'RSBattleEnemy_C_Request_Press_Kill::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, IsSuccess) == 0x0000F0, "Member 'RSBattleEnemy_C_Request_Press_Kill::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, L_dataTable) == 0x0000F8, "Member 'RSBattleEnemy_C_Request_Press_Kill::L_dataTable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, L_extraType) == 0x000100, "Member 'RSBattleEnemy_C_Request_Press_Kill::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, L_TableData) == 0x000110, "Member 'RSBattleEnemy_C_Request_Press_Kill::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, L_IsSuccess) == 0x000114, "Member 'RSBattleEnemy_C_Request_Press_Kill::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_IsDead_bDead) == 0x000115, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_GetName_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_Conv_NameToString_ReturnValue) == 0x000120, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_Concat_StrStr_ReturnValue) == 0x000130, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_OnDead_Dummy) == 0x000140, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_Conv_StringToName_ReturnValue) == 0x000144, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_SetDelayDeath_dummy) == 0x00014C, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_SetDelayDeath_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_GetDataTableRowFromName_OutRow) == 0x000150, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000180, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_SetHP_bDummy) == 0x000181, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Request_Press_Kill, CallFunc_IsSkillExtraType_CommonInfo_ReturnValue) == 0x000182, "Member 'RSBattleEnemy_C_Request_Press_Kill::CallFunc_IsSkillExtraType_CommonInfo_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckCounterAttack
// 0x0110 (0x0110 - 0x0000)
struct RSBattleEnemy_C_CheckCounterAttack final
{
public:
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9073[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9074[0x1];                                     // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9075[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isEnemyDamageknockBack_bool;              // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckCounterAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckCounterAttack");
static_assert(sizeof(RSBattleEnemy_C_CheckCounterAttack) == 0x000110, "Wrong size on RSBattleEnemy_C_CheckCounterAttack");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, Skill) == 0x000000, "Member 'RSBattleEnemy_C_CheckCounterAttack::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, Temp_bool_True_if_break_was_hit_Variable) == 0x0000F0, "Member 'RSBattleEnemy_C_CheckCounterAttack::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, Temp_int_Array_Index_Variable) == 0x0000F4, "Member 'RSBattleEnemy_C_CheckCounterAttack::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_Not_PreBool_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_Array_Get_Item) == 0x0000F9, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, K2Node_SwitchEnum_CmpSuccess) == 0x0000FA, "Member 'RSBattleEnemy_C_CheckCounterAttack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_Array_Length_ReturnValue) == 0x0000FC, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'RSBattleEnemy_C_CheckCounterAttack::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_BooleanAND_ReturnValue) == 0x00010C, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCounterAttack, CallFunc_isEnemyDamageknockBack_bool) == 0x00010D, "Member 'RSBattleEnemy_C_CheckCounterAttack::CallFunc_isEnemyDamageknockBack_bool' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckWinceCounter
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_CheckWinceCounter final
{
public:
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9076[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CheckWinceCounter) == 0x000004, "Wrong alignment on RSBattleEnemy_C_CheckWinceCounter");
static_assert(sizeof(RSBattleEnemy_C_CheckWinceCounter) == 0x000008, "Wrong size on RSBattleEnemy_C_CheckWinceCounter");
static_assert(offsetof(RSBattleEnemy_C_CheckWinceCounter, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CheckWinceCounter::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckWinceCounter, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_CheckWinceCounter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCounterSuperArmor
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsCounterSuperArmor final
{
public:
	bool                                          SuperArmor;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCounterSuperArmor) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsCounterSuperArmor");
static_assert(sizeof(RSBattleEnemy_C_IsCounterSuperArmor) == 0x000002, "Wrong size on RSBattleEnemy_C_IsCounterSuperArmor");
static_assert(offsetof(RSBattleEnemy_C_IsCounterSuperArmor, SuperArmor) == 0x000000, "Member 'RSBattleEnemy_C_IsCounterSuperArmor::SuperArmor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCounterSuperArmor, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsCounterSuperArmor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSetWinceCounter
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsSetWinceCounter final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSetWinceCounter) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSetWinceCounter");
static_assert(sizeof(RSBattleEnemy_C_IsSetWinceCounter) == 0x000001, "Wrong size on RSBattleEnemy_C_IsSetWinceCounter");
static_assert(offsetof(RSBattleEnemy_C_IsSetWinceCounter, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsSetWinceCounter::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueReactionSmallCondition
// 0x0138 (0x0138 - 0x0000)
struct RSBattleEnemy_C_IsUniqueReactionSmallCondition final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HitPosition;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDir;                                            // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9077[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Primitive;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicObjectCombo;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9078[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0038(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Attacker;                                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReactionSmall;                                    // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueReactionSmallCondition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsUniqueReactionSmallCondition");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueReactionSmallCondition) == 0x000138, "Wrong size on RSBattleEnemy_C_IsUniqueReactionSmallCondition");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, Rot) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::Rot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, HitPosition) == 0x00000C, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, HitDir) == 0x000018, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::HitDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, Primitive) == 0x000028, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::Primitive' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, PsychicObjectCombo) == 0x000030, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::PsychicObjectCombo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, Skill) == 0x000038, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, Attacker) == 0x000128, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueReactionSmallCondition, bReactionSmall) == 0x000130, "Member 'RSBattleEnemy_C_IsUniqueReactionSmallCondition::bReactionSmall' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetUniqueSeeWeak
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetUniqueSeeWeak final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dammy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetUniqueSeeWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetUniqueSeeWeak");
static_assert(sizeof(RSBattleEnemy_C_SetUniqueSeeWeak) == 0x000002, "Wrong size on RSBattleEnemy_C_SetUniqueSeeWeak");
static_assert(offsetof(RSBattleEnemy_C_SetUniqueSeeWeak, On) == 0x000000, "Member 'RSBattleEnemy_C_SetUniqueSeeWeak::On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetUniqueSeeWeak, Dammy) == 0x000001, "Member 'RSBattleEnemy_C_SetUniqueSeeWeak::Dammy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableFitGround
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_EnableFitGround final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MeshFitGround_bDummy;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableFitGround) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EnableFitGround");
static_assert(sizeof(RSBattleEnemy_C_EnableFitGround) == 0x000002, "Wrong size on RSBattleEnemy_C_EnableFitGround");
static_assert(offsetof(RSBattleEnemy_C_EnableFitGround, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_EnableFitGround::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableFitGround, CallFunc_MeshFitGround_bDummy) == 0x000001, "Member 'RSBattleEnemy_C_EnableFitGround::CallFunc_MeshFitGround_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DisableFitGround
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_DisableFitGround final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelMeshFitGround_bDummy;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DisableFitGround) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DisableFitGround");
static_assert(sizeof(RSBattleEnemy_C_DisableFitGround) == 0x000002, "Wrong size on RSBattleEnemy_C_DisableFitGround");
static_assert(offsetof(RSBattleEnemy_C_DisableFitGround, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DisableFitGround::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisableFitGround, CallFunc_CancelMeshFitGround_bDummy) == 0x000001, "Member 'RSBattleEnemy_C_DisableFitGround::CallFunc_CancelMeshFitGround_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateFitGround
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_UpdateFitGround final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MeshFitGround_bDummy;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateFitGround) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateFitGround");
static_assert(sizeof(RSBattleEnemy_C_UpdateFitGround) == 0x000008, "Wrong size on RSBattleEnemy_C_UpdateFitGround");
static_assert(offsetof(RSBattleEnemy_C_UpdateFitGround, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateFitGround::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFitGround, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateFitGround::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFitGround, CallFunc_IsEvent_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateFitGround::CallFunc_IsEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFitGround, CallFunc_MeshFitGround_bDummy) == 0x000006, "Member 'RSBattleEnemy_C_UpdateFitGround::CallFunc_MeshFitGround_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFitGround, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_UpdateFitGround::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayMotionInfo
// 0x0170 (0x0170 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayMotionInfo final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9079[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   L_ActionKey;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_ExecDraw;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurrentTarget_bTarget;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_907A[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	uint8                                         CallFunc_GetValueAsEnum_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_907B[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_DebugMakeMotionInfoText_InfoText;         // 0x0088(0x0018)()
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00F0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0108(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0158(0x0018)()
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayMotionInfo) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayMotionInfo");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayMotionInfo) == 0x000170, "Wrong size on RSBattleEnemy_C_DebugDisplayMotionInfo");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, L_ActionKey) == 0x000004, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::L_ActionKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, L_ExecDraw) == 0x00000C, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::L_ExecDraw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_IsCurrentTarget_bTarget) == 0x00000D, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_IsCurrentTarget_bTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_GetObjectName_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_GetBlackboard_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_GetValueAsEnum_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_GetValueAsEnum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_DebugMakeMotionInfoText_InfoText) == 0x000088, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_DebugMakeMotionInfoText_InfoText' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_GetAiDataTableString_Param) == 0x0000A0, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B0, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, K2Node_MakeStruct_FormatArgumentData_2) == 0x000108, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, K2Node_MakeArray_Array) == 0x000148, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayMotionInfo, CallFunc_Format_ReturnValue) == 0x000158, "Member 'RSBattleEnemy_C_DebugDisplayMotionInfo::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartWeakDamageMaterial
// 0x0080 (0x0080 - 0x0000)
struct RSBattleEnemy_C_StartWeakDamageMaterial final
{
public:
	bool                                          LSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_907C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_CrashResistance;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 L_CrashResistanceList;                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_HighDamage;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_907D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCrashChanceAnimKind_ReturnValue;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_907E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetMaterialSlotNames_ReturnValue;         // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_907F[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9080[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9081[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartWeakDamageMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartWeakDamageMaterial");
static_assert(sizeof(RSBattleEnemy_C_StartWeakDamageMaterial) == 0x000080, "Wrong size on RSBattleEnemy_C_StartWeakDamageMaterial");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, LSuccess) == 0x000000, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::LSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, L_CrashResistance) == 0x000004, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::L_CrashResistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, L_CrashResistanceList) == 0x000008, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::L_CrashResistanceList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, L_HighDamage) == 0x000018, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::L_HighDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_IsCrashChanceAnimKind_ReturnValue) == 0x00002A, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_IsCrashChanceAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_IsValid_ReturnValue_2) == 0x00002B, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_GetMaterialSlotNames_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_GetMaterialSlotNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_IsValid_ReturnValue_3) == 0x000040, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_Array_Get_Item) == 0x000044, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_GetMaterials_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000070, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartWeakDamageMaterial, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'RSBattleEnemy_C_StartWeakDamageMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateWeakDamageMaterial
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_UpdateWeakDamageMaterial final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateWeakDamageMaterial) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateWeakDamageMaterial");
static_assert(sizeof(RSBattleEnemy_C_UpdateWeakDamageMaterial) == 0x000004, "Wrong size on RSBattleEnemy_C_UpdateWeakDamageMaterial");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakDamageMaterial, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateWeakDamageMaterial::DeltaSec' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAvoidAction
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_GetAvoidAction final
{
public:
	Enum_EnemyAvoidType                           AvoidEnum;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         AvoidAction;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetAvoidAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetAvoidAction");
static_assert(sizeof(RSBattleEnemy_C_GetAvoidAction) == 0x000002, "Wrong size on RSBattleEnemy_C_GetAvoidAction");
static_assert(offsetof(RSBattleEnemy_C_GetAvoidAction, AvoidEnum) == 0x000000, "Member 'RSBattleEnemy_C_GetAvoidAction::AvoidEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAvoidAction, AvoidAction) == 0x000001, "Member 'RSBattleEnemy_C_GetAvoidAction::AvoidAction' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcBrainCrashDamage
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_CalcBrainCrashDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LDamage;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalculateBrainCrashDamage_damage;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcBrainCrashDamage) == 0x000004, "Wrong alignment on RSBattleEnemy_C_CalcBrainCrashDamage");
static_assert(sizeof(RSBattleEnemy_C_CalcBrainCrashDamage) == 0x00000C, "Wrong size on RSBattleEnemy_C_CalcBrainCrashDamage");
static_assert(offsetof(RSBattleEnemy_C_CalcBrainCrashDamage, Damage) == 0x000000, "Member 'RSBattleEnemy_C_CalcBrainCrashDamage::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcBrainCrashDamage, LDamage) == 0x000004, "Member 'RSBattleEnemy_C_CalcBrainCrashDamage::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcBrainCrashDamage, CallFunc_CalculateBrainCrashDamage_damage) == 0x000008, "Member 'RSBattleEnemy_C_CalcBrainCrashDamage::CallFunc_CalculateBrainCrashDamage_damage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckLastBossBrainCrash
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_CheckLastBossBrainCrash final
{
public:
	bool                                          LIsLast;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLastBrainCrash_IsLast;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckLastBossBrainCrash) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CheckLastBossBrainCrash");
static_assert(sizeof(RSBattleEnemy_C_CheckLastBossBrainCrash) == 0x000002, "Wrong size on RSBattleEnemy_C_CheckLastBossBrainCrash");
static_assert(offsetof(RSBattleEnemy_C_CheckLastBossBrainCrash, LIsLast) == 0x000000, "Member 'RSBattleEnemy_C_CheckLastBossBrainCrash::LIsLast' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckLastBossBrainCrash, CallFunc_IsLastBrainCrash_IsLast) == 0x000001, "Member 'RSBattleEnemy_C_CheckLastBossBrainCrash::CallFunc_IsLastBrainCrash_IsLast' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LimitCrashAccumulation
// 0x00E0 (0x00E0 - 0x0000)
struct RSBattleEnemy_C_LimitCrashAccumulation final
{
public:
	struct FCharactersParameterBasic              LBasic;                                            // 0x0000(0x0068)(Edit, BlueprintVisible)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9082[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0070(0x0068)()
	bool                                          CallFunc_IsUniqueObjState_ReturnState;             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LimitCrashAccumulation) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LimitCrashAccumulation");
static_assert(sizeof(RSBattleEnemy_C_LimitCrashAccumulation) == 0x0000E0, "Wrong size on RSBattleEnemy_C_LimitCrashAccumulation");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, LBasic) == 0x000000, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::LBasic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, CallFunc_IsValid_ReturnValue) == 0x00006D, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, CallFunc_GetParameterBasic_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LimitCrashAccumulation, CallFunc_IsUniqueObjState_ReturnState) == 0x0000D8, "Member 'RSBattleEnemy_C_LimitCrashAccumulation::CallFunc_IsUniqueObjState_ReturnState' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnableDiscoverIcon
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetEnableDiscoverIcon final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnableDiscoverIcon) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnableDiscoverIcon");
static_assert(sizeof(RSBattleEnemy_C_SetEnableDiscoverIcon) == 0x000002, "Wrong size on RSBattleEnemy_C_SetEnableDiscoverIcon");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDiscoverIcon, Enable) == 0x000000, "Member 'RSBattleEnemy_C_SetEnableDiscoverIcon::Enable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableDiscoverIcon, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetEnableDiscoverIcon::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCheckCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetCheckCapsuleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCheckCapsuleRadius) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCheckCapsuleRadius");
static_assert(sizeof(RSBattleEnemy_C_GetCheckCapsuleRadius) == 0x000004, "Wrong size on RSBattleEnemy_C_GetCheckCapsuleRadius");
static_assert(offsetof(RSBattleEnemy_C_GetCheckCapsuleRadius, Radius) == 0x000000, "Member 'RSBattleEnemy_C_GetCheckCapsuleRadius::Radius' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ProcFellOutOfWorld
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_ProcFellOutOfWorld final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventDeath_Dummy;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ProcFellOutOfWorld) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ProcFellOutOfWorld");
static_assert(sizeof(RSBattleEnemy_C_ProcFellOutOfWorld) == 0x000002, "Wrong size on RSBattleEnemy_C_ProcFellOutOfWorld");
static_assert(offsetof(RSBattleEnemy_C_ProcFellOutOfWorld, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_ProcFellOutOfWorld::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ProcFellOutOfWorld, CallFunc_EventDeath_Dummy) == 0x000001, "Member 'RSBattleEnemy_C_ProcFellOutOfWorld::CallFunc_EventDeath_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateWeakAroundEffect
// 0x0006 (0x0006 - 0x0000)
struct RSBattleEnemy_C_UpdateWeakAroundEffect final
{
public:
	bool                                          L_Pause;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueAroundEffectPause_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashSuccess_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreUpdateWeakAroundEffect_isExit;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreUpdateWeakAroundEffect_ReturnValue;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateWeakAroundEffect_ReturnValue;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateWeakAroundEffect) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UpdateWeakAroundEffect");
static_assert(sizeof(RSBattleEnemy_C_UpdateWeakAroundEffect) == 0x000006, "Wrong size on RSBattleEnemy_C_UpdateWeakAroundEffect");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, L_Pause) == 0x000000, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::L_Pause' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, CallFunc_IsUniqueAroundEffectPause_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::CallFunc_IsUniqueAroundEffectPause_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, CallFunc_IsBrainCrashSuccess_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::CallFunc_IsBrainCrashSuccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, CallFunc_PreUpdateWeakAroundEffect_isExit) == 0x000003, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::CallFunc_PreUpdateWeakAroundEffect_isExit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, CallFunc_PreUpdateWeakAroundEffect_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::CallFunc_PreUpdateWeakAroundEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateWeakAroundEffect, CallFunc_UpdateWeakAroundEffect_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateWeakAroundEffect::CallFunc_UpdateWeakAroundEffect_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LaunchDown
// 0x0128 (0x0128 - 0x0000)
struct RSBattleEnemy_C_LaunchDown final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_End;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9083[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceivedNotifyAnimEnd_Received;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMotionEnd_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9084[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9085[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9086[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetCheckCapsuleRadius_Radius;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRootLocation_RootLocation;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LaunchDown) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LaunchDown");
static_assert(sizeof(RSBattleEnemy_C_LaunchDown) == 0x000128, "Wrong size on RSBattleEnemy_C_LaunchDown");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, IsEnd) == 0x000000, "Member 'RSBattleEnemy_C_LaunchDown::IsEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, L_End) == 0x000001, "Member 'RSBattleEnemy_C_LaunchDown::L_End' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, ObjType) == 0x000008, "Member 'RSBattleEnemy_C_LaunchDown::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_ReceivedNotifyAnimEnd_Received) == 0x000019, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_ReceivedNotifyAnimEnd_Received' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue_2) == 0x00001B, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue_3) == 0x00001C, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsMotionEnd_ReturnValue) == 0x00001D, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsMotionEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, K2Node_MakeArray_Array) == 0x000020, "Member 'RSBattleEnemy_C_LaunchDown::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue_4) == 0x000030, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsValid_ReturnValue_5) == 0x000038, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, K2Node_MakeArray_Array_1) == 0x000040, "Member 'RSBattleEnemy_C_LaunchDown::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, Temp_object_Variable) == 0x000050, "Member 'RSBattleEnemy_C_LaunchDown::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_GetCheckCapsuleRadius_Radius) == 0x000060, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_GetCheckCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_GetRootLocation_RootLocation) == 0x000064, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_GetRootLocation_RootLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x000098, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000120, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown, CallFunc_IsFlying_ReturnValue) == 0x000121, "Member 'RSBattleEnemy_C_LaunchDown::CallFunc_IsFlying_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartLookAt
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_StartLookAt final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9087[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartLookAt) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartLookAt");
static_assert(sizeof(RSBattleEnemy_C_StartLookAt) == 0x000020, "Wrong size on RSBattleEnemy_C_StartLookAt");
static_assert(offsetof(RSBattleEnemy_C_StartLookAt, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_StartLookAt::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartLookAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_StartLookAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartLookAt, K2Node_DynamicCast_AsRSEnemy_Anim_Instance) == 0x000010, "Member 'RSBattleEnemy_C_StartLookAt::K2Node_DynamicCast_AsRSEnemy_Anim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartLookAt, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_StartLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartLookAt, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_StartLookAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.FinishLookAt
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_FinishLookAt final
{
public:
	bool                                          FinishRotZero;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9088[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_FinishLookAt) == 0x000008, "Wrong alignment on RSBattleEnemy_C_FinishLookAt");
static_assert(sizeof(RSBattleEnemy_C_FinishLookAt) == 0x000020, "Wrong size on RSBattleEnemy_C_FinishLookAt");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, FinishRotZero) == 0x000000, "Member 'RSBattleEnemy_C_FinishLookAt::FinishRotZero' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_FinishLookAt::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_FinishLookAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, K2Node_DynamicCast_AsRSEnemy_Anim_Instance) == 0x000010, "Member 'RSBattleEnemy_C_FinishLookAt::K2Node_DynamicCast_AsRSEnemy_Anim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_FinishLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FinishLookAt, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_FinishLookAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RequestAddDamageL
// 0x0118 (0x0118 - 0x0000)
struct RSBattleEnemy_C_RequestAddDamageL final
{
public:
	struct FHCSkillCommonInfo                     Skill;                                             // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsSuccess;                                         // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9089[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x010F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestAddDamageL_ReturnValue;            // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RequestAddDamageL) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RequestAddDamageL");
static_assert(sizeof(RSBattleEnemy_C_RequestAddDamageL) == 0x000118, "Wrong size on RSBattleEnemy_C_RequestAddDamageL");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, Skill) == 0x000000, "Member 'RSBattleEnemy_C_RequestAddDamageL::Skill' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, IsSuccess) == 0x0000F0, "Member 'RSBattleEnemy_C_RequestAddDamageL::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, L_extraType) == 0x0000F8, "Member 'RSBattleEnemy_C_RequestAddDamageL::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, L_TableData) == 0x000108, "Member 'RSBattleEnemy_C_RequestAddDamageL::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, L_IsSuccess) == 0x00010C, "Member 'RSBattleEnemy_C_RequestAddDamageL::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, CallFunc_IsValid_ReturnValue) == 0x00010D, "Member 'RSBattleEnemy_C_RequestAddDamageL::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00010E, "Member 'RSBattleEnemy_C_RequestAddDamageL::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00010F, "Member 'RSBattleEnemy_C_RequestAddDamageL::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, CallFunc_IsDead_bDead) == 0x000110, "Member 'RSBattleEnemy_C_RequestAddDamageL::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RequestAddDamageL, CallFunc_RequestAddDamageL_ReturnValue) == 0x000111, "Member 'RSBattleEnemy_C_RequestAddDamageL::CallFunc_RequestAddDamageL_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetAddBlend
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_ResetAddBlend final
{
public:
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetAddBlend) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ResetAddBlend");
static_assert(sizeof(RSBattleEnemy_C_ResetAddBlend) == 0x000018, "Wrong size on RSBattleEnemy_C_ResetAddBlend");
static_assert(offsetof(RSBattleEnemy_C_ResetAddBlend, L_extraType) == 0x000000, "Member 'RSBattleEnemy_C_ResetAddBlend::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAddBlend, L_TableData) == 0x000010, "Member 'RSBattleEnemy_C_ResetAddBlend::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAddBlend, L_IsSuccess) == 0x000014, "Member 'RSBattleEnemy_C_ResetAddBlend::L_IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAddBlend, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'RSBattleEnemy_C_ResetAddBlend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAddBlend, CallFunc_IsValid_ReturnValue_1) == 0x000016, "Member 'RSBattleEnemy_C_ResetAddBlend::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateLookAt
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_UpdateLookAt final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableCondition;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_908A[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_908B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableLookAt_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateLookAt) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateLookAt");
static_assert(sizeof(RSBattleEnemy_C_UpdateLookAt) == 0x000028, "Wrong size on RSBattleEnemy_C_UpdateLookAt");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateLookAt::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateLookAt::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, bEnableCondition) == 0x000005, "Member 'RSBattleEnemy_C_UpdateLookAt::bEnableCondition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, CallFunc_GetIsBattleMode_IsBattleMode) == 0x000006, "Member 'RSBattleEnemy_C_UpdateLookAt::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateLookAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateLookAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, K2Node_DynamicCast_AsRSEnemy_Anim_Instance) == 0x000018, "Member 'RSBattleEnemy_C_UpdateLookAt::K2Node_DynamicCast_AsRSEnemy_Anim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_UpdateLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateLookAt, CallFunc_IsEnableLookAt_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_UpdateLookAt::CallFunc_IsEnableLookAt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateBadStateMaterial
// 0x0068 (0x0068 - 0x0000)
struct RSBattleEnemy_C_UpdateBadStateMaterial final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_908C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_908D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_908E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_908F[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes_1;                   // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateBadStateStart_isStarting;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBadStateStart_isStarting_1;         // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateBadStateMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateBadStateMaterial");
static_assert(sizeof(RSBattleEnemy_C_UpdateBadStateMaterial) == 0x000068, "Wrong size on RSBattleEnemy_C_UpdateBadStateMaterial");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, Temp_int_Loop_Num_Variable_1) == 0x000028, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_GetBodyMeshes_Meshes) == 0x000030, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_GetBodyMeshes_Meshes_1) == 0x000048, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_GetBodyMeshes_Meshes_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_UpdateBadStateStart_isStarting) == 0x00005C, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_UpdateBadStateStart_isStarting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00005D, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_IsValid_ReturnValue) == 0x00005E, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_UpdateBadStateStart_isStarting_1) == 0x00005F, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_UpdateBadStateStart_isStarting_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBadStateMaterial, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_UpdateBadStateMaterial::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainCrashAccessOff
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnBrainCrashAccessOff final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainCrashAccessOff) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnBrainCrashAccessOff");
static_assert(sizeof(RSBattleEnemy_C_OnBrainCrashAccessOff) == 0x000001, "Wrong size on RSBattleEnemy_C_OnBrainCrashAccessOff");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashAccessOff, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainCrashAccessOff::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainCrashAccessOn
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_OnBrainCrashAccessOn final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9090[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBrainCrashAccessExtraTime_bEnable;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9091[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsBrainCrashAccessExtraTime_ExtraTime;    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainCrashAccessOn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnBrainCrashAccessOn");
static_assert(sizeof(RSBattleEnemy_C_OnBrainCrashAccessOn) == 0x000018, "Wrong size on RSBattleEnemy_C_OnBrainCrashAccessOn");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashAccessOn, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainCrashAccessOn::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashAccessOn, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'RSBattleEnemy_C_OnBrainCrashAccessOn::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashAccessOn, CallFunc_IsBrainCrashAccessExtraTime_bEnable) == 0x000010, "Member 'RSBattleEnemy_C_OnBrainCrashAccessOn::CallFunc_IsBrainCrashAccessExtraTime_bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainCrashAccessOn, CallFunc_IsBrainCrashAccessExtraTime_ExtraTime) == 0x000014, "Member 'RSBattleEnemy_C_OnBrainCrashAccessOn::CallFunc_IsBrainCrashAccessExtraTime_ExtraTime' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownStart");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownStart) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownStart");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownStart, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownStart::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetWeakNumber
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetWeakNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetWeakNumber) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetWeakNumber");
static_assert(sizeof(RSBattleEnemy_C_GetWeakNumber) == 0x000004, "Wrong size on RSBattleEnemy_C_GetWeakNumber");
static_assert(offsetof(RSBattleEnemy_C_GetWeakNumber, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetWeakNumber::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoEventStart
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_DoEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9092[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9093[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateBadStateStart_isStarting;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9094[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoEventStart_bDummy;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoEventStart) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DoEventStart");
static_assert(sizeof(RSBattleEnemy_C_DoEventStart) == 0x000038, "Wrong size on RSBattleEnemy_C_DoEventStart");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattleEnemy_C_DoEventStart::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RSBattleEnemy_C_DoEventStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_GetBodyMeshes_Meshes) == 0x000010, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_DoEventStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_UpdateBadStateStart_isStarting) == 0x000028, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_UpdateBadStateStart_isStarting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_Less_IntInt_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_DoEventStart_bDummy) == 0x000030, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_DoEventStart_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventStart, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_DoEventStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoEventEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_DoEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoEventEnd_bDummy;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoEventEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DoEventEnd");
static_assert(sizeof(RSBattleEnemy_C_DoEventEnd) == 0x000004, "Wrong size on RSBattleEnemy_C_DoEventEnd");
static_assert(offsetof(RSBattleEnemy_C_DoEventEnd, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventEnd, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_DoEventEnd::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventEnd, CallFunc_DoEventEnd_bDummy) == 0x000002, "Member 'RSBattleEnemy_C_DoEventEnd::CallFunc_DoEventEnd_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoEventEnd, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_DoEventEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoStaticEventStart
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_DoStaticEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventStart_bDummy;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoStaticEventStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DoStaticEventStart");
static_assert(sizeof(RSBattleEnemy_C_DoStaticEventStart) == 0x000004, "Wrong size on RSBattleEnemy_C_DoStaticEventStart");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventStart, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoStaticEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventStart, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_DoStaticEventStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventStart, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleEnemy_C_DoStaticEventStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventStart, CallFunc_DoStaticEventStart_bDummy) == 0x000003, "Member 'RSBattleEnemy_C_DoStaticEventStart::CallFunc_DoStaticEventStart_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoStaticEventEnd
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_DoStaticEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9095[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9096[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoStaticEventEnd_bDummy;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoStaticEventEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DoStaticEventEnd");
static_assert(sizeof(RSBattleEnemy_C_DoStaticEventEnd) == 0x000028, "Wrong size on RSBattleEnemy_C_DoStaticEventEnd");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoStaticEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_IsBattling_bBatting) == 0x000012, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_IsDead_bDead) == 0x000020, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoStaticEventEnd, CallFunc_DoStaticEventEnd_bDummy) == 0x000022, "Member 'RSBattleEnemy_C_DoStaticEventEnd::CallFunc_DoStaticEventEnd_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoDynamicEventStart
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_DoDynamicEventStart final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventStart_bDummy;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoDynamicEventStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DoDynamicEventStart");
static_assert(sizeof(RSBattleEnemy_C_DoDynamicEventStart) == 0x000003, "Wrong size on RSBattleEnemy_C_DoDynamicEventStart");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventStart, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoDynamicEventStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventStart, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_DoDynamicEventStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventStart, CallFunc_DoDynamicEventStart_bDummy) == 0x000002, "Member 'RSBattleEnemy_C_DoDynamicEventStart::CallFunc_DoDynamicEventStart_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoDynamicEventEnd
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_DoDynamicEventEnd final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9097[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9098[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventEnd_bDummy;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoDynamicEventEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DoDynamicEventEnd");
static_assert(sizeof(RSBattleEnemy_C_DoDynamicEventEnd) == 0x000028, "Wrong size on RSBattleEnemy_C_DoDynamicEventEnd");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsBattling_bBatting) == 0x000012, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_GetBattleManager_BattleManager) == 0x000018, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsDead_bDead) == 0x000020, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_IsValid_ReturnValue_3) == 0x000023, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoDynamicEventEnd, CallFunc_DoDynamicEventEnd_bDummy) == 0x000024, "Member 'RSBattleEnemy_C_DoDynamicEventEnd::CallFunc_DoDynamicEventEnd_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcMoveScale
// 0x0024 (0x0024 - 0x0000)
struct RSBattleEnemy_C_CalcMoveScale final
{
public:
	float                                         CurrentTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveScale;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LMoveScale;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9099[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CalcMoveScale) == 0x000004, "Wrong alignment on RSBattleEnemy_C_CalcMoveScale");
static_assert(sizeof(RSBattleEnemy_C_CalcMoveScale) == 0x000024, "Wrong size on RSBattleEnemy_C_CalcMoveScale");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CurrentTime) == 0x000000, "Member 'RSBattleEnemy_C_CalcMoveScale::CurrentTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, MaxTime) == 0x000004, "Member 'RSBattleEnemy_C_CalcMoveScale::MaxTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, MoveScale) == 0x000008, "Member 'RSBattleEnemy_C_CalcMoveScale::MoveScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, LMoveScale) == 0x00000C, "Member 'RSBattleEnemy_C_CalcMoveScale::LMoveScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CalcMoveScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_CalcMoveScale::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_CalcMoveScale::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CallFunc_GetFloatValue_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_CalcMoveScale::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcMoveScale, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_CalcMoveScale::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetAttacking
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_GetTargetAttacking final
{
public:
	bool                                          bAttacking;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LAttacking;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetAttacking) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetTargetAttacking");
static_assert(sizeof(RSBattleEnemy_C_GetTargetAttacking) == 0x000020, "Wrong size on RSBattleEnemy_C_GetTargetAttacking");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, bAttacking) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetAttacking::bAttacking' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, LAttacking) == 0x000001, "Member 'RSBattleEnemy_C_GetTargetAttacking::LAttacking' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000008, "Member 'RSBattleEnemy_C_GetTargetAttacking::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_GetTargetAttacking::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, CallFunc_IsEnemyStateAttack_Return) == 0x000019, "Member 'RSBattleEnemy_C_GetTargetAttacking::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetAttacking, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'RSBattleEnemy_C_GetTargetAttacking::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SwitchLookAt
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SwitchLookAt final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SwitchLookAt) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SwitchLookAt");
static_assert(sizeof(RSBattleEnemy_C_SwitchLookAt) == 0x000002, "Wrong size on RSBattleEnemy_C_SwitchLookAt");
static_assert(offsetof(RSBattleEnemy_C_SwitchLookAt, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_SwitchLookAt::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchLookAt, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SwitchLookAt::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DestroyEnemyWeapon
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DestroyEnemyWeapon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DestroyEnemyWeapon) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DestroyEnemyWeapon");
static_assert(sizeof(RSBattleEnemy_C_DestroyEnemyWeapon) == 0x000001, "Wrong size on RSBattleEnemy_C_DestroyEnemyWeapon");
static_assert(offsetof(RSBattleEnemy_C_DestroyEnemyWeapon, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DestroyEnemyWeapon::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DestroyBrainCore
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DestroyBrainCore final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DestroyBrainCore) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DestroyBrainCore");
static_assert(sizeof(RSBattleEnemy_C_DestroyBrainCore) == 0x000001, "Wrong size on RSBattleEnemy_C_DestroyBrainCore");
static_assert(offsetof(RSBattleEnemy_C_DestroyBrainCore, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DestroyBrainCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDebugAiTableKey
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_GetDebugAiTableKey final
{
public:
	int32                                         AiEnum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ReturnKey;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LSuccess;                                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         LKey;                                              // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_length;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDebugAiTableKey) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetDebugAiTableKey");
static_assert(sizeof(RSBattleEnemy_C_GetDebugAiTableKey) == 0x000028, "Wrong size on RSBattleEnemy_C_GetDebugAiTableKey");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, AiEnum) == 0x000000, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::AiEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, bSuccess) == 0x000004, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, ReturnKey) == 0x000005, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::ReturnKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, LSuccess) == 0x000006, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::LSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, LKey) == 0x000007, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::LKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, L_length) == 0x000008, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::L_length' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDebugAiTableKey, CallFunc_Array_Get_Item) == 0x000021, "Member 'RSBattleEnemy_C_GetDebugAiTableKey::CallFunc_Array_Get_Item' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayUniqueConditionDescription
// 0x0218 (0x0218 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayUniqueConditionDescription final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Exec;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_DescriptionString;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909D[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0068(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentTarget_bTarget;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909E[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FText>                           CallFunc_DebugGetUniqueConditionText_Text;         // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00E8(0x0018)()
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0100(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0118(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0158(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01B8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01D0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909F[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayUniqueConditionDescription");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription) == 0x000218, "Wrong size on RSBattleEnemy_C_DebugDisplayUniqueConditionDescription");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, L_Exec) == 0x000001, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::L_Exec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, L_DescriptionString) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::L_DescriptionString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Conv_StringToText_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_IsCurrentTarget_bTarget) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_IsCurrentTarget_bTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_GetObjectName_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_DebugGetUniqueConditionText_Text) == 0x0000D8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_DebugGetUniqueConditionText_Text' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000E8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Array_Get_Item) == 0x000100, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeStruct_FormatArgumentData_2) == 0x000118, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeStruct_FormatArgumentData_3) == 0x000158, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeArray_Array) == 0x000198, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, K2Node_MakeArray_Array_1) == 0x0001A8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Format_ReturnValue) == 0x0001B8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Format_ReturnValue_1) == 0x0001D0, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Conv_TextToString_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Array_Length_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Concat_StrStr_ReturnValue) == 0x000200, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayUniqueConditionDescription, CallFunc_Less_IntInt_ReturnValue) == 0x000210, "Member 'RSBattleEnemy_C_DebugDisplayUniqueConditionDescription::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugAddIgnoreAction
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_DebugAddIgnoreAction final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugAddIgnoreAction) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DebugAddIgnoreAction");
static_assert(sizeof(RSBattleEnemy_C_DebugAddIgnoreAction) == 0x000008, "Wrong size on RSBattleEnemy_C_DebugAddIgnoreAction");
static_assert(offsetof(RSBattleEnemy_C_DebugAddIgnoreAction, Action) == 0x000000, "Member 'RSBattleEnemy_C_DebugAddIgnoreAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugAddIgnoreAction, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_DebugAddIgnoreAction::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugAddIgnoreAction, CallFunc_Array_AddUnique_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DebugAddIgnoreAction::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugResetIgnoreAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DebugResetIgnoreAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugResetIgnoreAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DebugResetIgnoreAction");
static_assert(sizeof(RSBattleEnemy_C_DebugResetIgnoreAction) == 0x000001, "Wrong size on RSBattleEnemy_C_DebugResetIgnoreAction");
static_assert(offsetof(RSBattleEnemy_C_DebugResetIgnoreAction, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugResetIgnoreAction::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugRemoveIgnoreAction
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_DebugRemoveIgnoreAction final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugRemoveIgnoreAction) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DebugRemoveIgnoreAction");
static_assert(sizeof(RSBattleEnemy_C_DebugRemoveIgnoreAction) == 0x00000C, "Wrong size on RSBattleEnemy_C_DebugRemoveIgnoreAction");
static_assert(offsetof(RSBattleEnemy_C_DebugRemoveIgnoreAction, Action) == 0x000000, "Member 'RSBattleEnemy_C_DebugRemoveIgnoreAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugRemoveIgnoreAction, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_DebugRemoveIgnoreAction::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugRemoveIgnoreAction, CallFunc_Array_Find_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DebugRemoveIgnoreAction::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugRemoveIgnoreAction, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_DebugRemoveIgnoreAction::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PreTick
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_PreTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_SkipLowPriority;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PrioritizeTick_Dummy;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreTick_Dummy;                            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyFixParam_C*                    CallFunc_GetEnemyFixParam_Param;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcTickSeconds_Dummy;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecSometimeTick_bExec;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateDetectIcon_Dummy;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateScouting_Dummy;                     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PreTick) == 0x000008, "Wrong alignment on RSBattleEnemy_C_PreTick");
static_assert(sizeof(RSBattleEnemy_C_PreTick) == 0x000020, "Wrong size on RSBattleEnemy_C_PreTick");
static_assert(offsetof(RSBattleEnemy_C_PreTick, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_PreTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_PreTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, L_SkipLowPriority) == 0x000005, "Member 'RSBattleEnemy_C_PreTick::L_SkipLowPriority' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_PrioritizeTick_Dummy) == 0x000006, "Member 'RSBattleEnemy_C_PreTick::CallFunc_PrioritizeTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_PreTick_Dummy) == 0x000007, "Member 'RSBattleEnemy_C_PreTick::CallFunc_PreTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_SetEmphasisCrashGauge_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_PreTick::CallFunc_SetEmphasisCrashGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_GetEnemyFixParam_Param) == 0x000010, "Member 'RSBattleEnemy_C_PreTick::CallFunc_GetEnemyFixParam_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_CalcTickSeconds_Dummy) == 0x000018, "Member 'RSBattleEnemy_C_PreTick::CallFunc_CalcTickSeconds_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_PreTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'RSBattleEnemy_C_PreTick::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_GetEnemySpawn_return) == 0x00001B, "Member 'RSBattleEnemy_C_PreTick::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_IsExecSometimeTick_bExec) == 0x00001C, "Member 'RSBattleEnemy_C_PreTick::CallFunc_IsExecSometimeTick_bExec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_UpdateDetectIcon_Dummy) == 0x00001D, "Member 'RSBattleEnemy_C_PreTick::CallFunc_UpdateDetectIcon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PreTick, CallFunc_UpdateScouting_Dummy) == 0x00001E, "Member 'RSBattleEnemy_C_PreTick::CallFunc_UpdateScouting_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PostTick
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_PostTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PostTick_Dummy;                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PostTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_PostTick");
static_assert(sizeof(RSBattleEnemy_C_PostTick) == 0x000008, "Wrong size on RSBattleEnemy_C_PostTick");
static_assert(offsetof(RSBattleEnemy_C_PostTick, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_PostTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PostTick, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_PostTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PostTick, CallFunc_GetEnemySpawn_return) == 0x000005, "Member 'RSBattleEnemy_C_PostTick::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PostTick, CallFunc_PostTick_Dummy) == 0x000006, "Member 'RSBattleEnemy_C_PostTick::CallFunc_PostTick_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PostTick, CallFunc_IsValid_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_PostTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableFitGroundTmp
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_EnableFitGroundTmp final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MeshFitGround_bDummy;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableFitGroundTmp) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EnableFitGroundTmp");
static_assert(sizeof(RSBattleEnemy_C_EnableFitGroundTmp) == 0x000002, "Wrong size on RSBattleEnemy_C_EnableFitGroundTmp");
static_assert(offsetof(RSBattleEnemy_C_EnableFitGroundTmp, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_EnableFitGroundTmp::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableFitGroundTmp, CallFunc_MeshFitGround_bDummy) == 0x000001, "Member 'RSBattleEnemy_C_EnableFitGroundTmp::CallFunc_MeshFitGround_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DisableFitGroundTmp
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_DisableFitGroundTmp final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelMeshFitGround_bDummy;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DisableFitGroundTmp) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DisableFitGroundTmp");
static_assert(sizeof(RSBattleEnemy_C_DisableFitGroundTmp) == 0x000002, "Wrong size on RSBattleEnemy_C_DisableFitGroundTmp");
static_assert(offsetof(RSBattleEnemy_C_DisableFitGroundTmp, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DisableFitGroundTmp::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisableFitGroundTmp, CallFunc_CancelMeshFitGround_bDummy) == 0x000001, "Member 'RSBattleEnemy_C_DisableFitGroundTmp::CallFunc_CancelMeshFitGround_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnArmorHit
// 0x0200 (0x0200 - 0x0000)
struct RSBattleEnemy_C_OnArmorHit final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A3[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A4[0x5];                                     // 0x01E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer_1;               // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkBt_AttackEnShell_ReturnValue;    // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnArmorHit) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnArmorHit");
static_assert(sizeof(RSBattleEnemy_C_OnArmorHit) == 0x000200, "Wrong size on RSBattleEnemy_C_OnArmorHit");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_OnArmorHit::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x0001C0, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_IsValid_ReturnValue) == 0x0001C8, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0001D0, "Member 'RSBattleEnemy_C_OnArmorHit::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'RSBattleEnemy_C_OnArmorHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_IsMainPlayer_bMainPlayer) == 0x0001E1, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_IsValid_ReturnValue_1) == 0x0001E2, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x0001E8, "Member 'RSBattleEnemy_C_OnArmorHit::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, K2Node_DynamicCast_bSuccess_1) == 0x0001F8, "Member 'RSBattleEnemy_C_OnArmorHit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_IsValid_ReturnValue_2) == 0x0001F9, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_IsMainPlayer_bMainPlayer_1) == 0x0001FA, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_IsMainPlayer_bMainPlayer_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnArmorHit, CallFunc_BrainTalkBt_AttackEnShell_ReturnValue) == 0x0001FB, "Member 'RSBattleEnemy_C_OnArmorHit::CallFunc_BrainTalkBt_AttackEnShell_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartHideArmor
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_OnStartHideArmor final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterAttribute                           Temp_byte_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartHideArmor) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnStartHideArmor");
static_assert(sizeof(RSBattleEnemy_C_OnStartHideArmor) == 0x000004, "Wrong size on RSBattleEnemy_C_OnStartHideArmor");
static_assert(offsetof(RSBattleEnemy_C_OnStartHideArmor, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnStartHideArmor::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartHideArmor, Temp_byte_Variable) == 0x000001, "Member 'RSBattleEnemy_C_OnStartHideArmor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartHideArmor, CallFunc_Array_RemoveItem_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_OnStartHideArmor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartHideArmor, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_OnStartHideArmor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartDamageFloating
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_StartDamageFloating final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartDamageFloating) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartDamageFloating");
static_assert(sizeof(RSBattleEnemy_C_StartDamageFloating) == 0x000020, "Wrong size on RSBattleEnemy_C_StartDamageFloating");
static_assert(offsetof(RSBattleEnemy_C_StartDamageFloating, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_StartDamageFloating::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageFloating, L_extraType) == 0x000008, "Member 'RSBattleEnemy_C_StartDamageFloating::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageFloating, L_TableData) == 0x000018, "Member 'RSBattleEnemy_C_StartDamageFloating::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartDamageFloating, L_IsSuccess) == 0x00001C, "Member 'RSBattleEnemy_C_StartDamageFloating::L_IsSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EndDamageFloating
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_EndDamageFloating final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     L_extraType;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_TableData;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_IsSuccess;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EndDamageFloating) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EndDamageFloating");
static_assert(sizeof(RSBattleEnemy_C_EndDamageFloating) == 0x000020, "Wrong size on RSBattleEnemy_C_EndDamageFloating");
static_assert(offsetof(RSBattleEnemy_C_EndDamageFloating, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_EndDamageFloating::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EndDamageFloating, L_extraType) == 0x000008, "Member 'RSBattleEnemy_C_EndDamageFloating::L_extraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EndDamageFloating, L_TableData) == 0x000018, "Member 'RSBattleEnemy_C_EndDamageFloating::L_TableData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EndDamageFloating, L_IsSuccess) == 0x00001C, "Member 'RSBattleEnemy_C_EndDamageFloating::L_IsSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoBattleSequencerStart
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_DoBattleSequencerStart final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventStart_bDummy;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoBattleSequencerStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DoBattleSequencerStart");
static_assert(sizeof(RSBattleEnemy_C_DoBattleSequencerStart) == 0x000004, "Wrong size on RSBattleEnemy_C_DoBattleSequencerStart");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerStart, bSetEnemyEvent) == 0x000000, "Member 'RSBattleEnemy_C_DoBattleSequencerStart::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerStart, bDriveSequence) == 0x000001, "Member 'RSBattleEnemy_C_DoBattleSequencerStart::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerStart, bDummy) == 0x000002, "Member 'RSBattleEnemy_C_DoBattleSequencerStart::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerStart, CallFunc_DoDynamicEventStart_bDummy) == 0x000003, "Member 'RSBattleEnemy_C_DoBattleSequencerStart::CallFunc_DoDynamicEventStart_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DoBattleSequencerEnd
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_DoBattleSequencerEnd final
{
public:
	bool                                          bSetEnemyEvent;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDriveSequence;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoDynamicEventEnd_bDummy;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DoBattleSequencerEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DoBattleSequencerEnd");
static_assert(sizeof(RSBattleEnemy_C_DoBattleSequencerEnd) == 0x000004, "Wrong size on RSBattleEnemy_C_DoBattleSequencerEnd");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerEnd, bSetEnemyEvent) == 0x000000, "Member 'RSBattleEnemy_C_DoBattleSequencerEnd::bSetEnemyEvent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerEnd, bDriveSequence) == 0x000001, "Member 'RSBattleEnemy_C_DoBattleSequencerEnd::bDriveSequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerEnd, bDummy) == 0x000002, "Member 'RSBattleEnemy_C_DoBattleSequencerEnd::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DoBattleSequencerEnd, CallFunc_DoDynamicEventEnd_bDummy) == 0x000003, "Member 'RSBattleEnemy_C_DoBattleSequencerEnd::CallFunc_DoDynamicEventEnd_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InitSaveBodyWeakValue
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_InitSaveBodyWeakValue final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_CurIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 L_CurMesh;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90A8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90A9[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_SearchMeshMaterialFromSlot_FindMaterial;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SearchMeshMaterialFromSlot_Index;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90AA[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90AB[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_InitSaveBodyWeakValue) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InitSaveBodyWeakValue");
static_assert(sizeof(RSBattleEnemy_C_InitSaveBodyWeakValue) == 0x000060, "Wrong size on RSBattleEnemy_C_InitSaveBodyWeakValue");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, L_CurIndex) == 0x000004, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::L_CurIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, L_CurMesh) == 0x000008, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::L_CurMesh' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_GetBodyMeshes_Meshes) == 0x000020, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_SearchMeshMaterialFromSlot_FindMaterial) == 0x000040, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_SearchMeshMaterialFromSlot_FindMaterial' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_SearchMeshMaterialFromSlot_Index) == 0x000048, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_SearchMeshMaterialFromSlot_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_IsValid_ReturnValue_2) == 0x000059, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitSaveBodyWeakValue, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_InitSaveBodyWeakValue::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetWeakEmissiveOff
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_SetWeakEmissiveOff final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90AC[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_CurIndex;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 L_CurMesh;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90AD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetWeakEmissiveOff) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetWeakEmissiveOff");
static_assert(sizeof(RSBattleEnemy_C_SetWeakEmissiveOff) == 0x000050, "Wrong size on RSBattleEnemy_C_SetWeakEmissiveOff");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, WeakSlotName) == 0x000000, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, Dummy) == 0x000010, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, L_CurIndex) == 0x000014, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::L_CurIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, L_CurMesh) == 0x000018, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::L_CurMesh' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_GetBodyMeshes_Meshes) == 0x000030, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RestoreWeakEmissive
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_RestoreWeakEmissive final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90AE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_CurIndex;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 L_CurMesh;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSaveBodyEmissiveValue_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90AF[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RestoreWeakEmissive) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RestoreWeakEmissive");
static_assert(sizeof(RSBattleEnemy_C_RestoreWeakEmissive) == 0x000058, "Wrong size on RSBattleEnemy_C_RestoreWeakEmissive");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, WeakSlotName) == 0x000000, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, Dummy) == 0x000010, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, L_CurIndex) == 0x000014, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::L_CurIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, L_CurMesh) == 0x000018, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::L_CurMesh' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_GetSaveBodyEmissiveValue_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_GetSaveBodyEmissiveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_IsValidSaveBodyEmissiveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_GetBodyMeshes_Meshes) == 0x000038, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_Array_Get_Item) == 0x000048, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'RSBattleEnemy_C_RestoreWeakEmissive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueDisableAvoid
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsUniqueDisableAvoid final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueDisableAvoid) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUniqueDisableAvoid");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueDisableAvoid) == 0x000001, "Wrong size on RSBattleEnemy_C_IsUniqueDisableAvoid");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueDisableAvoid, bDisable) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueDisableAvoid::bDisable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCameraLookAtPos
// 0x0044 (0x0044 - 0x0000)
struct RSBattleEnemy_C_GetCameraLookAtPos final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_UseSocketName;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_LookAtSocketName;                                // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_point;                                           // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetCameraLookAtPos) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCameraLookAtPos");
static_assert(sizeof(RSBattleEnemy_C_GetCameraLookAtPos) == 0x000044, "Wrong size on RSBattleEnemy_C_GetCameraLookAtPos");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, L_UseSocketName) == 0x00000C, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::L_UseSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, L_LookAtSocketName) == 0x000014, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::L_LookAtSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, L_point) == 0x00001C, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::L_point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, CallFunc_GetSocketLocation_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCameraLookAtPos, CallFunc_DoesSocketExist_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_GetCameraLookAtPos::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIdleMove
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_SetIdleMove final
{
public:
	bool                                          IsIdle;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Ai_Enemy_C*                         K2Node_DynamicCast_AsBP_Ai_Enemy;                  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIdleMove) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetIdleMove");
static_assert(sizeof(RSBattleEnemy_C_SetIdleMove) == 0x000020, "Wrong size on RSBattleEnemy_C_SetIdleMove");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove, IsIdle) == 0x000000, "Member 'RSBattleEnemy_C_SetIdleMove::IsIdle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetIdleMove::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove, K2Node_DynamicCast_AsBP_Ai_Enemy) == 0x000010, "Member 'RSBattleEnemy_C_SetIdleMove::K2Node_DynamicCast_AsBP_Ai_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_SetIdleMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_SetIdleMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCurrentActionTime
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattleEnemy_C_GetCurrentActionTime final
{
public:
	float                                         ActionTime;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B1[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	uint8                                         CallFunc_GetCurrentAction_ReturnValue;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90B2[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetActionTime_Time;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90B3[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0018)()
};
static_assert(alignof(RSBattleEnemy_C_GetCurrentActionTime) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetCurrentActionTime");
static_assert(sizeof(RSBattleEnemy_C_GetCurrentActionTime) == 0x0000B8, "Wrong size on RSBattleEnemy_C_GetCurrentActionTime");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, ActionTime) == 0x000000, "Member 'RSBattleEnemy_C_GetCurrentActionTime::ActionTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, L_Value) == 0x000004, "Member 'RSBattleEnemy_C_GetCurrentActionTime::L_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_GetObjectName_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'RSBattleEnemy_C_GetCurrentActionTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_GetCurrentAction_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_GetCurrentAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, K2Node_MakeArray_Array) == 0x000088, "Member 'RSBattleEnemy_C_GetCurrentActionTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_GetActionTime_Time) == 0x000098, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_GetActionTime_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'RSBattleEnemy_C_GetCurrentActionTime::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartChangeTimeDilation
// 0x00B0 (0x00B0 - 0x0000)
struct RSBattleEnemy_C_StartChangeTimeDilation final
{
public:
	bool                                          bAddDamage;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_em_ChangeTimeDilation              LRowData;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90B5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LDTChangeTimeDilation;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDE_em_ChangeTimeDilation                     LChangeEnum;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            LAliveKind;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChangeTimeDilation_bChange;             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B6[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B7[0x5];                                     // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B8[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90B9[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_em_ChangeTimeDilation              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0084(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyCrashChanceAnimKind                      CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue;  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BA[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage_1;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartChangeTimeDilation) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartChangeTimeDilation");
static_assert(sizeof(RSBattleEnemy_C_StartChangeTimeDilation) == 0x0000B0, "Wrong size on RSBattleEnemy_C_StartChangeTimeDilation");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, bAddDamage) == 0x000000, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::bAddDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, LRowData) == 0x000004, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::LRowData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, LDTChangeTimeDilation) == 0x000018, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::LDTChangeTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, LChangeEnum) == 0x000020, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::LChangeEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, LAliveKind) == 0x000021, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::LAliveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsChangeTimeDilation_bChange) == 0x000022, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsChangeTimeDilation_bChange' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000025, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000026, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000027, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetMainPlayer_Player) == 0x000038, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000040, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetAccelerating_Accelerating) == 0x000052, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetBaseMontage_BaseMontage) == 0x000058, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetBaseMontage_BaseMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue_3) == 0x000061, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_Conv_StringToName_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetDataTableRowFromName_OutRow) == 0x000084, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000094, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue) == 0x000095, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x000096, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000097, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_SwitchEnum_CmpSuccess_2) == 0x000098, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000099, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, K2Node_SwitchEnum_CmpSuccess_3) == 0x00009A, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00009B, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue_4) == 0x00009C, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_GetBaseMontage_BaseMontage_1) == 0x0000A0, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_GetBaseMontage_BaseMontage_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangeTimeDilation, CallFunc_IsValid_ReturnValue_5) == 0x0000A8, "Member 'RSBattleEnemy_C_StartChangeTimeDilation::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateUniqueObjState
// 0x0120 (0x0120 - 0x0000)
struct RSBattleEnemy_C_UpdateUniqueObjState final
{
public:
	bool                                          LbSafetyObjState;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              LBasic;                                            // 0x0008(0x0068)(Edit, BlueprintVisible)
	bool                                          CallFunc_EndUniqueObjState_Dummy;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BC[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BD[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BE[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsActionStatusAI_self_CastInput;          // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPsychicObjectState                           CallFunc_GetPsychicObjectState_return;             // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartCrashChance_bStart;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90BF[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x00B0(0x0068)()
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateUniqueObjState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateUniqueObjState");
static_assert(sizeof(RSBattleEnemy_C_UpdateUniqueObjState) == 0x000120, "Wrong size on RSBattleEnemy_C_UpdateUniqueObjState");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, LbSafetyObjState) == 0x000000, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::LbSafetyObjState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, LBasic) == 0x000008, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::LBasic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_EndUniqueObjState_Dummy) == 0x000070, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_EndUniqueObjState_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_GetPlayerManager_PlayerManager) == 0x000078, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_GetMainPlayer_Player) == 0x000088, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsActionStatusAI_self_CastInput) == 0x000098, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsActionStatusAI_self_CastInput' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsActionStatusAI_bResult) == 0x0000A8, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsValid_ReturnValue_2) == 0x0000A9, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_GetPsychicObjectState_return) == 0x0000AA, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_GetPsychicObjectState_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, K2Node_SwitchEnum_CmpSuccess) == 0x0000AB, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsDead_bDead) == 0x0000AC, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_StartCrashChance_bStart) == 0x0000AD, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_StartCrashChance_bStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_IsValid_ReturnValue_3) == 0x0000AE, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_GetParameterBasic_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_Add_FloatFloat_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateUniqueObjState, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00011C, "Member 'RSBattleEnemy_C_UpdateUniqueObjState::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyLandingCheck
// 0x0128 (0x0128 - 0x0000)
struct RSBattleEnemy_C_IsEnemyLandingCheck final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LHit;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C1[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceivedNotifyAnimEnd_Received;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C2[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsMotionEnd_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C3[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCheckCapsuleRadius_Radius;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRootLocation_RootLocation;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMotionEnd_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C4[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C5[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0080(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x009C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyLandingCheck) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsEnemyLandingCheck");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyLandingCheck) == 0x000128, "Wrong size on RSBattleEnemy_C_IsEnemyLandingCheck");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, bHit) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, LHit) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::LHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, ObjType) == 0x000008, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, K2Node_MakeArray_Array) == 0x000018, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_ReceivedNotifyAnimEnd_Received) == 0x000030, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_ReceivedNotifyAnimEnd_Received' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, K2Node_MakeArray_Array_1) == 0x000038, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_IsMotionEnd_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_IsMotionEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_GetCheckCapsuleRadius_Radius) == 0x00004C, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_GetCheckCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_GetRootLocation_RootLocation) == 0x000054, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_GetRootLocation_RootLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_IsMotionEnd_ReturnValue_1) == 0x00006C, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_IsMotionEnd_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, Temp_object_Variable) == 0x000080, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x00009C, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000124, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_IsValid_ReturnValue_1) == 0x000125, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck, CallFunc_IsValid_ReturnValue_2) == 0x000126, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartChangePlayRate
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_StartChangePlayRate final
{
public:
	bool                                          bAddDamage;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_em_ChangeTimeDilation              LRowData;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LDTChangeTimeDilation;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDE_em_ChangeTimeDilation                     LChangeEnum;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            LAliveKind;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_StartChangePlayRate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartChangePlayRate");
static_assert(sizeof(RSBattleEnemy_C_StartChangePlayRate) == 0x000028, "Wrong size on RSBattleEnemy_C_StartChangePlayRate");
static_assert(offsetof(RSBattleEnemy_C_StartChangePlayRate, bAddDamage) == 0x000000, "Member 'RSBattleEnemy_C_StartChangePlayRate::bAddDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangePlayRate, LRowData) == 0x000004, "Member 'RSBattleEnemy_C_StartChangePlayRate::LRowData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangePlayRate, LDTChangeTimeDilation) == 0x000018, "Member 'RSBattleEnemy_C_StartChangePlayRate::LDTChangeTimeDilation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangePlayRate, LChangeEnum) == 0x000020, "Member 'RSBattleEnemy_C_StartChangePlayRate::LChangeEnum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartChangePlayRate, LAliveKind) == 0x000021, "Member 'RSBattleEnemy_C_StartChangePlayRate::LAliveKind' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBrainCrashReceive
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetBrainCrashReceive final
{
public:
	int32                                         CallFunc_GetWeakNumber_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCrashResistance_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetBrainCrashReceive) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetBrainCrashReceive");
static_assert(sizeof(RSBattleEnemy_C_SetBrainCrashReceive) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetBrainCrashReceive");
static_assert(offsetof(RSBattleEnemy_C_SetBrainCrashReceive, CallFunc_GetWeakNumber_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_SetBrainCrashReceive::CallFunc_GetWeakNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBrainCrashReceive, CallFunc_GetCrashResistance_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetBrainCrashReceive::CallFunc_GetCrashResistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBrainCrashReceive, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetBrainCrashReceive::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetHiddenCharacterAttachment
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetHiddenCharacterAttachment final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	ESlateVisibility                              L_widgetStat;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C8[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetHiddenCharacterAttachment) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetHiddenCharacterAttachment");
static_assert(sizeof(RSBattleEnemy_C_SetHiddenCharacterAttachment) == 0x000018, "Wrong size on RSBattleEnemy_C_SetHiddenCharacterAttachment");
static_assert(offsetof(RSBattleEnemy_C_SetHiddenCharacterAttachment, NewHidden) == 0x000000, "Member 'RSBattleEnemy_C_SetHiddenCharacterAttachment::NewHidden' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHiddenCharacterAttachment, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetHiddenCharacterAttachment::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHiddenCharacterAttachment, L_widgetStat) == 0x000002, "Member 'RSBattleEnemy_C_SetHiddenCharacterAttachment::L_widgetStat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHiddenCharacterAttachment, CallFunc_GetBrainCore_CoreObject) == 0x000008, "Member 'RSBattleEnemy_C_SetHiddenCharacterAttachment::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHiddenCharacterAttachment, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetHiddenCharacterAttachment::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDrawSearchRange
// 0x00C4 (0x00C4 - 0x0000)
struct RSBattleEnemy_C_DebugDrawSearchRange final
{
public:
	struct FLinearColor                           L_SensingAreaColor;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_MoveAreaColor;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_rate;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_NoTargetColor;                                   // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_TargetColor;                                     // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_color;                                           // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_1;  // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90C9[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_2;  // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExecSometimeTick_bExec;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CA[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugEnemyDrawData_ReturnValue;         // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugDrawSearchRange) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DebugDrawSearchRange");
static_assert(sizeof(RSBattleEnemy_C_DebugDrawSearchRange) == 0x0000C4, "Wrong size on RSBattleEnemy_C_DebugDrawSearchRange");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_SensingAreaColor) == 0x000000, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_SensingAreaColor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_MoveAreaColor) == 0x000010, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_MoveAreaColor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_rate) == 0x000020, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_rate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_NoTargetColor) == 0x000024, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_NoTargetColor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_TargetColor) == 0x000034, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_TargetColor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, L_color) == 0x000044, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::L_color' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_Multiply_LinearColorFloat_ReturnValue_1) == 0x000064, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_Multiply_LinearColorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_IsBattling_bBatting) == 0x000074, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_Multiply_LinearColorFloat_ReturnValue_2) == 0x000078, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_Multiply_LinearColorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_IsExecSometimeTick_bExec) == 0x000088, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_IsExecSometimeTick_bExec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_GetForwardVector_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B4, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDrawSearchRange, CallFunc_IsDebugEnemyDrawData_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugDrawSearchRange::CallFunc_IsDebugEnemyDrawData_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateAdjustZCharaCapsule
// 0x001C (0x001C - 0x0000)
struct RSBattleEnemy_C_UpdateAdjustZCharaCapsule final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCurrentCapsuleLocation;                           // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LNewLocation;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateAdjustZCharaCapsule) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateAdjustZCharaCapsule");
static_assert(sizeof(RSBattleEnemy_C_UpdateAdjustZCharaCapsule) == 0x00001C, "Wrong size on RSBattleEnemy_C_UpdateAdjustZCharaCapsule");
static_assert(offsetof(RSBattleEnemy_C_UpdateAdjustZCharaCapsule, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateAdjustZCharaCapsule::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAdjustZCharaCapsule, LCurrentCapsuleLocation) == 0x000004, "Member 'RSBattleEnemy_C_UpdateAdjustZCharaCapsule::LCurrentCapsuleLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAdjustZCharaCapsule, LNewLocation) == 0x000010, "Member 'RSBattleEnemy_C_UpdateAdjustZCharaCapsule::LNewLocation' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAdjustCharaCapsule
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetAdjustCharaCapsule final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAdjustCharaCapsule) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetAdjustCharaCapsule");
static_assert(sizeof(RSBattleEnemy_C_SetAdjustCharaCapsule) == 0x000002, "Wrong size on RSBattleEnemy_C_SetAdjustCharaCapsule");
static_assert(offsetof(RSBattleEnemy_C_SetAdjustCharaCapsule, Enable) == 0x000000, "Member 'RSBattleEnemy_C_SetAdjustCharaCapsule::Enable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAdjustCharaCapsule, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetAdjustCharaCapsule::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.KickCrashChanceLoopEffect
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_KickCrashChanceLoopEffect final
{
public:
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CB[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_KickCrashChanceLoopEffect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_KickCrashChanceLoopEffect");
static_assert(sizeof(RSBattleEnemy_C_KickCrashChanceLoopEffect) == 0x000028, "Wrong size on RSBattleEnemy_C_KickCrashChanceLoopEffect");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_GetBrainCore_CoreObject) == 0x000000, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000018, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StopCrashChanceLoopEffect
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_StopCrashChanceLoopEffect final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StopCrashChanceLoopEffect) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StopCrashChanceLoopEffect");
static_assert(sizeof(RSBattleEnemy_C_StopCrashChanceLoopEffect) == 0x000003, "Wrong size on RSBattleEnemy_C_StopCrashChanceLoopEffect");
static_assert(offsetof(RSBattleEnemy_C_StopCrashChanceLoopEffect, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StopCrashChanceLoopEffect::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopCrashChanceLoopEffect, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_StopCrashChanceLoopEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopCrashChanceLoopEffect, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleEnemy_C_StopCrashChanceLoopEffect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateScouting
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_UpdateScouting final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TmpAreaOut;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CC[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_TargetLocation;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_MainLocation;                                    // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChangeOldFindType_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsChangeOldFindType_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CD[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateAreaCheck_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyFindPlayerType                          CallFunc_GetFindPlayerType_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateScouting) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateScouting");
static_assert(sizeof(RSBattleEnemy_C_UpdateScouting) == 0x000040, "Wrong size on RSBattleEnemy_C_UpdateScouting");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateScouting::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateScouting::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, TmpAreaOut) == 0x000005, "Member 'RSBattleEnemy_C_UpdateScouting::TmpAreaOut' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, L_TargetLocation) == 0x000008, "Member 'RSBattleEnemy_C_UpdateScouting::L_TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, L_MainLocation) == 0x000014, "Member 'RSBattleEnemy_C_UpdateScouting::L_MainLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsChangeOldFindType_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsChangeOldFindType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsBattling_bBatting) == 0x000021, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsChangeOldFindType_ReturnValue_1) == 0x000022, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsChangeOldFindType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsOver_ReturnValue) == 0x000023, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_GetDebuggingManager_Manager) == 0x000028, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_UpdateAreaCheck_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_UpdateAreaCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_GetFindPlayerType_ReturnValue) == 0x000032, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_GetFindPlayerType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, K2Node_SwitchEnum_CmpSuccess) == 0x000033, "Member 'RSBattleEnemy_C_UpdateScouting::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_RandomFloatInRange_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00003A, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateScouting, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003B, "Member 'RSBattleEnemy_C_UpdateScouting::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetActorAllTickEnabled
// 0x0088 (0x0088 - 0x0000)
struct RSBattleEnemy_C_SetActorAllTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyWeaponManageComponent_C*       LWeaponManage;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                LComponentList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90CF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyWeaponManageComponent_C*       CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue_1;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D0[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPathFollowingComponent*                CallFunc_GetPathFollowingComponent_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPathFollowingComponent*                CallFunc_GetPathFollowingComponent_ReturnValue_1;  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseEffect_Native_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisibleEffect_bVisible;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseEffect_Native_ReturnValue_1;         // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D1[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D2[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D3[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetActorAllTickEnabled) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetActorAllTickEnabled");
static_assert(sizeof(RSBattleEnemy_C_SetActorAllTickEnabled) == 0x000088, "Wrong size on RSBattleEnemy_C_SetActorAllTickEnabled");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, bEnabled) == 0x000000, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, LWeaponManage) == 0x000008, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::LWeaponManage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, LComponentList) == 0x000010, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::LComponentList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetAIController_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetAIController_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetAIController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetPathFollowingComponent_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetPathFollowingComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetPathFollowingComponent_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetPathFollowingComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsUseEffect_Native_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsUseEffect_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsVisibleEffect_bVisible) == 0x000059, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsVisibleEffect_bVisible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsUseEffect_Native_ReturnValue_1) == 0x00005A, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsUseEffect_Native_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_2) == 0x00005B, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_GetEnemyManager_Manager) == 0x000060, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_3) == 0x000068, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_4) == 0x000069, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_5) == 0x00006A, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_6) == 0x00006B, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_IsValid_ReturnValue_7) == 0x00006C, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00006D, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetActorAllTickEnabled, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_SetActorAllTickEnabled::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDetectIcon
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_UpdateDetectIcon final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue; // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopDetectIcon_Dummy;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInScreen_InScreen;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D4[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSearchBasicInfo                       CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue; // 0x0014(0x001C)(ConstParm, NoDestructor)
	EEnemyFindPlayerType                          CallFunc_GetFindPlayerType_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDetectIcon) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateDetectIcon");
static_assert(sizeof(RSBattleEnemy_C_UpdateDetectIcon) == 0x000038, "Wrong size on RSBattleEnemy_C_UpdateDetectIcon");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDetectIcon::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_UpdateDetectIcon::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_StopDetectIcon_Dummy) == 0x000006, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_StopDetectIcon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsInScreen_InScreen) == 0x000007, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsInScreen_InScreen' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsStealthSeeEnable_Return) == 0x000011, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsStateStealth_Return) == 0x000012, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_GetFindPlayerType_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_GetFindPlayerType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000032, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000033, "Member 'RSBattleEnemy_C_UpdateDetectIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_BooleanOR_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_IsDead_bDead) == 0x000035, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000036, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDetectIcon, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000037, "Member 'RSBattleEnemy_C_UpdateDetectIcon::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableWeakCollision
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_EnableWeakCollision final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableWeakCollision) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EnableWeakCollision");
static_assert(sizeof(RSBattleEnemy_C_EnableWeakCollision) == 0x000002, "Wrong size on RSBattleEnemy_C_EnableWeakCollision");
static_assert(offsetof(RSBattleEnemy_C_EnableWeakCollision, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_EnableWeakCollision::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableWeakCollision, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_EnableWeakCollision::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AddCharaCollisionList
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_AddCharaCollisionList final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ListNo;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LNo;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D5[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_AddCharaCollisionList) == 0x000008, "Wrong alignment on RSBattleEnemy_C_AddCharaCollisionList");
static_assert(sizeof(RSBattleEnemy_C_AddCharaCollisionList) == 0x000018, "Wrong size on RSBattleEnemy_C_AddCharaCollisionList");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, Capsule) == 0x000000, "Member 'RSBattleEnemy_C_AddCharaCollisionList::Capsule' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, ListNo) == 0x000008, "Member 'RSBattleEnemy_C_AddCharaCollisionList::ListNo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, LNo) == 0x00000C, "Member 'RSBattleEnemy_C_AddCharaCollisionList::LNo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_AddCharaCollisionList::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_AddCharaCollisionList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_AddCharaCollisionList::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AddCharaCollisionList, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_AddCharaCollisionList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateChangeCharaCollision
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_UpdateChangeCharaCollision final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90D7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90D8[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateChangeCharaCollision) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateChangeCharaCollision");
static_assert(sizeof(RSBattleEnemy_C_UpdateChangeCharaCollision) == 0x000030, "Wrong size on RSBattleEnemy_C_UpdateChangeCharaCollision");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_Array_Get_Item) == 0x000018, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateChangeCharaCollision, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_UpdateChangeCharaCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugMainTick
// 0x0C48 (0x0C48 - 0x0000)
struct RSBattleEnemy_C_DebugMainTick final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPlayerLocation;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LNotTargetInfoOffsetY;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90D9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattlefieldManager_C*               LBattleFieldManager;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                LBrainFieldManager;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         LHudMain;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90DA[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_String;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         L_HUDMainGame;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_DispInfo;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         L_offset;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90DB[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                L_DebuggingManager;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           L_color;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90DC[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90DD[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90DE[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90DF[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E0[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0118(0x0018)()
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E1[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugHasBrokenAllBattlefield_ReturnValue; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E2[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0180(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_BattlefieldManager_C*               CallFunc_GetBattlefieldManager_BP_BattlefieldManager; // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HaveDestroyedBattlefield_ReturnValue;     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E3[0x6];                                     // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x01D8(0x0018)()
	bool                                          CallFunc_IsBattlefieldWillAppear_ReturnValue;      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E4[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_InBranField_FromNative_ReturnValue;       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E5[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_3;          // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x0230(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x0260(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E6[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInFence_ReturnValue;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInFence_ReturnValue;              // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E7[0x6];                                     // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_4;          // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_5;          // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_5;          // 0x02C8(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_6;          // 0x02E0(0x0018)()
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90E8[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_7;          // 0x0320(0x0018)()
	bool                                          CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue; // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90E9[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_6;          // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90EA[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0358(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_8;          // 0x0368(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90EB[0x6];                                     // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0388(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90EC[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_9;          // 0x03A0(0x0018)()
	bool                                          CallFunc_IsEvent_ReturnValue;                      // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90ED[0x3];                                     // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_7;          // 0x03C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x03D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_10;         // 0x03E0(0x0018)()
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x03F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0410(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90EE[0x3];                                     // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90EF[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSearchAngle_Angle;                     // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCaptureArea_Area;                      // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSensingArea_Area;                      // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0440(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90F0[0x4];                                     // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0460(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90F1[0x4];                                     // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0480(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_11;         // 0x0490(0x0018)()
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x04B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreenRED_ScreenPosition;   // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreenRED_ReturnValue;      // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F2[0x3];                                     // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F3[0x3];                                     // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F4[0x7];                                     // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_1;                  // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F5[0x3];                                     // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F6[0x7];                                     // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0520(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0530(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0540(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0550(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0560(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_12;         // 0x0570(0x0018)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0588(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90F7[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreenRED_ScreenPosition_1; // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreenRED_ReturnValue_1;    // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x05A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90F8[0x2];                                     // 0x05AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x05B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90F9[0x4];                                     // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreenRED_ScreenPosition_2; // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreenRED_ReturnValue_2;    // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FA[0x7];                                     // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x05E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x05F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FB[0x7];                                     // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FC[0x7];                                     // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x0620(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEnableOutput_IsEnable;               // 0x0629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FD[0x6];                                     // 0x062A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0630(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0640(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FE[0x7];                                     // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0660(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyIgnoreDamage_ReturnValue;          // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyIgnoreDamage_ReturnValue_1;        // 0x0671(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90FF[0x2];                                     // 0x0672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0674(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_2;             // 0x0680(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0690(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x06A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_3;             // 0x06B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_4;             // 0x06C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x06D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x06E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x06F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0700(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_5;             // 0x0710(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_6;             // 0x0720(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0730(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x0740(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_26;             // 0x0750(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_27;             // 0x0760(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_7;             // 0x0770(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_8;             // 0x0780(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_28;             // 0x0790(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_29;             // 0x07A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_30;             // 0x07B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_31;             // 0x07C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_2;         // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x07D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x07E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9100[0x7];                                     // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_2;                  // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x07F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0808(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9101[0x3];                                     // 0x0809(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue_1;              // 0x080C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0810(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x0824(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9102[0x3];                                     // 0x0831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_8;        // 0x0834(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0840(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_9;        // 0x085C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0868(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x086C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0878(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0888(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_10;       // 0x0894(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_11;       // 0x08A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9103[0x4];                                     // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x08B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x08C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_8;          // 0x08D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_9;          // 0x08E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_10;         // 0x08F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_12;       // 0x0900(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9104[0x4];                                     // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0910(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_11;         // 0x0920(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_32;             // 0x0930(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_33;             // 0x0940(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_34;             // 0x0950(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_35;             // 0x0960(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_36;             // 0x0970(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_37;             // 0x0980(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_38;             // 0x0990(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_39;             // 0x09A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_40;             // 0x09B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_41;             // 0x09C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_42;             // 0x09D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_43;             // 0x09E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x09F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_44;             // 0x09F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9105[0x7];                                     // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9106[0x3];                                     // 0x0A19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0A1C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x0A29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0A2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9107[0x5];                                     // 0x0A2B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0A30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_13;       // 0x0A38(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x0A44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9108[0x3];                                     // 0x0A45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0A48(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x0A54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0A55(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x0A56(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9109[0x1];                                     // 0x0A57(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUROUpdateRate_ReturnValue;             // 0x0A58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxDistanceFactor_ReturnValue;         // 0x0A5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0A60(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0A70(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_45;             // 0x0A80(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_46;             // 0x0A90(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_12;         // 0x0AA0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_47;             // 0x0AB0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_48;             // 0x0AC0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_49;             // 0x0AD0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0AE0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColor_Blue_ReturnValue;             // 0x0AF0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColor_Red_ReturnValue;              // 0x0B00(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColor_Green_ReturnValue;            // 0x0B10(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0B20(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CallFunc_Array_Get_Item_1;                         // 0x0B30(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0B3C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0B48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_910A[0x3];                                     // 0x0B49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0B4C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x0B58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0B59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_910B[0x6];                                     // 0x0B5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue_1;          // 0x0B60(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0B70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_910C[0x3];                                     // 0x0B71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_14;       // 0x0B74(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0B80(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0B90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0B94(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0B98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0B9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_3;                           // 0x0BA0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0BB0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_910D[0x4];                                     // 0x0BBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_50;             // 0x0BC0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0BD0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_13;         // 0x0BE0(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_51;             // 0x0BF8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_15;       // 0x0C08(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_910E[0x4];                                     // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0C18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_2;        // 0x0C20(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x0C30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_910F[0x7];                                     // 0x0C31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_52;             // 0x0C38(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugMainTick) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugMainTick");
static_assert(sizeof(RSBattleEnemy_C_DebugMainTick) == 0x000C48, "Wrong size on RSBattleEnemy_C_DebugMainTick");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_DebugMainTick::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, LPlayerLocation) == 0x000004, "Member 'RSBattleEnemy_C_DebugMainTick::LPlayerLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, LNotTargetInfoOffsetY) == 0x000010, "Member 'RSBattleEnemy_C_DebugMainTick::LNotTargetInfoOffsetY' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, LBattleFieldManager) == 0x000018, "Member 'RSBattleEnemy_C_DebugMainTick::LBattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, LBrainFieldManager) == 0x000020, "Member 'RSBattleEnemy_C_DebugMainTick::LBrainFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, LHudMain) == 0x000028, "Member 'RSBattleEnemy_C_DebugMainTick::LHudMain' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_Value) == 0x000030, "Member 'RSBattleEnemy_C_DebugMainTick::L_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_String) == 0x000038, "Member 'RSBattleEnemy_C_DebugMainTick::L_String' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_HUDMainGame) == 0x000048, "Member 'RSBattleEnemy_C_DebugMainTick::L_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_DispInfo) == 0x000050, "Member 'RSBattleEnemy_C_DebugMainTick::L_DispInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_offset) == 0x000060, "Member 'RSBattleEnemy_C_DebugMainTick::L_offset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_DebuggingManager) == 0x000068, "Member 'RSBattleEnemy_C_DebugMainTick::L_DebuggingManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, L_color) == 0x000070, "Member 'RSBattleEnemy_C_DebugMainTick::L_color' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_bool_Variable) == 0x000080, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_struct_Variable) == 0x000084, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_struct_Variable_1) == 0x000094, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_int_Array_Index_Variable) == 0x0000A4, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_bool_Variable_1) == 0x0000A8, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_string_Variable) == 0x0000B0, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_int_Loop_Counter_Variable) == 0x0000C0, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_int_Array_Index_Variable_1) == 0x0000C8, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_string_Variable_1) == 0x0000D0, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_SwitchInteger_CmpSuccess) == 0x0000E0, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerManager_PlayerManager) == 0x0000E8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayer_ReturnValue) == 0x000130, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_1) == 0x000138, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00013C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsDebugHasBrokenAllBattlefield_ReturnValue) == 0x000148, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsDebugHasBrokenAllBattlefield_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue) == 0x000150, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000160, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_IntToString_ReturnValue) == 0x000170, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000180, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000198, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetBattlefieldManager_BP_BattlefieldManager) == 0x0001A8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetBattlefieldManager_BP_BattlefieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_HaveDestroyedBattlefield_ReturnValue) == 0x0001B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_HaveDestroyedBattlefield_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_2) == 0x0001B1, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x0001B8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0001C8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0001D8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsBattlefieldWillAppear_ReturnValue) == 0x0001F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsBattlefieldWillAppear_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x0001F8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_InBranField_FromNative_ReturnValue) == 0x000208, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_InBranField_FromNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000210, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_3) == 0x000220, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_3) == 0x000230, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000248, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetBrainFieldManager_Manager) == 0x000258, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_4) == 0x000260, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_3) == 0x000278, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_int_Loop_Counter_Variable_1) == 0x00027C, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsInFence_ReturnValue) == 0x000280, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsInFence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsPlayerInFence_ReturnValue) == 0x000281, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsPlayerInFence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_4) == 0x000288, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_5) == 0x000298, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0002A8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0002B8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_5) == 0x0002C8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_6) == 0x0002E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0002F8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_IntInt_ReturnValue_1) == 0x000308, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000310, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_7) == 0x000320, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue) == 0x000338, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_6) == 0x000340, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_4) == 0x000350, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000358, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_8) == 0x000368, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_bool_Variable_2) == 0x000380, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000381, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000388, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_5) == 0x000398, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_9) == 0x0003A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsEvent_ReturnValue) == 0x0003B8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x0003BC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_7) == 0x0003C0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0003D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_10) == 0x0003E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_MakeArray_Array) == 0x0003F8, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000408, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Array_Get_Item) == 0x000410, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_6) == 0x000428, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Array_Length_ReturnValue) == 0x00042C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Less_IntInt_ReturnValue) == 0x000430, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetSearchAngle_Angle) == 0x000434, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetSearchAngle_Angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetCaptureArea_Area) == 0x000438, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetCaptureArea_Area' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetSensingArea_Area) == 0x00043C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetSensingArea_Area' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_FloatToString_ReturnValue) == 0x000440, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000450, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000460, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_X) == 0x000470, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Y) == 0x000474, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Z) == 0x000478, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000480, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_11) == 0x000490, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0004A8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0004AC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0004B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeVector_ReturnValue) == 0x0004BC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerController_ReturnValue) == 0x0004C8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ScreenPosition) == 0x0004D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ScreenPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ReturnValue) == 0x0004D8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_X) == 0x0004DC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_Y) == 0x0004E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0004E4, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0004E8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_7) == 0x0004EC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerManager_PlayerManager_1) == 0x0004F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_8) == 0x0004F8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayer_ReturnValue_1) == 0x000500, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_9) == 0x000508, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDistanceTo_ReturnValue) == 0x00050C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000510, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000514, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_10) == 0x000518, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue) == 0x000520, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_Select_Default) == 0x000530, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000540, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000550, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_Select_Default_1) == 0x000560, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_12) == 0x000570, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000588, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerController_ReturnValue_1) == 0x000598, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ScreenPosition_1) == 0x0005A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ScreenPosition_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ReturnValue_1) == 0x0005A8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_11) == 0x0005A9, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_X_1) == 0x0005AC, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_Y_1) == 0x0005B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0005B4, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0005B8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerController_ReturnValue_2) == 0x0005C8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ScreenPosition_2) == 0x0005D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ScreenPosition_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_ProjectWorldToScreenRED_ReturnValue_2) == 0x0005D8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_ProjectWorldToScreenRED_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_1) == 0x0005E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_X_2) == 0x0005F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector2D_Y_2) == 0x0005F4, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_15) == 0x0005F8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_12) == 0x000608, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x000610, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_13) == 0x000618, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x000620, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_DynamicCast_bSuccess) == 0x000628, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_CheckEnableOutput_IsEnable) == 0x000629, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_CheckEnableOutput_IsEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000630, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000640, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetEnemyManager_EnemyManager) == 0x000650, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_14) == 0x000658, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000660, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsEnemyIgnoreDamage_ReturnValue) == 0x000670, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsEnemyIgnoreDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsEnemyIgnoreDamage_ReturnValue_1) == 0x000671, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsEnemyIgnoreDamage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000674, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_2) == 0x000680, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000690, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0006A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_3) == 0x0006B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_4) == 0x0006C0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0006D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0006E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_22) == 0x0006F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000700, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_5) == 0x000710, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_6) == 0x000720, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000730, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_25) == 0x000740, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_26) == 0x000750, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_27) == 0x000760, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_7) == 0x000770, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDisplayName_ReturnValue_8) == 0x000780, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDisplayName_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_28) == 0x000790, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_29) == 0x0007A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_30) == 0x0007B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_31) == 0x0007C0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerManager_PlayerManager_2) == 0x0007D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerManager_PlayerManager_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_struct_Variable_2) == 0x0007D8, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_15) == 0x0007E8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayer_ReturnValue_2) == 0x0007F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_struct_Variable_3) == 0x0007F8, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_16) == 0x000808, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDistanceTo_ReturnValue_1) == 0x00080C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDistanceTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000810, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00081C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000820, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x000824, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_bool_Variable_3) == 0x000830, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_8) == 0x000834, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_Select_Default_2) == 0x000840, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_X_1) == 0x000850, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Y_1) == 0x000854, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Z_1) == 0x000858, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_9) == 0x00085C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000868, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_X_2) == 0x00086C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Y_2) == 0x000870, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Z_2) == 0x000874, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeVector_ReturnValue_1) == 0x000878, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000884, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeVector_ReturnValue_2) == 0x000888, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_10) == 0x000894, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_11) == 0x0008A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0008B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0008C0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_8) == 0x0008D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_9) == 0x0008E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_10) == 0x0008F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_12) == 0x000900, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_NameToString_ReturnValue) == 0x000910, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_11) == 0x000920, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_32) == 0x000930, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_33) == 0x000940, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_34) == 0x000950, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_35) == 0x000960, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_36) == 0x000970, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_37) == 0x000980, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_38) == 0x000990, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_39) == 0x0009A0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_40) == 0x0009B0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_41) == 0x0009C0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_42) == 0x0009D0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_43) == 0x0009E0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetPlayerPawn_ReturnValue) == 0x0009F0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_44) == 0x0009F8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_17) == 0x000A08, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_DynamicCast_AsRSBattle_Player) == 0x000A10, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_DynamicCast_bSuccess_1) == 0x000A18, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeVector_ReturnValue_3) == 0x000A1C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_18) == 0x000A28, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_19) == 0x000A29, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsLockTarget_ReturnValue) == 0x000A2A, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000A30, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_13) == 0x000A38, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_20) == 0x000A44, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Add_VectorVector_ReturnValue) == 0x000A48, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_21) == 0x000A54, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BooleanAND_ReturnValue) == 0x000A55, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_22) == 0x000A56, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetUROUpdateRate_ReturnValue) == 0x000A58, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetUROUpdateRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetMaxDistanceFactor_ReturnValue) == 0x000A5C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetMaxDistanceFactor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000A60, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000A70, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_45) == 0x000A80, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_46) == 0x000A90, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_BoolToString_ReturnValue_12) == 0x000AA0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_BoolToString_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_47) == 0x000AB0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_48) == 0x000AC0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_49) == 0x000AD0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_string_Variable_2) == 0x000AE0, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_LinearColor_Blue_ReturnValue) == 0x000AF0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_LinearColor_Blue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_LinearColor_Red_ReturnValue) == 0x000B00, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_LinearColor_Red_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_LinearColor_Green_ReturnValue) == 0x000B10, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_LinearColor_Green_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeLiteralString_ReturnValue) == 0x000B20, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Array_Get_Item_1) == 0x000B30, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Array_Length_ReturnValue_1) == 0x000B38, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000B3C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Less_IntInt_ReturnValue_1) == 0x000B48, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000B4C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_23) == 0x000B58, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000B59, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeLiteralString_ReturnValue_1) == 0x000B60, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeLiteralString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000B70, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_14) == 0x000B74, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, Temp_string_Variable_3) == 0x000B80, "Member 'RSBattleEnemy_C_DebugMainTick::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_X_3) == 0x000B90, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Y_3) == 0x000B94, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_BreakVector_Z_3) == 0x000B98, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000B9C, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, K2Node_Select_Default_3) == 0x000BA0, "Member 'RSBattleEnemy_C_DebugMainTick::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_MakeVector_ReturnValue_4) == 0x000BB0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_50) == 0x000BC0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000BD0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_StringToText_ReturnValue_13) == 0x000BE0, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_StringToText_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_51) == 0x000BF8, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_K2_GetActorLocation_ReturnValue_15) == 0x000C08, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_K2_GetActorLocation_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_GetDebuggingManager_Manager) == 0x000C18, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Conv_VectorToString_ReturnValue_2) == 0x000C20, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Conv_VectorToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_IsValid_ReturnValue_24) == 0x000C30, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMainTick, CallFunc_Concat_StrStr_ReturnValue_52) == 0x000C38, "Member 'RSBattleEnemy_C_DebugMainTick::CallFunc_Concat_StrStr_ReturnValue_52' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableInvincible
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_EnableInvincible final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9110[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharactersParameterComponent*          LParam;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EnableInvincible_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableInvincible) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EnableInvincible");
static_assert(sizeof(RSBattleEnemy_C_EnableInvincible) == 0x000018, "Wrong size on RSBattleEnemy_C_EnableInvincible");
static_assert(offsetof(RSBattleEnemy_C_EnableInvincible, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_EnableInvincible::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableInvincible, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_EnableInvincible::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableInvincible, LParam) == 0x000008, "Member 'RSBattleEnemy_C_EnableInvincible::LParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableInvincible, CallFunc_EnableInvincible_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_EnableInvincible::CallFunc_EnableInvincible_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueEnableMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsUniqueEnableMove final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueEnableMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUniqueEnableMove");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueEnableMove) == 0x000001, "Wrong size on RSBattleEnemy_C_IsUniqueEnableMove");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEnableMove, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueEnableMove::bEnable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetSpeedScale final
{
public:
	float                                         Param_SpeedScale;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSpeedScale) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetSpeedScale");
static_assert(sizeof(RSBattleEnemy_C_GetSpeedScale) == 0x000004, "Wrong size on RSBattleEnemy_C_GetSpeedScale");
static_assert(offsetof(RSBattleEnemy_C_GetSpeedScale, Param_SpeedScale) == 0x000000, "Member 'RSBattleEnemy_C_GetSpeedScale::Param_SpeedScale' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotDamageMotion
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsNotDamageMotion final
{
public:
	bool                                          Param_bNotDamageMotion;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_NotMotion;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotDamageMotion_bNotDamageMotion;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotDamageMotion_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotDamageMotion) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotDamageMotion");
static_assert(sizeof(RSBattleEnemy_C_IsNotDamageMotion) == 0x000004, "Wrong size on RSBattleEnemy_C_IsNotDamageMotion");
static_assert(offsetof(RSBattleEnemy_C_IsNotDamageMotion, Param_bNotDamageMotion) == 0x000000, "Member 'RSBattleEnemy_C_IsNotDamageMotion::Param_bNotDamageMotion' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotDamageMotion, L_NotMotion) == 0x000001, "Member 'RSBattleEnemy_C_IsNotDamageMotion::L_NotMotion' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotDamageMotion, CallFunc_IsNotDamageMotion_bNotDamageMotion) == 0x000002, "Member 'RSBattleEnemy_C_IsNotDamageMotion::CallFunc_IsNotDamageMotion_bNotDamageMotion' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotDamageMotion, CallFunc_IsNotDamageMotion_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsNotDamageMotion::CallFunc_IsNotDamageMotion_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EventDeath
// 0x01F8 (0x01F8 - 0x0000)
struct RSBattleEnemy_C_EventDeath final
{
public:
	bool                                          WatchDeath;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9111[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       L_mainPlayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9112[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           K2Node_MakeStruct_HCHitResult;                     // 0x0028(0x01C0)(ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9113[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHP_MaxHP;                           // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_EventDeath) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EventDeath");
static_assert(sizeof(RSBattleEnemy_C_EventDeath) == 0x0001F8, "Wrong size on RSBattleEnemy_C_EventDeath");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, WatchDeath) == 0x000000, "Member 'RSBattleEnemy_C_EventDeath::WatchDeath' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_EventDeath::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, L_mainPlayer) == 0x000008, "Member 'RSBattleEnemy_C_EventDeath::L_mainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_OnDead_Dummy) == 0x000011, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_IsDead_bDead) == 0x000012, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_GetPlayer_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, K2Node_MakeStruct_HCHitResult) == 0x000028, "Member 'RSBattleEnemy_C_EventDeath::K2Node_MakeStruct_HCHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_IsValid_ReturnValue_1) == 0x0001E8, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_GetMaxHP_MaxHP) == 0x0001EC, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventDeath, CallFunc_Add_IntInt_ReturnValue) == 0x0001F0, "Member 'RSBattleEnemy_C_EventDeath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SwitchMaterialStealth
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_SwitchMaterialStealth final
{
public:
	bool                                          SwitchStealth;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9114[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9115[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9116[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreSwitchMaterial_ReturnValue;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9117[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_SwitchMaterialExclude_LayerID;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SwitchMaterialStealth) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SwitchMaterialStealth");
static_assert(sizeof(RSBattleEnemy_C_SwitchMaterialStealth) == 0x000050, "Wrong size on RSBattleEnemy_C_SwitchMaterialStealth");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, SwitchStealth) == 0x000000, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::SwitchStealth' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_GetBodyMeshes_Meshes) == 0x000010, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_RestoreSwitchMaterial_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_RestoreSwitchMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, K2Node_MakeArray_Array) == 0x000038, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchMaterialStealth, CallFunc_SwitchMaterialExclude_LayerID) == 0x000048, "Member 'RSBattleEnemy_C_SwitchMaterialStealth::CallFunc_SwitchMaterialExclude_LayerID' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMaterialStealthParameter
// 0x0088 (0x0088 - 0x0000)
struct RSBattleEnemy_C_SetMaterialStealthParameter final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LParamValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LStealthMat;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9118[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LStealthRate;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         BodyMeshes;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         CallFunc_GetMaterialStealthParamEnemy_StealthRate; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaterialStealthParamEnemy_BaseMatVanish; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMaterialStealthParamEnemy_IsStealthMat; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9119[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911A[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetMaterialStealthParameter) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetMaterialStealthParameter");
static_assert(sizeof(RSBattleEnemy_C_SetMaterialStealthParameter) == 0x000088, "Wrong size on RSBattleEnemy_C_SetMaterialStealthParameter");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, Rate) == 0x000000, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::Rate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, LParamValue) == 0x000004, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::LParamValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, LStealthMat) == 0x000010, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::LStealthMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, LStealthRate) == 0x000014, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::LStealthRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, BodyMeshes) == 0x000018, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::BodyMeshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, Temp_int_Variable) == 0x000028, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, Temp_int_Variable_1) == 0x00002C, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_GetBodyMeshes_Meshes) == 0x000038, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_GetMaterialStealthParamEnemy_StealthRate) == 0x000048, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_GetMaterialStealthParamEnemy_StealthRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_GetMaterialStealthParamEnemy_BaseMatVanish) == 0x00004C, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_GetMaterialStealthParamEnemy_BaseMatVanish' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_GetMaterialStealthParamEnemy_IsStealthMat) == 0x000050, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_GetMaterialStealthParamEnemy_IsStealthMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_GetEnemyManager_Manager) == 0x000058, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_IsStealthSeeEnable_Return) == 0x000061, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Array_Get_Item) == 0x000068, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Array_Length_ReturnValue_1) == 0x00007C, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_Less_IntInt_ReturnValue_1) == 0x000081, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameter, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000082, "Member 'RSBattleEnemy_C_SetMaterialStealthParameter::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetMaterialStealthParameterFromTime
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetMaterialStealthParameterFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetMaterialStealthParameterFromTime) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetMaterialStealthParameterFromTime");
static_assert(sizeof(RSBattleEnemy_C_SetMaterialStealthParameterFromTime) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetMaterialStealthParameterFromTime");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameterFromTime, Time) == 0x000000, "Member 'RSBattleEnemy_C_SetMaterialStealthParameterFromTime::Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameterFromTime, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax) == 0x000004, "Member 'RSBattleEnemy_C_SetMaterialStealthParameterFromTime::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetMaterialStealthParameterFromTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetMaterialStealthParameterFromTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CameraAttentionStartDelete
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_CameraAttentionStartDelete final
{
public:
	class UCurveFloat*                            ActorCurveIn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeFov;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetFov;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FovCurveIn;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CameraAttentionStartDelete) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CameraAttentionStartDelete");
static_assert(sizeof(RSBattleEnemy_C_CameraAttentionStartDelete) == 0x000030, "Wrong size on RSBattleEnemy_C_CameraAttentionStartDelete");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, ActorCurveIn) == 0x000000, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::ActorCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, bChangeFov) == 0x000008, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::bChangeFov' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, TargetFov) == 0x00000C, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::TargetFov' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, FovCurveIn) == 0x000010, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::FovCurveIn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, Dummy) == 0x000018, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionStartDelete, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_CameraAttentionStartDelete::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CameraAttentionEndDelete
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_CameraAttentionEndDelete final
{
public:
	class UCurveFloat*                            FovCurveOut;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CameraAttentionEndDelete) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CameraAttentionEndDelete");
static_assert(sizeof(RSBattleEnemy_C_CameraAttentionEndDelete) == 0x000020, "Wrong size on RSBattleEnemy_C_CameraAttentionEndDelete");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEndDelete, FovCurveOut) == 0x000000, "Member 'RSBattleEnemy_C_CameraAttentionEndDelete::FovCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEndDelete, Dummy) == 0x000008, "Member 'RSBattleEnemy_C_CameraAttentionEndDelete::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEndDelete, CallFunc_GetPlayerManager_PlayerManager) == 0x000010, "Member 'RSBattleEnemy_C_CameraAttentionEndDelete::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEndDelete, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_CameraAttentionEndDelete::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Get Search Range
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_Get_Search_Range final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRange;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSearchRangeNative_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_Get_Search_Range) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Get_Search_Range");
static_assert(sizeof(RSBattleEnemy_C_Get_Search_Range) == 0x00000C, "Wrong size on RSBattleEnemy_C_Get_Search_Range");
static_assert(offsetof(RSBattleEnemy_C_Get_Search_Range, Range) == 0x000000, "Member 'RSBattleEnemy_C_Get_Search_Range::Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Get_Search_Range, LRange) == 0x000004, "Member 'RSBattleEnemy_C_Get_Search_Range::LRange' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Get_Search_Range, CallFunc_GetSearchRangeNative_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_Get_Search_Range::CallFunc_GetSearchRangeNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSearchAngle
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetSearchAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LAngle;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSearchAngleNative_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSearchAngle) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetSearchAngle");
static_assert(sizeof(RSBattleEnemy_C_GetSearchAngle) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetSearchAngle");
static_assert(offsetof(RSBattleEnemy_C_GetSearchAngle, Angle) == 0x000000, "Member 'RSBattleEnemy_C_GetSearchAngle::Angle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSearchAngle, LAngle) == 0x000004, "Member 'RSBattleEnemy_C_GetSearchAngle::LAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSearchAngle, CallFunc_GetSearchAngleNative_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetSearchAngle::CallFunc_GetSearchAngleNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSensingArea
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetSensingArea final
{
public:
	float                                         Area;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LArea;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSensingAreaNative_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSensingArea) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetSensingArea");
static_assert(sizeof(RSBattleEnemy_C_GetSensingArea) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetSensingArea");
static_assert(offsetof(RSBattleEnemy_C_GetSensingArea, Area) == 0x000000, "Member 'RSBattleEnemy_C_GetSensingArea::Area' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSensingArea, LArea) == 0x000004, "Member 'RSBattleEnemy_C_GetSensingArea::LArea' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSensingArea, CallFunc_GetSensingAreaNative_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetSensingArea::CallFunc_GetSensingAreaNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCaptureArea
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetCaptureArea final
{
public:
	float                                         Area;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LArea;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCaptureAreaNative_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCaptureArea) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCaptureArea");
static_assert(sizeof(RSBattleEnemy_C_GetCaptureArea) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetCaptureArea");
static_assert(offsetof(RSBattleEnemy_C_GetCaptureArea, Area) == 0x000000, "Member 'RSBattleEnemy_C_GetCaptureArea::Area' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCaptureArea, LArea) == 0x000004, "Member 'RSBattleEnemy_C_GetCaptureArea::LArea' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCaptureArea, CallFunc_GetCaptureAreaNative_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetCaptureArea::CallFunc_GetCaptureAreaNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMoveArea
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetMoveArea final
{
public:
	float                                         Area;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LArea;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMoveAreaNative_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMoveArea) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetMoveArea");
static_assert(sizeof(RSBattleEnemy_C_GetMoveArea) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetMoveArea");
static_assert(offsetof(RSBattleEnemy_C_GetMoveArea, Area) == 0x000000, "Member 'RSBattleEnemy_C_GetMoveArea::Area' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMoveArea, LArea) == 0x000004, "Member 'RSBattleEnemy_C_GetMoveArea::LArea' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMoveArea, CallFunc_GetMoveAreaNative_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetMoveArea::CallFunc_GetMoveAreaNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDefault_SearchRange
// 0x03F8 (0x03F8 - 0x0000)
struct RSBattleEnemy_C_SetDefault_SearchRange final
{
public:
	struct FCharactersParameter                   LPram;                                             // 0x0000(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDefault_SearchRange) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDefault_SearchRange");
static_assert(sizeof(RSBattleEnemy_C_SetDefault_SearchRange) == 0x0003F8, "Wrong size on RSBattleEnemy_C_SetDefault_SearchRange");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchRange, LPram) == 0x000000, "Member 'RSBattleEnemy_C_SetDefault_SearchRange::LPram' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchRange, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleEnemy_C_SetDefault_SearchRange::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchRange, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0003F0, "Member 'RSBattleEnemy_C_SetDefault_SearchRange::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchRange, CallFunc_IsValid_ReturnValue) == 0x0003F1, "Member 'RSBattleEnemy_C_SetDefault_SearchRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDefault_SearchAngle
// 0x03F8 (0x03F8 - 0x0000)
struct RSBattleEnemy_C_SetDefault_SearchAngle final
{
public:
	struct FCharactersParameter                   LPram;                                             // 0x0000(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDefault_SearchAngle) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDefault_SearchAngle");
static_assert(sizeof(RSBattleEnemy_C_SetDefault_SearchAngle) == 0x0003F8, "Wrong size on RSBattleEnemy_C_SetDefault_SearchAngle");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchAngle, LPram) == 0x000000, "Member 'RSBattleEnemy_C_SetDefault_SearchAngle::LPram' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchAngle, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleEnemy_C_SetDefault_SearchAngle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchAngle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0003F0, "Member 'RSBattleEnemy_C_SetDefault_SearchAngle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SearchAngle, CallFunc_IsValid_ReturnValue) == 0x0003F1, "Member 'RSBattleEnemy_C_SetDefault_SearchAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDefault_SensingArea
// 0x03F8 (0x03F8 - 0x0000)
struct RSBattleEnemy_C_SetDefault_SensingArea final
{
public:
	struct FCharactersParameter                   LPram;                                             // 0x0000(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDefault_SensingArea) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDefault_SensingArea");
static_assert(sizeof(RSBattleEnemy_C_SetDefault_SensingArea) == 0x0003F8, "Wrong size on RSBattleEnemy_C_SetDefault_SensingArea");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SensingArea, LPram) == 0x000000, "Member 'RSBattleEnemy_C_SetDefault_SensingArea::LPram' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SensingArea, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleEnemy_C_SetDefault_SensingArea::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SensingArea, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0003F0, "Member 'RSBattleEnemy_C_SetDefault_SensingArea::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_SensingArea, CallFunc_IsValid_ReturnValue) == 0x0003F1, "Member 'RSBattleEnemy_C_SetDefault_SensingArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDefault_CaptureArea
// 0x03F8 (0x03F8 - 0x0000)
struct RSBattleEnemy_C_SetDefault_CaptureArea final
{
public:
	struct FCharactersParameter                   LPram;                                             // 0x0000(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDefault_CaptureArea) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDefault_CaptureArea");
static_assert(sizeof(RSBattleEnemy_C_SetDefault_CaptureArea) == 0x0003F8, "Wrong size on RSBattleEnemy_C_SetDefault_CaptureArea");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_CaptureArea, LPram) == 0x000000, "Member 'RSBattleEnemy_C_SetDefault_CaptureArea::LPram' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_CaptureArea, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleEnemy_C_SetDefault_CaptureArea::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_CaptureArea, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0003F0, "Member 'RSBattleEnemy_C_SetDefault_CaptureArea::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_CaptureArea, CallFunc_IsValid_ReturnValue) == 0x0003F1, "Member 'RSBattleEnemy_C_SetDefault_CaptureArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDefault_TerritoryArea
// 0x03F8 (0x03F8 - 0x0000)
struct RSBattleEnemy_C_SetDefault_TerritoryArea final
{
public:
	struct FCharactersParameter                   LPram;                                             // 0x0000(0x01F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersParameter                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x01F8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDefault_TerritoryArea) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDefault_TerritoryArea");
static_assert(sizeof(RSBattleEnemy_C_SetDefault_TerritoryArea) == 0x0003F8, "Wrong size on RSBattleEnemy_C_SetDefault_TerritoryArea");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_TerritoryArea, LPram) == 0x000000, "Member 'RSBattleEnemy_C_SetDefault_TerritoryArea::LPram' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_TerritoryArea, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'RSBattleEnemy_C_SetDefault_TerritoryArea::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_TerritoryArea, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0003F0, "Member 'RSBattleEnemy_C_SetDefault_TerritoryArea::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDefault_TerritoryArea, CallFunc_IsValid_ReturnValue) == 0x0003F1, "Member 'RSBattleEnemy_C_SetDefault_TerritoryArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStealthHalf
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnStealthHalf final
{
public:
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStealthHalf) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnStealthHalf");
static_assert(sizeof(RSBattleEnemy_C_OnStealthHalf) == 0x000001, "Wrong size on RSBattleEnemy_C_OnStealthHalf");
static_assert(offsetof(RSBattleEnemy_C_OnStealthHalf, CallFunc_IsStateStealth_Return) == 0x000000, "Member 'RSBattleEnemy_C_OnStealthHalf::CallFunc_IsStateStealth_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OffStealthHalf
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OffStealthHalf final
{
public:
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OffStealthHalf) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OffStealthHalf");
static_assert(sizeof(RSBattleEnemy_C_OffStealthHalf) == 0x000001, "Wrong size on RSBattleEnemy_C_OffStealthHalf");
static_assert(offsetof(RSBattleEnemy_C_OffStealthHalf, CallFunc_IsStateStealth_Return) == 0x000000, "Member 'RSBattleEnemy_C_OffStealthHalf::CallFunc_IsStateStealth_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateStealthHalf
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_UpdateStealthHalf final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911E[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_UpdateStealthHalf) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateStealthHalf");
static_assert(sizeof(RSBattleEnemy_C_UpdateStealthHalf) == 0x000010, "Wrong size on RSBattleEnemy_C_UpdateStealthHalf");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealthHalf, DeltaTime) == 0x000000, "Member 'RSBattleEnemy_C_UpdateStealthHalf::DeltaTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealthHalf, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_UpdateStealthHalf::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealthHalf, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateStealthHalf::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealthHalf, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateStealthHalf::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateStealthHalf, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateStealthHalf::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetStealthHalfTime
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetStealthHalfTime final
{
public:
	bool                                          CallFunc_IsDamageAnimKindKnockBack_ReturnValue;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageAnimKindLaunch_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetStealthHalfTime) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetStealthHalfTime");
static_assert(sizeof(RSBattleEnemy_C_SetStealthHalfTime) == 0x000002, "Wrong size on RSBattleEnemy_C_SetStealthHalfTime");
static_assert(offsetof(RSBattleEnemy_C_SetStealthHalfTime, CallFunc_IsDamageAnimKindKnockBack_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_SetStealthHalfTime::CallFunc_IsDamageAnimKindKnockBack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthHalfTime, CallFunc_IsDamageAnimKindLaunch_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetStealthHalfTime::CallFunc_IsDamageAnimKindLaunch_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateIconOn
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_BadStateIconOn final
{
public:
	struct FBadStateAddParticleData               Data;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Handle;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_BadStateIconOn_Handle;                    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateIconOn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_BadStateIconOn");
static_assert(sizeof(RSBattleEnemy_C_BadStateIconOn) == 0x000050, "Wrong size on RSBattleEnemy_C_BadStateIconOn");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, Data) == 0x000000, "Member 'RSBattleEnemy_C_BadStateIconOn::Data' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, Handle) == 0x000028, "Member 'RSBattleEnemy_C_BadStateIconOn::Handle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, Param_LEnemyManager) == 0x000030, "Member 'RSBattleEnemy_C_BadStateIconOn::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, CallFunc_GetEnemyManager_Manager) == 0x000038, "Member 'RSBattleEnemy_C_BadStateIconOn::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, CallFunc_BadStateIconOn_Handle) == 0x000040, "Member 'RSBattleEnemy_C_BadStateIconOn::CallFunc_BadStateIconOn_Handle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, CallFunc_IsStateStealth_Return) == 0x000048, "Member 'RSBattleEnemy_C_BadStateIconOn::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_BadStateIconOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateIconOn, CallFunc_IsStealthSeeEnable_Return) == 0x00004A, "Member 'RSBattleEnemy_C_BadStateIconOn::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueEffectiveSas
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_IsUniqueEffectiveSas final
{
public:
	class AActor*                                 AttackActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEffectiveSas;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WinceRate;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockBackRate;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRate;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashRate;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueEffectiveSas) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsUniqueEffectiveSas");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueEffectiveSas) == 0x000020, "Wrong size on RSBattleEnemy_C_IsUniqueEffectiveSas");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, AttackActor) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, IsEffectiveSas) == 0x000008, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::IsEffectiveSas' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, WinceRate) == 0x00000C, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::WinceRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, KnockBackRate) == 0x000010, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::KnockBackRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, DownRate) == 0x000014, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::DownRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueEffectiveSas, CrashRate) == 0x000018, "Member 'RSBattleEnemy_C_IsUniqueEffectiveSas::CrashRate' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAcceptanceRadius
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetAcceptanceRadius final
{
public:
	float                                         AcceptanceRadius;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetAcceptanceRadius) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetAcceptanceRadius");
static_assert(sizeof(RSBattleEnemy_C_GetAcceptanceRadius) == 0x000004, "Wrong size on RSBattleEnemy_C_GetAcceptanceRadius");
static_assert(offsetof(RSBattleEnemy_C_GetAcceptanceRadius, AcceptanceRadius) == 0x000000, "Member 'RSBattleEnemy_C_GetAcceptanceRadius::AcceptanceRadius' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.KickDetectIcon
// 0x00F0 (0x00F0 - 0x0000)
struct RSBattleEnemy_C_KickDetectIcon final
{
public:
	EEnemyFindPlayerType                          FindType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9120[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_CameraOffset;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_EffectRot;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_SocketLocation;                                  // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CameraLocation;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9121[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        L_SetIcon;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        L_Lost;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        L_Battle;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        L_Notice;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        L_NonBattle;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9122[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBadStateIconCameraOffset_Value;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9123[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9124[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStateAddParticleData               CallFunc_GetBadStateIconParam_ParamData;           // 0x0090(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_KickDetectIcon) == 0x000008, "Wrong alignment on RSBattleEnemy_C_KickDetectIcon");
static_assert(sizeof(RSBattleEnemy_C_KickDetectIcon) == 0x0000F0, "Wrong size on RSBattleEnemy_C_KickDetectIcon");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, FindType) == 0x000000, "Member 'RSBattleEnemy_C_KickDetectIcon::FindType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_KickDetectIcon::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_CameraOffset) == 0x000004, "Member 'RSBattleEnemy_C_KickDetectIcon::L_CameraOffset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_EffectRot) == 0x000008, "Member 'RSBattleEnemy_C_KickDetectIcon::L_EffectRot' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_SocketLocation) == 0x000014, "Member 'RSBattleEnemy_C_KickDetectIcon::L_SocketLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_CameraLocation) == 0x000020, "Member 'RSBattleEnemy_C_KickDetectIcon::L_CameraLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_SetIcon) == 0x000030, "Member 'RSBattleEnemy_C_KickDetectIcon::L_SetIcon' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_Lost) == 0x000038, "Member 'RSBattleEnemy_C_KickDetectIcon::L_Lost' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_Battle) == 0x000040, "Member 'RSBattleEnemy_C_KickDetectIcon::L_Battle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_Notice) == 0x000048, "Member 'RSBattleEnemy_C_KickDetectIcon::L_Notice' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, L_NonBattle) == 0x000050, "Member 'RSBattleEnemy_C_KickDetectIcon::L_NonBattle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000058, "Member 'RSBattleEnemy_C_KickDetectIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000059, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_GetBadStateIconCameraOffset_Value) == 0x00005C, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_GetBadStateIconCameraOffset_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_FMax_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Vector_Distance_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_GetCameraLocation_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_IsValid_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_GetBadStateIconParam_ParamData) == 0x000090, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_GetBadStateIconParam_ParamData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_K2_GetComponentScale_ReturnValue) == 0x0000B8, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Divide_VectorVector_ReturnValue) == 0x0000C4, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_GetSocketLocation_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000DC, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_KickDetectIcon, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_KickDetectIcon::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StopDetectIcon
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_StopDetectIcon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StopDetectIcon) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StopDetectIcon");
static_assert(sizeof(RSBattleEnemy_C_StopDetectIcon) == 0x000002, "Wrong size on RSBattleEnemy_C_StopDetectIcon");
static_assert(offsetof(RSBattleEnemy_C_StopDetectIcon, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_StopDetectIcon::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StopDetectIcon, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_StopDetectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartEnableWeak
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartEnableWeak final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartEnableWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartEnableWeak");
static_assert(sizeof(RSBattleEnemy_C_StartEnableWeak) == 0x000001, "Wrong size on RSBattleEnemy_C_StartEnableWeak");
static_assert(offsetof(RSBattleEnemy_C_StartEnableWeak, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_StartEnableWeak::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EndEnableWeak
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_EndEnableWeak final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EndEnableWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EndEnableWeak");
static_assert(sizeof(RSBattleEnemy_C_EndEnableWeak) == 0x000001, "Wrong size on RSBattleEnemy_C_EndEnableWeak");
static_assert(offsetof(RSBattleEnemy_C_EndEnableWeak, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_EndEnableWeak::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReserveBaseMontage
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_ReserveBaseMontage final
{
public:
	class UAnimMontage*                           Param_BaseMontage;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPlayRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9125[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NewLocalVar_2;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_ReserveBaseMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ReserveBaseMontage");
static_assert(sizeof(RSBattleEnemy_C_ReserveBaseMontage) == 0x000018, "Wrong size on RSBattleEnemy_C_ReserveBaseMontage");
static_assert(offsetof(RSBattleEnemy_C_ReserveBaseMontage, Param_BaseMontage) == 0x000000, "Member 'RSBattleEnemy_C_ReserveBaseMontage::Param_BaseMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReserveBaseMontage, LPlayRate) == 0x000008, "Member 'RSBattleEnemy_C_ReserveBaseMontage::LPlayRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ReserveBaseMontage, NewLocalVar_2) == 0x000010, "Member 'RSBattleEnemy_C_ReserveBaseMontage::NewLocalVar_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateBaseMontage
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_UpdateBaseMontage final
{
public:
	float                                         LPlayRate;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9126[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NewLocalVar_2;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateBaseMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateBaseMontage");
static_assert(sizeof(RSBattleEnemy_C_UpdateBaseMontage) == 0x000018, "Wrong size on RSBattleEnemy_C_UpdateBaseMontage");
static_assert(offsetof(RSBattleEnemy_C_UpdateBaseMontage, LPlayRate) == 0x000000, "Member 'RSBattleEnemy_C_UpdateBaseMontage::LPlayRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBaseMontage, NewLocalVar_2) == 0x000008, "Member 'RSBattleEnemy_C_UpdateBaseMontage::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateBaseMontage, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateBaseMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPathAreaOut
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_IsPathAreaOut final
{
public:
	bool                                          AreaOut;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TmpCheck;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9127[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetGroundLocationSimple_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9128[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9129[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_912A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPathAreaOut) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsPathAreaOut");
static_assert(sizeof(RSBattleEnemy_C_IsPathAreaOut) == 0x000050, "Wrong size on RSBattleEnemy_C_IsPathAreaOut");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, AreaOut) == 0x000000, "Member 'RSBattleEnemy_C_IsPathAreaOut::AreaOut' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, TmpCheck) == 0x000001, "Member 'RSBattleEnemy_C_IsPathAreaOut::TmpCheck' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RSBattleEnemy_C_IsPathAreaOut::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_IsPathAreaOut::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'RSBattleEnemy_C_IsPathAreaOut::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Not_PreBool_ReturnValue_1) == 0x000012, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_GetGroundLocationSimple_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_GetGroundLocationSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Array_Get_Item) == 0x00002C, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_CheckDistance_bResult) == 0x000038, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPathAreaOut, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_IsPathAreaOut::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PlayGeneralBrainCrashSequence
// 0x0220 (0x0220 - 0x0000)
struct RSBattleEnemy_C_PlayGeneralBrainCrashSequence final
{
public:
	struct FMovieSceneObjectBindingID             TmpBindingID;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_912B[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_912C[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_912D[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_912E[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_1;                          // 0x0110(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_912F[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList; // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList; // 0x0138(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9130[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9131[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_2;                          // 0x0160(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingID_IsFind;        // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9132[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_GetSequenceObjectBindingID_ReturnValue;   // 0x0174(0x0018)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9133[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_3;                          // 0x0190(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_4;                          // 0x01A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_5;                          // 0x01B8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_6;                          // 0x01C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9134[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9135[0x2];                                     // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1; // 0x01E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1; // 0x01F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1; // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9136[0x1];                                     // 0x020B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindSubstring_ReturnValue_1;              // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9137[0x3];                                     // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence) == 0x000010, "Wrong alignment on RSBattleEnemy_C_PlayGeneralBrainCrashSequence");
static_assert(sizeof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence) == 0x000220, "Wrong size on RSBattleEnemy_C_PlayGeneralBrainCrashSequence");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, TmpBindingID) == 0x000000, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::TmpBindingID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Array_Index_Variable) == 0x000018, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Loop_Num_Variable_1) == 0x000064, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x00006C, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000F4, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array) == 0x0000F8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_IsValid_ReturnValue_1) == 0x000109, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_bool_True_if_break_was_hit_Variable) == 0x00010A, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Not_PreBool_ReturnValue) == 0x00010B, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_1) == 0x000110, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Array_Index_Variable_1) == 0x000120, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList) == 0x000128, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList) == 0x000138, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind) == 0x000148, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Array_Length_ReturnValue) == 0x00014C, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_FindSubstring_ReturnValue) == 0x000150, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000154, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000158, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_SelectFloat_ReturnValue) == 0x00015C, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_2) == 0x000160, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingID_IsFind) == 0x000170, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingID_IsFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingID_ReturnValue) == 0x000174, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_3) == 0x000190, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_4) == 0x0001A0, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequencePlayer_ReturnValue) == 0x0001B0, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_5) == 0x0001B8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, K2Node_MakeArray_Array_6) == 0x0001C8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_int_Loop_Counter_Variable_1) == 0x0001D8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001DC, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001E0, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_BooleanAND_ReturnValue) == 0x0001E4, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, Temp_bool_True_if_break_was_hit_Variable_1) == 0x0001E5, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1) == 0x0001E8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1) == 0x0001F8, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1) == 0x000208, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Not_PreBool_ReturnValue_1) == 0x000209, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_BooleanAND_ReturnValue_1) == 0x00020A, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_FindSubstring_ReturnValue_1) == 0x00020C, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_FindSubstring_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000210, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_Array_Length_ReturnValue_1) == 0x000214, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_IsValid_ReturnValue_2) == 0x000218, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayGeneralBrainCrashSequence, CallFunc_IsValid_ReturnValue_3) == 0x000219, "Member 'RSBattleEnemy_C_PlayGeneralBrainCrashSequence::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnStartAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnStartAction");
static_assert(sizeof(RSBattleEnemy_C_OnStartAction) == 0x000001, "Wrong size on RSBattleEnemy_C_OnStartAction");
static_assert(offsetof(RSBattleEnemy_C_OnStartAction, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnStartAction::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableCharacterTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsEnableCharacterTick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_enable;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableCharacterTick_bEnable;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableCharacterTick) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnableCharacterTick");
static_assert(sizeof(RSBattleEnemy_C_IsEnableCharacterTick) == 0x000004, "Wrong size on RSBattleEnemy_C_IsEnableCharacterTick");
static_assert(offsetof(RSBattleEnemy_C_IsEnableCharacterTick, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableCharacterTick::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableCharacterTick, L_enable) == 0x000001, "Member 'RSBattleEnemy_C_IsEnableCharacterTick::L_enable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableCharacterTick, CallFunc_GetEnemySpawn_return) == 0x000002, "Member 'RSBattleEnemy_C_IsEnableCharacterTick::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableCharacterTick, CallFunc_IsEnableCharacterTick_bEnable) == 0x000003, "Member 'RSBattleEnemy_C_IsEnableCharacterTick::CallFunc_IsEnableCharacterTick_bEnable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnBrainFieldMoveInner
// 0x0005 (0x0005 - 0x0000)
struct RSBattleEnemy_C_OnBrainFieldMoveInner final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseEffect_Native_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_isvisible;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnBrainFieldMoveInner) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnBrainFieldMoveInner");
static_assert(sizeof(RSBattleEnemy_C_OnBrainFieldMoveInner) == 0x000005, "Wrong size on RSBattleEnemy_C_OnBrainFieldMoveInner");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldMoveInner, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnBrainFieldMoveInner::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldMoveInner, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnBrainFieldMoveInner::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldMoveInner, CallFunc_IsUseEffect_Native_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_OnBrainFieldMoveInner::CallFunc_IsUseEffect_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldMoveInner, CallFunc_IsVisible_isvisible) == 0x000003, "Member 'RSBattleEnemy_C_OnBrainFieldMoveInner::CallFunc_IsVisible_isvisible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnBrainFieldMoveInner, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_OnBrainFieldMoveInner::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateFall
// 0x008C (0x008C - 0x0000)
struct RSBattleEnemy_C_UpdateFall final
{
public:
	struct FHitResult                             CallFunc_GetCharacterMovementGroundInfoSimple_result; // 0x0000(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateFall) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateFall");
static_assert(sizeof(RSBattleEnemy_C_UpdateFall) == 0x00008C, "Wrong size on RSBattleEnemy_C_UpdateFall");
static_assert(offsetof(RSBattleEnemy_C_UpdateFall, CallFunc_GetCharacterMovementGroundInfoSimple_result) == 0x000000, "Member 'RSBattleEnemy_C_UpdateFall::CallFunc_GetCharacterMovementGroundInfoSimple_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFall, CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_UpdateFall::CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFall, CallFunc_IsValid_ReturnValue) == 0x000089, "Member 'RSBattleEnemy_C_UpdateFall::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateFall, CallFunc_IsValid_ReturnValue_1) == 0x00008A, "Member 'RSBattleEnemy_C_UpdateFall::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnPathAreaOut
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnPathAreaOut final
{
public:
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnPathAreaOut) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnPathAreaOut");
static_assert(sizeof(RSBattleEnemy_C_OnPathAreaOut) == 0x000001, "Wrong size on RSBattleEnemy_C_OnPathAreaOut");
static_assert(offsetof(RSBattleEnemy_C_OnPathAreaOut, CallFunc_Stealth_End_Return) == 0x000000, "Member 'RSBattleEnemy_C_OnPathAreaOut::CallFunc_Stealth_End_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownLoop
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownLoop final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownLoop) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownLoop");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownLoop) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownLoop");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownLoop, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownLoop::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNoMoveAnim
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsNoMoveAnim final
{
public:
	bool                                          bNoMoveAnim;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNoMoveAnim) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNoMoveAnim");
static_assert(sizeof(RSBattleEnemy_C_IsNoMoveAnim) == 0x000001, "Wrong size on RSBattleEnemy_C_IsNoMoveAnim");
static_assert(offsetof(RSBattleEnemy_C_IsNoMoveAnim, bNoMoveAnim) == 0x000000, "Member 'RSBattleEnemy_C_IsNoMoveAnim::bNoMoveAnim' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCreateBossCore
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsCreateBossCore final
{
public:
	bool                                          bCreateBossCore;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCreateBossCore) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsCreateBossCore");
static_assert(sizeof(RSBattleEnemy_C_IsCreateBossCore) == 0x000001, "Wrong size on RSBattleEnemy_C_IsCreateBossCore");
static_assert(offsetof(RSBattleEnemy_C_IsCreateBossCore, bCreateBossCore) == 0x000000, "Member 'RSBattleEnemy_C_IsCreateBossCore::bCreateBossCore' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RepopEntry
// 0x0150 (0x0150 - 0x0000)
struct RSBattleEnemy_C_RepopEntry final
{
public:
	bool                                          TmpNotSimulatorMission;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9138[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TmpRepopProbability;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TmpRepopTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9139[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TmpLocationName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          EnableRepop;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TmpRepop;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_913A[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_913B[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_913C[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentLocationAndArea_LocationID;     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentLocationAndArea_AreaID;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_913D[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMoveArea_ReturnValue;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_913E[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_913F[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9140[0x1];                                     // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetPackagePath_OutName;                   // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPackagePath_ReturnValue;               // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9141[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9142[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRepopCharaInList_Inlist;             // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RepopEntry) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RepopEntry");
static_assert(sizeof(RSBattleEnemy_C_RepopEntry) == 0x000150, "Wrong size on RSBattleEnemy_C_RepopEntry");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, TmpNotSimulatorMission) == 0x000000, "Member 'RSBattleEnemy_C_RepopEntry::TmpNotSimulatorMission' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, TmpRepopProbability) == 0x000004, "Member 'RSBattleEnemy_C_RepopEntry::TmpRepopProbability' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, TmpRepopTime) == 0x000008, "Member 'RSBattleEnemy_C_RepopEntry::TmpRepopTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, TmpLocationName) == 0x000010, "Member 'RSBattleEnemy_C_RepopEntry::TmpLocationName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, EnableRepop) == 0x000020, "Member 'RSBattleEnemy_C_RepopEntry::EnableRepop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, TmpRepop) == 0x000021, "Member 'RSBattleEnemy_C_RepopEntry::TmpRepop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000028, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsMissionActive_ReturnValue) == 0x000031, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetSceneManager_SceneManager) == 0x000048, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Conv_StringToName_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetCurrentLocationAndArea_LocationID) == 0x00005C, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetCurrentLocationAndArea_LocationID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetCurrentLocationAndArea_AreaID) == 0x000060, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetCurrentLocationAndArea_AreaID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000088, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetMoveArea_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetMoveArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A0, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_BooleanAND_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetDebuggingManager_Manager) == 0x0000B8, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsValid_ReturnValue_2) == 0x0000C0, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsValid_ReturnValue_3) == 0x0000C1, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsAvatar_IsAvatar) == 0x0000C2, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetPackagePath_OutName) == 0x0000C4, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetPackagePath_OutName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetPackagePath_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetPackagePath_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetObjectClass_ReturnValue) == 0x0000D0, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Conv_NameToString_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetClassDisplayName_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000F8, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000108, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_GetEnemyManager_Manager) == 0x000118, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000120, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_IsValid_ReturnValue_4) == 0x000130, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000138, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RepopEntry, CallFunc_CheckRepopCharaInList_Inlist) == 0x000148, "Member 'RSBattleEnemy_C_RepopEntry::CallFunc_CheckRepopCharaInList_Inlist' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InsidePlayerCamera
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_InsidePlayerCamera final
{
public:
	struct FVector                                MyPos;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInside;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9143[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InsidePlayerCamera) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InsidePlayerCamera");
static_assert(sizeof(RSBattleEnemy_C_InsidePlayerCamera) == 0x000058, "Wrong size on RSBattleEnemy_C_InsidePlayerCamera");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, MyPos) == 0x000000, "Member 'RSBattleEnemy_C_InsidePlayerCamera::MyPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, IsInside) == 0x00000C, "Member 'RSBattleEnemy_C_InsidePlayerCamera::IsInside' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_GetCameraLocation_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_GetActorForwardVector_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_Normal_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x000048, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_Abs_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InsidePlayerCamera, CallFunc_Less_FloatFloat_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_InsidePlayerCamera::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Start Brain Talk Party Bad Status Attribute
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute final
{
public:
	EHCSkillAttribute                             PartyBadStatusAttribute;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9144[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      LBrainTalkManager;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             LBadState;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9145[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9146[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9147[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9148[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkEm_FlameCharge_OilMember_ReturnValue; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BrainTalkEm_ElectricCharge_WaterMember_ReturnValue; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9149[0x5];                                     // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_914A[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_914B[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_914C[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterBadStatusAttribute_ReturnValue; // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_914D[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0080(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute");
static_assert(sizeof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute) == 0x000090, "Wrong size on RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, PartyBadStatusAttribute) == 0x000000, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::PartyBadStatusAttribute' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, bSuccess) == 0x000001, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, LBrainTalkManager) == 0x000008, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::LBrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, LbSuccess) == 0x000010, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, LBadState) == 0x000011, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::LBadState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, LPlayerList) == 0x000018, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::LPlayerList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_Array_Get_Item) == 0x000038, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, K2Node_SwitchEnum_CmpSuccess) == 0x000048, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_BrainTalkEm_FlameCharge_OilMember_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_BrainTalkEm_FlameCharge_OilMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_BrainTalkEm_ElectricCharge_WaterMember_ReturnValue) == 0x00004A, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_BrainTalkEm_ElectricCharge_WaterMember_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000050, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_BooleanAND_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_GetPlayerManager_PlayerManager) == 0x000070, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_IsCharacterBadStatusAttribute_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_IsCharacterBadStatusAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_IsValid_ReturnValue_2) == 0x000079, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute, CallFunc_GetPlayerList_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_Start_Brain_Talk_Party_Bad_Status_Attribute::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AreaOutResetParam
// 0x0108 (0x0108 - 0x0000)
struct RSBattleEnemy_C_AreaOutResetParam final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StopDetectIcon_Dummy;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_914E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxHpPart_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_914F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetHpArray_ReturnValue;                   // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9150[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0028(0x0068)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9151[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              K2Node_SetFieldsInStruct_StructOut;                // 0x0098(0x0068)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9152[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_AreaOutResetParam) == 0x000008, "Wrong alignment on RSBattleEnemy_C_AreaOutResetParam");
static_assert(sizeof(RSBattleEnemy_C_AreaOutResetParam) == 0x000108, "Wrong size on RSBattleEnemy_C_AreaOutResetParam");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RSBattleEnemy_C_AreaOutResetParam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_StopDetectIcon_Dummy) == 0x000004, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_StopDetectIcon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_GetMaxHpPart_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_GetMaxHpPart_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_GetHpArray_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_GetHpArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_GetParameterBasic_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'RSBattleEnemy_C_AreaOutResetParam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, K2Node_SetFieldsInStruct_StructOut) == 0x000098, "Member 'RSBattleEnemy_C_AreaOutResetParam::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_AreaOutResetParam, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'RSBattleEnemy_C_AreaOutResetParam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetAllBadStatus
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattleEnemy_C_ResetAllBadStatus final
{
public:
	struct FCharactersParameterBasic              CallFunc_GetParameterBasic_ReturnValue;            // 0x0000(0x0068)()
	struct FCharactersParameterBasic              K2Node_SetFieldsInStruct_StructOut;                // 0x0068(0x0068)()
};
static_assert(alignof(RSBattleEnemy_C_ResetAllBadStatus) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ResetAllBadStatus");
static_assert(sizeof(RSBattleEnemy_C_ResetAllBadStatus) == 0x0000D0, "Wrong size on RSBattleEnemy_C_ResetAllBadStatus");
static_assert(offsetof(RSBattleEnemy_C_ResetAllBadStatus, CallFunc_GetParameterBasic_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_ResetAllBadStatus::CallFunc_GetParameterBasic_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetAllBadStatus, K2Node_SetFieldsInStruct_StructOut) == 0x000068, "Member 'RSBattleEnemy_C_ResetAllBadStatus::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateAreaOut
// 0x001C (0x001C - 0x0000)
struct RSBattleEnemy_C_UpdateAreaOut final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TmpName;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHP_bDummy;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAreaOutActorLocation_Return;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnStart_Return;                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9153[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAreaOutActorLocation_Return_1;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateAreaOut) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateAreaOut");
static_assert(sizeof(RSBattleEnemy_C_UpdateAreaOut) == 0x00001C, "Wrong size on RSBattleEnemy_C_UpdateAreaOut");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, DeltaTime) == 0x000000, "Member 'RSBattleEnemy_C_UpdateAreaOut::DeltaTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, TmpName) == 0x000004, "Member 'RSBattleEnemy_C_UpdateAreaOut::TmpName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_OnDead_Dummy) == 0x00000D, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_SetHP_bDummy) == 0x00000E, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_SetHP_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_IsAvatar_IsAvatar) == 0x00000F, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_IsOver_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_SetAreaOutActorLocation_Return) == 0x000011, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_SetAreaOutActorLocation_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_SpawnStart_Return) == 0x000012, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_SpawnStart_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_GetRate_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_SetAreaOutActorLocation_Return_1) == 0x000018, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_SetAreaOutActorLocation_Return_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, CallFunc_IsOver_ReturnValue_1) == 0x000019, "Member 'RSBattleEnemy_C_UpdateAreaOut::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateAreaOut, K2Node_SwitchInteger_CmpSuccess) == 0x00001A, "Member 'RSBattleEnemy_C_UpdateAreaOut::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetStealthEndLaunchFlag
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetStealthEndLaunchFlag final
{
public:
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9154[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetStealthEndLaunchFlag) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetStealthEndLaunchFlag");
static_assert(sizeof(RSBattleEnemy_C_SetStealthEndLaunchFlag) == 0x000018, "Wrong size on RSBattleEnemy_C_SetStealthEndLaunchFlag");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_IsStealthMode_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_IsStateStealth_Return) == 0x000010, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetStealthEndLaunchFlag, CallFunc_IsStealthSeeEnable_Return) == 0x000013, "Member 'RSBattleEnemy_C_SetStealthEndLaunchFlag::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StealthEndLaunchLanding
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_StealthEndLaunchLanding final
{
public:
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StealthEndLaunchLanding) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StealthEndLaunchLanding");
static_assert(sizeof(RSBattleEnemy_C_StealthEndLaunchLanding) == 0x000004, "Wrong size on RSBattleEnemy_C_StealthEndLaunchLanding");
static_assert(offsetof(RSBattleEnemy_C_StealthEndLaunchLanding, CallFunc_Stealth_End_Return) == 0x000000, "Member 'RSBattleEnemy_C_StealthEndLaunchLanding::CallFunc_Stealth_End_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StealthEndLaunchLanding, CallFunc_IsStealthMode_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_StealthEndLaunchLanding::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StealthEndLaunchLanding, CallFunc_IsStateStealth_Return) == 0x000002, "Member 'RSBattleEnemy_C_StealthEndLaunchLanding::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StealthEndLaunchLanding, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_StealthEndLaunchLanding::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckEmphasisCrashGauge
// 0x03C8 (0x03C8 - 0x0000)
struct RSBattleEnemy_C_CheckEmphasisCrashGauge final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9155[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01C8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCHitResult                           LHitResult;                                        // 0x01D8(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9156[0x2];                                     // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue;        // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9157[0x3];                                     // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEmphasisCrashGauge_ReturnValue_1;      // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x03B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x03B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckEmphasisCrashGauge) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckEmphasisCrashGauge");
static_assert(sizeof(RSBattleEnemy_C_CheckEmphasisCrashGauge) == 0x0003C8, "Wrong size on RSBattleEnemy_C_CheckEmphasisCrashGauge");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, ReturnValue) == 0x0001C0, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, LExtraType) == 0x0001C8, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, LHitResult) == 0x0001D8, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, Temp_bool_True_if_break_was_hit_Variable) == 0x000398, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_Not_PreBool_ReturnValue) == 0x000399, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, Temp_int_Array_Index_Variable) == 0x00039C, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_SetEmphasisCrashGauge_ReturnValue) == 0x0003A0, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_SetEmphasisCrashGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_Array_Get_Item) == 0x0003A1, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003A2, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003A3, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_Array_Length_ReturnValue) == 0x0003A4, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, Temp_int_Loop_Counter_Variable) == 0x0003A8, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_Less_IntInt_ReturnValue) == 0x0003AC, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_Add_IntInt_ReturnValue) == 0x0003B0, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_BooleanAND_ReturnValue) == 0x0003B4, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_SetEmphasisCrashGauge_ReturnValue_1) == 0x0003B5, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_SetEmphasisCrashGauge_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_IsEnemyDamageDown_bool) == 0x0003B6, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_IsValid_ReturnValue) == 0x0003B7, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x0003B8, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, K2Node_DynamicCast_bSuccess) == 0x0003C0, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckEmphasisCrashGauge, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0003C1, "Member 'RSBattleEnemy_C_CheckEmphasisCrashGauge::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetReasonBattleEnd
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_GetReasonBattleEnd final
{
public:
	EReasonBattleEnd                              Reason;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9158[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LLastIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsStealthMode;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9159[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LPlayers;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	EReasonBattleEnd                              Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_915A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_915B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_915C[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EReasonBattleEnd                              Temp_byte_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EReasonBattleEnd                              K2Node_Select_Default;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_915D[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_915E[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue_1;              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_915F[0x5];                                     // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue_2;              // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetReasonBattleEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetReasonBattleEnd");
static_assert(sizeof(RSBattleEnemy_C_GetReasonBattleEnd) == 0x000090, "Wrong size on RSBattleEnemy_C_GetReasonBattleEnd");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Reason) == 0x000000, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Reason' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, LLastIndex) == 0x000004, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::LLastIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, LIsStealthMode) == 0x000008, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::LIsStealthMode' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, LPlayers) == 0x000010, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::LPlayers' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Temp_byte_Variable) == 0x000020, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Temp_int_Variable) == 0x000024, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Temp_int_Variable_1) == 0x000030, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Temp_bool_Variable) == 0x000034, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000035, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, Temp_byte_Variable_1) == 0x00003C, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsDead_bDead) == 0x00003D, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, K2Node_Select_Default) == 0x00003E, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_GetPlayerManager_PlayerManager) == 0x000040, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Array_Get_Item) == 0x000048, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_GetPlayerList_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsStealthMode_ReturnValue) == 0x000061, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_GetPlayer_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsStealthMode_ReturnValue_1) == 0x000071, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsStealthMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsValid_ReturnValue_2) == 0x000072, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsValid_ReturnValue_3) == 0x000080, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_IsStealthMode_ReturnValue_2) == 0x000081, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_IsStealthMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000082, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000083, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetReasonBattleEnd, CallFunc_Subtract_IntInt_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_GetReasonBattleEnd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartBrainTalkEffectiveSas
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_StartBrainTalkEffectiveSas final
{
public:
	E_SASKindNative                               SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9160[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartBrainTalkEffectiveSas) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartBrainTalkEffectiveSas");
static_assert(sizeof(RSBattleEnemy_C_StartBrainTalkEffectiveSas) == 0x000018, "Wrong size on RSBattleEnemy_C_StartBrainTalkEffectiveSas");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkEffectiveSas, SasKind) == 0x000000, "Member 'RSBattleEnemy_C_StartBrainTalkEffectiveSas::SasKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkEffectiveSas, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000008, "Member 'RSBattleEnemy_C_StartBrainTalkEffectiveSas::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkEffectiveSas, CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_StartBrainTalkEffectiveSas::CallFunc_BrainTalkBt_DiscSasValidEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkEffectiveSas, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_StartBrainTalkEffectiveSas::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetNoDisplayDiscoverIcon
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetNoDisplayDiscoverIcon final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetNoDisplayDiscoverIcon) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetNoDisplayDiscoverIcon");
static_assert(sizeof(RSBattleEnemy_C_SetNoDisplayDiscoverIcon) == 0x000002, "Wrong size on RSBattleEnemy_C_SetNoDisplayDiscoverIcon");
static_assert(offsetof(RSBattleEnemy_C_SetNoDisplayDiscoverIcon, Enable) == 0x000000, "Member 'RSBattleEnemy_C_SetNoDisplayDiscoverIcon::Enable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoDisplayDiscoverIcon, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetNoDisplayDiscoverIcon::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CopyParamToAvatar
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_CopyParamToAvatar final
{
public:
	class ARSBattleEnemy_C*                       Original;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CopyParamToAvatar) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CopyParamToAvatar");
static_assert(sizeof(RSBattleEnemy_C_CopyParamToAvatar) == 0x000010, "Wrong size on RSBattleEnemy_C_CopyParamToAvatar");
static_assert(offsetof(RSBattleEnemy_C_CopyParamToAvatar, Original) == 0x000000, "Member 'RSBattleEnemy_C_CopyParamToAvatar::Original' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CopyParamToAvatar, Dummy) == 0x000008, "Member 'RSBattleEnemy_C_CopyParamToAvatar::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CopyParamToAvatar, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_CopyParamToAvatar::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartBrainTalkOnBadState
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_StartBrainTalkOnBadState final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   BadState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             LBadState;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     LMember;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9161[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      LBrainTalkManager;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9162[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9163[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillAttribute                             Temp_byte_Variable_3;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             Temp_byte_Variable_4;                              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             Temp_byte_Variable_5;                              // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             Temp_byte_Variable_6;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCBadState                                   Temp_byte_Variable_7;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillAttribute                             K2Node_Select_Default;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_BadStateForEn_ReturnValue;    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9164[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartBrainTalkOnBadState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartBrainTalkOnBadState");
static_assert(sizeof(RSBattleEnemy_C_StartBrainTalkOnBadState) == 0x000060, "Wrong size on RSBattleEnemy_C_StartBrainTalkOnBadState");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Attacker) == 0x000000, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, BadState) == 0x000008, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::BadState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, LBadState) == 0x000009, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::LBadState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, LMember) == 0x00000A, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::LMember' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, LBrainTalkManager) == 0x000010, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::LBrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable) == 0x000018, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, K2Node_DynamicCast_AsRSBattle_Player) == 0x000020, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, K2Node_DynamicCast_AsPlayer_Interface) == 0x000030, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_1) == 0x000041, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, CallFunc_GetPlayerID_ReturnValue) == 0x000042, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_2) == 0x000043, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_3) == 0x000045, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_4) == 0x000046, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_5) == 0x000047, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_6) == 0x000048, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, Temp_byte_Variable_7) == 0x000049, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, K2Node_Select_Default) == 0x00004A, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, CallFunc_BrainTalkBt_BadStateForEn_ReturnValue) == 0x00004B, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::CallFunc_BrainTalkBt_BadStateForEn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000050, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartBrainTalkOnBadState, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_StartBrainTalkOnBadState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DisplayEnemyHp
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_DisplayEnemyHp final
{
public:
	float                                         DisplaySeconds;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9165[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHP_HP;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9166[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         K2Node_DynamicCast_AsHUDMain_Game;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DisplayEnemyHp) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DisplayEnemyHp");
static_assert(sizeof(RSBattleEnemy_C_DisplayEnemyHp) == 0x000030, "Wrong size on RSBattleEnemy_C_DisplayEnemyHp");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, DisplaySeconds) == 0x000000, "Member 'RSBattleEnemy_C_DisplayEnemyHp::DisplaySeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_DisplayEnemyHp::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, CallFunc_GetHP_HP) == 0x000008, "Member 'RSBattleEnemy_C_DisplayEnemyHp::CallFunc_GetHP_HP' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DisplayEnemyHp::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, CallFunc_GetHUD_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_DisplayEnemyHp::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, K2Node_DynamicCast_AsHUDMain_Game) == 0x000020, "Member 'RSBattleEnemy_C_DisplayEnemyHp::K2Node_DynamicCast_AsHUDMain_Game' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DisplayEnemyHp, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_DisplayEnemyHp::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAnimScaleHitStop
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_SetAnimScaleHitStop final
{
public:
	EnemyDamageAnimKind                           DamageAnimKind;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9167[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRowNameAnimScaleHitStop_RowName;       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9168[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9169[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAnimScaleHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetAnimScaleHitStop");
static_assert(sizeof(RSBattleEnemy_C_SetAnimScaleHitStop) == 0x000048, "Wrong size on RSBattleEnemy_C_SetAnimScaleHitStop");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, DamageAnimKind) == 0x000000, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::DamageAnimKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_GetRowNameAnimScaleHitStop_RowName) == 0x000004, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_GetRowNameAnimScaleHitStop_RowName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_GetMainPlayer_Player) == 0x000020, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000030, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_GetAccelerating_Accelerating) == 0x000041, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStop, CallFunc_IsValid_ReturnValue_1) == 0x000042, "Member 'RSBattleEnemy_C_SetAnimScaleHitStop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAnimScaleHitStopProduct
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetAnimScaleHitStopProduct final
{
public:
	struct FAnimScaleHitStopEnemy                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_916A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetAnimScaleHitStopProduct) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetAnimScaleHitStopProduct");
static_assert(sizeof(RSBattleEnemy_C_SetAnimScaleHitStopProduct) == 0x000018, "Wrong size on RSBattleEnemy_C_SetAnimScaleHitStopProduct");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStopProduct, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'RSBattleEnemy_C_SetAnimScaleHitStopProduct::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStopProduct, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_SetAnimScaleHitStopProduct::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStopProduct, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetAnimScaleHitStopProduct::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAnimScaleHitStopSlow
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SetAnimScaleHitStopSlow final
{
public:
	struct FAnimScaleHitStopEnemy                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAnimScaleHitStopSlow) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetAnimScaleHitStopSlow");
static_assert(sizeof(RSBattleEnemy_C_SetAnimScaleHitStopSlow) == 0x000010, "Wrong size on RSBattleEnemy_C_SetAnimScaleHitStopSlow");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStopSlow, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'RSBattleEnemy_C_SetAnimScaleHitStopSlow::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAnimScaleHitStopSlow, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_SetAnimScaleHitStopSlow::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetRowNameAnimScaleHitStop
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_GetRowNameAnimScaleHitStop final
{
public:
	EnemyDamageAnimKind                           DamageAnimKind;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_916B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LReturn;                                           // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_916C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LRowName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LDirection;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_916D[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x003C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_916E[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetRowNameAnimScaleHitStop");
static_assert(sizeof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop) == 0x000070, "Wrong size on RSBattleEnemy_C_GetRowNameAnimScaleHitStop");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, DamageAnimKind) == 0x000000, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::DamageAnimKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, RowName) == 0x000004, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::RowName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, LReturn) == 0x00000C, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::LReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, LRowName) == 0x000018, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::LRowName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, LDirection) == 0x000028, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::LDirection' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, CallFunc_GetName_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, CallFunc_Conv_NameToString_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, CallFunc_Conv_StringToName_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRowNameAnimScaleHitStop, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_GetRowNameAnimScaleHitStop::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBaseMontagePlayRate
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetBaseMontagePlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_916F[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetBaseMontagePlayRate) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetBaseMontagePlayRate");
static_assert(sizeof(RSBattleEnemy_C_SetBaseMontagePlayRate) == 0x000018, "Wrong size on RSBattleEnemy_C_SetBaseMontagePlayRate");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontagePlayRate, PlayRate) == 0x000000, "Member 'RSBattleEnemy_C_SetBaseMontagePlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontagePlayRate, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetBaseMontagePlayRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontagePlayRate, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'RSBattleEnemy_C_SetBaseMontagePlayRate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontagePlayRate, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetBaseMontagePlayRate::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetBaseMontagePlayRate, CallFunc_IsValid_ReturnValue_2) == 0x000010, "Member 'RSBattleEnemy_C_SetBaseMontagePlayRate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckMapGimmickHitSlow
// 0x0208 (0x0208 - 0x0000)
struct RSBattleEnemy_C_CheckMapGimmickHitSlow final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          LbSecondHit;                                       // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9170[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01C8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	EPlayerHitStopType                            LType;                                             // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbSuccess;                                         // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable;                                // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9171[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapGimmick_C>     K2Node_DynamicCast_AsBPI_Map_Gimmick;              // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapGimmickType                               CallFunc_GetMapGimmickType_Type;                   // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_1;                              // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x01F6(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9172[0x1];                                     // 0x01F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_3;                              // 0x01FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x01FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable_4;                              // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            K2Node_Select_Default_1;                           // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CheckMapGimmickHitSlow) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckMapGimmickHitSlow");
static_assert(sizeof(RSBattleEnemy_C_CheckMapGimmickHitSlow) == 0x000208, "Wrong size on RSBattleEnemy_C_CheckMapGimmickHitSlow");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, LbSecondHit) == 0x0001C0, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::LbSecondHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, LExtraType) == 0x0001C8, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, LType) == 0x0001D8, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::LType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, LbSuccess) == 0x0001D9, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::LbSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_byte_Variable) == 0x0001DA, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, K2Node_DynamicCast_AsBPI_Map_Gimmick) == 0x0001E0, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::K2Node_DynamicCast_AsBPI_Map_Gimmick' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, CallFunc_GetMapGimmickType_Type) == 0x0001F1, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::CallFunc_GetMapGimmickType_Type' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001F2, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, K2Node_SwitchEnum_CmpSuccess) == 0x0001F3, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, CallFunc_IsValid_ReturnValue) == 0x0001F4, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_byte_Variable_1) == 0x0001F5, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_byte_Variable_2) == 0x0001F6, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, CallFunc_Array_Find_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001FC, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_bool_Variable) == 0x0001FD, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_byte_Variable_3) == 0x0001FE, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, K2Node_Select_Default) == 0x0001FF, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_bool_Variable_1) == 0x000200, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, Temp_byte_Variable_4) == 0x000201, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckMapGimmickHitSlow, K2Node_Select_Default_1) == 0x000202, "Member 'RSBattleEnemy_C_CheckMapGimmickHitSlow::K2Node_Select_Default_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDiscoveredOnce
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsDiscoveredOnce final
{
public:
	bool                                          DiscoverdOnce;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDiscoveredOnce) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDiscoveredOnce");
static_assert(sizeof(RSBattleEnemy_C_IsDiscoveredOnce) == 0x000001, "Wrong size on RSBattleEnemy_C_IsDiscoveredOnce");
static_assert(offsetof(RSBattleEnemy_C_IsDiscoveredOnce, DiscoverdOnce) == 0x000000, "Member 'RSBattleEnemy_C_IsDiscoveredOnce::DiscoverdOnce' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckStealthCriticalHitSlow
// 0x0200 (0x0200 - 0x0000)
struct RSBattleEnemy_C_CheckStealthCriticalHitSlow final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	EPlayerHitStopType                            LSlowType;                                         // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9173[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckReceiveStealthCritical_Return;       // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable;                                // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x01DB(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable_2;                              // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9174[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9175[0x3];                                     // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CheckStealthCriticalHitSlow) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckStealthCriticalHitSlow");
static_assert(sizeof(RSBattleEnemy_C_CheckStealthCriticalHitSlow) == 0x000200, "Wrong size on RSBattleEnemy_C_CheckStealthCriticalHitSlow");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, LSlowType) == 0x0001C0, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::LSlowType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, LAttacker) == 0x0001C8, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, Temp_bool_Variable) == 0x0001D0, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_IsValid_ReturnValue) == 0x0001D1, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D2, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D3, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001D4, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_IsValid_ReturnValue_1) == 0x0001D5, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_BooleanOR_ReturnValue) == 0x0001D6, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_BooleanOR_ReturnValue_1) == 0x0001D7, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_IsValid_ReturnValue_2) == 0x0001D8, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_CheckReceiveStealthCritical_Return) == 0x0001D9, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_CheckReceiveStealthCritical_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, Temp_byte_Variable) == 0x0001DA, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, Temp_byte_Variable_1) == 0x0001DB, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, Temp_byte_Variable_2) == 0x0001DC, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_Array_Find_ReturnValue) == 0x0001E0, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001E4, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0001E8, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, Temp_bool_Variable_1) == 0x0001F9, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, CallFunc_IsControlPlayer_ReturnValue) == 0x0001FA, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckStealthCriticalHitSlow, K2Node_Select_Default) == 0x0001FB, "Member 'RSBattleEnemy_C_CheckStealthCriticalHitSlow::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDamaging
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_OnDamaging final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	float                                         DamageValue;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x01C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDamaging_Dummy;                         // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDamaging) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnDamaging");
static_assert(sizeof(RSBattleEnemy_C_OnDamaging) == 0x0001C8, "Wrong size on RSBattleEnemy_C_OnDamaging");
static_assert(offsetof(RSBattleEnemy_C_OnDamaging, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_OnDamaging::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamaging, DamageValue) == 0x0001C0, "Member 'RSBattleEnemy_C_OnDamaging::DamageValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamaging, Dummy) == 0x0001C4, "Member 'RSBattleEnemy_C_OnDamaging::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamaging, CallFunc_OnDamaging_Dummy) == 0x0001C5, "Member 'RSBattleEnemy_C_OnDamaging::CallFunc_OnDamaging_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PrioritizeTick
// 0x0005 (0x0005 - 0x0000)
struct RSBattleEnemy_C_PrioritizeTick final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyTickPriorityType                        L_Value;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyTickPriorityType                        CallFunc_PrioritizeTickNative_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_PrioritizeTick) == 0x000001, "Wrong alignment on RSBattleEnemy_C_PrioritizeTick");
static_assert(sizeof(RSBattleEnemy_C_PrioritizeTick) == 0x000005, "Wrong size on RSBattleEnemy_C_PrioritizeTick");
static_assert(offsetof(RSBattleEnemy_C_PrioritizeTick, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_PrioritizeTick::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PrioritizeTick, L_Value) == 0x000001, "Member 'RSBattleEnemy_C_PrioritizeTick::L_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PrioritizeTick, CallFunc_IsBattling_bBatting) == 0x000002, "Member 'RSBattleEnemy_C_PrioritizeTick::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PrioritizeTick, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_PrioritizeTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PrioritizeTick, CallFunc_PrioritizeTickNative_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_PrioritizeTick::CallFunc_PrioritizeTickNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcTickSeconds
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_CalcTickSeconds final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9176[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     LEnemyM;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalActorTime;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_ExecTick;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9177[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_ActorTimeDelta;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_RealTimeDelta;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalMax;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalDefault;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_IntervalRealTime;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_ResultSkip;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9178[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcTickSecondsNative_OutIntervalActorTime; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcTickSecondsNative_OutExecTick;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcTickSecondsNative_OutIncrementUpdateEnemy; // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CalcTickSeconds) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcTickSeconds");
static_assert(sizeof(RSBattleEnemy_C_CalcTickSeconds) == 0x000038, "Wrong size on RSBattleEnemy_C_CalcTickSeconds");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_CalcTickSeconds::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_CalcTickSeconds::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, LEnemyM) == 0x000008, "Member 'RSBattleEnemy_C_CalcTickSeconds::LEnemyM' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_IntervalActorTime) == 0x000010, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_IntervalActorTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_ExecTick) == 0x000014, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_ExecTick' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_ActorTimeDelta) == 0x000018, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_ActorTimeDelta' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_RealTimeDelta) == 0x00001C, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_RealTimeDelta' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_IntervalMax) == 0x000020, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_IntervalMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_IntervalDefault) == 0x000024, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_IntervalDefault' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_IntervalRealTime) == 0x000028, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_IntervalRealTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, L_ResultSkip) == 0x00002C, "Member 'RSBattleEnemy_C_CalcTickSeconds::L_ResultSkip' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, CallFunc_CalcTickSecondsNative_OutIntervalActorTime) == 0x000030, "Member 'RSBattleEnemy_C_CalcTickSeconds::CallFunc_CalcTickSecondsNative_OutIntervalActorTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, CallFunc_CalcTickSecondsNative_OutExecTick) == 0x000034, "Member 'RSBattleEnemy_C_CalcTickSeconds::CallFunc_CalcTickSecondsNative_OutExecTick' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, CallFunc_CalcTickSecondsNative_OutIncrementUpdateEnemy) == 0x000035, "Member 'RSBattleEnemy_C_CalcTickSeconds::CallFunc_CalcTickSecondsNative_OutIncrementUpdateEnemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcTickSeconds, CallFunc_IsValid_ReturnValue) == 0x000036, "Member 'RSBattleEnemy_C_CalcTickSeconds::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.MainTickSometime
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_MainTickSometime final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecSometimeTick_bExec;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateEnableIK_Dummy;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_MainTickSometime) == 0x000004, "Wrong alignment on RSBattleEnemy_C_MainTickSometime");
static_assert(sizeof(RSBattleEnemy_C_MainTickSometime) == 0x000008, "Wrong size on RSBattleEnemy_C_MainTickSometime");
static_assert(offsetof(RSBattleEnemy_C_MainTickSometime, DeltaSeconds) == 0x000000, "Member 'RSBattleEnemy_C_MainTickSometime::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTickSometime, Dummy) == 0x000004, "Member 'RSBattleEnemy_C_MainTickSometime::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTickSometime, CallFunc_IsExecSometimeTick_bExec) == 0x000005, "Member 'RSBattleEnemy_C_MainTickSometime::CallFunc_IsExecSometimeTick_bExec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_MainTickSometime, CallFunc_UpdateEnableIK_Dummy) == 0x000006, "Member 'RSBattleEnemy_C_MainTickSometime::CallFunc_UpdateEnableIK_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InitCheckUpdateWeakMaterial
// 0x0138 (0x0138 - 0x0000)
struct RSBattleEnemy_C_InitCheckUpdateWeakMaterial final
{
public:
	TArray<struct FEnemyEnableWeakData>           LEnemyWeakDataList;                                // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         TmpCount;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9179[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         LMesh;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          LMultiWeak;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LWeakSlotName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         LWeakSlotNameList;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917B[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917C[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917D[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917E[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_917F[0x1];                                     // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9180[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_SearchMeshMaterialFromSlotName_ReturnValue; // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9181[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_2;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9182[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnemyEnableWeakData                   CallFunc_Array_Get_Item_3;                         // 0x00E8(0x0040)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9183[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InitCheckUpdateWeakMaterial");
static_assert(sizeof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial) == 0x000138, "Wrong size on RSBattleEnemy_C_InitCheckUpdateWeakMaterial");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, LEnemyWeakDataList) == 0x000000, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::LEnemyWeakDataList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, TmpCount) == 0x000010, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::TmpCount' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, LMesh) == 0x000018, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::LMesh' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, LMultiWeak) == 0x000028, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::LMultiWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, LWeakSlotName) == 0x000030, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::LWeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, LWeakSlotNameList) == 0x000040, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::LWeakSlotNameList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Array_Index_Variable) == 0x000050, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_LastIndex_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_bool_True_if_break_was_hit_Variable) == 0x00006C, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Array_Index_Variable_1) == 0x000070, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Not_PreBool_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Loop_Counter_Variable_2) == 0x000078, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Add_IntInt_ReturnValue_2) == 0x00007C, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_GetBodyMeshes_Meshes) == 0x000080, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000095, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Get_Item) == 0x000098, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_IsValid_ReturnValue) == 0x0000A4, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A5, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_BooleanAND_ReturnValue) == 0x0000A6, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Length_ReturnValue_2) == 0x0000B8, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000BC, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_SearchMeshMaterialFromSlotName_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_SearchMeshMaterialFromSlotName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Length_ReturnValue_3) == 0x0000D0, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000D4, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000D8, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, Temp_int_Array_Index_Variable_2) == 0x0000DC, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Get_Item_2) == 0x0000E0, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_IsValid_ReturnValue_1) == 0x0000E1, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Get_Item_3) == 0x0000E8, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000128, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_Array_Add_ReturnValue) == 0x00012C, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitCheckUpdateWeakMaterial, CallFunc_IsValid_ReturnValue_2) == 0x000130, "Member 'RSBattleEnemy_C_InitCheckUpdateWeakMaterial::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InitUpdateSeeThrought
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_InitUpdateSeeThrought final
{
public:
	class FString                                 LSeeThroughWeakSphereScale;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         LCnt;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9184[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_SeeThroughWeakSphereLocation;                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9185[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InitUpdateSeeThrought) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InitUpdateSeeThrought");
static_assert(sizeof(RSBattleEnemy_C_InitUpdateSeeThrought) == 0x000038, "Wrong size on RSBattleEnemy_C_InitUpdateSeeThrought");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, LSeeThroughWeakSphereScale) == 0x000000, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::LSeeThroughWeakSphereScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, LCnt) == 0x000010, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::LCnt' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, L_SeeThroughWeakSphereLocation) == 0x000018, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::L_SeeThroughWeakSphereLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InitUpdateSeeThrought, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_InitUpdateSeeThrought::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckSimpleEnemy
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CheckSimpleEnemy final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckSimpleEnemy) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CheckSimpleEnemy");
static_assert(sizeof(RSBattleEnemy_C_CheckSimpleEnemy) == 0x000001, "Wrong size on RSBattleEnemy_C_CheckSimpleEnemy");
static_assert(offsetof(RSBattleEnemy_C_CheckSimpleEnemy, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'RSBattleEnemy_C_CheckSimpleEnemy::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownEnd final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownEnd");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownEnd) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownEnd");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownEnd, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownEnd::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetUseWaitNoInterpolation
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetUseWaitNoInterpolation final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetUseWaitNoInterpolation) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetUseWaitNoInterpolation");
static_assert(sizeof(RSBattleEnemy_C_SetUseWaitNoInterpolation) == 0x000002, "Wrong size on RSBattleEnemy_C_SetUseWaitNoInterpolation");
static_assert(offsetof(RSBattleEnemy_C_SetUseWaitNoInterpolation, bUse) == 0x000000, "Member 'RSBattleEnemy_C_SetUseWaitNoInterpolation::bUse' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetUseWaitNoInterpolation, bDummy) == 0x000001, "Member 'RSBattleEnemy_C_SetUseWaitNoInterpolation::bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBossHpDisp
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsBossHpDisp final
{
public:
	bool                                          IsDisp;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBossHpDisp) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBossHpDisp");
static_assert(sizeof(RSBattleEnemy_C_IsBossHpDisp) == 0x000002, "Wrong size on RSBattleEnemy_C_IsBossHpDisp");
static_assert(offsetof(RSBattleEnemy_C_IsBossHpDisp, IsDisp) == 0x000000, "Member 'RSBattleEnemy_C_IsBossHpDisp::IsDisp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsBossHpDisp, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsBossHpDisp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SpawnStartChangeCharaCondition
// 0x0068 (0x0068 - 0x0000)
struct RSBattleEnemy_C_SpawnStartChangeCharaCondition final
{
public:
	int32                                         L_CollisionNum;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9186[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                L_ChildrenComp;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9187[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9188[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9189[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_Array_Get_Item_1;                         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_918A[0x5];                                     // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0058(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SpawnStartChangeCharaCondition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SpawnStartChangeCharaCondition");
static_assert(sizeof(RSBattleEnemy_C_SpawnStartChangeCharaCondition) == 0x000068, "Wrong size on RSBattleEnemy_C_SpawnStartChangeCharaCondition");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, L_CollisionNum) == 0x000000, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::L_CollisionNum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, L_ChildrenComp) == 0x000008, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::L_ChildrenComp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, ClaimantName) == 0x000018, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, Temp_int_Array_Index_Variable) == 0x000028, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_IsValid_ReturnValue_1) == 0x00002D, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Array_Get_Item) == 0x000030, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x000038, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_IsValid_ReturnValue_3) == 0x00004A, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000051, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_IsValid_ReturnValue_4) == 0x000052, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStartChangeCharaCondition, CallFunc_GetChildrenComponents_Children) == 0x000058, "Member 'RSBattleEnemy_C_SpawnStartChangeCharaCondition::CallFunc_GetChildrenComponents_Children' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableWeak
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnableWeak final
{
public:
	bool                                          Param_bEnableWeak;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableWeak_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnableWeak");
static_assert(sizeof(RSBattleEnemy_C_IsEnableWeak) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnableWeak");
static_assert(offsetof(RSBattleEnemy_C_IsEnableWeak, Param_bEnableWeak) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableWeak::Param_bEnableWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableWeak, CallFunc_IsEnableWeak_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnableWeak::CallFunc_IsEnableWeak_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetStopWeakEmissive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetStopWeakEmissive final
{
public:
	bool                                          IsStop;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetStopWeakEmissive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetStopWeakEmissive");
static_assert(sizeof(RSBattleEnemy_C_SetStopWeakEmissive) == 0x000001, "Wrong size on RSBattleEnemy_C_SetStopWeakEmissive");
static_assert(offsetof(RSBattleEnemy_C_SetStopWeakEmissive, IsStop) == 0x000000, "Member 'RSBattleEnemy_C_SetStopWeakEmissive::IsStop' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsStopWeakEmissive
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsStopWeakEmissive final
{
public:
	bool                                          IsStop;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStopWeakEmissive_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsStopWeakEmissive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsStopWeakEmissive");
static_assert(sizeof(RSBattleEnemy_C_IsStopWeakEmissive) == 0x000002, "Wrong size on RSBattleEnemy_C_IsStopWeakEmissive");
static_assert(offsetof(RSBattleEnemy_C_IsStopWeakEmissive, IsStop) == 0x000000, "Member 'RSBattleEnemy_C_IsStopWeakEmissive::IsStop' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsStopWeakEmissive, CallFunc_IsStopWeakEmissive_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsStopWeakEmissive::CallFunc_IsStopWeakEmissive_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Is Disable Weak Around Effect
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_Is_Disable_Weak_Around_Effect final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisable;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableWeakAroundEffect_ReturnValue;    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Is_Disable_Weak_Around_Effect) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Is_Disable_Weak_Around_Effect");
static_assert(sizeof(RSBattleEnemy_C_Is_Disable_Weak_Around_Effect) == 0x000008, "Wrong size on RSBattleEnemy_C_Is_Disable_Weak_Around_Effect");
static_assert(offsetof(RSBattleEnemy_C_Is_Disable_Weak_Around_Effect, Param_Index) == 0x000000, "Member 'RSBattleEnemy_C_Is_Disable_Weak_Around_Effect::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Disable_Weak_Around_Effect, IsDisable) == 0x000004, "Member 'RSBattleEnemy_C_Is_Disable_Weak_Around_Effect::IsDisable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Disable_Weak_Around_Effect, CallFunc_IsDisableWeakAroundEffect_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_Is_Disable_Weak_Around_Effect::CallFunc_IsDisableWeakAroundEffect_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDisableWeakAroundEffect
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetDisableWeakAroundEffect final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisable;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDisableWeakAroundEffect) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetDisableWeakAroundEffect");
static_assert(sizeof(RSBattleEnemy_C_SetDisableWeakAroundEffect) == 0x000008, "Wrong size on RSBattleEnemy_C_SetDisableWeakAroundEffect");
static_assert(offsetof(RSBattleEnemy_C_SetDisableWeakAroundEffect, Param_Index) == 0x000000, "Member 'RSBattleEnemy_C_SetDisableWeakAroundEffect::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDisableWeakAroundEffect, IsDisable) == 0x000004, "Member 'RSBattleEnemy_C_SetDisableWeakAroundEffect::IsDisable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Set Event Wait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Set_Event_Wait final
{
public:
	bool                                          Param_IsEventWait;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Set_Event_Wait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Set_Event_Wait");
static_assert(sizeof(RSBattleEnemy_C_Set_Event_Wait) == 0x000001, "Wrong size on RSBattleEnemy_C_Set_Event_Wait");
static_assert(offsetof(RSBattleEnemy_C_Set_Event_Wait, Param_IsEventWait) == 0x000000, "Member 'RSBattleEnemy_C_Set_Event_Wait::Param_IsEventWait' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBT_ForceBreak
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetBT_ForceBreak final
{
public:
	bool                                          Param_IsBT_ForceBreak;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetBT_ForceBreak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetBT_ForceBreak");
static_assert(sizeof(RSBattleEnemy_C_SetBT_ForceBreak) == 0x000001, "Wrong size on RSBattleEnemy_C_SetBT_ForceBreak");
static_assert(offsetof(RSBattleEnemy_C_SetBT_ForceBreak, Param_IsBT_ForceBreak) == 0x000000, "Member 'RSBattleEnemy_C_SetBT_ForceBreak::Param_IsBT_ForceBreak' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetWander
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetWander final
{
public:
	bool                                          Param_IsWander;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetWander) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetWander");
static_assert(sizeof(RSBattleEnemy_C_SetWander) == 0x000001, "Wrong size on RSBattleEnemy_C_SetWander");
static_assert(offsetof(RSBattleEnemy_C_SetWander, Param_IsWander) == 0x000000, "Member 'RSBattleEnemy_C_SetWander::Param_IsWander' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBattleStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetBattleStart final
{
public:
	bool                                          Param_IsBattleStart;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetBattleStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetBattleStart");
static_assert(sizeof(RSBattleEnemy_C_SetBattleStart) == 0x000001, "Wrong size on RSBattleEnemy_C_SetBattleStart");
static_assert(offsetof(RSBattleEnemy_C_SetBattleStart, Param_IsBattleStart) == 0x000000, "Member 'RSBattleEnemy_C_SetBattleStart::Param_IsBattleStart' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetSpawnState
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetSpawnState final
{
public:
	Enum_EnemySpawnState                          Param_SpawnState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetSpawnState) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetSpawnState");
static_assert(sizeof(RSBattleEnemy_C_SetSpawnState) == 0x000001, "Wrong size on RSBattleEnemy_C_SetSpawnState");
static_assert(offsetof(RSBattleEnemy_C_SetSpawnState, Param_SpawnState) == 0x000000, "Member 'RSBattleEnemy_C_SetSpawnState::Param_SpawnState' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnableOutOfBattleField
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SetEnableOutOfBattleField final
{
public:
	bool                                          SetEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_918B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_GroupID;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BossField;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetEnemyTarget_NewParam;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnableDiscoverIcon_Dummy;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNoDisplayDiscoverIcon_Dummy;           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnableOutOfBattleField) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetEnableOutOfBattleField");
static_assert(sizeof(RSBattleEnemy_C_SetEnableOutOfBattleField) == 0x000010, "Wrong size on RSBattleEnemy_C_SetEnableOutOfBattleField");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, SetEnable) == 0x000000, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::SetEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, Param_GroupID) == 0x000004, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::Param_GroupID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, BossField) == 0x000008, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::BossField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_ResetEnemyTarget_NewParam) == 0x000009, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_ResetEnemyTarget_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000A, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_SetEnableDiscoverIcon_Dummy) == 0x00000D, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_SetEnableDiscoverIcon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000E, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnableOutOfBattleField, CallFunc_SetNoDisplayDiscoverIcon_Dummy) == 0x00000F, "Member 'RSBattleEnemy_C_SetEnableOutOfBattleField::CallFunc_SetNoDisplayDiscoverIcon_Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EventManagerEnd
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_EventManagerEnd final
{
public:
	bool                                          RestoreEnableTick;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RestoreVisibility;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerEnd_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_918C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_918D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          CallFunc_GetCoreCollision_CoreCollision;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EventManagerEnd) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EventManagerEnd");
static_assert(sizeof(RSBattleEnemy_C_EventManagerEnd) == 0x000028, "Wrong size on RSBattleEnemy_C_EventManagerEnd");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, RestoreEnableTick) == 0x000000, "Member 'RSBattleEnemy_C_EventManagerEnd::RestoreEnableTick' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, RestoreVisibility) == 0x000001, "Member 'RSBattleEnemy_C_EventManagerEnd::RestoreVisibility' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_EventManagerEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_EventManagerEnd_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_EventManagerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_GetAIController_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000013, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_GetCoreCollision_CoreCollision) == 0x000018, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_GetCoreCollision_CoreCollision' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerEnd, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_EventManagerEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBattleStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetBattleStart final
{
public:
	bool                                          Param_IsBattleStart;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBattleStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetBattleStart");
static_assert(sizeof(RSBattleEnemy_C_GetBattleStart) == 0x000001, "Wrong size on RSBattleEnemy_C_GetBattleStart");
static_assert(offsetof(RSBattleEnemy_C_GetBattleStart, Param_IsBattleStart) == 0x000000, "Member 'RSBattleEnemy_C_GetBattleStart::Param_IsBattleStart' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyEnableOutOfBossBattlefield
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield final
{
public:
	bool                                          SetEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield) == 0x000003, "Wrong size on RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield, SetEnable) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield::SetEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfBossBattlefield::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnDamageArmorBreak
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_OnDamageArmorBreak final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterAttribute                           Temp_byte_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_918E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetArmorPartsList_Armor;                  // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDamageArmorBreak_bDummy;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnDamageArmorBreak) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnDamageArmorBreak");
static_assert(sizeof(RSBattleEnemy_C_OnDamageArmorBreak) == 0x000020, "Wrong size on RSBattleEnemy_C_OnDamageArmorBreak");
static_assert(offsetof(RSBattleEnemy_C_OnDamageArmorBreak, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_OnDamageArmorBreak::bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageArmorBreak, Temp_byte_Variable) == 0x000001, "Member 'RSBattleEnemy_C_OnDamageArmorBreak::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageArmorBreak, CallFunc_GetArmorPartsList_Armor) == 0x000008, "Member 'RSBattleEnemy_C_OnDamageArmorBreak::CallFunc_GetArmorPartsList_Armor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageArmorBreak, CallFunc_Array_RemoveItem_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_OnDamageArmorBreak::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnDamageArmorBreak, CallFunc_OnDamageArmorBreak_bDummy) == 0x000019, "Member 'RSBattleEnemy_C_OnDamageArmorBreak::CallFunc_OnDamageArmorBreak_bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetFormType
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetFormType final
{
public:
	EEnemyFormType                                Param_FormType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetFormType) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetFormType");
static_assert(sizeof(RSBattleEnemy_C_SetFormType) == 0x000001, "Wrong size on RSBattleEnemy_C_SetFormType");
static_assert(offsetof(RSBattleEnemy_C_SetFormType, Param_FormType) == 0x000000, "Member 'RSBattleEnemy_C_SetFormType::Param_FormType' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetArmorFlashControl
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_SetArmorFlashControl final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetArmorFlashControl) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetArmorFlashControl");
static_assert(sizeof(RSBattleEnemy_C_SetArmorFlashControl) == 0x0001C8, "Wrong size on RSBattleEnemy_C_SetArmorFlashControl");
static_assert(offsetof(RSBattleEnemy_C_SetArmorFlashControl, Result) == 0x000000, "Member 'RSBattleEnemy_C_SetArmorFlashControl::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetArmorFlashControl, Dummy) == 0x0001C0, "Member 'RSBattleEnemy_C_SetArmorFlashControl::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EventManagerStart
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_EventManagerStart final
{
public:
	bool                                          EnableTick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visibility;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerStart_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_918F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateBadStateStart_isStarting;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EventManagerStart) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EventManagerStart");
static_assert(sizeof(RSBattleEnemy_C_EventManagerStart) == 0x000030, "Wrong size on RSBattleEnemy_C_EventManagerStart");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, EnableTick) == 0x000000, "Member 'RSBattleEnemy_C_EventManagerStart::EnableTick' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, Visibility) == 0x000001, "Member 'RSBattleEnemy_C_EventManagerStart::Visibility' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_EventManagerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_EventManagerStart_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_EventManagerStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, Temp_int_Array_Index_Variable) == 0x000004, "Member 'RSBattleEnemy_C_EventManagerStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'RSBattleEnemy_C_EventManagerStart::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_EventManagerStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_GetBodyMeshes_Meshes) == 0x000018, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EventManagerStart, CallFunc_UpdateBadStateStart_isStarting) == 0x00002C, "Member 'RSBattleEnemy_C_EventManagerStart::CallFunc_UpdateBadStateStart_isStarting' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDeadMontage
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetDeadMontage final
{
public:
	bool                                          bEnableConsiderFlag;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9190[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LDeadAnimMontage;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDownDamageToDead_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDeadMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDeadMontage");
static_assert(sizeof(RSBattleEnemy_C_SetDeadMontage) == 0x000018, "Wrong size on RSBattleEnemy_C_SetDeadMontage");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, bEnableConsiderFlag) == 0x000000, "Member 'RSBattleEnemy_C_SetDeadMontage::bEnableConsiderFlag' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, LDeadAnimMontage) == 0x000008, "Member 'RSBattleEnemy_C_SetDeadMontage::LDeadAnimMontage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, CallFunc_IsDownDamageToDead_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetDeadMontage::CallFunc_IsDownDamageToDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_SetDeadMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_SetDeadMontage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'RSBattleEnemy_C_SetDeadMontage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadMontage, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'RSBattleEnemy_C_SetDeadMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitAttackArmor
// 0x0220 (0x0220 - 0x0000)
struct RSBattleEnemy_C_IsHitAttackArmor final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bHit;                                              // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbHit;                                             // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9191[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          LCollision;                                        // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 LArmorNoList;                                      // 0x01D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9192[0x6];                                     // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          K2Node_DynamicCast_AsDamage_Part_Collision_Component; // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9193[0x2];                                     // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9194[0x1];                                     // 0x0207(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9195[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetArmorPartsList_Armor;                  // 0x0210(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_IsHitAttackArmor) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitAttackArmor");
static_assert(sizeof(RSBattleEnemy_C_IsHitAttackArmor) == 0x000220, "Wrong size on RSBattleEnemy_C_IsHitAttackArmor");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_IsHitAttackArmor::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, bHit) == 0x0001C0, "Member 'RSBattleEnemy_C_IsHitAttackArmor::bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, LbHit) == 0x0001C1, "Member 'RSBattleEnemy_C_IsHitAttackArmor::LbHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, LCollision) == 0x0001C8, "Member 'RSBattleEnemy_C_IsHitAttackArmor::LCollision' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, LArmorNoList) == 0x0001D0, "Member 'RSBattleEnemy_C_IsHitAttackArmor::LArmorNoList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, Temp_bool_True_if_break_was_hit_Variable) == 0x0001E0, "Member 'RSBattleEnemy_C_IsHitAttackArmor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_IsValid_ReturnValue) == 0x0001E1, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, K2Node_DynamicCast_AsDamage_Part_Collision_Component) == 0x0001E8, "Member 'RSBattleEnemy_C_IsHitAttackArmor::K2Node_DynamicCast_AsDamage_Part_Collision_Component' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'RSBattleEnemy_C_IsHitAttackArmor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_Not_PreBool_ReturnValue) == 0x0001F1, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, Temp_int_Array_Index_Variable) == 0x0001F4, "Member 'RSBattleEnemy_C_IsHitAttackArmor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, Temp_int_Loop_Num_Variable) == 0x0001F8, "Member 'RSBattleEnemy_C_IsHitAttackArmor::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_Array_Length_ReturnValue) == 0x0001FC, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, Temp_int_Loop_Counter_Variable) == 0x000200, "Member 'RSBattleEnemy_C_IsHitAttackArmor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_Less_IntInt_ReturnValue) == 0x000204, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000205, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_BooleanAND_ReturnValue) == 0x000206, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_Add_IntInt_ReturnValue) == 0x000208, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitAttackArmor, CallFunc_GetArmorPartsList_Armor) == 0x000210, "Member 'RSBattleEnemy_C_IsHitAttackArmor::CallFunc_GetArmorPartsList_Armor' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetNoCollisionAndStopAiFade
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_SetNoCollisionAndStopAiFade final
{
public:
	bool                                          bNoColAndStopAi;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNoCollisionAndStopAiFade_dummy;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9196[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9197[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ai_Enemy_C*                         K2Node_DynamicCast_AsBP_Ai_Enemy;                  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetNoCollisionAndStopAiFade");
static_assert(sizeof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade) == 0x000028, "Wrong size on RSBattleEnemy_C_SetNoCollisionAndStopAiFade");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, bNoColAndStopAi) == 0x000000, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::bNoColAndStopAi' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, CallFunc_SetNoCollisionAndStopAiFade_dummy) == 0x000002, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::CallFunc_SetNoCollisionAndStopAiFade_dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, K2Node_DynamicCast_AsBP_Ai_Enemy) == 0x000018, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::K2Node_DynamicCast_AsBP_Ai_Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetNoCollisionAndStopAiFade, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_SetNoCollisionAndStopAiFade::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyEnableOutOfNotBossBattlefield
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield final
{
public:
	bool                                          SetEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9198[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetGroundLocationSimple_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9199[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield) == 0x000028, "Wrong size on RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, SetEnable) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::SetEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_IsBattling_bBatting) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_IsBattling_bBatting' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_GetGroundLocationSimple_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_GetGroundLocationSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SetEnemyEnableOutOfNotBossBattlefield::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartUpdateAreaOut
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_StartUpdateAreaOut final
{
public:
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_StartUpdateAreaOut) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartUpdateAreaOut");
static_assert(sizeof(RSBattleEnemy_C_StartUpdateAreaOut) == 0x000008, "Wrong size on RSBattleEnemy_C_StartUpdateAreaOut");
static_assert(offsetof(RSBattleEnemy_C_StartUpdateAreaOut, CallFunc_GetEnemyManager_Manager) == 0x000000, "Member 'RSBattleEnemy_C_StartUpdateAreaOut::CallFunc_GetEnemyManager_Manager' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.FrameDamage
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_FrameDamage final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartCrashChance_bStart;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_FrameDamage) == 0x000004, "Wrong alignment on RSBattleEnemy_C_FrameDamage");
static_assert(sizeof(RSBattleEnemy_C_FrameDamage) == 0x000008, "Wrong size on RSBattleEnemy_C_FrameDamage");
static_assert(offsetof(RSBattleEnemy_C_FrameDamage, Sec) == 0x000000, "Member 'RSBattleEnemy_C_FrameDamage::Sec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_FrameDamage, CallFunc_StartCrashChance_bStart) == 0x000004, "Member 'RSBattleEnemy_C_FrameDamage::CallFunc_StartCrashChance_bStart' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartSpawn
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_StartSpawn final
{
public:
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartSpawn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartSpawn");
static_assert(sizeof(RSBattleEnemy_C_StartSpawn) == 0x000010, "Wrong size on RSBattleEnemy_C_StartSpawn");
static_assert(offsetof(RSBattleEnemy_C_StartSpawn, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000000, "Member 'RSBattleEnemy_C_StartSpawn::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartSpawn, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_StartSpawn::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartSpawn, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_StartSpawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartSpawn, CallFunc_IsMissionActive_ReturnValue) == 0x00000A, "Member 'RSBattleEnemy_C_StartSpawn::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAreaOutActorLocation
// 0x009C (0x009C - 0x0000)
struct RSBattleEnemy_C_SetAreaOutActorLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAreaOutActorLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetAreaOutActorLocation");
static_assert(sizeof(RSBattleEnemy_C_SetAreaOutActorLocation) == 0x00009C, "Wrong size on RSBattleEnemy_C_SetAreaOutActorLocation");
static_assert(offsetof(RSBattleEnemy_C_SetAreaOutActorLocation, NewLocation) == 0x000000, "Member 'RSBattleEnemy_C_SetAreaOutActorLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAreaOutActorLocation, Return) == 0x00000C, "Member 'RSBattleEnemy_C_SetAreaOutActorLocation::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAreaOutActorLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000010, "Member 'RSBattleEnemy_C_SetAreaOutActorLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAreaOutActorLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_SetAreaOutActorLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckExecuteNotifyKind
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_CheckExecuteNotifyKind final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharaExecuteNotifyKind                       ExecuteKind;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExecute;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbExecute;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckExecuteNotifyKind) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckExecuteNotifyKind");
static_assert(sizeof(RSBattleEnemy_C_CheckExecuteNotifyKind) == 0x000010, "Wrong size on RSBattleEnemy_C_CheckExecuteNotifyKind");
static_assert(offsetof(RSBattleEnemy_C_CheckExecuteNotifyKind, Param_Owner) == 0x000000, "Member 'RSBattleEnemy_C_CheckExecuteNotifyKind::Param_Owner' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckExecuteNotifyKind, ExecuteKind) == 0x000008, "Member 'RSBattleEnemy_C_CheckExecuteNotifyKind::ExecuteKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckExecuteNotifyKind, IsExecute) == 0x000009, "Member 'RSBattleEnemy_C_CheckExecuteNotifyKind::IsExecute' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckExecuteNotifyKind, LbExecute) == 0x00000A, "Member 'RSBattleEnemy_C_CheckExecuteNotifyKind::LbExecute' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckExecuteNotifyKind, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'RSBattleEnemy_C_CheckExecuteNotifyKind::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetET_StopWaitMontage
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetET_StopWaitMontage final
{
public:
	class UAnimMontage*                           WaitMontage;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetET_StopWaitMontage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetET_StopWaitMontage");
static_assert(sizeof(RSBattleEnemy_C_GetET_StopWaitMontage) == 0x000008, "Wrong size on RSBattleEnemy_C_GetET_StopWaitMontage");
static_assert(offsetof(RSBattleEnemy_C_GetET_StopWaitMontage, WaitMontage) == 0x000000, "Member 'RSBattleEnemy_C_GetET_StopWaitMontage::WaitMontage' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckAttractSelf
// 0x01D8 (0x01D8 - 0x0000)
struct RSBattleEnemy_C_CheckAttractSelf final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttractSelf_ReturnValue;             // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919B[0x2];                                     // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnemyAttractType                             CallFunc_GetAttractType_ReturnValue;               // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHitPriority                         CallFunc_GetCharacterHitPriorityInterface_ReturnValue; // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01CC(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919C[0x2];                                     // 0x01CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAbsolutelyNoReactionBP_ReturnValue;     // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvincible_bInvincible;                 // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckAttractSelf) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckAttractSelf");
static_assert(sizeof(RSBattleEnemy_C_CheckAttractSelf) == 0x0001D8, "Wrong size on RSBattleEnemy_C_CheckAttractSelf");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_CheckAttractSelf::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, ReturnValue) == 0x0001C0, "Member 'RSBattleEnemy_C_CheckAttractSelf::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_CheckAttractSelf_ReturnValue) == 0x0001C1, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_CheckAttractSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_Map_Length_ReturnValue) == 0x0001C4, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_GetAttractType_ReturnValue) == 0x0001C8, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_GetAttractType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_Greater_IntInt_ReturnValue) == 0x0001C9, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001CA, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_GetCharacterHitPriorityInterface_ReturnValue) == 0x0001CB, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_GetCharacterHitPriorityInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, Temp_byte_Variable) == 0x0001CC, "Member 'RSBattleEnemy_C_CheckAttractSelf::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0001CD, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_Array_Find_ReturnValue) == 0x0001D0, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001D4, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_IsValid_ReturnValue) == 0x0001D5, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_IsAbsolutelyNoReactionBP_ReturnValue) == 0x0001D6, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_IsAbsolutelyNoReactionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckAttractSelf, CallFunc_IsInvincible_bInvincible) == 0x0001D7, "Member 'RSBattleEnemy_C_CheckAttractSelf::CallFunc_IsInvincible_bInvincible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAllowanceWaitSeconds
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SetAllowanceWaitSeconds final
{
public:
	class UEnemyAiComponentBase*                  CallFunc_GetEnemyAiComponent_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAllowanceWaitSeconds) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetAllowanceWaitSeconds");
static_assert(sizeof(RSBattleEnemy_C_SetAllowanceWaitSeconds) == 0x000010, "Wrong size on RSBattleEnemy_C_SetAllowanceWaitSeconds");
static_assert(offsetof(RSBattleEnemy_C_SetAllowanceWaitSeconds, CallFunc_GetEnemyAiComponent_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_SetAllowanceWaitSeconds::CallFunc_GetEnemyAiComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAllowanceWaitSeconds, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetAllowanceWaitSeconds::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetAllowanceWaitSeconds, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_SetAllowanceWaitSeconds::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.AreaStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_AreaStart final
{
public:
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_AreaStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_AreaStart");
static_assert(sizeof(RSBattleEnemy_C_AreaStart) == 0x000001, "Wrong size on RSBattleEnemy_C_AreaStart");
static_assert(offsetof(RSBattleEnemy_C_AreaStart, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_AreaStart::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UniqueBossLostActionAbort
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_UniqueBossLostActionAbort final
{
public:
	bool                                          IsUniqueAbort;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UniqueBossLostActionAbort) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UniqueBossLostActionAbort");
static_assert(sizeof(RSBattleEnemy_C_UniqueBossLostActionAbort) == 0x000001, "Wrong size on RSBattleEnemy_C_UniqueBossLostActionAbort");
static_assert(offsetof(RSBattleEnemy_C_UniqueBossLostActionAbort, IsUniqueAbort) == 0x000000, "Member 'RSBattleEnemy_C_UniqueBossLostActionAbort::IsUniqueAbort' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPsychicFieldDamageRateToBoss
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss");
static_assert(sizeof(RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss) == 0x000002, "Wrong size on RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss, CallFunc_IsBossEnemy_bBoss) == 0x000001, "Member 'RSBattleEnemy_C_IsPsychicFieldDamageRateToBoss::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DirectAttack
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_DirectAttack final
{
public:
	bool                                          UseFixDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixDamage;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SkillName;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackerOwner;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreInvalid;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       Effect_Info;                                       // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          UseHitPosition;                                    // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919F[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoDamageDisplay;                                   // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotifyAttackActorHit;                             // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue; // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DirectAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DirectAttack");
static_assert(sizeof(RSBattleEnemy_C_DirectAttack) == 0x000048, "Wrong size on RSBattleEnemy_C_DirectAttack");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, UseFixDamage) == 0x000000, "Member 'RSBattleEnemy_C_DirectAttack::UseFixDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, FixDamage) == 0x000004, "Member 'RSBattleEnemy_C_DirectAttack::FixDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, DataTable) == 0x000008, "Member 'RSBattleEnemy_C_DirectAttack::DataTable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, SkillName) == 0x000010, "Member 'RSBattleEnemy_C_DirectAttack::SkillName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, Attacker) == 0x000018, "Member 'RSBattleEnemy_C_DirectAttack::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, AttackerOwner) == 0x000020, "Member 'RSBattleEnemy_C_DirectAttack::AttackerOwner' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, IgnoreInvalid) == 0x000028, "Member 'RSBattleEnemy_C_DirectAttack::IgnoreInvalid' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, Effect_Info) == 0x00002C, "Member 'RSBattleEnemy_C_DirectAttack::Effect_Info' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, UseHitPosition) == 0x000034, "Member 'RSBattleEnemy_C_DirectAttack::UseHitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, HitPosition) == 0x000038, "Member 'RSBattleEnemy_C_DirectAttack::HitPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, NoDamageDisplay) == 0x000044, "Member 'RSBattleEnemy_C_DirectAttack::NoDamageDisplay' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, bNotifyAttackActorHit) == 0x000045, "Member 'RSBattleEnemy_C_DirectAttack::bNotifyAttackActorHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DirectAttack, CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue) == 0x000046, "Member 'RSBattleEnemy_C_DirectAttack::CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetBattlefieldFenceAppearRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_SetBattlefieldFenceAppearRate final
{
public:
	float                                         FenceBattleRate;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetBattlefieldFenceAppearRate) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetBattlefieldFenceAppearRate");
static_assert(sizeof(RSBattleEnemy_C_SetBattlefieldFenceAppearRate) == 0x000004, "Wrong size on RSBattleEnemy_C_SetBattlefieldFenceAppearRate");
static_assert(offsetof(RSBattleEnemy_C_SetBattlefieldFenceAppearRate, FenceBattleRate) == 0x000000, "Member 'RSBattleEnemy_C_SetBattlefieldFenceAppearRate::FenceBattleRate' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnHitDamage
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_OnHitDamage final
{
public:
	struct FHCHitResult                           Result;                                            // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnHitDamage_Return;                       // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnHitDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnHitDamage");
static_assert(sizeof(RSBattleEnemy_C_OnHitDamage) == 0x0001C8, "Wrong size on RSBattleEnemy_C_OnHitDamage");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamage, Result) == 0x000000, "Member 'RSBattleEnemy_C_OnHitDamage::Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamage, Return) == 0x0001C0, "Member 'RSBattleEnemy_C_OnHitDamage::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnHitDamage, CallFunc_OnHitDamage_Return) == 0x0001C1, "Member 'RSBattleEnemy_C_OnHitDamage::CallFunc_OnHitDamage_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetLocationAreaID
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetLocationAreaID final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetLocationAreaID) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetLocationAreaID");
static_assert(sizeof(RSBattleEnemy_C_GetLocationAreaID) == 0x000008, "Wrong size on RSBattleEnemy_C_GetLocationAreaID");
static_assert(offsetof(RSBattleEnemy_C_GetLocationAreaID, LocationId) == 0x000000, "Member 'RSBattleEnemy_C_GetLocationAreaID::LocationId' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLocationAreaID, AreaId) == 0x000004, "Member 'RSBattleEnemy_C_GetLocationAreaID::AreaId' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetGroupID
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_SetGroupID final
{
public:
	int32                                         NewGroupID;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetGroupID) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetGroupID");
static_assert(sizeof(RSBattleEnemy_C_SetGroupID) == 0x000004, "Wrong size on RSBattleEnemy_C_SetGroupID");
static_assert(offsetof(RSBattleEnemy_C_SetGroupID, NewGroupID) == 0x000000, "Member 'RSBattleEnemy_C_SetGroupID::NewGroupID' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckSpawnCondition
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_CheckSpawnCondition final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckSpawnCondition) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CheckSpawnCondition");
static_assert(sizeof(RSBattleEnemy_C_CheckSpawnCondition) == 0x000002, "Wrong size on RSBattleEnemy_C_CheckSpawnCondition");
static_assert(offsetof(RSBattleEnemy_C_CheckSpawnCondition, IsSpawnOK) == 0x000000, "Member 'RSBattleEnemy_C_CheckSpawnCondition::IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckSpawnCondition, CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK) == 0x000001, "Member 'RSBattleEnemy_C_CheckSpawnCondition::CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Is Enable Spawn by Condition
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_Is_Enable_Spawn_by_Condition final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsCondision_2;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIsCondision_1;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCondisionByRareSpawn_IsOK;           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCondisionByRareSpawn_IsOK_1;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A0[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Is_Enable_Spawn_by_Condition");
static_assert(sizeof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition) == 0x000020, "Wrong size on RSBattleEnemy_C_Is_Enable_Spawn_by_Condition");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, IsSpawnOK) == 0x000000, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, LIsCondision_2) == 0x000001, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::LIsCondision_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, LIsCondision_1) == 0x000002, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::LIsCondision_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_CheckCondisionByRareSpawn_IsOK) == 0x000006, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_CheckCondisionByRareSpawn_IsOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_CheckCondisionByRareSpawn_IsOK_1) == 0x000007, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_CheckCondisionByRareSpawn_IsOK_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000008, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Enable_Spawn_by_Condition, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_Is_Enable_Spawn_by_Condition::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SufferDamageAfterInterface
// 0x0200 (0x0200 - 0x0000)
struct RSBattleEnemy_C_SufferDamageAfterInterface final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Damage;                                            // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TakedDamage;                                       // 0x01C4(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x01C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x01C9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91A1[0x2];                                     // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A2[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x01D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91A3[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A4[0x1];                                     // 0x01E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddScore_EnemyDamage_ReturnValue;         // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddScore_EnemyDamage_ReturnValue_1;       // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMissionActive_ReturnValue;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SufferDamageAfterInterface) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SufferDamageAfterInterface");
static_assert(sizeof(RSBattleEnemy_C_SufferDamageAfterInterface) == 0x000200, "Wrong size on RSBattleEnemy_C_SufferDamageAfterInterface");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, Damage) == 0x0001C0, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::Damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, TakedDamage) == 0x0001C4, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::TakedDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, ReturnValue) == 0x0001C8, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, Temp_byte_Variable) == 0x0001C9, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_Array_Find_ReturnValue) == 0x0001CC, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001D0, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001D4, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, Temp_byte_Variable_1) == 0x0001D8, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_Array_Find_ReturnValue_1) == 0x0001DC, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001E0, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001E4, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001E5, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_Greater_IntInt_ReturnValue) == 0x0001E6, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x0001E8, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_AddScore_EnemyDamage_ReturnValue) == 0x0001F0, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_AddScore_EnemyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_AddScore_EnemyDamage_ReturnValue_1) == 0x0001F4, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_AddScore_EnemyDamage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_IsValid_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SufferDamageAfterInterface, CallFunc_IsMissionActive_ReturnValue) == 0x0001F9, "Member 'RSBattleEnemy_C_SufferDamageAfterInterface::CallFunc_IsMissionActive_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckCondisionByRareSpawn
// 0x00D0 (0x00D0 - 0x0000)
struct RSBattleEnemy_C_CheckCondisionByRareSpawn final
{
public:
	EBattleSimulatorRareSpawnCondision            Condision;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91A5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOK;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                LBattleSimulatorManager;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsOK;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A7[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorAndHpRateEnemyHpRate_HpRate;      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetActorAndHpRateEnemyHpRate_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A8[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A9[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHitUniqueObjectNum_ReturnValue;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AA[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEnemyBadStatusNum_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AB[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetKillUniqueObjectNum_ReturnValue;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AC[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetKillCombinationVisionNum_ReturnValue;  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_4;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AD[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetKillDriveNum_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_4;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AE[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_5;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerBadStatusNum_ReturnValue;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_6;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91AF[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemNum_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B0[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBattleTime_ReturnValue;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B1[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_7;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBrainCrashNum_ReturnValue;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_8;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_5;        // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B2[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerDamageSum_ReturnValue;           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B3[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_9;                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91B4[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEnemyDamageSum_ReturnValue;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_6;        // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckCondisionByRareSpawn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckCondisionByRareSpawn");
static_assert(sizeof(RSBattleEnemy_C_CheckCondisionByRareSpawn) == 0x0000D0, "Wrong size on RSBattleEnemy_C_CheckCondisionByRareSpawn");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, Condision) == 0x000000, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::Condision' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, Value) == 0x000004, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, IsOK) == 0x000008, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::IsOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, LBattleSimulatorManager) == 0x000010, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::LBattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, LIsOK) == 0x000018, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::LIsOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetActorAndHpRateEnemyHpRate_HpRate) == 0x00001C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetActorAndHpRateEnemyHpRate_HpRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetActorAndHpRateEnemyHpRate_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetActorAndHpRateEnemyHpRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000028, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetHPPercent_Percent) == 0x000040, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000045, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetHitUniqueObjectNum_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetHitUniqueObjectNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_1) == 0x000050, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetEnemyBadStatusNum_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetEnemyBadStatusNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_2) == 0x000058, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00005C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetKillUniqueObjectNum_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetKillUniqueObjectNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x000064, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_3) == 0x000068, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetKillCombinationVisionNum_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetKillCombinationVisionNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_4) == 0x000070, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000074, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetKillDriveNum_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetKillDriveNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_4) == 0x00007C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_5) == 0x000080, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetPlayerBadStatusNum_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetPlayerBadStatusNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_6) == 0x000088, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetItemNum_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetItemNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000094, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetBattleTime_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetBattleTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_Less_FloatFloat_ReturnValue) == 0x00009C, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_7) == 0x0000A0, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetBrainCrashNum_ReturnValue) == 0x0000A4, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetBrainCrashNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_8) == 0x0000A8, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_5) == 0x0000AC, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetPlayerDamageSum_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetPlayerDamageSum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_FTrunc_ReturnValue_9) == 0x0000B8, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_FTrunc_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x0000C0, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GetEnemyDamageSum_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GetEnemyDamageSum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_IsValid_ReturnValue_1) == 0x0000CC, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckCondisionByRareSpawn, CallFunc_GreaterEqual_IntInt_ReturnValue_6) == 0x0000CD, "Member 'RSBattleEnemy_C_CheckCondisionByRareSpawn::CallFunc_GreaterEqual_IntInt_ReturnValue_6' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDeadBeforeHitResult
// 0x01E8 (0x01E8 - 0x0000)
struct RSBattleEnemy_C_SetDeadBeforeHitResult final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B5[0x2];                                     // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             CallFunc_Array_Get_Item;                           // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91B6[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B7[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91B8[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseGuts_ReturnValue;                    // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDeadBeforeHitResult) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDeadBeforeHitResult");
static_assert(sizeof(RSBattleEnemy_C_SetDeadBeforeHitResult) == 0x0001E8, "Wrong size on RSBattleEnemy_C_SetDeadBeforeHitResult");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, Temp_bool_True_if_break_was_hit_Variable) == 0x0001C0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_Not_PreBool_ReturnValue) == 0x0001C1, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, Temp_int_Array_Index_Variable) == 0x0001C4, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_Array_Get_Item) == 0x0001C8, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_Array_Length_ReturnValue) == 0x0001CC, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, Temp_int_Loop_Counter_Variable) == 0x0001D4, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_Add_IntInt_ReturnValue) == 0x0001DC, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_BooleanAND_ReturnValue) == 0x0001E0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResult, CallFunc_IsUseGuts_ReturnValue) == 0x0001E1, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResult::CallFunc_IsUseGuts_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDeadBeforeHitResult
// 0x01C0 (0x01C0 - 0x0000)
struct RSBattleEnemy_C_GetDeadBeforeHitResult final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(RSBattleEnemy_C_GetDeadBeforeHitResult) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetDeadBeforeHitResult");
static_assert(sizeof(RSBattleEnemy_C_GetDeadBeforeHitResult) == 0x0001C0, "Wrong size on RSBattleEnemy_C_GetDeadBeforeHitResult");
static_assert(offsetof(RSBattleEnemy_C_GetDeadBeforeHitResult, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_GetDeadBeforeHitResult::HitResult' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDeadBeforeHitResultByDirectAttack
// 0x03B8 (0x03B8 - 0x0000)
struct RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	TArray<EHCSkillExtraType>                     LBeforeDeadHitResultExtraType;                     // 0x01C0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHCHitResult                           LHitResult;                                        // 0x01D0(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0390(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91B9[0x3];                                     // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91BA[0x3];                                     // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(sizeof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack) == 0x0003B8, "Wrong size on RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, LBeforeDeadHitResultExtraType) == 0x0001C0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::LBeforeDeadHitResultExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, LHitResult) == 0x0001D0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::LHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, Temp_byte_Variable) == 0x000390, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, Temp_int_Array_Index_Variable) == 0x000394, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, Temp_int_Loop_Num_Variable) == 0x000398, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, Temp_int_Loop_Counter_Variable) == 0x00039C, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_Array_Length_ReturnValue) == 0x0003A0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_Less_IntInt_ReturnValue) == 0x0003A4, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_Add_IntInt_ReturnValue) == 0x0003A8, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_Array_AddUnique_ReturnValue) == 0x0003AC, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_Array_Find_ReturnValue) == 0x0003B0, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0003B4, "Member 'RSBattleEnemy_C_SetDeadBeforeHitResultByDirectAttack::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartCrashVisionEffect
// 0x1020 (0x1020 - 0x0000)
struct RSBattleEnemy_C_OnStartCrashVisionEffect final
{
public:
	bool                                          bUniqueEffect;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91BB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        LParticle;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LEffectIndex;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91BC[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnemyCrashVisionEffectInfo           LEffectInfo;                                       // 0x0020(0x0040)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_10;                              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_11;                              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_12;                              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_13;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_14;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_15;                              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_16;                              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_17;                              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_18;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_19;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_20;                              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_21;                              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_22;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_23;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_24;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91BD[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91BE[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable;                              // 0x00F0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_1;                            // 0x0130(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_2;                            // 0x0170(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_3;                            // 0x01B0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_4;                            // 0x01F0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_5;                            // 0x0230(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_6;                            // 0x0270(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_7;                            // 0x02B0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_8;                            // 0x02F0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_9;                            // 0x0330(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_10;                           // 0x0370(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_11;                           // 0x03B0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_12;                           // 0x03F0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_13;                           // 0x0430(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_14;                           // 0x0470(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_15;                           // 0x04B0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_16;                           // 0x04F0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91BF[0xF];                                     // 0x0531(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_17;                           // 0x0540(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_18;                           // 0x0580(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_19;                           // 0x05C0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_20;                           // 0x0600(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_21;                           // 0x0640(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_22;                           // 0x0680(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_23;                           // 0x06C0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_24;                           // 0x0700(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_25;                           // 0x0740(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_26;                           // 0x0780(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_27;                           // 0x07C0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_28;                           // 0x0800(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_29;                           // 0x0840(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_30;                           // 0x0880(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_31;                           // 0x08C0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_32;                           // 0x0900(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           Temp_struct_Variable_33;                           // 0x0940(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0981(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C0[0x6];                                     // 0x0982(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0988(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C1[0x3];                                     // 0x0991(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_25;                              // 0x0994(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         CallFunc_Array_Get_Item;                           // 0x0998(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x09C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C2[0x7];                                     // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x09D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C3[0x6];                                     // 0x09DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         CallFunc_Array_Get_Item_1;                         // 0x09E0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C4[0x7];                                     // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0A20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0A21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C5[0x2];                                     // 0x0A22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_26;                              // 0x0A24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0A28(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0A30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C6[0xF];                                     // 0x0A31(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnemyCrashVisionEffectData           CallFunc_GetDataTableRowFromName_OutRow;           // 0x0A40(0x0500)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0F40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C7[0x7];                                     // 0x0F41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0F48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_Get_Current_Crash_Vision_Player_PlayerID; // 0x0F50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0F51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91C8[0x2];                                     // 0x0F52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0F54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C9[0x8];                                     // 0x0F58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnemyCrashVisionEffectInfo           K2Node_Select_Default_1;                           // 0x0F60(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           K2Node_Select_Default_2;                           // 0x0FA0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEnemyCrashVisionEffectInfo           K2Node_Select_Default_3;                           // 0x0FE0(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_OnStartCrashVisionEffect) == 0x000010, "Wrong alignment on RSBattleEnemy_C_OnStartCrashVisionEffect");
static_assert(sizeof(RSBattleEnemy_C_OnStartCrashVisionEffect) == 0x001020, "Wrong size on RSBattleEnemy_C_OnStartCrashVisionEffect");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, bUniqueEffect) == 0x000000, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::bUniqueEffect' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, LParticle) == 0x000008, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::LParticle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, LEffectIndex) == 0x000010, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::LEffectIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, LEffectInfo) == 0x000020, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::LEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable) == 0x000060, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_1) == 0x000064, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_2) == 0x000068, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_3) == 0x00006C, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_4) == 0x000070, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_5) == 0x000074, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_6) == 0x000078, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_7) == 0x00007C, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_8) == 0x000080, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_9) == 0x000084, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_10) == 0x000088, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_11) == 0x00008C, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_12) == 0x000090, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_13) == 0x000094, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_14) == 0x000098, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_15) == 0x00009C, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_16) == 0x0000A0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_17) == 0x0000A4, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_18) == 0x0000A8, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_19) == 0x0000AC, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_20) == 0x0000B0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_21) == 0x0000B4, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_22) == 0x0000B8, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_23) == 0x0000BC, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_24) == 0x0000C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_bool_Variable) == 0x0000C4, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_BreakTransform_Location) == 0x0000C8, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_BreakTransform_Rotation) == 0x0000D4, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_BreakTransform_Scale) == 0x0000E0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_byte_Variable) == 0x0000EC, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable) == 0x0000F0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_1) == 0x000130, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_2) == 0x000170, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_3) == 0x0001B0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_4) == 0x0001F0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_5) == 0x000230, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_6) == 0x000270, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_7) == 0x0002B0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_8) == 0x0002F0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_9) == 0x000330, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_10) == 0x000370, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_11) == 0x0003B0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_12) == 0x0003F0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_13) == 0x000430, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_14) == 0x000470, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_15) == 0x0004B0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_16) == 0x0004F0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_byte_Variable_1) == 0x000530, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_17) == 0x000540, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_18) == 0x000580, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_19) == 0x0005C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_20) == 0x000600, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_21) == 0x000640, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_22) == 0x000680, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_23) == 0x0006C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_24) == 0x000700, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_25) == 0x000740, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_26) == 0x000780, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_27) == 0x0007C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_28) == 0x000800, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_29) == 0x000840, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_30) == 0x000880, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_30' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_31) == 0x0008C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_31' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_32) == 0x000900, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_32' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_struct_Variable_33) == 0x000940, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_struct_Variable_33' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_byte_Variable_2) == 0x000980, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValid_ReturnValue) == 0x000981, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000988, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValid_ReturnValue_1) == 0x000990, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_25) == 0x000994, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_25' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_Array_Get_Item) == 0x000998, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0009C0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_LoadSoftObject_ReturnValue) == 0x0009C8, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_DynamicCast_AsParticle_System) == 0x0009D0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_DynamicCast_bSuccess) == 0x0009D8, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0009D9, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_Array_Get_Item_1) == 0x0009E0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000A08, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_LoadSoftObject_ReturnValue_1) == 0x000A10, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_DynamicCast_AsParticle_System_1) == 0x000A18, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_DynamicCast_bSuccess_1) == 0x000A20, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000A21, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, Temp_int_Variable_26) == 0x000A24, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::Temp_int_Variable_26' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_GetName_ReturnValue) == 0x000A28, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValid_ReturnValue_2) == 0x000A30, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_GetDataTableRowFromName_OutRow) == 0x000A40, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000F40, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_GetBrainCrashManager_Manager) == 0x000F48, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_Get_Current_Crash_Vision_Player_PlayerID) == 0x000F50, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_Get_Current_Crash_Vision_Player_PlayerID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, CallFunc_IsValid_ReturnValue_3) == 0x000F51, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_Select_Default) == 0x000F54, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_Select_Default_1) == 0x000F60, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_Select_Default_2) == 0x000FA0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashVisionEffect, K2Node_Select_Default_3) == 0x000FE0, "Member 'RSBattleEnemy_C_OnStartCrashVisionEffect::K2Node_Select_Default_3' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CrashVisionDamage
// 0x02D8 (0x02D8 - 0x0000)
struct RSBattleEnemy_C_CrashVisionDamage final
{
public:
	int32                                         LDamage;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LBeforeHitInvincibleParts;                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91CA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     Param_LEnemyManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       BrainCrashAction;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91CB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           HitResult;                                         // 0x0018(0x01C0)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Temp_bool_Variable;                                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91CC[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91CD[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalcBrainCrashDamage_damage;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91CE[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91CF[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddScore_EnemyDamage_ReturnValue;         // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnDead_Dummy;                             // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D0[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D1[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo;                 // 0x020C(0x0008)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyIgnoreDamage_ReturnValue;          // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D2[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitEffectInfo                       K2Node_MakeStruct_HCHitEffectInfo_1;               // 0x0218(0x0008)(NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcBrainCrashDamage_damage_1;            // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x0228(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91D3[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D4[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LeaveBrainCrashAccess_Dummy;              // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D5[0x6];                                     // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D6[0x2];                                     // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead; // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D7[0x1];                                     // 0x026B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBrainCrashEffectLocation_ReturnValue;  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead_1;                           // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElectric_ReturnValue;                   // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x0283(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead_2;                           // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D8[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D9[0x6];                                     // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x02CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91DA[0x1];                                     // 0x02CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHp_ReturnValue;                        // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CrashVisionDamage) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CrashVisionDamage");
static_assert(sizeof(RSBattleEnemy_C_CrashVisionDamage) == 0x0002D8, "Wrong size on RSBattleEnemy_C_CrashVisionDamage");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, LDamage) == 0x000000, "Member 'RSBattleEnemy_C_CrashVisionDamage::LDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, LBeforeHitInvincibleParts) == 0x000004, "Member 'RSBattleEnemy_C_CrashVisionDamage::LBeforeHitInvincibleParts' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, Param_LEnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_CrashVisionDamage::Param_LEnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, BrainCrashAction) == 0x000010, "Member 'RSBattleEnemy_C_CrashVisionDamage::BrainCrashAction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, HitResult) == 0x000018, "Member 'RSBattleEnemy_C_CrashVisionDamage::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, Temp_bool_Variable) == 0x0001D8, "Member 'RSBattleEnemy_C_CrashVisionDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetHPPercent_ReturnValue) == 0x0001DC, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsBossEnemy_bBoss) == 0x0001E0, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_CalcBrainCrashDamage_damage) == 0x0001E4, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_CalcBrainCrashDamage_damage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x0001F0, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue) == 0x0001F8, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_AddScore_EnemyDamage_ReturnValue) == 0x0001FC, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_AddScore_EnemyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_OnDead_Dummy) == 0x000200, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_OnDead_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetId_ReturnValue) == 0x000204, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000208, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, K2Node_MakeStruct_HCHitEffectInfo) == 0x00020C, "Member 'RSBattleEnemy_C_CrashVisionDamage::K2Node_MakeStruct_HCHitEffectInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_1) == 0x000214, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsEnemyIgnoreDamage_ReturnValue) == 0x000215, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsEnemyIgnoreDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, K2Node_MakeStruct_HCHitEffectInfo_1) == 0x000218, "Member 'RSBattleEnemy_C_CrashVisionDamage::K2Node_MakeStruct_HCHitEffectInfo_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, Temp_float_Variable) == 0x000220, "Member 'RSBattleEnemy_C_CrashVisionDamage::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_CalcBrainCrashDamage_damage_1) == 0x000224, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_CalcBrainCrashDamage_damage_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, Temp_byte_Variable) == 0x000228, "Member 'RSBattleEnemy_C_CrashVisionDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetBrainCore_CoreObject) == 0x000230, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_2) == 0x000238, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_Array_AddUnique_ReturnValue) == 0x00023C, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetPlayerManager_PlayerManager) == 0x000240, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetPlayer_ReturnValue) == 0x000248, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsVisible_ReturnValue) == 0x000250, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_LeaveBrainCrashAccess_Dummy) == 0x000251, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_LeaveBrainCrashAccess_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetEnemyManager_Manager) == 0x000258, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_3) == 0x000260, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsAvatar_IsAvatar) == 0x000261, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, K2Node_Select_Default) == 0x000264, "Member 'RSBattleEnemy_C_CrashVisionDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead) == 0x000268, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_4) == 0x000269, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsDead_bDead) == 0x00026A, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetBrainCrashEffectLocation_ReturnValue) == 0x00026C, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetBrainCrashEffectLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000278, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsDead_bDead_1) == 0x000280, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsDead_bDead_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_5) == 0x000281, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsElectric_ReturnValue) == 0x000282, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsElectric_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, Temp_byte_Variable_1) == 0x000283, "Member 'RSBattleEnemy_C_CrashVisionDamage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000284, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsDead_bDead_2) == 0x000288, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsDead_bDead_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00028C, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_BreakRotator_Roll) == 0x000298, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_BreakRotator_Pitch) == 0x00029C, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_BreakRotator_Yaw) == 0x0002A0, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_MakeRotator_ReturnValue) == 0x0002A4, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_6) == 0x0002B0, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0002B1, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetPlayerPawn_ReturnValue) == 0x0002B8, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, K2Node_DynamicCast_AsRSBattle_Player) == 0x0002C0, "Member 'RSBattleEnemy_C_CrashVisionDamage::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, K2Node_DynamicCast_bSuccess) == 0x0002C8, "Member 'RSBattleEnemy_C_CrashVisionDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_7) == 0x0002C9, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_IsValid_ReturnValue_8) == 0x0002CA, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_GetHp_ReturnValue) == 0x0002CC, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_GetHp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CrashVisionDamage, CallFunc_Max_ReturnValue) == 0x0002D0, "Member 'RSBattleEnemy_C_CrashVisionDamage::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableSpawnByConditionEnemyHpRate
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate");
static_assert(sizeof(RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate, IsSpawnOK) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate::IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate, CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK) == 0x000001, "Member 'RSBattleEnemy_C_IsEnableSpawnByConditionEnemyHpRate::CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RareSpawnResultLog
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_RareSpawnResultLog final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91DB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91DC[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_RareSpawnResultLog) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RareSpawnResultLog");
static_assert(sizeof(RSBattleEnemy_C_RareSpawnResultLog) == 0x000038, "Wrong size on RSBattleEnemy_C_RareSpawnResultLog");
static_assert(offsetof(RSBattleEnemy_C_RareSpawnResultLog, Success) == 0x000000, "Member 'RSBattleEnemy_C_RareSpawnResultLog::Success' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RareSpawnResultLog, CallFunc_GetEnemyManager_EnemyManager) == 0x000008, "Member 'RSBattleEnemy_C_RareSpawnResultLog::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RareSpawnResultLog, CallFunc_SelectString_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_RareSpawnResultLog::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RareSpawnResultLog, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_RareSpawnResultLog::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RareSpawnResultLog, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_RareSpawnResultLog::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetAvatarCopyTags
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetAvatarCopyTags final
{
public:
	bool                                          InAvatarCopyTags;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetAvatarCopyTags) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetAvatarCopyTags");
static_assert(sizeof(RSBattleEnemy_C_SetAvatarCopyTags) == 0x000001, "Wrong size on RSBattleEnemy_C_SetAvatarCopyTags");
static_assert(offsetof(RSBattleEnemy_C_SetAvatarCopyTags, InAvatarCopyTags) == 0x000000, "Member 'RSBattleEnemy_C_SetAvatarCopyTags::InAvatarCopyTags' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsAvatarCopyTags
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsAvatarCopyTags final
{
public:
	bool                                          AvatarCopyTags;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsAvatarCopyTags) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsAvatarCopyTags");
static_assert(sizeof(RSBattleEnemy_C_IsAvatarCopyTags) == 0x000001, "Wrong size on RSBattleEnemy_C_IsAvatarCopyTags");
static_assert(offsetof(RSBattleEnemy_C_IsAvatarCopyTags, AvatarCopyTags) == 0x000000, "Member 'RSBattleEnemy_C_IsAvatarCopyTags::AvatarCopyTags' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PlayBattleStartRevivalBossBT
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_PlayBattleStartRevivalBossBT final
{
public:
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x0000(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABrainTalkManager*                      CallFunc_GetBrainTalkManager_BrainTalkManager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BrainTalkBt_BattleSim_BattleStart_RevivalBoss_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT) == 0x000008, "Wrong alignment on RSBattleEnemy_C_PlayBattleStartRevivalBossBT");
static_assert(sizeof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT) == 0x000028, "Wrong size on RSBattleEnemy_C_PlayBattleStartRevivalBossBT");
static_assert(offsetof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT, CallFunc_GetName_ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_PlayBattleStartRevivalBossBT::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT, CallFunc_Conv_NameToString_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_PlayBattleStartRevivalBossBT::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT, CallFunc_GetBrainTalkManager_BrainTalkManager) == 0x000018, "Member 'RSBattleEnemy_C_PlayBattleStartRevivalBossBT::CallFunc_GetBrainTalkManager_BrainTalkManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT, CallFunc_BrainTalkBt_BattleSim_BattleStart_RevivalBoss_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_PlayBattleStartRevivalBossBT::CallFunc_BrainTalkBt_BattleSim_BattleStart_RevivalBoss_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayBattleStartRevivalBossBT, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_PlayBattleStartRevivalBossBT::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetSpawnLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSpawnLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetSpawnLocation");
static_assert(sizeof(RSBattleEnemy_C_GetSpawnLocation) == 0x000018, "Wrong size on RSBattleEnemy_C_GetSpawnLocation");
static_assert(offsetof(RSBattleEnemy_C_GetSpawnLocation, Location) == 0x000000, "Member 'RSBattleEnemy_C_GetSpawnLocation::Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSpawnLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetSpawnLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSpawnRotation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetSpawnRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetSpawnRotation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetSpawnRotation");
static_assert(sizeof(RSBattleEnemy_C_GetSpawnRotation) == 0x000018, "Wrong size on RSBattleEnemy_C_GetSpawnRotation");
static_assert(offsetof(RSBattleEnemy_C_GetSpawnRotation, Rotation) == 0x000000, "Member 'RSBattleEnemy_C_GetSpawnRotation::Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetSpawnRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetSpawnRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnSimulatorStartDirectionClose
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_OnSimulatorStartDirectionClose final
{
public:
	float                                         MoveDelaySec;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnSimulatorStartDirectionClose) == 0x000004, "Wrong alignment on RSBattleEnemy_C_OnSimulatorStartDirectionClose");
static_assert(sizeof(RSBattleEnemy_C_OnSimulatorStartDirectionClose) == 0x000008, "Wrong size on RSBattleEnemy_C_OnSimulatorStartDirectionClose");
static_assert(offsetof(RSBattleEnemy_C_OnSimulatorStartDirectionClose, MoveDelaySec) == 0x000000, "Member 'RSBattleEnemy_C_OnSimulatorStartDirectionClose::MoveDelaySec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnSimulatorStartDirectionClose, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_OnSimulatorStartDirectionClose::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateSimulatorStart
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_UpdateSimulatorStart final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateSimulatorStart) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateSimulatorStart");
static_assert(sizeof(RSBattleEnemy_C_UpdateSimulatorStart) == 0x000008, "Wrong size on RSBattleEnemy_C_UpdateSimulatorStart");
static_assert(offsetof(RSBattleEnemy_C_UpdateSimulatorStart, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateSimulatorStart::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSimulatorStart, CallFunc_IsEnable_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_UpdateSimulatorStart::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateSimulatorStart, CallFunc_IsOver_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateSimulatorStart::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnableLostActionTimer
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_SetEnableLostActionTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetEnableLostActionTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetEnableLostActionTimer");
static_assert(sizeof(RSBattleEnemy_C_SetEnableLostActionTimer) == 0x000004, "Wrong size on RSBattleEnemy_C_SetEnableLostActionTimer");
static_assert(offsetof(RSBattleEnemy_C_SetEnableLostActionTimer, Time) == 0x000000, "Member 'RSBattleEnemy_C_SetEnableLostActionTimer::Time' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateEnableLostActionTimer
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_UpdateEnableLostActionTimer final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateEnableLostActionTimer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateEnableLostActionTimer");
static_assert(sizeof(RSBattleEnemy_C_UpdateEnableLostActionTimer) == 0x000008, "Wrong size on RSBattleEnemy_C_UpdateEnableLostActionTimer");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableLostActionTimer, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_UpdateEnableLostActionTimer::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableLostActionTimer, CallFunc_IsOver_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_UpdateEnableLostActionTimer::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableLostActionTimer, CallFunc_IsEnable_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_UpdateEnableLostActionTimer::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsExistEnableLostActionTimer
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsExistEnableLostActionTimer final
{
public:
	bool                                          bExist;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsExistEnableLostActionTimer) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsExistEnableLostActionTimer");
static_assert(sizeof(RSBattleEnemy_C_IsExistEnableLostActionTimer) == 0x000002, "Wrong size on RSBattleEnemy_C_IsExistEnableLostActionTimer");
static_assert(offsetof(RSBattleEnemy_C_IsExistEnableLostActionTimer, bExist) == 0x000000, "Member 'RSBattleEnemy_C_IsExistEnableLostActionTimer::bExist' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsExistEnableLostActionTimer, CallFunc_IsEnable_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsExistEnableLostActionTimer::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.TickLostActionReset
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_TickLostActionReset final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbEnd;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue_1;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAction_Dummy;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMotionEnd_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyActionAnimKind                           CallFunc_GetEnemyActionAnimKind_ReturnValue;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceivedNotifyAnimEnd_Received;           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_TickLostActionReset) == 0x000004, "Wrong alignment on RSBattleEnemy_C_TickLostActionReset");
static_assert(sizeof(RSBattleEnemy_C_TickLostActionReset) == 0x000010, "Wrong size on RSBattleEnemy_C_TickLostActionReset");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_TickLostActionReset::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, LbEnd) == 0x000004, "Member 'RSBattleEnemy_C_TickLostActionReset::LbEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_IsOver_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_IsOver_ReturnValue_1) == 0x000006, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_IsOver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_ResetAction_Dummy) == 0x000007, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_ResetAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_IsMotionEnd_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_IsMotionEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_GetEnemyActionAnimKind_ReturnValue) == 0x00000A, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_GetEnemyActionAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000D, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_TickLostActionReset, CallFunc_ReceivedNotifyAnimEnd_Received) == 0x00000E, "Member 'RSBattleEnemy_C_TickLostActionReset::CallFunc_ReceivedNotifyAnimEnd_Received' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartLostActionResetTick
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_StartLostActionResetTick final
{
public:
	EnemyActionAnimKind                           LostAction;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91DD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_StartLostActionResetTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_StartLostActionResetTick");
static_assert(sizeof(RSBattleEnemy_C_StartLostActionResetTick) == 0x000008, "Wrong size on RSBattleEnemy_C_StartLostActionResetTick");
static_assert(offsetof(RSBattleEnemy_C_StartLostActionResetTick, LostAction) == 0x000000, "Member 'RSBattleEnemy_C_StartLostActionResetTick::LostAction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartLostActionResetTick, Time) == 0x000004, "Member 'RSBattleEnemy_C_StartLostActionResetTick::Time' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsLostActionResetTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsLostActionResetTick final
{
public:
	bool                                          bTick;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsLostActionResetTick) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsLostActionResetTick");
static_assert(sizeof(RSBattleEnemy_C_IsLostActionResetTick) == 0x000001, "Wrong size on RSBattleEnemy_C_IsLostActionResetTick");
static_assert(offsetof(RSBattleEnemy_C_IsLostActionResetTick, bTick) == 0x000000, "Member 'RSBattleEnemy_C_IsLostActionResetTick::bTick' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartFallIfFlyingIF
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartFallIfFlyingIF final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartFallIfFlyingIF) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartFallIfFlyingIF");
static_assert(sizeof(RSBattleEnemy_C_StartFallIfFlyingIF) == 0x000001, "Wrong size on RSBattleEnemy_C_StartFallIfFlyingIF");
static_assert(offsetof(RSBattleEnemy_C_StartFallIfFlyingIF, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_StartFallIfFlyingIF::bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEndAnimDieIF
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnEndAnimDieIF final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEndAnimDieIF) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnEndAnimDieIF");
static_assert(sizeof(RSBattleEnemy_C_OnEndAnimDieIF) == 0x000001, "Wrong size on RSBattleEnemy_C_OnEndAnimDieIF");
static_assert(offsetof(RSBattleEnemy_C_OnEndAnimDieIF, bDummy) == 0x000000, "Member 'RSBattleEnemy_C_OnEndAnimDieIF::bDummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetAction_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ResetAction_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetAction_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ResetAction_Native");
static_assert(sizeof(RSBattleEnemy_C_ResetAction_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_ResetAction_Native");
static_assert(offsetof(RSBattleEnemy_C_ResetAction_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_ResetAction_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_UpdateFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateFall_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UpdateFall_Native");
static_assert(sizeof(RSBattleEnemy_C_UpdateFall_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_UpdateFall_Native");
static_assert(offsetof(RSBattleEnemy_C_UpdateFall_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_UpdateFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateDamageAnim_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_UpdateDamageAnim_Native final
{
public:
	bool                                          DamageEnd;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DamageDownEnd;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateDamageAnim_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_UpdateDamageAnim_Native");
static_assert(sizeof(RSBattleEnemy_C_UpdateDamageAnim_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_UpdateDamageAnim_Native");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim_Native, DamageEnd) == 0x000000, "Member 'RSBattleEnemy_C_UpdateDamageAnim_Native::DamageEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateDamageAnim_Native, DamageDownEnd) == 0x000001, "Member 'RSBattleEnemy_C_UpdateDamageAnim_Native::DamageDownEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SwitchDispCore_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SwitchDispCore_Native final
{
public:
	bool                                          DisplayOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SwitchDispCore_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SwitchDispCore_Native");
static_assert(sizeof(RSBattleEnemy_C_SwitchDispCore_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SwitchDispCore_Native");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore_Native, DisplayOn) == 0x000000, "Member 'RSBattleEnemy_C_SwitchDispCore_Native::DisplayOn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SwitchDispCore_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StoreWeakState_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StoreWeakState_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StoreWeakState_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StoreWeakState_Native");
static_assert(sizeof(RSBattleEnemy_C_StoreWeakState_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_StoreWeakState_Native");
static_assert(offsetof(RSBattleEnemy_C_StoreWeakState_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StoreWeakState_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StopCrashChanceLoopEffect_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StopCrashChanceLoopEffect_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StopCrashChanceLoopEffect_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StopCrashChanceLoopEffect_Native");
static_assert(sizeof(RSBattleEnemy_C_StopCrashChanceLoopEffect_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_StopCrashChanceLoopEffect_Native");
static_assert(offsetof(RSBattleEnemy_C_StopCrashChanceLoopEffect_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StopCrashChanceLoopEffect_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartVanish_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_StartVanish_Native final
{
public:
	float                                         VanishSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartVanish;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndVanish;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartVanish_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_StartVanish_Native");
static_assert(sizeof(RSBattleEnemy_C_StartVanish_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_StartVanish_Native");
static_assert(offsetof(RSBattleEnemy_C_StartVanish_Native, VanishSec) == 0x000000, "Member 'RSBattleEnemy_C_StartVanish_Native::VanishSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartVanish_Native, StartVanish) == 0x000004, "Member 'RSBattleEnemy_C_StartVanish_Native::StartVanish' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartVanish_Native, EndVanish) == 0x000008, "Member 'RSBattleEnemy_C_StartVanish_Native::EndVanish' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartVanish_Native, ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_StartVanish_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartDamageFloating_Native");
static_assert(sizeof(RSBattleEnemy_C_StartDamageFloating_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_StartDamageFloating_Native");
static_assert(offsetof(RSBattleEnemy_C_StartDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_StartDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetWeakEmissiveOff_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_SetWeakEmissiveOff_Native final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetWeakEmissiveOff_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetWeakEmissiveOff_Native");
static_assert(sizeof(RSBattleEnemy_C_SetWeakEmissiveOff_Native) == 0x000018, "Wrong size on RSBattleEnemy_C_SetWeakEmissiveOff_Native");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff_Native, WeakSlotName) == 0x000000, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff_Native::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetWeakEmissiveOff_Native, ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetWeakEmissiveOff_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetUseWaitNoInterpolation_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetUseWaitNoInterpolation_Native final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetUseWaitNoInterpolation_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetUseWaitNoInterpolation_Native");
static_assert(sizeof(RSBattleEnemy_C_SetUseWaitNoInterpolation_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetUseWaitNoInterpolation_Native");
static_assert(offsetof(RSBattleEnemy_C_SetUseWaitNoInterpolation_Native, Use) == 0x000000, "Member 'RSBattleEnemy_C_SetUseWaitNoInterpolation_Native::Use' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetUseWaitNoInterpolation_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetUseWaitNoInterpolation_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetReserveAction_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SetReserveAction_Native final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91DE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param00;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param01;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetReserveAction_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetReserveAction_Native");
static_assert(sizeof(RSBattleEnemy_C_SetReserveAction_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_SetReserveAction_Native");
static_assert(offsetof(RSBattleEnemy_C_SetReserveAction_Native, Action) == 0x000000, "Member 'RSBattleEnemy_C_SetReserveAction_Native::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetReserveAction_Native, Param00) == 0x000004, "Member 'RSBattleEnemy_C_SetReserveAction_Native::Param00' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetReserveAction_Native, Param01) == 0x000008, "Member 'RSBattleEnemy_C_SetReserveAction_Native::Param01' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetReserveAction_Native, ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_SetReserveAction_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetLanding_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetLanding_Native final
{
public:
	bool                                          bLanding;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetLanding_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetLanding_Native");
static_assert(sizeof(RSBattleEnemy_C_SetLanding_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetLanding_Native");
static_assert(offsetof(RSBattleEnemy_C_SetLanding_Native, bLanding) == 0x000000, "Member 'RSBattleEnemy_C_SetLanding_Native::bLanding' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetLanding_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetLanding_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIsMoveAnim_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetIsMoveAnim_Native final
{
public:
	bool                                          NewIsMoveAnim;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIsMoveAnim_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetIsMoveAnim_Native");
static_assert(sizeof(RSBattleEnemy_C_SetIsMoveAnim_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetIsMoveAnim_Native");
static_assert(offsetof(RSBattleEnemy_C_SetIsMoveAnim_Native, NewIsMoveAnim) == 0x000000, "Member 'RSBattleEnemy_C_SetIsMoveAnim_Native::NewIsMoveAnim' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIsMoveAnim_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetIsMoveAnim_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIsLaunchDown_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetIsLaunchDown_Native final
{
public:
	bool                                          NewIsLaunchDown;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIsLaunchDown_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetIsLaunchDown_Native");
static_assert(sizeof(RSBattleEnemy_C_SetIsLaunchDown_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetIsLaunchDown_Native");
static_assert(offsetof(RSBattleEnemy_C_SetIsLaunchDown_Native, NewIsLaunchDown) == 0x000000, "Member 'RSBattleEnemy_C_SetIsLaunchDown_Native::NewIsLaunchDown' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIsLaunchDown_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetIsLaunchDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIsLandCheck_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetIsLandCheck_Native final
{
public:
	bool                                          NewIsLandCheck;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIsLandCheck_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetIsLandCheck_Native");
static_assert(sizeof(RSBattleEnemy_C_SetIsLandCheck_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetIsLandCheck_Native");
static_assert(offsetof(RSBattleEnemy_C_SetIsLandCheck_Native, NewIsLandCheck) == 0x000000, "Member 'RSBattleEnemy_C_SetIsLandCheck_Native::NewIsLandCheck' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIsLandCheck_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetIsLandCheck_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIsBrainAccess_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetIsBrainAccess_Native final
{
public:
	bool                                          NewIsBrainAccess;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIsBrainAccess_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetIsBrainAccess_Native");
static_assert(sizeof(RSBattleEnemy_C_SetIsBrainAccess_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetIsBrainAccess_Native");
static_assert(offsetof(RSBattleEnemy_C_SetIsBrainAccess_Native, NewIsBrainAccess) == 0x000000, "Member 'RSBattleEnemy_C_SetIsBrainAccess_Native::NewIsBrainAccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIsBrainAccess_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetIsBrainAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetIdleMove_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetIdleMove_Native final
{
public:
	bool                                          IsIdle;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetIdleMove_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetIdleMove_Native");
static_assert(sizeof(RSBattleEnemy_C_SetIdleMove_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_SetIdleMove_Native");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove_Native, IsIdle) == 0x000000, "Member 'RSBattleEnemy_C_SetIdleMove_Native::IsIdle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetIdleMove_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetIdleMove_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetHp_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetHp_Native final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetHp_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetHp_Native");
static_assert(sizeof(RSBattleEnemy_C_SetHp_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_SetHp_Native");
static_assert(offsetof(RSBattleEnemy_C_SetHp_Native, HP) == 0x000000, "Member 'RSBattleEnemy_C_SetHp_Native::HP' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetHp_Native, ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetHp_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDownTimer_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetDownTimer_Native final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDownTimer_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetDownTimer_Native");
static_assert(sizeof(RSBattleEnemy_C_SetDownTimer_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_SetDownTimer_Native");
static_assert(offsetof(RSBattleEnemy_C_SetDownTimer_Native, NewTime) == 0x000000, "Member 'RSBattleEnemy_C_SetDownTimer_Native::NewTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDownTimer_Native, ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetDownTimer_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetDamageCollisionDisable_Native
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetDamageCollisionDisable_Native final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetDamageCollisionDisable_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetDamageCollisionDisable_Native");
static_assert(sizeof(RSBattleEnemy_C_SetDamageCollisionDisable_Native) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetDamageCollisionDisable_Native");
static_assert(offsetof(RSBattleEnemy_C_SetDamageCollisionDisable_Native, ClaimantName) == 0x000000, "Member 'RSBattleEnemy_C_SetDamageCollisionDisable_Native::ClaimantName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetDamageCollisionDisable_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetDamageCollisionDisable_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SafeDestroy_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_SafeDestroy_Native final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SafeDestroy_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SafeDestroy_Native");
static_assert(sizeof(RSBattleEnemy_C_SafeDestroy_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_SafeDestroy_Native");
static_assert(offsetof(RSBattleEnemy_C_SafeDestroy_Native, Actor) == 0x000000, "Member 'RSBattleEnemy_C_SafeDestroy_Native::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SafeDestroy_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SafeDestroy_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RestoreWeakState_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_RestoreWeakState_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RestoreWeakState_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_RestoreWeakState_Native");
static_assert(sizeof(RSBattleEnemy_C_RestoreWeakState_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_RestoreWeakState_Native");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakState_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_RestoreWeakState_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.RestoreWeakEmissive_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_RestoreWeakEmissive_Native final
{
public:
	class FString                                 WeakSlotName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_RestoreWeakEmissive_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_RestoreWeakEmissive_Native");
static_assert(sizeof(RSBattleEnemy_C_RestoreWeakEmissive_Native) == 0x000018, "Wrong size on RSBattleEnemy_C_RestoreWeakEmissive_Native");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive_Native, WeakSlotName) == 0x000000, "Member 'RSBattleEnemy_C_RestoreWeakEmissive_Native::WeakSlotName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_RestoreWeakEmissive_Native, ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_RestoreWeakEmissive_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetStateReceivedExecuteAi_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native");
static_assert(sizeof(RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native");
static_assert(offsetof(RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_ResetStateReceivedExecuteAi_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetCore_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_ResetCore_Native final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveCore;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetCore_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ResetCore_Native");
static_assert(sizeof(RSBattleEnemy_C_ResetCore_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_ResetCore_Native");
static_assert(offsetof(RSBattleEnemy_C_ResetCore_Native, Enemy) == 0x000000, "Member 'RSBattleEnemy_C_ResetCore_Native::Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetCore_Native, RemoveCore) == 0x000008, "Member 'RSBattleEnemy_C_ResetCore_Native::RemoveCore' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ResetCore_Native, ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_ResetCore_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReceivedNotifyAnimEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native final
{
public:
	bool                                          Received;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native, Received) == 0x000000, "Member 'RSBattleEnemy_C_ReceivedNotifyAnimEnd_Native::Received' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OutputLogCrashChanceEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OutputLogCrashChanceEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OutputLogCrashChanceEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OutputLogCrashChanceEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_OutputLogCrashChanceEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_OutputLogCrashChanceEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_OutputLogCrashChanceEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_OutputLogCrashChanceEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LeaveBrainCrashAccess_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_LeaveBrainCrashAccess_Native final
{
public:
	class ARSCharacterBase*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LeaveBrainCrashAccess_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_LeaveBrainCrashAccess_Native");
static_assert(sizeof(RSBattleEnemy_C_LeaveBrainCrashAccess_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_LeaveBrainCrashAccess_Native");
static_assert(offsetof(RSBattleEnemy_C_LeaveBrainCrashAccess_Native, Character) == 0x000000, "Member 'RSBattleEnemy_C_LeaveBrainCrashAccess_Native::Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_LeaveBrainCrashAccess_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_LeaveBrainCrashAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.LaunchDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_LaunchDown_Native final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_LaunchDown_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_LaunchDown_Native");
static_assert(sizeof(RSBattleEnemy_C_LaunchDown_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_LaunchDown_Native");
static_assert(offsetof(RSBattleEnemy_C_LaunchDown_Native, IsEnd) == 0x000000, "Member 'RSBattleEnemy_C_LaunchDown_Native::IsEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.KickCrashChanceLoopEffect_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_KickCrashChanceLoopEffect_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_KickCrashChanceLoopEffect_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_KickCrashChanceLoopEffect_Native");
static_assert(sizeof(RSBattleEnemy_C_KickCrashChanceLoopEffect_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_KickCrashChanceLoopEffect_Native");
static_assert(offsetof(RSBattleEnemy_C_KickCrashChanceLoopEffect_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_KickCrashChanceLoopEffect_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsMotionEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsMotionEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsMotionEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsMotionEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_IsMotionEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsMotionEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_IsMotionEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsIgnoreLandingCheck_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsIgnoreLandingCheck_Native final
{
public:
	bool                                          bIgnoreLandingCheck;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsIgnoreLandingCheck_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsIgnoreLandingCheck_Native");
static_assert(sizeof(RSBattleEnemy_C_IsIgnoreLandingCheck_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsIgnoreLandingCheck_Native");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreLandingCheck_Native, bIgnoreLandingCheck) == 0x000000, "Member 'RSBattleEnemy_C_IsIgnoreLandingCheck_Native::bIgnoreLandingCheck' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyLandingCheck_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsEnemyLandingCheck_Native final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyLandingCheck_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyLandingCheck_Native");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyLandingCheck_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsEnemyLandingCheck_Native");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyLandingCheck_Native, bHit) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyLandingCheck_Native::bHit' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainCrashMiss_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainCrashMiss_Native final
{
public:
	bool                                          IsMiss;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainCrashMiss_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainCrashMiss_Native");
static_assert(sizeof(RSBattleEnemy_C_IsBrainCrashMiss_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainCrashMiss_Native");
static_assert(offsetof(RSBattleEnemy_C_IsBrainCrashMiss_Native, IsMiss) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainCrashMiss_Native::IsMiss' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSearchingComponent_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetSearchingComponent_Native final
{
public:
	class USearchingComponent*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSearchingComponent_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetSearchingComponent_Native");
static_assert(sizeof(RSBattleEnemy_C_GetSearchingComponent_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_GetSearchingComponent_Native");
static_assert(offsetof(RSBattleEnemy_C_GetSearchingComponent_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetSearchingComponent_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetLostData_Native
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_GetLostData_Native final
{
public:
	float                                         Param_LostMoveTimeMin;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LostMoveTimeMax;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_LostMoveRotationRate;                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_SpeedScale;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoMoveAnim;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetLostData_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetLostData_Native");
static_assert(sizeof(RSBattleEnemy_C_GetLostData_Native) == 0x000014, "Wrong size on RSBattleEnemy_C_GetLostData_Native");
static_assert(offsetof(RSBattleEnemy_C_GetLostData_Native, Param_LostMoveTimeMin) == 0x000000, "Member 'RSBattleEnemy_C_GetLostData_Native::Param_LostMoveTimeMin' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLostData_Native, LostMoveTimeMax) == 0x000004, "Member 'RSBattleEnemy_C_GetLostData_Native::LostMoveTimeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLostData_Native, Param_LostMoveRotationRate) == 0x000008, "Member 'RSBattleEnemy_C_GetLostData_Native::Param_LostMoveRotationRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLostData_Native, Param_SpeedScale) == 0x00000C, "Member 'RSBattleEnemy_C_GetLostData_Native::Param_SpeedScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetLostData_Native, IsNoMoveAnim) == 0x000010, "Member 'RSBattleEnemy_C_GetLostData_Native::IsNoMoveAnim' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHitObjectType_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetHitObjectType_Native final
{
public:
	TArray<EObjectTypeQuery>                      ObjectType;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetHitObjectType_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetHitObjectType_Native");
static_assert(sizeof(RSBattleEnemy_C_GetHitObjectType_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_GetHitObjectType_Native");
static_assert(offsetof(RSBattleEnemy_C_GetHitObjectType_Native, ObjectType) == 0x000000, "Member 'RSBattleEnemy_C_GetHitObjectType_Native::ObjectType' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetFall_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetFall_Native");
static_assert(sizeof(RSBattleEnemy_C_GetFall_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetFall_Native");
static_assert(offsetof(RSBattleEnemy_C_GetFall_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetFailedFall_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetFailedFall_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetFailedFall_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetFailedFall_Native");
static_assert(sizeof(RSBattleEnemy_C_GetFailedFall_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetFailedFall_Native");
static_assert(offsetof(RSBattleEnemy_C_GetFailedFall_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetFailedFall_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCurrentActionTime_Native
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetCurrentActionTime_Native final
{
public:
	float                                         ActionTime;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCurrentActionTime_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCurrentActionTime_Native");
static_assert(sizeof(RSBattleEnemy_C_GetCurrentActionTime_Native) == 0x000004, "Wrong size on RSBattleEnemy_C_GetCurrentActionTime_Native");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionTime_Native, ActionTime) == 0x000000, "Member 'RSBattleEnemy_C_GetCurrentActionTime_Native::ActionTime' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.FlyDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_FlyDown_Native final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_FlyDown_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_FlyDown_Native");
static_assert(sizeof(RSBattleEnemy_C_FlyDown_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_FlyDown_Native");
static_assert(offsetof(RSBattleEnemy_C_FlyDown_Native, IsEnd) == 0x000000, "Member 'RSBattleEnemy_C_FlyDown_Native::IsEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EntryBrainCrashAccess_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_EntryBrainCrashAccess_Native final
{
public:
	class ARSCharacterBase*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EntryBrainCrashAccess_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EntryBrainCrashAccess_Native");
static_assert(sizeof(RSBattleEnemy_C_EntryBrainCrashAccess_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_EntryBrainCrashAccess_Native");
static_assert(offsetof(RSBattleEnemy_C_EntryBrainCrashAccess_Native, Character) == 0x000000, "Member 'RSBattleEnemy_C_EntryBrainCrashAccess_Native::Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EntryBrainCrashAccess_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_EntryBrainCrashAccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EndDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_EndDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EndDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EndDamageFloating_Native");
static_assert(sizeof(RSBattleEnemy_C_EndDamageFloating_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_EndDamageFloating_Native");
static_assert(offsetof(RSBattleEnemy_C_EndDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_EndDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableFitGroundTmp_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_EnableFitGroundTmp_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableFitGroundTmp_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EnableFitGroundTmp_Native");
static_assert(sizeof(RSBattleEnemy_C_EnableFitGroundTmp_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_EnableFitGroundTmp_Native");
static_assert(offsetof(RSBattleEnemy_C_EnableFitGroundTmp_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_EnableFitGroundTmp_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnableAllWeak_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_EnableAllWeak_Native final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnableAllWeak_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_EnableAllWeak_Native");
static_assert(sizeof(RSBattleEnemy_C_EnableAllWeak_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_EnableAllWeak_Native");
static_assert(offsetof(RSBattleEnemy_C_EnableAllWeak_Native, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_EnableAllWeak_Native::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnableAllWeak_Native, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_EnableAllWeak_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DropFlyingEnemy_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_DropFlyingEnemy_Native final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DropFlyingEnemy_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DropFlyingEnemy_Native");
static_assert(sizeof(RSBattleEnemy_C_DropFlyingEnemy_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_DropFlyingEnemy_Native");
static_assert(offsetof(RSBattleEnemy_C_DropFlyingEnemy_Native, Enemy) == 0x000000, "Member 'RSBattleEnemy_C_DropFlyingEnemy_Native::Enemy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DropFlyingEnemy_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_DropFlyingEnemy_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DisableFitGroundTmp_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DisableFitGroundTmp_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DisableFitGroundTmp_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DisableFitGroundTmp_Native");
static_assert(sizeof(RSBattleEnemy_C_DisableFitGroundTmp_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_DisableFitGroundTmp_Native");
static_assert(offsetof(RSBattleEnemy_C_DisableFitGroundTmp_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DisableFitGroundTmp_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DeadStart_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DeadStart_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DeadStart_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DeadStart_Native");
static_assert(sizeof(RSBattleEnemy_C_DeadStart_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_DeadStart_Native");
static_assert(offsetof(RSBattleEnemy_C_DeadStart_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DeadStart_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageMotionEnd_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_DamageMotionEnd_Native final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DamageMotionEnd_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DamageMotionEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_DamageMotionEnd_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_DamageMotionEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd_Native, DeltaTime) == 0x000000, "Member 'RSBattleEnemy_C_DamageMotionEnd_Native::DeltaTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DamageMotionEnd_Native, ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DamageMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DamageFloatEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_DamageFloatEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DamageFloatEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_DamageFloatEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_DamageFloatEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_DamageFloatEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_DamageFloatEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_DamageFloatEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckSASHologramAttack_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_CheckSASHologramAttack_Native final
{
public:
	ESASHologramAttackTiming                      Timing;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91DF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       RequestCharacter;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckSASHologramAttack_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckSASHologramAttack_Native");
static_assert(sizeof(RSBattleEnemy_C_CheckSASHologramAttack_Native) == 0x000018, "Wrong size on RSBattleEnemy_C_CheckSASHologramAttack_Native");
static_assert(offsetof(RSBattleEnemy_C_CheckSASHologramAttack_Native, Timing) == 0x000000, "Member 'RSBattleEnemy_C_CheckSASHologramAttack_Native::Timing' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckSASHologramAttack_Native, RequestCharacter) == 0x000008, "Member 'RSBattleEnemy_C_CheckSASHologramAttack_Native::RequestCharacter' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckSASHologramAttack_Native, ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CheckSASHologramAttack_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckNpcDrive_Native
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_CheckNpcDrive_Native final
{
public:
	ENpcDriveCheckType                            CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91E0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EnemyActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckNpcDrive_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckNpcDrive_Native");
static_assert(sizeof(RSBattleEnemy_C_CheckNpcDrive_Native) == 0x000018, "Wrong size on RSBattleEnemy_C_CheckNpcDrive_Native");
static_assert(offsetof(RSBattleEnemy_C_CheckNpcDrive_Native, CheckType) == 0x000000, "Member 'RSBattleEnemy_C_CheckNpcDrive_Native::CheckType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckNpcDrive_Native, EnemyActor) == 0x000008, "Member 'RSBattleEnemy_C_CheckNpcDrive_Native::EnemyActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckNpcDrive_Native, ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CheckNpcDrive_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CameraAttentionEnd_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_CameraAttentionEnd_Native final
{
public:
	class UCurveFloat*                            FovCurveOut;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CameraAttentionEnd_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CameraAttentionEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_CameraAttentionEnd_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_CameraAttentionEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEnd_Native, FovCurveOut) == 0x000000, "Member 'RSBattleEnemy_C_CameraAttentionEnd_Native::FovCurveOut' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CameraAttentionEnd_Native, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_CameraAttentionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownStart_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownStart_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownStart_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownStart_Native");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownStart_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownStart_Native");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownStart_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownStart_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownLoop_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownLoop_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownLoop_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownLoop_Native");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownLoop_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownLoop_Native");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownLoop_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownLoop_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallFuncDamageDownEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallFuncDamageDownEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallFuncDamageDownEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallFuncDamageDownEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_CallFuncDamageDownEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_CallFuncDamageDownEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_CallFuncDamageDownEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CallFuncDamageDownEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CallDead_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CallDead_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CallDead_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CallDead_Native");
static_assert(sizeof(RSBattleEnemy_C_CallDead_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_CallDead_Native");
static_assert(offsetof(RSBattleEnemy_C_CallDead_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_CallDead_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BrainCrashLock_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_BrainCrashLock_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BrainCrashLock_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BrainCrashLock_Native");
static_assert(sizeof(RSBattleEnemy_C_BrainCrashLock_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_BrainCrashLock_Native");
static_assert(offsetof(RSBattleEnemy_C_BrainCrashLock_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_BrainCrashLock_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPossibleTargetAttack_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleTargetAttack_bPossible;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP) == 0x000010, "Wrong size on RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP, Actor) == 0x000000, "Member 'RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP::Actor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP, CallFunc_IsPossibleTargetAttack_bPossible) == 0x000009, "Member 'RSBattleEnemy_C_IsPossibleTargetAttack_CallFromCPP::CallFunc_IsPossibleTargetAttack_bPossible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateAttack_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP, CallFunc_IsEnemyStateAttack_Return) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateAttack_CallFromCPP::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEndCrashChance_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnEndCrashChance_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEndCrashChance_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnEndCrashChance_Native");
static_assert(sizeof(RSBattleEnemy_C_OnEndCrashChance_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_OnEndCrashChance_Native");
static_assert(offsetof(RSBattleEnemy_C_OnEndCrashChance_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_OnEndCrashChance_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateMoveMaxSpeed
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_UpdateMoveMaxSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbNotMove;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E2[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectUse_is_use;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSpeedScale_SpeedScale;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScaleMaxSpeed_Result_1;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnyBrainCrash_NowPlaying;        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateMoveMaxSpeed) == 0x000008, "Wrong alignment on RSBattleEnemy_C_UpdateMoveMaxSpeed");
static_assert(sizeof(RSBattleEnemy_C_UpdateMoveMaxSpeed) == 0x000048, "Wrong size on RSBattleEnemy_C_UpdateMoveMaxSpeed");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, LbNotMove) == 0x000001, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::LbNotMove' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000010, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsPlayerStatusAI_bResult) == 0x000022, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000028, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsValid_ReturnValue_2) == 0x000031, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsUniqueObjectUse_is_use) == 0x000032, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsUniqueObjectUse_is_use' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_ScaleMaxSpeed_Result) == 0x000033, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_GetSpeedScale_SpeedScale) == 0x000034, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_GetSpeedScale_SpeedScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_GetBrainCrashManager_Manager) == 0x000038, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_ScaleMaxSpeed_Result_1) == 0x000040, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_ScaleMaxSpeed_Result_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsValid_ReturnValue_3) == 0x000041, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateMoveMaxSpeed, CallFunc_IsPlayingAnyBrainCrash_NowPlaying) == 0x000042, "Member 'RSBattleEnemy_C_UpdateMoveMaxSpeed::CallFunc_IsPlayingAnyBrainCrash_NowPlaying' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnemyUpdateEvDitherNative
// 0x002C (0x002C - 0x0000)
struct RSBattleEnemy_C_EnemyUpdateEvDitherNative final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E4[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E6[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_EnemyUpdateEvDitherNative) == 0x000004, "Wrong alignment on RSBattleEnemy_C_EnemyUpdateEvDitherNative");
static_assert(sizeof(RSBattleEnemy_C_EnemyUpdateEvDitherNative) == 0x00002C, "Wrong size on RSBattleEnemy_C_EnemyUpdateEvDitherNative");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, DeltaSec) == 0x000000, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_SelectFloat_ReturnValue_1) == 0x000010, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000014, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyUpdateEvDitherNative, CallFunc_Ease_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_EnemyUpdateEvDitherNative::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnemyStartEvDitherNative
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_EnemyStartEvDitherNative final
{
public:
	bool                                          bDisp;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DitherTime;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E8[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_EnemyStartEvDitherNative) == 0x000004, "Wrong alignment on RSBattleEnemy_C_EnemyStartEvDitherNative");
static_assert(sizeof(RSBattleEnemy_C_EnemyStartEvDitherNative) == 0x000010, "Wrong size on RSBattleEnemy_C_EnemyStartEvDitherNative");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, bDisp) == 0x000000, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::bDisp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, DitherTime) == 0x000004, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::DitherTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyStartEvDitherNative, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_EnemyStartEvDitherNative::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnemyEndEvDitherNative
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_EnemyEndEvDitherNative final
{
public:
	bool                                          bDisp;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91E9[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnemyEndEvDitherNative) == 0x000004, "Wrong alignment on RSBattleEnemy_C_EnemyEndEvDitherNative");
static_assert(sizeof(RSBattleEnemy_C_EnemyEndEvDitherNative) == 0x00000C, "Wrong size on RSBattleEnemy_C_EnemyEndEvDitherNative");
static_assert(offsetof(RSBattleEnemy_C_EnemyEndEvDitherNative, bDisp) == 0x000000, "Member 'RSBattleEnemy_C_EnemyEndEvDitherNative::bDisp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyEndEvDitherNative, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_EnemyEndEvDitherNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyEndEvDitherNative, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_EnemyEndEvDitherNative::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyEndEvDitherNative, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_EnemyEndEvDitherNative::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsFlyEnemyCheck_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsFlyEnemyCheck_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsFlyEnemyCheck_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsFlyEnemyCheck_Native");
static_assert(sizeof(RSBattleEnemy_C_IsFlyEnemyCheck_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_IsFlyEnemyCheck_Native");
static_assert(offsetof(RSBattleEnemy_C_IsFlyEnemyCheck_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsFlyEnemyCheck_Native::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsFlyEnemyCheck_Native, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000001, "Member 'RSBattleEnemy_C_IsFlyEnemyCheck_Native::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyDamageDown_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyDamageDown_bool;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP, CallFunc_IsEnemyDamageDown_bool) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageDown_CallFromCPP::CallFunc_IsEnemyDamageDown_bool' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartReactionDilation_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_StartReactionDilation_CallFromCPP final
{
public:
	uint8                                         ReactionKind;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddDamage;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartReactionDilation_Return;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartReactionDilation_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP) == 0x000004, "Wrong size on RSBattleEnemy_C_StartReactionDilation_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP, ReactionKind) == 0x000000, "Member 'RSBattleEnemy_C_StartReactionDilation_CallFromCPP::ReactionKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP, bAddDamage) == 0x000001, "Member 'RSBattleEnemy_C_StartReactionDilation_CallFromCPP::bAddDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP, ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_StartReactionDilation_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation_CallFromCPP, CallFunc_StartReactionDilation_Return) == 0x000003, "Member 'RSBattleEnemy_C_StartReactionDilation_CallFromCPP::CallFunc_StartReactionDilation_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCheckLookScrollTick
// 0x0078 (0x0078 - 0x0000)
struct RSBattleEnemy_C_IsCheckLookScrollTick final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91EA[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91EB[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91EC[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitFloorOrCeiling_ReturnValue;          // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCheckLookScrollTick) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsCheckLookScrollTick");
static_assert(sizeof(RSBattleEnemy_C_IsCheckLookScrollTick) == 0x000078, "Wrong size on RSBattleEnemy_C_IsCheckLookScrollTick");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, Start) == 0x000000, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::Start' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, End) == 0x00000C, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::End' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_GetCameraLocation_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_MakeVector_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000064, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_CheckDistance_bResult) == 0x000070, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookScrollTick, CallFunc_IsHitFloorOrCeiling_ReturnValue) == 0x000072, "Member 'RSBattleEnemy_C_IsCheckLookScrollTick::CallFunc_IsHitFloorOrCeiling_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetTickEnableMeshOnly
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetTickEnableMeshOnly final
{
public:
	bool                                          bMeshOnly;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetTickEnableMeshOnly) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetTickEnableMeshOnly");
static_assert(sizeof(RSBattleEnemy_C_SetTickEnableMeshOnly) == 0x000002, "Wrong size on RSBattleEnemy_C_SetTickEnableMeshOnly");
static_assert(offsetof(RSBattleEnemy_C_SetTickEnableMeshOnly, bMeshOnly) == 0x000000, "Member 'RSBattleEnemy_C_SetTickEnableMeshOnly::bMeshOnly' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetTickEnableMeshOnly, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetTickEnableMeshOnly::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCheckSameCompareGroundLoaction
// 0x0348 (0x0348 - 0x0000)
struct RSBattleEnemy_C_IsCheckSameCompareGroundLoaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91ED[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LEnemyGround;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LEnemyLoaction;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPlayerGround;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPlayerLocation;                                   // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91EE[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91EF[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F0[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91F1[0x1];                                     // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F2[0x4];                                     // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x01F8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F3[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F4[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x0230(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F5[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0338(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsCheckSameCompareGroundLoaction");
static_assert(sizeof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction) == 0x000348, "Wrong size on RSBattleEnemy_C_IsCheckSameCompareGroundLoaction");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, LEnemyGround) == 0x000004, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::LEnemyGround' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, LEnemyLoaction) == 0x000010, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::LEnemyLoaction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, LPlayerGround) == 0x00001C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::LPlayerGround' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, LPlayerLocation) == 0x000028, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::LPlayerLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, Temp_object_Variable) == 0x000038, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, Temp_object_Variable_1) == 0x000048, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X) == 0x000058, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y) == 0x00005C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z) == 0x000060, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X_1) == 0x000064, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z_1) == 0x00006C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X_2) == 0x000078, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y_2) == 0x00007C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z_2) == 0x000080, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_MakeVector_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X_3) == 0x000090, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y_3) == 0x000094, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z_3) == 0x000098, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, K2Node_MakeArray_Array) == 0x0000A0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B4, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_MakeVector_ReturnValue_1) == 0x0000C0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000CC, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000154, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_bBlockingHit) == 0x000155, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_bInitialOverlap) == 0x000156, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Time) == 0x000158, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Distance) == 0x00015C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Location) == 0x000160, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_ImpactPoint) == 0x00016C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Normal) == 0x000178, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_ImpactNormal) == 0x000184, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitItem) == 0x0001B0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_FaceIndex) == 0x0001B4, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_TraceStart) == 0x0001B8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_TraceEnd) == 0x0001C4, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X_4) == 0x0001D0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y_4) == 0x0001D4, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z_4) == 0x0001D8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_MakeVector_ReturnValue_2) == 0x0001DC, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_X_5) == 0x0001E8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Y_5) == 0x0001EC, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakVector_Z_5) == 0x0001F0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, K2Node_MakeArray_Array_1) == 0x0001F8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000208, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_GetPlayerManager_PlayerManager) == 0x000210, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_MakeVector_ReturnValue_3) == 0x000218, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_GetPlayer_ReturnValue) == 0x000228, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x000230, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x0002B8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_IsValid_ReturnValue) == 0x0002B9, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002BA, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002BB, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Time_1) == 0x0002BC, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Distance_1) == 0x0002C0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Location_1) == 0x0002C4, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0002D0, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_Normal_1) == 0x0002DC, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0002E8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_PhysMat_1) == 0x0002F8, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitActor_1) == 0x000300, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitComponent_1) == 0x000308, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitBoneName_1) == 0x000310, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_HitItem_1) == 0x000318, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_FaceIndex_1) == 0x00031C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_TraceStart_1) == 0x000320, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_BreakHitResult_TraceEnd_1) == 0x00032C, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckSameCompareGroundLoaction, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000338, "Member 'RSBattleEnemy_C_IsCheckSameCompareGroundLoaction::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyConsiderDownDead
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetEnemyConsiderDownDead final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyConsiderDownDead) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyConsiderDownDead");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyConsiderDownDead) == 0x000002, "Wrong size on RSBattleEnemy_C_SetEnemyConsiderDownDead");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyConsiderDownDead, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyConsiderDownDead::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyConsiderDownDead, ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyConsiderDownDead::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyTribe
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetEnemyTribe final
{
public:
	EEnemyTribe                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyTribe) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemyTribe");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyTribe) == 0x000001, "Wrong size on RSBattleEnemy_C_GetEnemyTribe");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyTribe, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyTribe::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnCrashVisionDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnCrashVisionDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnCrashVisionDead) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnCrashVisionDead");
static_assert(sizeof(RSBattleEnemy_C_OnCrashVisionDead) == 0x000001, "Wrong size on RSBattleEnemy_C_OnCrashVisionDead");
static_assert(offsetof(RSBattleEnemy_C_OnCrashVisionDead, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_OnCrashVisionDead::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnNotifyPlayerDead
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnNotifyPlayerDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnNotifyPlayerDead) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnNotifyPlayerDead");
static_assert(sizeof(RSBattleEnemy_C_OnNotifyPlayerDead) == 0x000001, "Wrong size on RSBattleEnemy_C_OnNotifyPlayerDead");
static_assert(offsetof(RSBattleEnemy_C_OnNotifyPlayerDead, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_OnNotifyPlayerDead::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyInterfaceSound
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_GetEnemyInterfaceSound final
{
public:
	Enum_EnemySound                               Enum;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemySound                               CallFunc_GetEnemySound_return;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyInterfaceSound) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemyInterfaceSound");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyInterfaceSound) == 0x000002, "Wrong size on RSBattleEnemy_C_GetEnemyInterfaceSound");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyInterfaceSound, Enum) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyInterfaceSound::Enum' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyInterfaceSound, CallFunc_GetEnemySound_return) == 0x000001, "Member 'RSBattleEnemy_C_GetEnemyInterfaceSound::CallFunc_GetEnemySound_return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BeginEnemyAttack
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_BeginEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_Return;                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BeginEnemyAttack) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BeginEnemyAttack");
static_assert(sizeof(RSBattleEnemy_C_BeginEnemyAttack) == 0x000003, "Wrong size on RSBattleEnemy_C_BeginEnemyAttack");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAttack, Attack) == 0x000000, "Member 'RSBattleEnemy_C_BeginEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAttack, Bool) == 0x000001, "Member 'RSBattleEnemy_C_BeginEnemyAttack::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAttack, CallFunc_IsEvent_Return) == 0x000002, "Member 'RSBattleEnemy_C_BeginEnemyAttack::CallFunc_IsEvent_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyDamageDown
// 0x0015 (0x0015 - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageDown final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageDown) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageDown");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageDown) == 0x000015, "Wrong size on RSBattleEnemy_C_IsEnemyDamageDown");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000006, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000007, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000008, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000009, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00000A, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00000B, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00000D, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_1) == 0x00000E, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_2) == 0x00000F, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_3) == 0x000010, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_4) == 0x000011, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_5) == 0x000012, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanOR_ReturnValue_6) == 0x000013, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageDown, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_IsEnemyDamageDown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyDamageWince
// 0x000D (0x000D - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageWince final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageWince) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageWince");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageWince) == 0x00000D, "Wrong size on RSBattleEnemy_C_IsEnemyDamageWince");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000006, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000009, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_BooleanOR_ReturnValue_1) == 0x00000A, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_BooleanOR_ReturnValue_2) == 0x00000B, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageWince, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_IsEnemyDamageWince::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyMove
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMove_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyMove");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyMove) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyMove");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyMove, Move) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyMove, Bool) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyMove::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyMove, CallFunc_IsMove_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyMove::CallFunc_IsMove_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BeginEnemyMove
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_BeginEnemyMove final
{
public:
	EnemyMoveAnimKind                             Move;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_Return;                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BeginEnemyMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BeginEnemyMove");
static_assert(sizeof(RSBattleEnemy_C_BeginEnemyMove) == 0x000003, "Wrong size on RSBattleEnemy_C_BeginEnemyMove");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyMove, Move) == 0x000000, "Member 'RSBattleEnemy_C_BeginEnemyMove::Move' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyMove, Bool) == 0x000001, "Member 'RSBattleEnemy_C_BeginEnemyMove::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyMove, CallFunc_IsEvent_Return) == 0x000002, "Member 'RSBattleEnemy_C_BeginEnemyMove::CallFunc_IsEvent_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyAttack
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyAttack final
{
public:
	EnemyAttackAnimKind                           Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttack_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyAttack) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyAttack");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyAttack) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyAttack");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAttack, Attack) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyAttack::Attack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAttack, Bool) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyAttack::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAttack, CallFunc_IsAttack_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyAttack::CallFunc_IsAttack_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyAction
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAction_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyAction");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyAction) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyAction");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAction, Action) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAction, Bool) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyAction::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyAction, CallFunc_IsAction_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyAction::CallFunc_IsAction_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BeginEnemyAction
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_BeginEnemyAction final
{
public:
	EnemyActionAnimKind                           Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_Return;                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BeginEnemyAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_BeginEnemyAction");
static_assert(sizeof(RSBattleEnemy_C_BeginEnemyAction) == 0x000003, "Wrong size on RSBattleEnemy_C_BeginEnemyAction");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAction, Action) == 0x000000, "Member 'RSBattleEnemy_C_BeginEnemyAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAction, Bool) == 0x000001, "Member 'RSBattleEnemy_C_BeginEnemyAction::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BeginEnemyAction, CallFunc_IsEvent_Return) == 0x000002, "Member 'RSBattleEnemy_C_BeginEnemyAction::CallFunc_IsEvent_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.isEnemyDamageBlow
// 0x0009 (0x0009 - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageBlow final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageBlow) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageBlow");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageBlow) == 0x000009, "Wrong size on RSBattleEnemy_C_IsEnemyDamageBlow");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageBlow, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsEnemyDamageBlow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyDamageknockBack
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageknockBack final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageKnockBack_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageknockBack) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageknockBack");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageknockBack) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyDamageknockBack");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageknockBack, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageknockBack::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageknockBack, CallFunc_IsDamageKnockBack_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageknockBack::CallFunc_IsDamageKnockBack_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.isEnemyDamageLaunch
// 0x000D (0x000D - 0x0000)
struct RSBattleEnemy_C_IsEnemyDamageLaunch final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDamageLaunch) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDamageLaunch");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDamageLaunch) == 0x00000D, "Wrong size on RSBattleEnemy_C_IsEnemyDamageLaunch");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, Bool) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::Bool' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000007, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000008, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_BooleanOR_ReturnValue_1) == 0x00000A, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_BooleanOR_ReturnValue_2) == 0x00000B, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDamageLaunch, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_IsEnemyDamageLaunch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateAction
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateAction");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateAction) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyStateAction");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAction, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateAction::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAction, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateAction::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAction, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateAction::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateDamage
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateDamage final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateDamage) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateDamage");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateDamage) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyStateDamage");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamage, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateDamage::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamage, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateDamage::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateDamage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateAttack
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateAttack final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateAttack) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateAttack");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateAttack) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyStateAttack");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAttack, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateAttack::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAttack, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateAttack::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateAttack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateAttack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateMove
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateMove final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateMove");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateMove) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyStateMove");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateMove, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateMove::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateMove, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateMove::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateMove, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateMove::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateDamageDown
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateDamageDown final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateDamageDown) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateDamageDown");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateDamageDown) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyStateDamageDown");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamageDown, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateDamageDown::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamageDown, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateDamageDown::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateDamageDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateDamageDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyBossActive
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnemyBossActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyBossActive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyBossActive");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyBossActive) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnemyBossActive");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyBossActive, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyBossActive::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyBossActive, CallFunc_GetIsBattleMode_IsBattleMode) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyBossActive::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyBossActive, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyBossActive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainCrashPerformance
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainCrashPerformance final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainCrashPerformance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainCrashPerformance");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainCrashPerformance) == 0x000001, "Wrong size on RSBattleEnemy_C_SetEnemyBrainCrashPerformance");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainCrashPerformance, Return) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainCrashPerformance::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ResetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetEnemyTarget) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ResetEnemyTarget");
static_assert(sizeof(RSBattleEnemy_C_ResetEnemyTarget) == 0x000001, "Wrong size on RSBattleEnemy_C_ResetEnemyTarget");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyTarget, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_ResetEnemyTarget::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyTarget
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetEnemyTarget final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyTarget) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyTarget");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyTarget) == 0x000001, "Wrong size on RSBattleEnemy_C_SetEnemyTarget");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyTarget, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyTarget::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyDamageReaction
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetEnemyDamageReaction final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyDamageReaction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyDamageReaction");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyDamageReaction) == 0x000008, "Wrong size on RSBattleEnemy_C_SetEnemyDamageReaction");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyDamageReaction, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000007, "Member 'RSBattleEnemy_C_SetEnemyDamageReaction::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainFieldEnd
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainFieldEnd final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldEnd_Dummy;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseEffect_Native_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetStatus_Dummy;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetAction_bReset;      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainFieldEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainFieldEnd");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainFieldEnd) == 0x000008, "Wrong size on RSBattleEnemy_C_SetEnemyBrainFieldEnd");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, NewParam) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_OnBrainFieldEnd_Dummy) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_OnBrainFieldEnd_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy) == 0x000003, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_IsUseEffect_Native_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_IsUseEffect_Native_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_OnEnemyBrainFieldResetStatus_Dummy) == 0x000005, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_OnEnemyBrainFieldResetStatus_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_OnEnemyBrainFieldResetAction_bReset) == 0x000006, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_OnEnemyBrainFieldResetAction_bReset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldEnd, CallFunc_IsDead_bDead) == 0x000007, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldEnd::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainFieldStart
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainFieldStart final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91F6[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91F7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldStart_Dummy;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetStatus_Dummy;       // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy;      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetAction_bReset;      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91F8[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainFieldStart) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainFieldStart");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainFieldStart) == 0x000038, "Wrong size on RSBattleEnemy_C_SetEnemyBrainFieldStart");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, NewParam) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_GetMainPlayer_Player) == 0x000018, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_OnBrainFieldStart_Dummy) == 0x000021, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_OnBrainFieldStart_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_OnEnemyBrainFieldResetStatus_Dummy) == 0x000023, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_OnEnemyBrainFieldResetStatus_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy) == 0x000024, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_OnEnemyBrainFieldResetAction_bReset) == 0x000025, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_OnEnemyBrainFieldResetAction_bReset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldStart, CallFunc_IsDead_bDead) == 0x000034, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldStart::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyGroundTransform
// 0x0260 (0x0260 - 0x0000)
struct RSBattleEnemy_C_GetEnemyGroundTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             Return;                                            // 0x0030(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                Pos;                                               // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91F9[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjType;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0080(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91FA[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91FB[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91FC[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0150(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91FD[0x1];                                     // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91FE[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyGroundTransform) == 0x000010, "Wrong alignment on RSBattleEnemy_C_GetEnemyGroundTransform");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyGroundTransform) == 0x000260, "Wrong size on RSBattleEnemy_C_GetEnemyGroundTransform");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, Transform) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::Transform' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, Return) == 0x000030, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, Pos) == 0x000060, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::Pos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, ObjType) == 0x000070, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::ObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, Temp_object_Variable) == 0x000080, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakTransform_Location) == 0x000090, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakRotator_Roll) == 0x0000B4, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakRotator_Pitch) == 0x0000B8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakRotator_Yaw) == 0x0000BC, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_MakeRotator_ReturnValue) == 0x0000C0, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, K2Node_MakeArray_Array) == 0x0000E8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakVector_X) == 0x0000FC, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakVector_Y) == 0x000100, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakVector_Z) == 0x000104, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_Add_FloatFloat_ReturnValue) == 0x000140, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_MakeVector_ReturnValue) == 0x000144, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000150, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001D8, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D9, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001DA, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_Time) == 0x0001DC, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_Distance) == 0x0001E0, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_Location) == 0x0001E4, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F0, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_Normal) == 0x0001FC, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_ImpactNormal) == 0x000208, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_HitItem) == 0x000238, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_FaceIndex) == 0x00023C, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_TraceStart) == 0x000240, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyGroundTransform, CallFunc_BreakHitResult_TraceEnd) == 0x00024C, "Member 'RSBattleEnemy_C_GetEnemyGroundTransform::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ResetEnemyWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ResetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ResetEnemyWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ResetEnemyWait");
static_assert(sizeof(RSBattleEnemy_C_ResetEnemyWait) == 0x000001, "Wrong size on RSBattleEnemy_C_ResetEnemyWait");
static_assert(offsetof(RSBattleEnemy_C_ResetEnemyWait, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_ResetEnemyWait::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetEnemyWait final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyWait");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyWait) == 0x000001, "Wrong size on RSBattleEnemy_C_SetEnemyWait");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyWait, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyWait::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnSwitchVisibleBrainFieldLevel
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Unused;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91FF[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel) == 0x000004, "Wrong alignment on RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel");
static_assert(sizeof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel) == 0x00000C, "Wrong size on RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel");
static_assert(offsetof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel, Visible) == 0x000000, "Member 'RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel::Visible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel, Unused) == 0x000001, "Member 'RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel::Unused' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel, Value) == 0x000004, "Member 'RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel::Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_OnSwitchVisibleBrainFieldLevel::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainCrashParam
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainCrashParam final
{
public:
	float                                         BrainCrashTimer;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashMissScale;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainCrashParam) == 0x000004, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainCrashParam");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainCrashParam) == 0x00000C, "Wrong size on RSBattleEnemy_C_SetEnemyBrainCrashParam");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainCrashParam, BrainCrashTimer) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainCrashParam::BrainCrashTimer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainCrashParam, BrainCrashMissScale) == 0x000004, "Member 'RSBattleEnemy_C_SetEnemyBrainCrashParam::BrainCrashMissScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainCrashParam, Return) == 0x000008, "Member 'RSBattleEnemy_C_SetEnemyBrainCrashParam::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyStealthSeeEnable
// 0x0238 (0x0238 - 0x0000)
struct RSBattleEnemy_C_SetEnemyStealthSeeEnable final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowChange;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9200[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         L_MeshArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         LCnt;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_SeeThroughRate;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_SeeThroughWeakSphereRadiusScale;                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_SeeThroughWeakSphereUse;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeeThroughBreak_IsSeeBreak;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BadStateEffectDispSwitch_bSuccess;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetUniqueSeeWeak_Dammy;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9201[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9202[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_GetBodyMeshes_Meshes;                     // 0x00B8(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	EEnemyFindPlayerType                          CallFunc_GetFindPlayerType_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak_1;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9203[0x2];                                     // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9204[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_2;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9205[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_3;                         // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9206[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_4;                         // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9207[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_5;                         // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9208[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_6;                         // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9209[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_920A[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_920B[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_7;                         // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_920C[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStealthWeakData                       CallFunc_Array_Get_Item_8;                         // 0x0198(0x0068)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_920D[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_9;                         // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_920E[0x5];                                     // 0x0213(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_920F[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x022C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyStealthSeeEnable) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnemyStealthSeeEnable");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyStealthSeeEnable) == 0x000238, "Wrong size on RSBattleEnemy_C_SetEnemyStealthSeeEnable");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, On) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::On' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, ShadowChange) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::ShadowChange' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Return) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, L_MeshArray) == 0x000008, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::L_MeshArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, LCnt) == 0x000018, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::LCnt' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, L_Value) == 0x00001C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::L_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, L_SeeThroughRate) == 0x000020, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::L_SeeThroughRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, L_SeeThroughWeakSphereRadiusScale) == 0x000028, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::L_SeeThroughWeakSphereRadiusScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, L_SeeThroughWeakSphereUse) == 0x000038, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::L_SeeThroughWeakSphereUse' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable) == 0x000048, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsSeeThroughBreak_IsSeeBreak) == 0x000050, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsSeeThroughBreak_IsSeeBreak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_BadStateEffectDispSwitch_bSuccess) == 0x000051, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_BadStateEffectDispSwitch_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_SetUniqueSeeWeak_Dammy) == 0x000052, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_SetUniqueSeeWeak_Dammy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_1) == 0x000054, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_2) == 0x000058, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_3) == 0x000064, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_4) == 0x000068, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_3) == 0x00006C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_4) == 0x000070, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_5) == 0x000074, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_5) == 0x000078, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_6) == 0x000088, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_7) == 0x00008C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_6) == 0x000094, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Conv_IntToString_ReturnValue) == 0x000098, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_8) == 0x0000AC, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_7) == 0x0000B0, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_9) == 0x0000B4, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_GetBodyMeshes_Meshes) == 0x0000B8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_GetBodyMeshes_Meshes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_GetFindPlayerType_ReturnValue) == 0x0000C8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_GetFindPlayerType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C9, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsHideWeak_IsHideWeak) == 0x0000CA, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue) == 0x0000CB, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsHideWeak_IsHideWeak_1) == 0x0000CC, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsHideWeak_IsHideWeak_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue_1) == 0x0000CD, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_1) == 0x0000E4, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E9, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_2) == 0x0000F0, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_2) == 0x0000F8, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_3) == 0x000100, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_3) == 0x000108, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_4) == 0x00010C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_2) == 0x000110, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_3) == 0x000111, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_4) == 0x000118, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_5) == 0x000120, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_4) == 0x000124, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_5) == 0x000128, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_6) == 0x000130, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_6) == 0x000138, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_5) == 0x000140, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_7) == 0x000144, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_6) == 0x000148, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_10) == 0x00014C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000150, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_8) == 0x000160, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, Temp_int_Variable_9) == 0x000164, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Add_IntInt_ReturnValue_11) == 0x000168, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_7) == 0x000170, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_7) == 0x000178, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Concat_StrStr_ReturnValue) == 0x000180, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Conv_StringToName_ReturnValue) == 0x000190, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_8) == 0x000198, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_8) == 0x000200, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_8) == 0x000204, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Get_Item_9) == 0x000208, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Array_Length_ReturnValue_9) == 0x00020C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Less_IntInt_ReturnValue_9) == 0x000210, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue_2) == 0x000211, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue_3) == 0x000212, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000218, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_IsValid_ReturnValue_4) == 0x000228, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyStealthSeeEnable, CallFunc_Conv_StringToName_ReturnValue_1) == 0x00022C, "Member 'RSBattleEnemy_C_SetEnemyStealthSeeEnable::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableEnemyMoveRange
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsEnableEnemyMoveRange final
{
public:
	bool                                          bReturn;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableMoveRange_Return;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableEnemyMoveRange) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnableEnemyMoveRange");
static_assert(sizeof(RSBattleEnemy_C_IsEnableEnemyMoveRange) == 0x000003, "Wrong size on RSBattleEnemy_C_IsEnableEnemyMoveRange");
static_assert(offsetof(RSBattleEnemy_C_IsEnableEnemyMoveRange, bReturn) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableEnemyMoveRange::bReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableEnemyMoveRange, Ret) == 0x000001, "Member 'RSBattleEnemy_C_IsEnableEnemyMoveRange::Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableEnemyMoveRange, CallFunc_IsEnableMoveRange_Return) == 0x000002, "Member 'RSBattleEnemy_C_IsEnableEnemyMoveRange::CallFunc_IsEnableMoveRange_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.PlayerActionForEnemyReaction
// 0x0148 (0x0148 - 0x0000)
struct RSBattleEnemy_C_PlayerActionForEnemyReaction final
{
public:
	BattlePrototype::EPsychicObjectAttackType     PsychicObjectType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9210[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PsychicObjLocation;                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9211[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ai_Enemy_C*                         LAiComponent;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LCompareDirList;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         LTargetLength;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LObjDir;                                           // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     LObjType;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9212[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetAvoidAction_AvoidAction;               // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueDisableAvoid_bDisable;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAction_Dummy;                        // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9213[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9214[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ai_Enemy_C*                         CallFunc_GetComponentByClass_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9215[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_3;      // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9216[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9217[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9218[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9219[0x1];                                     // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921A[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_4;      // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_PlayerActionForEnemyReaction) == 0x000008, "Wrong alignment on RSBattleEnemy_C_PlayerActionForEnemyReaction");
static_assert(sizeof(RSBattleEnemy_C_PlayerActionForEnemyReaction) == 0x000148, "Wrong size on RSBattleEnemy_C_PlayerActionForEnemyReaction");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, PsychicObjectType) == 0x000000, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::PsychicObjectType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, PsychicObjLocation) == 0x000004, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::PsychicObjLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, Dummy) == 0x000010, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, LAiComponent) == 0x000018, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::LAiComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, LCompareDirList) == 0x000020, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::LCompareDirList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, LTargetLength) == 0x000030, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::LTargetLength' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, LObjDir) == 0x000034, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::LObjDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, LObjType) == 0x000040, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::LObjType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, Temp_bool_True_if_break_was_hit_Variable) == 0x000041, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, Temp_int_Array_Index_Variable) == 0x000044, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Conv_IntToByte_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetValidValue_ReturnValue) == 0x000049, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Not_PreBool_ReturnValue) == 0x00004A, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetAvoidAction_AvoidAction) == 0x00004B, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetAvoidAction_AvoidAction' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_IsUniqueDisableAvoid_bDisable) == 0x00004C, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_IsUniqueDisableAvoid_bDisable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_ResetAction_Dummy) == 0x00004D, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_ResetAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_RandomFloatInRange_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Array_Get_Item) == 0x000054, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000059, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetComponentByClass_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000078, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetActorForwardVector_ReturnValue) == 0x00007C, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_NegateVector_ReturnValue) == 0x000094, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetActorRightVector_ReturnValue) == 0x0000A0, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000AC, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_NegateVector_ReturnValue_1) == 0x0000B8, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x0000C4, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Multiply_VectorVector_ReturnValue_3) == 0x0000D0, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Multiply_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, K2Node_MakeArray_Array) == 0x0000E0, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, K2Node_SwitchEnum_CmpSuccess) == 0x0000F0, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, Temp_int_Loop_Counter_Variable) == 0x0000F4, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x0000F9, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Array_Find_ReturnValue) == 0x0000FC, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000101, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_BooleanAND_ReturnValue) == 0x000102, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000108, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000114, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Multiply_VectorVector_ReturnValue_4) == 0x000124, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Multiply_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_VSize_ReturnValue) == 0x000130, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_Normal_ReturnValue) == 0x000134, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_PlayerActionForEnemyReaction, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'RSBattleEnemy_C_PlayerActionForEnemyReaction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EnemyDataDrop
// 0x001C (0x001C - 0x0000)
struct RSBattleEnemy_C_EnemyDataDrop final
{
public:
	struct FVector                                Param_SpawnLocation;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnDir;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrop;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_EnemyDataDrop) == 0x000004, "Wrong alignment on RSBattleEnemy_C_EnemyDataDrop");
static_assert(sizeof(RSBattleEnemy_C_EnemyDataDrop) == 0x00001C, "Wrong size on RSBattleEnemy_C_EnemyDataDrop");
static_assert(offsetof(RSBattleEnemy_C_EnemyDataDrop, Param_SpawnLocation) == 0x000000, "Member 'RSBattleEnemy_C_EnemyDataDrop::Param_SpawnLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyDataDrop, SpawnDir) == 0x00000C, "Member 'RSBattleEnemy_C_EnemyDataDrop::SpawnDir' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EnemyDataDrop, IsDrop) == 0x000018, "Member 'RSBattleEnemy_C_EnemyDataDrop::IsDrop' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemySpawn
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_SetEnemySpawn final
{
public:
	bool                                          Spawn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpawnStart_Return;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921B[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemySpawn) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SetEnemySpawn");
static_assert(sizeof(RSBattleEnemy_C_SetEnemySpawn) == 0x000048, "Wrong size on RSBattleEnemy_C_SetEnemySpawn");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, Spawn) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemySpawn::Spawn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, Return) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemySpawn::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_SpawnStart_Return) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_SpawnStart_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemySpawn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_SetEnemySpawn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SpawnStart
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_SpawnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               L_Rotation;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckSpawnCondition_IsSpawnOK;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorAllTickEnabled_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SpawnStart) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SpawnStart");
static_assert(sizeof(RSBattleEnemy_C_SpawnStart) == 0x000028, "Wrong size on RSBattleEnemy_C_SpawnStart");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, Return) == 0x000000, "Member 'RSBattleEnemy_C_SpawnStart::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, L_Rotation) == 0x000004, "Member 'RSBattleEnemy_C_SpawnStart::L_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, CallFunc_CheckSpawnCondition_IsSpawnOK) == 0x000010, "Member 'RSBattleEnemy_C_SpawnStart::CallFunc_CheckSpawnCondition_IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'RSBattleEnemy_C_SpawnStart::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_SpawnStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, CallFunc_SetActorAllTickEnabled_ReturnValue) == 0x000021, "Member 'RSBattleEnemy_C_SpawnStart::CallFunc_SetActorAllTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SpawnStart, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000022, "Member 'RSBattleEnemy_C_SpawnStart::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHideWeak
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsHideWeak final
{
public:
	bool                                          Param_IsHideWeak;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHideWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsHideWeak");
static_assert(sizeof(RSBattleEnemy_C_IsHideWeak) == 0x000001, "Wrong size on RSBattleEnemy_C_IsHideWeak");
static_assert(offsetof(RSBattleEnemy_C_IsHideWeak, Param_IsHideWeak) == 0x000000, "Member 'RSBattleEnemy_C_IsHideWeak::Param_IsHideWeak' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ReturnStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_ReturnStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ReturnStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_ReturnStart");
static_assert(sizeof(RSBattleEnemy_C_ReturnStart) == 0x000001, "Wrong size on RSBattleEnemy_C_ReturnStart");
static_assert(offsetof(RSBattleEnemy_C_ReturnStart, Return) == 0x000000, "Member 'RSBattleEnemy_C_ReturnStart::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsAttacking
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsAttacking final
{
public:
	bool                                          IsAttack;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsAttacking) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsAttacking");
static_assert(sizeof(RSBattleEnemy_C_IsAttacking) == 0x000004, "Wrong size on RSBattleEnemy_C_IsAttacking");
static_assert(offsetof(RSBattleEnemy_C_IsAttacking, IsAttack) == 0x000000, "Member 'RSBattleEnemy_C_IsAttacking::IsAttack' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsAttacking, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsAttacking::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsAttacking, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsAttacking::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsAttacking, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsAttacking::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetKind
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_GetTargetKind final
{
public:
	ERSPartyPlayerKind                            TargetKind;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            L_TargetKind;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSPartyPlayerKind                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetKind) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetTargetKind");
static_assert(sizeof(RSBattleEnemy_C_GetTargetKind) == 0x000020, "Wrong size on RSBattleEnemy_C_GetTargetKind");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, TargetKind) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetKind::TargetKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, L_TargetKind) == 0x000001, "Member 'RSBattleEnemy_C_GetTargetKind::L_TargetKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, Temp_byte_Variable) == 0x000002, "Member 'RSBattleEnemy_C_GetTargetKind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_GetTargetKind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, K2Node_DynamicCast_AsPlayer_Interface) == 0x000008, "Member 'RSBattleEnemy_C_GetTargetKind::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_GetTargetKind::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetKind, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_GetTargetKind::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCore
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetBrainCore final
{
public:
	class ABP_co2000Base_C*                       CoreObject;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCore) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBrainCore");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCore) == 0x000008, "Wrong size on RSBattleEnemy_C_GetBrainCore");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCore, CoreObject) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCore::CoreObject' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyStateFloating
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsEnemyStateFloating final
{
public:
	bool                                          IsFloating;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIdleResetMoveMode_bReset;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyStateFloating) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyStateFloating");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyStateFloating) == 0x000004, "Wrong size on RSBattleEnemy_C_IsEnemyStateFloating");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateFloating, IsFloating) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyStateFloating::IsFloating' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateFloating, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyStateFloating::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateFloating, CallFunc_IsIdleResetMoveMode_bReset) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyStateFloating::CallFunc_IsIdleResetMoveMode_bReset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyStateFloating, CallFunc_IsFlying_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsEnemyStateFloating::CallFunc_IsFlying_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcCameraShake
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_CalcCameraShake final
{
public:
	class UClass*                                 InputShakeClass;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputScale;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OutputShakeClass;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutputScale;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9220[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 L_ShakeClass;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_ShakeSize;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_M; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9221[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_L; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9222[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_PrivateGetMainPlayer_Player;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9223[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_CalcCameraShake) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CalcCameraShake");
static_assert(sizeof(RSBattleEnemy_C_CalcCameraShake) == 0x000090, "Wrong size on RSBattleEnemy_C_CalcCameraShake");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, InputShakeClass) == 0x000000, "Member 'RSBattleEnemy_C_CalcCameraShake::InputShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, InputScale) == 0x000008, "Member 'RSBattleEnemy_C_CalcCameraShake::InputScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, ShakeLocation) == 0x00000C, "Member 'RSBattleEnemy_C_CalcCameraShake::ShakeLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, OutputShakeClass) == 0x000018, "Member 'RSBattleEnemy_C_CalcCameraShake::OutputShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, OutputScale) == 0x000020, "Member 'RSBattleEnemy_C_CalcCameraShake::OutputScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, L_ShakeClass) == 0x000028, "Member 'RSBattleEnemy_C_CalcCameraShake::L_ShakeClass' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, L_Distance) == 0x000030, "Member 'RSBattleEnemy_C_CalcCameraShake::L_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, L_ShakeSize) == 0x000034, "Member 'RSBattleEnemy_C_CalcCameraShake::L_ShakeSize' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_M) == 0x000038, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_M' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_ClassDynamicCast_bSuccess) == 0x000040, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_L) == 0x000048, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_ClassDynamicCast_AsEnemy_Attack_Camera_Shake_L' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_ClassDynamicCast_bSuccess_1) == 0x000050, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00005D, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x00005E, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_SwitchInteger_CmpSuccess) == 0x00005F, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_PrivateGetMainPlayer_Player) == 0x000060, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_PrivateGetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_DynamicCast_AsRSBattle_Player) == 0x000068, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'RSBattleEnemy_C_CalcCameraShake::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcCameraShake, CallFunc_VSize_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_CalcCameraShake::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyPressDownEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_SetEnemyPressDownEnd final
{
public:
	bool                                          Dammy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyPressDownEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyPressDownEnd");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyPressDownEnd) == 0x000001, "Wrong size on RSBattleEnemy_C_SetEnemyPressDownEnd");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyPressDownEnd, Dammy) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyPressDownEnd::Dammy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.EndUniqueObjState
// 0x0070 (0x0070 - 0x0000)
struct RSBattleEnemy_C_EndUniqueObjState final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9224[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharactersParameterBasic              L_basic;                                           // 0x0008(0x0068)(Edit, BlueprintVisible)
};
static_assert(alignof(RSBattleEnemy_C_EndUniqueObjState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_EndUniqueObjState");
static_assert(sizeof(RSBattleEnemy_C_EndUniqueObjState) == 0x000070, "Wrong size on RSBattleEnemy_C_EndUniqueObjState");
static_assert(offsetof(RSBattleEnemy_C_EndUniqueObjState, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_EndUniqueObjState::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_EndUniqueObjState, L_basic) == 0x000008, "Member 'RSBattleEnemy_C_EndUniqueObjState::L_basic' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartUniqueObjState
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_StartUniqueObjState final
{
public:
	class ABP_PsychicObjectBasic_C*               AttackObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartUniqueObjState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartUniqueObjState");
static_assert(sizeof(RSBattleEnemy_C_StartUniqueObjState) == 0x000010, "Wrong size on RSBattleEnemy_C_StartUniqueObjState");
static_assert(offsetof(RSBattleEnemy_C_StartUniqueObjState, AttackObject) == 0x000000, "Member 'RSBattleEnemy_C_StartUniqueObjState::AttackObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartUniqueObjState, Dummy) == 0x000008, "Member 'RSBattleEnemy_C_StartUniqueObjState::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckUniqueObjState
// 0x0228 (0x0228 - 0x0000)
struct RSBattleEnemy_C_CheckUniqueObjState final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Dummy;                                             // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLimitCrash;                                       // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9225[0x2];                                     // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LPreMissScale;                                     // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9226[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               LPsychicObj;                                       // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EHCSkillExtraType>                     LExtraType;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9227[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccess_ReturnValue;           // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkillExtraType_CommonInfo_ReturnValue;  // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9228[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSimulatorManager*                CallFunc_GetBattleSimulatorManager_BattleSimulatorManager; // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjState_ReturnState;             // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9229[0x6];                                     // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartUniqueObjState_Dummy;                // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestEndUniqueObjectState_ReturnValue;  // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckUniqueObjState_CrashChanceCancel_ReturnValue; // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckUniqueObjState) == 0x000008, "Wrong alignment on RSBattleEnemy_C_CheckUniqueObjState");
static_assert(sizeof(RSBattleEnemy_C_CheckUniqueObjState) == 0x000228, "Wrong size on RSBattleEnemy_C_CheckUniqueObjState");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_CheckUniqueObjState::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, Dummy) == 0x0001C0, "Member 'RSBattleEnemy_C_CheckUniqueObjState::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, bLimitCrash) == 0x0001C1, "Member 'RSBattleEnemy_C_CheckUniqueObjState::bLimitCrash' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, LPreMissScale) == 0x0001C4, "Member 'RSBattleEnemy_C_CheckUniqueObjState::LPreMissScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, bSuccess) == 0x0001C8, "Member 'RSBattleEnemy_C_CheckUniqueObjState::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, LPsychicObj) == 0x0001D0, "Member 'RSBattleEnemy_C_CheckUniqueObjState::LPsychicObj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, LExtraType) == 0x0001D8, "Member 'RSBattleEnemy_C_CheckUniqueObjState::LExtraType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_IsValid_ReturnValue) == 0x0001E8, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x0001F0, "Member 'RSBattleEnemy_C_CheckUniqueObjState::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'RSBattleEnemy_C_CheckUniqueObjState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_IsBrainCrashAccess_ReturnValue) == 0x0001F9, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_IsBrainCrashAccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001FA, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_IsSkillExtraType_CommonInfo_ReturnValue) == 0x0001FB, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_IsSkillExtraType_CommonInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_GetBattleSimulatorManager_BattleSimulatorManager) == 0x000200, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_GetBattleSimulatorManager_BattleSimulatorManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_IsValid_ReturnValue_1) == 0x000208, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_IsUniqueObjState_ReturnState) == 0x000209, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_IsUniqueObjState_ReturnState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000210, "Member 'RSBattleEnemy_C_CheckUniqueObjState::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, K2Node_DynamicCast_bSuccess_1) == 0x000220, "Member 'RSBattleEnemy_C_CheckUniqueObjState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_StartUniqueObjState_Dummy) == 0x000221, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_StartUniqueObjState_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_RequestEndUniqueObjectState_ReturnValue) == 0x000222, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_RequestEndUniqueObjectState_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CheckUniqueObjState, CallFunc_CheckUniqueObjState_CrashChanceCancel_ReturnValue) == 0x000223, "Member 'RSBattleEnemy_C_CheckUniqueObjState::CallFunc_CheckUniqueObjState_CrashChanceCancel_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueObjState
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsUniqueObjState final
{
public:
	bool                                          Param_ReturnState;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueObjState) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUniqueObjState");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueObjState) == 0x000001, "Wrong size on RSBattleEnemy_C_IsUniqueObjState");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueObjState, Param_ReturnState) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueObjState::Param_ReturnState' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SwitchDispCore
// 0x00B8 (0x00B8 - 0x0000)
struct RSBattleEnemy_C_SwitchDispCore final
{
public:
	bool                                          DisplayOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamagePartCollisionComponent*          CallFunc_GetCoreCollision_CoreCollision;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_co2000Base_C*                       CallFunc_GetBrainCore_CoreObject;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistAnim_IsExist;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExistAnim_IsExist_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndWeakEffect_Dummy;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartWeakEffect_Success;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922C[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorRelativeRotation_SweepHitResult; // 0x0028(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SwitchDispCore) == 0x000008, "Wrong alignment on RSBattleEnemy_C_SwitchDispCore");
static_assert(sizeof(RSBattleEnemy_C_SwitchDispCore) == 0x0000B8, "Wrong size on RSBattleEnemy_C_SwitchDispCore");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, DisplayOn) == 0x000000, "Member 'RSBattleEnemy_C_SwitchDispCore::DisplayOn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SwitchDispCore::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_GetCoreCollision_CoreCollision) == 0x000008, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_GetCoreCollision_CoreCollision' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_GetBrainCore_CoreObject) == 0x000018, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_GetBrainCore_CoreObject' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsExistAnim_IsExist) == 0x000021, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsExistAnim_IsExist' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsExistAnim_IsExist_1) == 0x000022, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsExistAnim_IsExist_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_EndWeakEffect_Dummy) == 0x000023, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_EndWeakEffect_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsVisible_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_StartWeakEffect_Success) == 0x000025, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_StartWeakEffect_Success' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_K2_SetActorRelativeRotation_SweepHitResult) == 0x000028, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_K2_SetActorRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsVisible_ReturnValue_1) == 0x0000B0, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SwitchDispCore, CallFunc_IsValid_ReturnValue_2) == 0x0000B1, "Member 'RSBattleEnemy_C_SwitchDispCore::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnStartCrashChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnStartCrashChance final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnStartCrashChance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnStartCrashChance");
static_assert(sizeof(RSBattleEnemy_C_OnStartCrashChance) == 0x000001, "Wrong size on RSBattleEnemy_C_OnStartCrashChance");
static_assert(offsetof(RSBattleEnemy_C_OnStartCrashChance, bStart) == 0x000000, "Member 'RSBattleEnemy_C_OnStartCrashChance::bStart' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEndCrashChance
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnEndCrashChance final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEndCrashChance) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnEndCrashChance");
static_assert(sizeof(RSBattleEnemy_C_OnEndCrashChance) == 0x000001, "Wrong size on RSBattleEnemy_C_OnEndCrashChance");
static_assert(offsetof(RSBattleEnemy_C_OnEndCrashChance, bEnd) == 0x000000, "Member 'RSBattleEnemy_C_OnEndCrashChance::bEnd' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPossibleTargetAttack
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_IsPossibleTargetAttack final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPossibleTargetAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsPossibleTargetAttack");
static_assert(sizeof(RSBattleEnemy_C_IsPossibleTargetAttack) == 0x000010, "Wrong size on RSBattleEnemy_C_IsPossibleTargetAttack");
static_assert(offsetof(RSBattleEnemy_C_IsPossibleTargetAttack, Attacker) == 0x000000, "Member 'RSBattleEnemy_C_IsPossibleTargetAttack::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPossibleTargetAttack, bPossible) == 0x000008, "Member 'RSBattleEnemy_C_IsPossibleTargetAttack::bPossible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDisableLostAction
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsDisableLostAction final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDisableLostAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDisableLostAction");
static_assert(sizeof(RSBattleEnemy_C_IsDisableLostAction) == 0x000001, "Wrong size on RSBattleEnemy_C_IsDisableLostAction");
static_assert(offsetof(RSBattleEnemy_C_IsDisableLostAction, bDisable) == 0x000000, "Member 'RSBattleEnemy_C_IsDisableLostAction::bDisable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCoreCollision
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetCoreCollision final
{
public:
	class UDamagePartCollisionComponent*          CoreCollision;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCoreCollision) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetCoreCollision");
static_assert(sizeof(RSBattleEnemy_C_GetCoreCollision) == 0x000008, "Wrong size on RSBattleEnemy_C_GetCoreCollision");
static_assert(offsetof(RSBattleEnemy_C_GetCoreCollision, CoreCollision) == 0x000000, "Member 'RSBattleEnemy_C_GetCoreCollision::CoreCollision' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnSpawnMoveStart
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_OnSpawnMoveStart final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnSpawnMoveStart) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnSpawnMoveStart");
static_assert(sizeof(RSBattleEnemy_C_OnSpawnMoveStart) == 0x000001, "Wrong size on RSBattleEnemy_C_OnSpawnMoveStart");
static_assert(offsetof(RSBattleEnemy_C_OnSpawnMoveStart, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnSpawnMoveStart::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyBrainFieldResetAction
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_OnEnemyBrainFieldResetAction final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReset;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetUseWaitNoInterpolation_bDummy;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetAction_Dummy;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_OnEnemyBrainFieldResetAction");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction) == 0x000008, "Wrong size on RSBattleEnemy_C_OnEnemyBrainFieldResetAction");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, bMoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, bReset) == 0x000001, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::bReset' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, L_result) == 0x000002, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, CallFunc_SetUseWaitNoInterpolation_bDummy) == 0x000003, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::CallFunc_SetUseWaitNoInterpolation_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, CallFunc_ResetAction_Dummy) == 0x000004, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::CallFunc_ResetAction_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000005, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetAction, K2Node_SwitchEnum_CmpSuccess) == 0x000007, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyBrainFieldFinishWeapon
// 0x0068 (0x0068 - 0x0000)
struct RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Enemy_Weapon_C*>             LUseWeaponList;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class UBP_EnemyWeaponManageComponent_C*       LEnemyWeaponManager;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_922E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Enemy_Weapon_C*>             CallFunc_GetUsedWeaponAllList_WeaponList;          // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_Enemy_Weapon_C*                     CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CancelAllEffect_bDummy;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FinishWeapon_Dummy;                       // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922F[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9230[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyWeaponManageComponent_C*       CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon) == 0x000008, "Wrong alignment on RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon) == 0x000068, "Wrong size on RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, bMoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, LUseWeaponList) == 0x000008, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::LUseWeaponList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, LEnemyWeaponManager) == 0x000018, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::LEnemyWeaponManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_GetUsedWeaponAllList_WeaponList) == 0x000030, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_GetUsedWeaponAllList_WeaponList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_Array_Get_Item) == 0x000040, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_CancelAllEffect_bDummy) == 0x000049, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_CancelAllEffect_bDummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_FinishWeapon_Dummy) == 0x00004A, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_FinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldFinishWeapon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyBrainFieldResetStatus
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_OnEnemyBrainFieldResetStatus final
{
public:
	bool                                          bMoveBrainField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9231[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Stealth_End_Return;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus) == 0x000004, "Wrong alignment on RSBattleEnemy_C_OnEnemyBrainFieldResetStatus");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus) == 0x00000C, "Wrong size on RSBattleEnemy_C_OnEnemyBrainFieldResetStatus");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus, bMoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetStatus::bMoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetStatus::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus, CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax) == 0x000004, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetStatus::CallFunc_GetMaterialStealthParamEnemyTimeMax_TimeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldResetStatus, CallFunc_Stealth_End_Return) == 0x000008, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldResetStatus::CallFunc_Stealth_End_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainFieldMoveInner
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainFieldMoveInner final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBrainFieldMoveInner_Dummy;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainFieldMoveInner");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner) == 0x000004, "Wrong size on RSBattleEnemy_C_SetEnemyBrainFieldMoveInner");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveInner::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveInner::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner, CallFunc_OnBrainFieldMoveInner_Dummy) == 0x000002, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveInner::CallFunc_OnBrainFieldMoveInner_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveInner, CallFunc_IsDead_bDead) == 0x000003, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveInner::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyBrainFieldMoveNormal
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal) == 0x000002, "Wrong size on RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal, MoveBrainField) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal::MoveBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyBrainFieldMoveNormal::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.OnEnemyBrainFieldCutChange
// 0x0014 (0x0014 - 0x0000)
struct RSBattleEnemy_C_OnEnemyBrainFieldCutChange final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9232[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetStatus_Dummy;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldResetAction_bReset;      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange) == 0x000004, "Wrong alignment on RSBattleEnemy_C_OnEnemyBrainFieldCutChange");
static_assert(sizeof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange) == 0x000014, "Wrong size on RSBattleEnemy_C_OnEnemyBrainFieldCutChange");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, CallFunc_OnEnemyBrainFieldResetStatus_Dummy) == 0x000011, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::CallFunc_OnEnemyBrainFieldResetStatus_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy) == 0x000012, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::CallFunc_OnEnemyBrainFieldFinishWeapon_Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_OnEnemyBrainFieldCutChange, CallFunc_OnEnemyBrainFieldResetAction_bReset) == 0x000013, "Member 'RSBattleEnemy_C_OnEnemyBrainFieldCutChange::CallFunc_OnEnemyBrainFieldResetAction_bReset' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.ChangeAiType
// 0x0270 (0x0270 - 0x0000)
struct RSBattleEnemy_C_ChangeAiType final
{
public:
	Enum_EnemyAiType                              Param_ChangeAiType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailed;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbFailed;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9233[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LFindAiTable;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9234[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9235[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9236[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_emChangeAiTypeInfo                 CallFunc_Map_Find_Value;                           // 0x0048(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9237[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0060(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9238[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemyInfo                      K2Node_MakeStruct_AiParamEnemyInfo;                // 0x0108(0x00A0)()
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9239[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_923A[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x01C8(0x0018)()
	int32                                         CallFunc_GetEnemyEnumLength_Length;                // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_923B[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01E8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0228(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_923C[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0240(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_ChangeAiType) == 0x000008, "Wrong alignment on RSBattleEnemy_C_ChangeAiType");
static_assert(sizeof(RSBattleEnemy_C_ChangeAiType) == 0x000270, "Wrong size on RSBattleEnemy_C_ChangeAiType");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, Param_ChangeAiType) == 0x000000, "Member 'RSBattleEnemy_C_ChangeAiType::Param_ChangeAiType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, bFailed) == 0x000001, "Member 'RSBattleEnemy_C_ChangeAiType::bFailed' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, LbFailed) == 0x000002, "Member 'RSBattleEnemy_C_ChangeAiType::LbFailed' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, LFindAiTable) == 0x000008, "Member 'RSBattleEnemy_C_ChangeAiType::LFindAiTable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, Temp_int_Variable) == 0x000010, "Member 'RSBattleEnemy_C_ChangeAiType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Conv_IntToByte_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_GetAiDataTableString_Param) == 0x000018, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Conv_StringToName_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, Temp_int_Variable_1) == 0x000034, "Member 'RSBattleEnemy_C_ChangeAiType::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_MakeLiteralInt_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Map_Length_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Map_Find_Value) == 0x000048, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_GetDataTableRowFromName_OutRow) == 0x000060, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, K2Node_MakeStruct_AiParamEnemyInfo) == 0x000108, "Member 'RSBattleEnemy_C_ChangeAiType::K2Node_MakeStruct_AiParamEnemyInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001A8, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_GetObjectName_ReturnValue) == 0x0001B0, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x0001C0, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Conv_StringToText_ReturnValue) == 0x0001C8, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_GetEnemyEnumLength_Length) == 0x0001E0, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_GetEnemyEnumLength_Length' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, K2Node_MakeStruct_FormatArgumentData) == 0x0001E8, "Member 'RSBattleEnemy_C_ChangeAiType::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, K2Node_MakeArray_Array) == 0x000228, "Member 'RSBattleEnemy_C_ChangeAiType::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Subtract_IntInt_ReturnValue) == 0x000238, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Format_ReturnValue) == 0x000240, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Conv_TextToString_ReturnValue) == 0x000258, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_ChangeAiType, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000268, "Member 'RSBattleEnemy_C_ChangeAiType::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CheckChangeAiTypeForHpRate
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_CheckChangeAiTypeForHpRate final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CheckChangeAiTypeForHpRate");
static_assert(sizeof(RSBattleEnemy_C_CheckChangeAiTypeForHpRate) == 0x000001, "Wrong size on RSBattleEnemy_C_CheckChangeAiTypeForHpRate");
static_assert(offsetof(RSBattleEnemy_C_CheckChangeAiTypeForHpRate, Failed) == 0x000000, "Member 'RSBattleEnemy_C_CheckChangeAiTypeForHpRate::Failed' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsChangeAiTypeAction
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_IsChangeAiTypeAction final
{
public:
	Enum_EnemyAiType                              InAiType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_923D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LChangeAiHpRate;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbPossible;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_923E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_923F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9240[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_emChangeAiTypeInfo                 CallFunc_Map_Find_Value;                           // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9241[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsChangeAiTypeAction) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsChangeAiTypeAction");
static_assert(sizeof(RSBattleEnemy_C_IsChangeAiTypeAction) == 0x000048, "Wrong size on RSBattleEnemy_C_IsChangeAiTypeAction");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, InAiType) == 0x000000, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::InAiType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, bPossible) == 0x000001, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::bPossible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, LChangeAiHpRate) == 0x000004, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::LChangeAiHpRate' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, LbPossible) == 0x000008, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::LbPossible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_MakeLiteralInt_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_GetHPPercent_Percent) == 0x000014, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x00001C, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Map_Find_Value) == 0x000028, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Map_Find_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Map_Length_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000040, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsChangeAiTypeAction, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000041, "Member 'RSBattleEnemy_C_IsChangeAiTypeAction::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.em1200_ChangePhaseParamSetting
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Em1200_ChangePhaseParamSetting final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em1200_ChangePhaseParamSetting");
static_assert(sizeof(RSBattleEnemy_C_Em1200_ChangePhaseParamSetting) == 0x000001, "Wrong size on RSBattleEnemy_C_Em1200_ChangePhaseParamSetting");
static_assert(offsetof(RSBattleEnemy_C_Em1200_ChangePhaseParamSetting, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_Em1200_ChangePhaseParamSetting::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.em1210_AddPSychicFlyObj
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_Em1210_AddPSychicFlyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               FlyObj;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1210_AddPSychicFlyObj) == 0x000008, "Wrong alignment on RSBattleEnemy_C_Em1210_AddPSychicFlyObj");
static_assert(sizeof(RSBattleEnemy_C_Em1210_AddPSychicFlyObj) == 0x000010, "Wrong size on RSBattleEnemy_C_Em1210_AddPSychicFlyObj");
static_assert(offsetof(RSBattleEnemy_C_Em1210_AddPSychicFlyObj, FlyObj) == 0x000000, "Member 'RSBattleEnemy_C_Em1210_AddPSychicFlyObj::FlyObj' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1210_AddPSychicFlyObj, Dummy) == 0x000008, "Member 'RSBattleEnemy_C_Em1210_AddPSychicFlyObj::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartReactionDilation
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_StartReactionDilation final
{
public:
	uint8                                         ReactionKind;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddDamage;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartReactionDilation) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartReactionDilation");
static_assert(sizeof(RSBattleEnemy_C_StartReactionDilation) == 0x000003, "Wrong size on RSBattleEnemy_C_StartReactionDilation");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation, ReactionKind) == 0x000000, "Member 'RSBattleEnemy_C_StartReactionDilation::ReactionKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation, AddDamage) == 0x000001, "Member 'RSBattleEnemy_C_StartReactionDilation::AddDamage' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartReactionDilation, Return) == 0x000002, "Member 'RSBattleEnemy_C_StartReactionDilation::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyDiscoveredOnceInterface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface final
{
public:
	bool                                          bDiscoverd;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDiscoveredOnce_DiscoverdOnce;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface, bDiscoverd) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface::bDiscoverd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface, CallFunc_IsDiscoveredOnce_DiscoverdOnce) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyDiscoveredOnceInterface::CallFunc_IsDiscoveredOnce_DiscoverdOnce' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em0700_EnableInvalidDamage
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Em0700_EnableInvalidDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em0700_EnableInvalidDamage");
static_assert(sizeof(RSBattleEnemy_C_Em0700_EnableInvalidDamage) == 0x000001, "Wrong size on RSBattleEnemy_C_Em0700_EnableInvalidDamage");
static_assert(offsetof(RSBattleEnemy_C_Em0700_EnableInvalidDamage, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_Em0700_EnableInvalidDamage::bEnable' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em1400_StartDither
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_Em1400_StartDither final
{
public:
	float                                         TotalDuration;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1400_StartDither) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Em1400_StartDither");
static_assert(sizeof(RSBattleEnemy_C_Em1400_StartDither) == 0x000008, "Wrong size on RSBattleEnemy_C_Em1400_StartDither");
static_assert(offsetof(RSBattleEnemy_C_Em1400_StartDither, TotalDuration) == 0x000000, "Member 'RSBattleEnemy_C_Em1400_StartDither::TotalDuration' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1400_StartDither, Return) == 0x000004, "Member 'RSBattleEnemy_C_Em1400_StartDither::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em1400_EndDither
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Em1400_EndDither final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1400_EndDither) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em1400_EndDither");
static_assert(sizeof(RSBattleEnemy_C_Em1400_EndDither) == 0x000001, "Wrong size on RSBattleEnemy_C_Em1400_EndDither");
static_assert(offsetof(RSBattleEnemy_C_Em1400_EndDither, Return) == 0x000000, "Member 'RSBattleEnemy_C_Em1400_EndDither::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em1400_UpdateDither
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_Em1400_UpdateDither final
{
public:
	EEasingFunc                                   EasingFunc;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9242[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSec;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1400_UpdateDither) == 0x000004, "Wrong alignment on RSBattleEnemy_C_Em1400_UpdateDither");
static_assert(sizeof(RSBattleEnemy_C_Em1400_UpdateDither) == 0x00000C, "Wrong size on RSBattleEnemy_C_Em1400_UpdateDither");
static_assert(offsetof(RSBattleEnemy_C_Em1400_UpdateDither, EasingFunc) == 0x000000, "Member 'RSBattleEnemy_C_Em1400_UpdateDither::EasingFunc' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1400_UpdateDither, DeltaSec) == 0x000004, "Member 'RSBattleEnemy_C_Em1400_UpdateDither::DeltaSec' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1400_UpdateDither, Return) == 0x000008, "Member 'RSBattleEnemy_C_Em1400_UpdateDither::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em1400_SetSpawnTransform
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_Em1400_SetSpawnTransform final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1400_SetSpawnTransform) == 0x000010, "Wrong alignment on RSBattleEnemy_C_Em1400_SetSpawnTransform");
static_assert(sizeof(RSBattleEnemy_C_Em1400_SetSpawnTransform) == 0x000040, "Wrong size on RSBattleEnemy_C_Em1400_SetSpawnTransform");
static_assert(offsetof(RSBattleEnemy_C_Em1400_SetSpawnTransform, SpawnTransform) == 0x000000, "Member 'RSBattleEnemy_C_Em1400_SetSpawnTransform::SpawnTransform' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1400_SetSpawnTransform, Return) == 0x000030, "Member 'RSBattleEnemy_C_Em1400_SetSpawnTransform::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em1400_GetSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_Em1400_GetSpawnTransform final
{
public:
	struct FTransform                             SpawTransform;                                     // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1400_GetSpawnTransform) == 0x000010, "Wrong alignment on RSBattleEnemy_C_Em1400_GetSpawnTransform");
static_assert(sizeof(RSBattleEnemy_C_Em1400_GetSpawnTransform) == 0x000030, "Wrong size on RSBattleEnemy_C_Em1400_GetSpawnTransform");
static_assert(offsetof(RSBattleEnemy_C_Em1400_GetSpawnTransform, SpawTransform) == 0x000000, "Member 'RSBattleEnemy_C_Em1400_GetSpawnTransform::SpawTransform' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainFieldEnemyAlive
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainFieldEnemyAlive final
{
public:
	bool                                          bEnemyAlive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainFieldEnemyAlive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainFieldEnemyAlive");
static_assert(sizeof(RSBattleEnemy_C_IsBrainFieldEnemyAlive) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainFieldEnemyAlive");
static_assert(offsetof(RSBattleEnemy_C_IsBrainFieldEnemyAlive, bEnemyAlive) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainFieldEnemyAlive::bEnemyAlive' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSwitchAttackCollisionInfo
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsSwitchAttackCollisionInfo final
{
public:
	bool                                          IsSwitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSwitchAttackCollisionInfo");
static_assert(sizeof(RSBattleEnemy_C_IsSwitchAttackCollisionInfo) == 0x000001, "Wrong size on RSBattleEnemy_C_IsSwitchAttackCollisionInfo");
static_assert(offsetof(RSBattleEnemy_C_IsSwitchAttackCollisionInfo, IsSwitch) == 0x000000, "Member 'RSBattleEnemy_C_IsSwitchAttackCollisionInfo::IsSwitch' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.SetEnemyUpDownWait
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_SetEnemyUpDownWait final
{
public:
	bool                                          DownWait;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_SetEnemyUpDownWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_SetEnemyUpDownWait");
static_assert(sizeof(RSBattleEnemy_C_SetEnemyUpDownWait) == 0x000002, "Wrong size on RSBattleEnemy_C_SetEnemyUpDownWait");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyUpDownWait, DownWait) == 0x000000, "Member 'RSBattleEnemy_C_SetEnemyUpDownWait::DownWait' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_SetEnemyUpDownWait, Dummy) == 0x000001, "Member 'RSBattleEnemy_C_SetEnemyUpDownWait::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyUpDownWait
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsEnemyUpDownWait final
{
public:
	bool                                          Param_bUpDownWait;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyUpDownWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyUpDownWait");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyUpDownWait) == 0x000001, "Wrong size on RSBattleEnemy_C_IsEnemyUpDownWait");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyUpDownWait, Param_bUpDownWait) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyUpDownWait::Param_bUpDownWait' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartCriticalHitSlow
// 0x0200 (0x0200 - 0x0000)
struct RSBattleEnemy_C_StartCriticalHitSlow final
{
public:
	struct FHCHitResult                           InHitResult;                                       // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            LSlowType;                                         // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9243[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LAttacker;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            Temp_byte_Variable;                                // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x01DA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHitStopType                            Temp_byte_Variable_2;                              // 0x01DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9244[0x6];                                     // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> K2Node_DynamicCast_AsTargetable_Object_Interface;  // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerHitStopType                            K2Node_Select_Default;                             // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_StartCriticalHitSlow) == 0x000008, "Wrong alignment on RSBattleEnemy_C_StartCriticalHitSlow");
static_assert(sizeof(RSBattleEnemy_C_StartCriticalHitSlow) == 0x000200, "Wrong size on RSBattleEnemy_C_StartCriticalHitSlow");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, InHitResult) == 0x000000, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::InHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Return) == 0x0001C0, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, LSlowType) == 0x0001C1, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::LSlowType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, LAttacker) == 0x0001C8, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::LAttacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Temp_bool_Variable) == 0x0001D0, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue) == 0x0001D1, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D2, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D3, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001D4, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_1) == 0x0001D5, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_BooleanOR_ReturnValue) == 0x0001D6, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_BooleanOR_ReturnValue_1) == 0x0001D7, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_IsValid_ReturnValue_2) == 0x0001D8, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Temp_byte_Variable) == 0x0001D9, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Temp_byte_Variable_1) == 0x0001DA, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Temp_byte_Variable_2) == 0x0001DB, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_Array_Find_ReturnValue) == 0x0001DC, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001E0, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, Temp_bool_Variable_1) == 0x0001E1, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, K2Node_DynamicCast_AsTargetable_Object_Interface) == 0x0001E8, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::K2Node_DynamicCast_AsTargetable_Object_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, CallFunc_IsControlPlayer_ReturnValue) == 0x0001F9, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_StartCriticalHitSlow, K2Node_Select_Default) == 0x0001FA, "Member 'RSBattleEnemy_C_StartCriticalHitSlow::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.em1130_EnableWeak
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_Em1130_EnableWeak final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em1130_EnableWeak) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em1130_EnableWeak");
static_assert(sizeof(RSBattleEnemy_C_Em1130_EnableWeak) == 0x000002, "Wrong size on RSBattleEnemy_C_Em1130_EnableWeak");
static_assert(offsetof(RSBattleEnemy_C_Em1130_EnableWeak, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_Em1130_EnableWeak::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Em1130_EnableWeak, Return) == 0x000001, "Member 'RSBattleEnemy_C_Em1130_EnableWeak::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemySpawnConditionCheck
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_GetEnemySpawnConditionCheck final
{
public:
	bool                                          IsSpawnOK;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemySpawnConditionCheck) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemySpawnConditionCheck");
static_assert(sizeof(RSBattleEnemy_C_GetEnemySpawnConditionCheck) == 0x000002, "Wrong size on RSBattleEnemy_C_GetEnemySpawnConditionCheck");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySpawnConditionCheck, IsSpawnOK) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemySpawnConditionCheck::IsSpawnOK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySpawnConditionCheck, CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK) == 0x000001, "Member 'RSBattleEnemy_C_GetEnemySpawnConditionCheck::CallFunc_Is_Enable_Spawn_by_Condition_IsSpawnOK' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartEnemyCrashVisionHitEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartEnemyCrashVisionHitEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartEnemyCrashVisionHitEffect");
static_assert(sizeof(RSBattleEnemy_C_StartEnemyCrashVisionHitEffect) == 0x000001, "Wrong size on RSBattleEnemy_C_StartEnemyCrashVisionHitEffect");
static_assert(offsetof(RSBattleEnemy_C_StartEnemyCrashVisionHitEffect, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_StartEnemyCrashVisionHitEffect::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.StartEnemyCrashVisionHitUniqueEffect
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong alignment on RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(sizeof(RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect) == 0x000001, "Wrong size on RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect");
static_assert(offsetof(RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_StartEnemyCrashVisionHitUniqueEffect::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BindingCrashVisionEnemy
// 0x0450 (0x0450 - 0x0000)
struct RSBattleEnemy_C_BindingCrashVisionEnemy final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9245[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             TmpBindingID;                                      // 0x0004(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9246[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  LEnemySequence;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9247[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9248[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9249[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0058(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_924A[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0084(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_924B[0x1];                                     // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0190(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_924C[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URSEnemyAnimInstance*                   K2Node_DynamicCast_AsRSEnemy_Anim_Instance;        // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_924D[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_924E[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x023C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_924F[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_2;                          // 0x0248(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingID_IsFind;        // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9250[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_GetSequenceObjectBindingID_ReturnValue;   // 0x025C(0x0018)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9251[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList; // 0x0278(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList; // 0x0288(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind; // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9252[0x3];                                     // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9253[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1; // 0x02A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1; // 0x02B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1; // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9254[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9255[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9256[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  CallFunc_GetCurrentEnemySequencer_Sequencer;       // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x02F0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0320(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9257[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_3;                          // 0x03B0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9258[0x6];                                     // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_4;                          // 0x03C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue_1;              // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9259[0x3];                                     // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_925A[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_5;                          // 0x03F0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0404(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925B[0x3];                                     // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925C[0x3];                                     // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_6;                          // 0x0410(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_7;                          // 0x0420(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925D[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     K2Node_MakeArray_Array_8;                          // 0x0438(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_BindingCrashVisionEnemy) == 0x000010, "Wrong alignment on RSBattleEnemy_C_BindingCrashVisionEnemy");
static_assert(sizeof(RSBattleEnemy_C_BindingCrashVisionEnemy) == 0x000450, "Wrong size on RSBattleEnemy_C_BindingCrashVisionEnemy");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, TmpBindingID) == 0x000004, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::TmpBindingID' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, LEnemySequence) == 0x000020, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::LEnemySequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Array_Index_Variable) == 0x000034, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000040, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Not_PreBool_ReturnValue_1) == 0x000043, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array) == 0x000048, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_1) == 0x000058, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000084, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x00010C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_bBlockingHit) == 0x00010D, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_bInitialOverlap) == 0x00010E, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_Time) == 0x000110, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_Distance) == 0x000114, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_Location) == 0x000118, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_ImpactPoint) == 0x000124, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_Normal) == 0x000130, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_ImpactNormal) == 0x00013C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_PhysMat) == 0x000148, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_HitActor) == 0x000150, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_HitComponent) == 0x000158, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_HitBoneName) == 0x000160, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_HitItem) == 0x000168, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_FaceIndex) == 0x00016C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_TraceStart) == 0x000170, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BreakHitResult_TraceEnd) == 0x00017C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetAnimInstance_ReturnValue) == 0x000188, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000190, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000218, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_DynamicCast_AsRSEnemy_Anim_Instance) == 0x000220, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_DynamicCast_AsRSEnemy_Anim_Instance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_DynamicCast_bSuccess) == 0x000228, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetBlackboard_ReturnValue) == 0x000230, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000238, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_MakeLiteralName_ReturnValue) == 0x00023C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_2) == 0x000248, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingID_IsFind) == 0x000258, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingID_IsFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingID_ReturnValue) == 0x00025C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingID_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList) == 0x000278, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList) == 0x000288, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind) == 0x000298, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Array_Length_ReturnValue) == 0x00029C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Loop_Num_Variable_1) == 0x0002A0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1) == 0x0002A8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_OutBindingIDList_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1) == 0x0002B8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_OutNameList_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1) == 0x0002C8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetSequenceObjectBindingIDListFromClass_IsFind_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x0002CC, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_FindSubstring_ReturnValue) == 0x0002D0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0002D4, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetBrainCrashManager_Manager) == 0x0002D8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue_2) == 0x0002E0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetCurrentEnemySequencer_Sequencer) == 0x0002E8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetCurrentEnemySequencer_Sequencer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GetTransform_ReturnValue) == 0x0002F0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000320, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0003A8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_3) == 0x0003B0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue_3) == 0x0003C0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue_4) == 0x0003C1, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_4) == 0x0003C8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Array_Index_Variable_1) == 0x0003D8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_FindSubstring_ReturnValue_1) == 0x0003DC, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_FindSubstring_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0003E0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0003E4, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_SelectFloat_ReturnValue) == 0x0003E8, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_5) == 0x0003F0, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, Temp_int_Loop_Counter_Variable_1) == 0x000400, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Less_IntInt_ReturnValue_1) == 0x000404, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_Add_IntInt_ReturnValue_1) == 0x000408, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_BooleanAND_ReturnValue_1) == 0x00040C, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_6) == 0x000410, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_7) == 0x000420, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, CallFunc_IsValid_ReturnValue_5) == 0x000430, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BindingCrashVisionEnemy, K2Node_MakeArray_Array_8) == 0x000438, "Member 'RSBattleEnemy_C_BindingCrashVisionEnemy::K2Node_MakeArray_Array_8' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.em8300_DeadBattleSimulator
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Em8300_DeadBattleSimulator final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em8300_DeadBattleSimulator");
static_assert(sizeof(RSBattleEnemy_C_Em8300_DeadBattleSimulator) == 0x000001, "Wrong size on RSBattleEnemy_C_Em8300_DeadBattleSimulator");
static_assert(offsetof(RSBattleEnemy_C_Em8300_DeadBattleSimulator, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_Em8300_DeadBattleSimulator::Dummy' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyRepop
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsEnemyRepop final
{
public:
	bool                                          Repop;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyRepop) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyRepop");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyRepop) == 0x000001, "Wrong size on RSBattleEnemy_C_IsEnemyRepop");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyRepop, Repop) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyRepop::Repop' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.getEmPosDiscover
// 0x006C (0x006C - 0x0000)
struct RSBattleEnemy_C_GetEmPosDiscover final
{
public:
	struct FVector                                DiscoverPos;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_BaseLocation;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Extent;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Origin;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEmPosDiscover) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetEmPosDiscover");
static_assert(sizeof(RSBattleEnemy_C_GetEmPosDiscover) == 0x00006C, "Wrong size on RSBattleEnemy_C_GetEmPosDiscover");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, DiscoverPos) == 0x000000, "Member 'RSBattleEnemy_C_GetEmPosDiscover::DiscoverPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, L_BaseLocation) == 0x00000C, "Member 'RSBattleEnemy_C_GetEmPosDiscover::L_BaseLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, L_Location) == 0x000018, "Member 'RSBattleEnemy_C_GetEmPosDiscover::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, L_Extent) == 0x000024, "Member 'RSBattleEnemy_C_GetEmPosDiscover::L_Extent' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, L_Origin) == 0x000030, "Member 'RSBattleEnemy_C_GetEmPosDiscover::L_Origin' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_BreakVector_X) == 0x000048, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_BreakVector_Y) == 0x00004C, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_BreakVector_Z) == 0x000050, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEmPosDiscover, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_GetEmPosDiscover::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNeedResetStateMachine
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_IsNeedResetStateMachine final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResetSecond;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNeedResetStateMachine_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNeedResetStateMachine) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsNeedResetStateMachine");
static_assert(sizeof(RSBattleEnemy_C_IsNeedResetStateMachine) == 0x00000C, "Wrong size on RSBattleEnemy_C_IsNeedResetStateMachine");
static_assert(offsetof(RSBattleEnemy_C_IsNeedResetStateMachine, ElapsedTime) == 0x000000, "Member 'RSBattleEnemy_C_IsNeedResetStateMachine::ElapsedTime' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNeedResetStateMachine, ResetSecond) == 0x000004, "Member 'RSBattleEnemy_C_IsNeedResetStateMachine::ResetSecond' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNeedResetStateMachine, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsNeedResetStateMachine::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNeedResetStateMachine, CallFunc_IsNeedResetStateMachine_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_IsNeedResetStateMachine::CallFunc_IsNeedResetStateMachine_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAndUpdateContinuousSameDamageReaction
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAndUpdateContinuousSameDamageReaction_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction");
static_assert(sizeof(RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction) == 0x000002, "Wrong size on RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction");
static_assert(offsetof(RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction, CallFunc_GetAndUpdateContinuousSameDamageReaction_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_GetAndUpdateContinuousSameDamageReaction::CallFunc_GetAndUpdateContinuousSameDamageReaction_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetIsBattleMode
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetIsBattleMode final
{
public:
	bool                                          IsBattleMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Ret;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   L_name;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleAIStateType                            L_battleAIState;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_Native_ReturnValue;       // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetIsBattleMode) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetIsBattleMode");
static_assert(sizeof(RSBattleEnemy_C_GetIsBattleMode) == 0x000010, "Wrong size on RSBattleEnemy_C_GetIsBattleMode");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, IsBattleMode) == 0x000000, "Member 'RSBattleEnemy_C_GetIsBattleMode::IsBattleMode' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, L_Ret) == 0x000001, "Member 'RSBattleEnemy_C_GetIsBattleMode::L_Ret' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, L_name) == 0x000004, "Member 'RSBattleEnemy_C_GetIsBattleMode::L_name' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, L_battleAIState) == 0x00000C, "Member 'RSBattleEnemy_C_GetIsBattleMode::L_battleAIState' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'RSBattleEnemy_C_GetIsBattleMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetIsBattleMode, CallFunc_GetIsBattleMode_Native_ReturnValue) == 0x00000E, "Member 'RSBattleEnemy_C_GetIsBattleMode::CallFunc_GetIsBattleMode_Native_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBattling
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBattling final
{
public:
	bool                                          bBatting;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBattling) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBattling");
static_assert(sizeof(RSBattleEnemy_C_IsBattling) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBattling");
static_assert(offsetof(RSBattleEnemy_C_IsBattling, bBatting) == 0x000000, "Member 'RSBattleEnemy_C_IsBattling::bBatting' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsTargetEnemy
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_IsTargetEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9260[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsTargetEnemy) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsTargetEnemy");
static_assert(sizeof(RSBattleEnemy_C_IsTargetEnemy) == 0x000030, "Wrong size on RSBattleEnemy_C_IsTargetEnemy");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsTargetEnemy::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsTargetEnemy::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, K2Node_DynamicCast_AsRSBattle_Player) == 0x000010, "Member 'RSBattleEnemy_C_IsTargetEnemy::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_IsTargetEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsTargetEnemy::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_IsTargetEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_IsTargetEnemy::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetEnemy, CallFunc_IsLockTarget_ReturnValue) == 0x00002A, "Member 'RSBattleEnemy_C_IsTargetEnemy::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsArmor
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_IsArmor final
{
public:
	class UPrimitiveComponent*                    Prim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsArmor) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsArmor");
static_assert(sizeof(RSBattleEnemy_C_IsArmor) == 0x000010, "Wrong size on RSBattleEnemy_C_IsArmor");
static_assert(offsetof(RSBattleEnemy_C_IsArmor, Prim) == 0x000000, "Member 'RSBattleEnemy_C_IsArmor::Prim' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsArmor, Return) == 0x000008, "Member 'RSBattleEnemy_C_IsArmor::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsArmor, L_return) == 0x000009, "Member 'RSBattleEnemy_C_IsArmor::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsArmor, CallFunc_IsArmor_ReturnValue) == 0x00000A, "Member 'RSBattleEnemy_C_IsArmor::CallFunc_IsArmor_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDamagePartDir
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_GetDamagePartDir final
{
public:
	class UDamagePartCollisionComponent*          DamagePart;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Vector;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDamagePartDir_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDamagePartDir) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetDamagePartDir");
static_assert(sizeof(RSBattleEnemy_C_GetDamagePartDir) == 0x000030, "Wrong size on RSBattleEnemy_C_GetDamagePartDir");
static_assert(offsetof(RSBattleEnemy_C_GetDamagePartDir, DamagePart) == 0x000000, "Member 'RSBattleEnemy_C_GetDamagePartDir::DamagePart' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDamagePartDir, ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetDamagePartDir::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDamagePartDir, L_Vector) == 0x000014, "Member 'RSBattleEnemy_C_GetDamagePartDir::L_Vector' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetDamagePartDir, CallFunc_GetDamagePartDir_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetDamagePartDir::CallFunc_GetDamagePartDir_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyEnumLength
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetEnemyEnumLength final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyEnumLength) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetEnemyEnumLength");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyEnumLength) == 0x000004, "Wrong size on RSBattleEnemy_C_GetEnemyEnumLength");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyEnumLength, Length) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyEnumLength::Length' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitWall
// 0x00F8 (0x00F8 - 0x0000)
struct RSBattleEnemy_C_IsHitWall final
{
public:
	struct FVector                                Src;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dst;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9261[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjTypes;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitWall) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitWall");
static_assert(sizeof(RSBattleEnemy_C_IsHitWall) == 0x0000F8, "Wrong size on RSBattleEnemy_C_IsHitWall");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, Src) == 0x000000, "Member 'RSBattleEnemy_C_IsHitWall::Src' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, Dst) == 0x00000C, "Member 'RSBattleEnemy_C_IsHitWall::Dst' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, IsHit) == 0x000018, "Member 'RSBattleEnemy_C_IsHitWall::IsHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, ObjTypes) == 0x000020, "Member 'RSBattleEnemy_C_IsHitWall::ObjTypes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, Temp_object_Variable) == 0x000030, "Member 'RSBattleEnemy_C_IsHitWall::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_IsHitWall::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00004C, "Member 'RSBattleEnemy_C_IsHitWall::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, K2Node_MakeArray_Array) == 0x000058, "Member 'RSBattleEnemy_C_IsHitWall::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000068, "Member 'RSBattleEnemy_C_IsHitWall::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWall, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_IsHitWall::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsRangeArea
// 0x0034 (0x0034 - 0x0000)
struct RSBattleEnemy_C_IsRangeArea final
{
public:
	struct FVector                                HomePos;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurPos;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9262[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsRangeArea) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsRangeArea");
static_assert(sizeof(RSBattleEnemy_C_IsRangeArea) == 0x000034, "Wrong size on RSBattleEnemy_C_IsRangeArea");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, HomePos) == 0x000000, "Member 'RSBattleEnemy_C_IsRangeArea::HomePos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, CurPos) == 0x00000C, "Member 'RSBattleEnemy_C_IsRangeArea::CurPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, Range) == 0x000018, "Member 'RSBattleEnemy_C_IsRangeArea::Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, InRange) == 0x00001C, "Member 'RSBattleEnemy_C_IsRangeArea::InRange' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_IsRangeArea::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, CallFunc_VSize_ReturnValue) == 0x00002C, "Member 'RSBattleEnemy_C_IsRangeArea::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsRangeArea, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_IsRangeArea::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetRandomRangeLocationCore
// 0x0098 (0x0098 - 0x0000)
struct RSBattleEnemy_C_GetRandomRangeLocationCore final
{
public:
	struct FVector                                SrcLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMin;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMax;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckWall;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9263[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NaviData;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9264[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_FindLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_TrialLimit;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_SaveLength;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_SaveLocation;                                    // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_result;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitWall_IsHit;                          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9265[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation; // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9266[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9267[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetRandomRangeLocationCore) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetRandomRangeLocationCore");
static_assert(sizeof(RSBattleEnemy_C_GetRandomRangeLocationCore) == 0x000098, "Wrong size on RSBattleEnemy_C_GetRandomRangeLocationCore");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, SrcLocation) == 0x000000, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::SrcLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, TargetLocation) == 0x00000C, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::TargetLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, RangeMin) == 0x000018, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::RangeMin' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, RangeMax) == 0x00001C, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::RangeMax' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CheckWall) == 0x000020, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CheckWall' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, NaviData) == 0x000028, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::NaviData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, NewLocation) == 0x000030, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::NewLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, IsSuccess) == 0x00003C, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::IsSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, L_FindLocation) == 0x000040, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::L_FindLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, L_TrialLimit) == 0x00004C, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::L_TrialLimit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, L_SaveLength) == 0x000050, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::L_SaveLength' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, L_SaveLocation) == 0x000054, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::L_SaveLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, L_result) == 0x000060, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_IsHitWall_IsHit) == 0x000061, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_IsHitWall_IsHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation) == 0x000064, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue) == 0x000070, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_VSize_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, Temp_int_Variable) == 0x000088, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRandomRangeLocationCore, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_GetRandomRangeLocationCore::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetInvisibleHPGauge
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetInvisibleHPGauge final
{
public:
	bool                                          IsInvisible;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetInvisibleHPGauge) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetInvisibleHPGauge");
static_assert(sizeof(RSBattleEnemy_C_GetInvisibleHPGauge) == 0x000001, "Wrong size on RSBattleEnemy_C_GetInvisibleHPGauge");
static_assert(offsetof(RSBattleEnemy_C_GetInvisibleHPGauge, IsInvisible) == 0x000000, "Member 'RSBattleEnemy_C_GetInvisibleHPGauge::IsInvisible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetRangeType
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_GetTargetRangeType final
{
public:
	Enum_EnemyRange                               RangeType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyRange                               L_Range;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyRange                               CallFunc_CalcRangeType_RangeType;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetRangeType) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetTargetRangeType");
static_assert(sizeof(RSBattleEnemy_C_GetTargetRangeType) == 0x000003, "Wrong size on RSBattleEnemy_C_GetTargetRangeType");
static_assert(offsetof(RSBattleEnemy_C_GetTargetRangeType, RangeType) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetRangeType::RangeType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetRangeType, L_Range) == 0x000001, "Member 'RSBattleEnemy_C_GetTargetRangeType::L_Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetRangeType, CallFunc_CalcRangeType_RangeType) == 0x000002, "Member 'RSBattleEnemy_C_GetTargetRangeType::CallFunc_CalcRangeType_RangeType' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetRangeActions
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetRangeActions final
{
public:
	Enum_EnemyRange                               RangeType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9268[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Actions;                                           // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetRangeActions) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetRangeActions");
static_assert(sizeof(RSBattleEnemy_C_GetRangeActions) == 0x000018, "Wrong size on RSBattleEnemy_C_GetRangeActions");
static_assert(offsetof(RSBattleEnemy_C_GetRangeActions, RangeType) == 0x000000, "Member 'RSBattleEnemy_C_GetRangeActions::RangeType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRangeActions, Actions) == 0x000008, "Member 'RSBattleEnemy_C_GetRangeActions::Actions' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetWeakTargetPoint
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_GetWeakTargetPoint final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPoint;                                            // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9269[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetWeakTargetTransform_WeakTransform;     // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetWeakTargetPoint) == 0x000010, "Wrong alignment on RSBattleEnemy_C_GetWeakTargetPoint");
static_assert(sizeof(RSBattleEnemy_C_GetWeakTargetPoint) == 0x000090, "Wrong size on RSBattleEnemy_C_GetWeakTargetPoint");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, AttackerPos) == 0x000000, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::AttackerPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, Point) == 0x00000C, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, LPoint) == 0x000018, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::LPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, CallFunc_GetWeakTargetTransform_WeakTransform) == 0x000030, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::CallFunc_GetWeakTargetTransform_WeakTransform' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, CallFunc_BreakTransform_Location) == 0x000060, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetPoint, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'RSBattleEnemy_C_GetWeakTargetPoint::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTopTargetPoint
// 0x0034 (0x0034 - 0x0000)
struct RSBattleEnemy_C_GetTopTargetPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPoint;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_926A[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTopTargetPoint) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTopTargetPoint");
static_assert(sizeof(RSBattleEnemy_C_GetTopTargetPoint) == 0x000034, "Wrong size on RSBattleEnemy_C_GetTopTargetPoint");
static_assert(offsetof(RSBattleEnemy_C_GetTopTargetPoint, Point) == 0x000000, "Member 'RSBattleEnemy_C_GetTopTargetPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopTargetPoint, LPoint) == 0x00000C, "Member 'RSBattleEnemy_C_GetTopTargetPoint::LPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopTargetPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetTopTargetPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopTargetPoint, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_GetTopTargetPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopTargetPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetTopTargetPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetCursorPoint
// 0x004C (0x004C - 0x0000)
struct RSBattleEnemy_C_GetTargetCursorPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseSocketName;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CrashChanceCursorSocketName;                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetCursorSocketName;                            // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPoint;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetCursorPoint) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTargetCursorPoint");
static_assert(sizeof(RSBattleEnemy_C_GetTargetCursorPoint) == 0x00004C, "Wrong size on RSBattleEnemy_C_GetTargetCursorPoint");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, Point) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, UseSocketName) == 0x00000C, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::UseSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, CrashChanceCursorSocketName) == 0x000014, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::CrashChanceCursorSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, TargetCursorSocketName) == 0x00001C, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::TargetCursorSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, LPoint) == 0x000024, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::LPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x00003C, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCursorPoint, CallFunc_DoesSocketExist_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_GetTargetCursorPoint::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsStateStealth
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsStateStealth final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealthNative_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsStateStealth) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsStateStealth");
static_assert(sizeof(RSBattleEnemy_C_IsStateStealth) == 0x000002, "Wrong size on RSBattleEnemy_C_IsStateStealth");
static_assert(offsetof(RSBattleEnemy_C_IsStateStealth, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsStateStealth::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsStateStealth, CallFunc_IsStateStealthNative_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsStateStealth::CallFunc_IsStateStealthNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Is Brain Crash Dead State
// 0x0005 (0x0005 - 0x0000)
struct RSBattleEnemy_C_Is_Brain_Crash_Dead_State final
{
public:
	bool                                          Param_IsBrainCrashDead;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Is_Brain_Crash_Dead_State");
static_assert(sizeof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State) == 0x000005, "Wrong size on RSBattleEnemy_C_Is_Brain_Crash_Dead_State");
static_assert(offsetof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State, Param_IsBrainCrashDead) == 0x000000, "Member 'RSBattleEnemy_C_Is_Brain_Crash_Dead_State::Param_IsBrainCrashDead' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_Is_Brain_Crash_Dead_State::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_Is_Brain_Crash_Dead_State::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'RSBattleEnemy_C_Is_Brain_Crash_Dead_State::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_Is_Brain_Crash_Dead_State, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_Is_Brain_Crash_Dead_State::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetWeakUIPoint
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_GetWeakUIPoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   L_name;                                            // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_926B[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformFromBoneSpace_OutPosition;       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformFromBoneSpace_OutRotation;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_926C[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetWeakUIPoint) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetWeakUIPoint");
static_assert(sizeof(RSBattleEnemy_C_GetWeakUIPoint) == 0x000058, "Wrong size on RSBattleEnemy_C_GetWeakUIPoint");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, Param_Index) == 0x000000, "Member 'RSBattleEnemy_C_GetWeakUIPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, Point) == 0x000004, "Member 'RSBattleEnemy_C_GetWeakUIPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, L_Location) == 0x000010, "Member 'RSBattleEnemy_C_GetWeakUIPoint::L_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, L_name) == 0x00001C, "Member 'RSBattleEnemy_C_GetWeakUIPoint::L_name' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000025, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_TransformFromBoneSpace_OutPosition) == 0x000034, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_TransformFromBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_TransformFromBoneSpace_OutRotation) == 0x000040, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_TransformFromBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakUIPoint, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'RSBattleEnemy_C_GetWeakUIPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCollisionHitWall
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsCollisionHitWall final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCollisionHitWall) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsCollisionHitWall");
static_assert(sizeof(RSBattleEnemy_C_IsCollisionHitWall) == 0x000001, "Wrong size on RSBattleEnemy_C_IsCollisionHitWall");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitWall, bHit) == 0x000000, "Member 'RSBattleEnemy_C_IsCollisionHitWall::bHit' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCollisionHitChara
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_IsCollisionHitChara final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_926D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRegisteredAny_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCollisionHitChara) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsCollisionHitChara");
static_assert(sizeof(RSBattleEnemy_C_IsCollisionHitChara) == 0x000018, "Wrong size on RSBattleEnemy_C_IsCollisionHitChara");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitChara, bHit) == 0x000000, "Member 'RSBattleEnemy_C_IsCollisionHitChara::bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitChara, CallFunc_GetHitManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_IsCollisionHitChara::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitChara, CallFunc_IsRegisteredAny_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_IsCollisionHitChara::CallFunc_IsRegisteredAny_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCollisionHitAny
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsCollisionHitAny final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCollisionHitChara_bHit;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCollisionHitWall_bHit;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCollisionHitAny) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsCollisionHitAny");
static_assert(sizeof(RSBattleEnemy_C_IsCollisionHitAny) == 0x000004, "Wrong size on RSBattleEnemy_C_IsCollisionHitAny");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitAny, bHit) == 0x000000, "Member 'RSBattleEnemy_C_IsCollisionHitAny::bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitAny, CallFunc_IsCollisionHitChara_bHit) == 0x000001, "Member 'RSBattleEnemy_C_IsCollisionHitAny::CallFunc_IsCollisionHitChara_bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitAny, CallFunc_IsCollisionHitWall_bHit) == 0x000002, "Member 'RSBattleEnemy_C_IsCollisionHitAny::CallFunc_IsCollisionHitWall_bHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCollisionHitAny, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsCollisionHitAny::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMoveActions
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetMoveActions final
{
public:
	TArray<uint8>                                 Actions;                                           // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMoveActions) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetMoveActions");
static_assert(sizeof(RSBattleEnemy_C_GetMoveActions) == 0x000010, "Wrong size on RSBattleEnemy_C_GetMoveActions");
static_assert(offsetof(RSBattleEnemy_C_GetMoveActions, Actions) == 0x000000, "Member 'RSBattleEnemy_C_GetMoveActions::Actions' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetRangeDistance
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetRangeDistance final
{
public:
	Enum_EnemyRange                               RangeType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_926E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetRangeDistance) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetRangeDistance");
static_assert(sizeof(RSBattleEnemy_C_GetRangeDistance) == 0x000008, "Wrong size on RSBattleEnemy_C_GetRangeDistance");
static_assert(offsetof(RSBattleEnemy_C_GetRangeDistance, RangeType) == 0x000000, "Member 'RSBattleEnemy_C_GetRangeDistance::RangeType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetRangeDistance, Distance) == 0x000004, "Member 'RSBattleEnemy_C_GetRangeDistance::Distance' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotVanish
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsNotVanish final
{
public:
	bool                                          NotVanish;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotVanish) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotVanish");
static_assert(sizeof(RSBattleEnemy_C_IsNotVanish) == 0x000001, "Wrong size on RSBattleEnemy_C_IsNotVanish");
static_assert(offsetof(RSBattleEnemy_C_IsNotVanish, NotVanish) == 0x000000, "Member 'RSBattleEnemy_C_IsNotVanish::NotVanish' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitWallCapsule
// 0x0110 (0x0110 - 0x0000)
struct RSBattleEnemy_C_IsHitWallCapsule final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_926F[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      L_HitTypes;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          L_IsHit;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9270[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x0084(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitWallCapsule) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitWallCapsule");
static_assert(sizeof(RSBattleEnemy_C_IsHitWallCapsule) == 0x000110, "Wrong size on RSBattleEnemy_C_IsHitWallCapsule");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CheckLocation) == 0x000000, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CheckLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, IsHit) == 0x00000C, "Member 'RSBattleEnemy_C_IsHitWallCapsule::IsHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, L_HitTypes) == 0x000010, "Member 'RSBattleEnemy_C_IsHitWallCapsule::L_HitTypes' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, L_IsHit) == 0x000020, "Member 'RSBattleEnemy_C_IsHitWallCapsule::L_IsHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, K2Node_MakeArray_Array) == 0x000028, "Member 'RSBattleEnemy_C_IsHitWallCapsule::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, Temp_object_Variable) == 0x000038, "Member 'RSBattleEnemy_C_IsHitWallCapsule::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, K2Node_MakeArray_Array_1) == 0x000048, "Member 'RSBattleEnemy_C_IsHitWallCapsule::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000078, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x000084, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWallCapsule, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x00010C, "Member 'RSBattleEnemy_C_IsHitWallCapsule::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InMoveArea
// 0x0048 (0x0048 - 0x0000)
struct RSBattleEnemy_C_InMoveArea final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AreaScale;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InArea;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9271[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_BasePos;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_InArea;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9272[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InMoveArea) == 0x000008, "Wrong alignment on RSBattleEnemy_C_InMoveArea");
static_assert(sizeof(RSBattleEnemy_C_InMoveArea) == 0x000048, "Wrong size on RSBattleEnemy_C_InMoveArea");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CheckLocation) == 0x000000, "Member 'RSBattleEnemy_C_InMoveArea::CheckLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, AreaScale) == 0x00000C, "Member 'RSBattleEnemy_C_InMoveArea::AreaScale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, InArea) == 0x000010, "Member 'RSBattleEnemy_C_InMoveArea::InArea' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, L_BasePos) == 0x000014, "Member 'RSBattleEnemy_C_InMoveArea::L_BasePos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, L_InArea) == 0x000020, "Member 'RSBattleEnemy_C_InMoveArea::L_InArea' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_GetBrainFieldManager_Manager) == 0x000038, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InMoveArea, CallFunc_InBranField_InBrainDield) == 0x000042, "Member 'RSBattleEnemy_C_InMoveArea::CallFunc_InBranField_InBrainDield' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsTargetable
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsTargetable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetable_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsTargetable) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsTargetable");
static_assert(sizeof(RSBattleEnemy_C_IsTargetable) == 0x000002, "Wrong size on RSBattleEnemy_C_IsTargetable");
static_assert(offsetof(RSBattleEnemy_C_IsTargetable, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsTargetable::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTargetable, CallFunc_IsTargetable_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsTargetable::CallFunc_IsTargetable_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyBaseLocation
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetEnemyBaseLocation final
{
public:
	struct FVector                                baseLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyBaseLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetEnemyBaseLocation");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyBaseLocation) == 0x000018, "Wrong size on RSBattleEnemy_C_GetEnemyBaseLocation");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyBaseLocation, baseLocation) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyBaseLocation::baseLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyBaseLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetEnemyBaseLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsIgnoreVisionFog
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsIgnoreVisionFog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsIgnoreVisionFog) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsIgnoreVisionFog");
static_assert(sizeof(RSBattleEnemy_C_IsIgnoreVisionFog) == 0x000001, "Wrong size on RSBattleEnemy_C_IsIgnoreVisionFog");
static_assert(offsetof(RSBattleEnemy_C_IsIgnoreVisionFog, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsIgnoreVisionFog::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBodyMeshArray
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_GetBodyMeshArray final
{
public:
	TArray<class USkeletalMeshComponent*>         MeshArray;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBodyMeshArray) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBodyMeshArray");
static_assert(sizeof(RSBattleEnemy_C_GetBodyMeshArray) == 0x000020, "Wrong size on RSBattleEnemy_C_GetBodyMeshArray");
static_assert(offsetof(RSBattleEnemy_C_GetBodyMeshArray, MeshArray) == 0x000000, "Member 'RSBattleEnemy_C_GetBodyMeshArray::MeshArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBodyMeshArray, K2Node_MakeArray_Array) == 0x000010, "Member 'RSBattleEnemy_C_GetBodyMeshArray::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSimpleEnemy
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsSimpleEnemy final
{
public:
	bool                                          IsSimple;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSimpleEnemy) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSimpleEnemy");
static_assert(sizeof(RSBattleEnemy_C_IsSimpleEnemy) == 0x000002, "Wrong size on RSBattleEnemy_C_IsSimpleEnemy");
static_assert(offsetof(RSBattleEnemy_C_IsSimpleEnemy, IsSimple) == 0x000000, "Member 'RSBattleEnemy_C_IsSimpleEnemy::IsSimple' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSimpleEnemy, L_result) == 0x000001, "Member 'RSBattleEnemy_C_IsSimpleEnemy::L_result' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCrashRange
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetBrainCrashRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9273[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCrashRange) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBrainCrashRange");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCrashRange) == 0x000018, "Wrong size on RSBattleEnemy_C_GetBrainCrashRange");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashRange, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCrashRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashRange, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_GetBrainCrashRange::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashRange, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_GetBrainCrashRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CalcRangeType
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_CalcRangeType final
{
public:
	float                                         CheckDistance;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyRange                               RangeType;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyRange                               L_Range;                                           // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9274[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRangeDistance_Distance;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRangeDistance_Distance_1;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9275[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRangeDistance_Distance_2;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CalcRangeType) == 0x000004, "Wrong alignment on RSBattleEnemy_C_CalcRangeType");
static_assert(sizeof(RSBattleEnemy_C_CalcRangeType) == 0x000020, "Wrong size on RSBattleEnemy_C_CalcRangeType");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CheckDistance) == 0x000000, "Member 'RSBattleEnemy_C_CalcRangeType::CheckDistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, RangeType) == 0x000004, "Member 'RSBattleEnemy_C_CalcRangeType::RangeType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, L_Range) == 0x000005, "Member 'RSBattleEnemy_C_CalcRangeType::L_Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_GetRangeDistance_Distance) == 0x000008, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_GetRangeDistance_Distance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_GetRangeDistance_Distance_1) == 0x00000C, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_GetRangeDistance_Distance_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000011, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000012, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000013, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_BooleanAND_ReturnValue_1) == 0x000015, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_GetRangeDistance_Distance_2) == 0x000018, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_GetRangeDistance_Distance_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00001C, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x00001D, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CalcRangeType, CallFunc_BooleanAND_ReturnValue_2) == 0x00001E, "Member 'RSBattleEnemy_C_CalcRangeType::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMainPlayerRangeType
// 0x0038 (0x0038 - 0x0000)
struct RSBattleEnemy_C_GetMainPlayerRangeType final
{
public:
	Enum_EnemyRange                               RangeType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_EnemyRange                               L_Range;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9276[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnemyScriptComponent*                  CallFunc_GetEnemyScriptComponent_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9277[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSearchBasicInfo                       CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue; // 0x0014(0x001C)(ConstParm, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemyRange                               CallFunc_CalcRangeType_RangeType;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMainPlayerRangeType) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetMainPlayerRangeType");
static_assert(sizeof(RSBattleEnemy_C_GetMainPlayerRangeType) == 0x000038, "Wrong size on RSBattleEnemy_C_GetMainPlayerRangeType");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, RangeType) == 0x000000, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::RangeType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, L_Range) == 0x000001, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::L_Range' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, CallFunc_GetEnemyScriptComponent_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::CallFunc_GetEnemyScriptComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerRangeType, CallFunc_CalcRangeType_RangeType) == 0x000031, "Member 'RSBattleEnemy_C_GetMainPlayerRangeType::CallFunc_CalcRangeType_RangeType' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsIdleResetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsIdleResetMoveMode final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsIdleResetMoveMode) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsIdleResetMoveMode");
static_assert(sizeof(RSBattleEnemy_C_IsIdleResetMoveMode) == 0x000001, "Wrong size on RSBattleEnemy_C_IsIdleResetMoveMode");
static_assert(offsetof(RSBattleEnemy_C_IsIdleResetMoveMode, bReset) == 0x000000, "Member 'RSBattleEnemy_C_IsIdleResetMoveMode::bReset' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsInvisibleHPGauge
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsInvisibleHPGauge final
{
public:
	bool                                          bInvisible;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsInvisibleHPGauge) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsInvisibleHPGauge");
static_assert(sizeof(RSBattleEnemy_C_IsInvisibleHPGauge) == 0x000001, "Wrong size on RSBattleEnemy_C_IsInvisibleHPGauge");
static_assert(offsetof(RSBattleEnemy_C_IsInvisibleHPGauge, bInvisible) == 0x000000, "Member 'RSBattleEnemy_C_IsInvisibleHPGauge::bInvisible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBerserkCharacter
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBerserkCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBerserkCharacter) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBerserkCharacter");
static_assert(sizeof(RSBattleEnemy_C_IsBerserkCharacter) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBerserkCharacter");
static_assert(offsetof(RSBattleEnemy_C_IsBerserkCharacter, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsBerserkCharacter::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetSpecialDamageTableType
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetSpecialDamageTableType final
{
public:
	ESpecialDamageTableType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetSpecialDamageTableType) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetSpecialDamageTableType");
static_assert(sizeof(RSBattleEnemy_C_GetSpecialDamageTableType) == 0x000001, "Wrong size on RSBattleEnemy_C_GetSpecialDamageTableType");
static_assert(offsetof(RSBattleEnemy_C_GetSpecialDamageTableType, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetSpecialDamageTableType::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCrashChanceCursorPoint
// 0x0044 (0x0044 - 0x0000)
struct RSBattleEnemy_C_GetCrashChanceCursorPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_result;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9278[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetCursorPoint_Point;               // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9279[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCrashChanceCursorPoint) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCrashChanceCursorPoint");
static_assert(sizeof(RSBattleEnemy_C_GetCrashChanceCursorPoint) == 0x000044, "Wrong size on RSBattleEnemy_C_GetCrashChanceCursorPoint");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, Point) == 0x000000, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, L_result) == 0x00000C, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, CallFunc_GetTargetCursorPoint_Point) == 0x000028, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::CallFunc_GetTargetCursorPoint_Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, CallFunc_IsVisible_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetCrashChanceCursorPoint, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000038, "Member 'RSBattleEnemy_C_GetCrashChanceCursorPoint::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHpGaugePoint
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetHpGaugePoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetCursorPoint_Point;               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetHpGaugePoint) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetHpGaugePoint");
static_assert(sizeof(RSBattleEnemy_C_GetHpGaugePoint) == 0x000018, "Wrong size on RSBattleEnemy_C_GetHpGaugePoint");
static_assert(offsetof(RSBattleEnemy_C_GetHpGaugePoint, Point) == 0x000000, "Member 'RSBattleEnemy_C_GetHpGaugePoint::Point' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetHpGaugePoint, CallFunc_GetTargetCursorPoint_Point) == 0x00000C, "Member 'RSBattleEnemy_C_GetHpGaugePoint::CallFunc_GetTargetCursorPoint_Point' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainCrashAccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainCrashAccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainCrashAccess) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainCrashAccess");
static_assert(sizeof(RSBattleEnemy_C_IsBrainCrashAccess) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainCrashAccess");
static_assert(offsetof(RSBattleEnemy_C_IsBrainCrashAccess, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainCrashAccess::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainCrashSuccess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainCrashSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainCrashSuccess) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainCrashSuccess");
static_assert(sizeof(RSBattleEnemy_C_IsBrainCrashSuccess) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainCrashSuccess");
static_assert(offsetof(RSBattleEnemy_C_IsBrainCrashSuccess, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainCrashSuccess::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugMakeMotionInfoText
// 0x03D8 (0x03D8 - 0x0000)
struct RSBattleEnemy_C_DebugMakeMotionInfoText final
{
public:
	class FText                                   InfoText;                                          // 0x0000(0x0018)(Parm, OutParm)
	class FString                                 L_AllString;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           L_SlotNames;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   L_DefaultText;                                     // 0x0038(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_927A[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0070(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_927B[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_927C[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x00B0(0x0018)()
	class FText                                   CallFunc_Conv_NameToText_ReturnValue_1;            // 0x00C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00E0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0120(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0160(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0170(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0188(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_927D[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetAnimMontageFromSlot_ReturnValue;       // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRootMotionAnimMontage_ReturnValue;      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_927E[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue;          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x01C8(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0208(0x0018)()
	float                                         CallFunc_Montage_GetBlendTime_ReturnValue;         // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_927F[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0228(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0268(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue;          // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9280[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x02C0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0300(0x0018)()
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9281[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0320(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0360(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9282[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x03A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x03B8(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugMakeMotionInfoText) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugMakeMotionInfoText");
static_assert(sizeof(RSBattleEnemy_C_DebugMakeMotionInfoText) == 0x0003D8, "Wrong size on RSBattleEnemy_C_DebugMakeMotionInfoText");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, InfoText) == 0x000000, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::InfoText' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, L_AllString) == 0x000018, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::L_AllString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, L_SlotNames) == 0x000028, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::L_SlotNames' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, L_DefaultText) == 0x000038, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::L_DefaultText' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, Temp_bool_Variable) == 0x000050, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, Temp_text_Variable) == 0x000058, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, Temp_text_Variable_1) == 0x000070, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Conv_TextToString_ReturnValue) == 0x000090, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Array_Get_Item) == 0x0000A4, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Conv_NameToText_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Conv_NameToText_ReturnValue_1) == 0x0000C8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Conv_NameToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData) == 0x0000E0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000120, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeArray_Array) == 0x000160, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Format_ReturnValue) == 0x000170, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Conv_StringToText_ReturnValue) == 0x000188, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Concat_StrStr_ReturnValue) == 0x0001A0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, Temp_int_Loop_Counter_Variable) == 0x0001B0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Less_IntInt_ReturnValue) == 0x0001B4, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_GetAnimMontageFromSlot_ReturnValue) == 0x0001B8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_GetAnimMontageFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_IsRootMotionAnimMontage_ReturnValue) == 0x0001C0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_IsRootMotionAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Montage_GetPlayRate_ReturnValue) == 0x0001C4, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Montage_GetPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_2) == 0x0001C8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_Select_Default) == 0x000208, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Montage_GetBlendTime_ReturnValue) == 0x000220, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Montage_GetBlendTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_3) == 0x000228, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_4) == 0x000268, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Montage_GetPosition_ReturnValue) == 0x0002A8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Montage_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_GetObjectName_ReturnValue) == 0x0002B0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_5) == 0x0002C0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000300, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_GetPlayLength_ReturnValue) == 0x000318, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_6) == 0x000320, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeStruct_FormatArgumentData_7) == 0x000360, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_IsValid_ReturnValue) == 0x0003A0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, K2Node_MakeArray_Array_1) == 0x0003A8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Format_ReturnValue_1) == 0x0003B8, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugMakeMotionInfoText, CallFunc_Add_IntInt_ReturnValue) == 0x0003D0, "Member 'RSBattleEnemy_C_DebugMakeMotionInfoText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSpawnWait
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_IsSpawnWait final
{
public:
	bool                                          bSpawnWait;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemySpawnState                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue_1;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSpawnWait) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSpawnWait");
static_assert(sizeof(RSBattleEnemy_C_IsSpawnWait) == 0x000008, "Wrong size on RSBattleEnemy_C_IsSpawnWait");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, bSpawnWait) == 0x000000, "Member 'RSBattleEnemy_C_IsSpawnWait::bSpawnWait' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, CallFunc_MakeLiteralBool_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsSpawnWait::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, Temp_byte_Variable) == 0x000002, "Member 'RSBattleEnemy_C_IsSpawnWait::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, CallFunc_MakeLiteralBool_ReturnValue_1) == 0x000003, "Member 'RSBattleEnemy_C_IsSpawnWait::CallFunc_MakeLiteralBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsSpawnWait::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, K2Node_Select_Default) == 0x000005, "Member 'RSBattleEnemy_C_IsSpawnWait::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_IsSpawnWait::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawnWait, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'RSBattleEnemy_C_IsSpawnWait::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.UpdateEnableIK
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_UpdateEnableIK final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9283[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_IKAlpha;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_EnableIK;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateEnableIK_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_UpdateEnableIK) == 0x000004, "Wrong alignment on RSBattleEnemy_C_UpdateEnableIK");
static_assert(sizeof(RSBattleEnemy_C_UpdateEnableIK) == 0x00000C, "Wrong size on RSBattleEnemy_C_UpdateEnableIK");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableIK, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_UpdateEnableIK::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableIK, L_IKAlpha) == 0x000004, "Member 'RSBattleEnemy_C_UpdateEnableIK::L_IKAlpha' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableIK, L_EnableIK) == 0x000008, "Member 'RSBattleEnemy_C_UpdateEnableIK::L_EnableIK' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_UpdateEnableIK, CallFunc_UpdateEnableIK_ReturnValue) == 0x000009, "Member 'RSBattleEnemy_C_UpdateEnableIK::CallFunc_UpdateEnableIK_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSuspendIKCondition
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_IsSuspendIKCondition final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSuspendIKCondition) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSuspendIKCondition");
static_assert(sizeof(RSBattleEnemy_C_IsSuspendIKCondition) == 0x000008, "Wrong size on RSBattleEnemy_C_IsSuspendIKCondition");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, bEnable) == 0x000000, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, L_result) == 0x000001, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendIKCondition, CallFunc_BooleanOR_ReturnValue_1) == 0x000007, "Member 'RSBattleEnemy_C_IsSuspendIKCondition::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainCrashMiss
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainCrashMiss final
{
public:
	bool                                          IsMiss;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainCrashMiss) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainCrashMiss");
static_assert(sizeof(RSBattleEnemy_C_IsBrainCrashMiss) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainCrashMiss");
static_assert(offsetof(RSBattleEnemy_C_IsBrainCrashMiss, IsMiss) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainCrashMiss::IsMiss' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitFromMainPlayer
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_IsHitFromMainPlayer final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreWeak;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_return;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitFromMainPlayer_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitFromMainPlayer) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitFromMainPlayer");
static_assert(sizeof(RSBattleEnemy_C_IsHitFromMainPlayer) == 0x000010, "Wrong size on RSBattleEnemy_C_IsHitFromMainPlayer");
static_assert(offsetof(RSBattleEnemy_C_IsHitFromMainPlayer, Attacker) == 0x000000, "Member 'RSBattleEnemy_C_IsHitFromMainPlayer::Attacker' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitFromMainPlayer, Return) == 0x000008, "Member 'RSBattleEnemy_C_IsHitFromMainPlayer::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitFromMainPlayer, L_IgnoreWeak) == 0x000009, "Member 'RSBattleEnemy_C_IsHitFromMainPlayer::L_IgnoreWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitFromMainPlayer, L_return) == 0x00000A, "Member 'RSBattleEnemy_C_IsHitFromMainPlayer::L_return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitFromMainPlayer, CallFunc_IsHitFromMainPlayer_ReturnValue) == 0x00000B, "Member 'RSBattleEnemy_C_IsHitFromMainPlayer::CallFunc_IsHitFromMainPlayer_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.CanTakeBrainField
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_CanTakeBrainField final
{
public:
	bool                                          CanTake;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_CanTakeBrainField) == 0x000001, "Wrong alignment on RSBattleEnemy_C_CanTakeBrainField");
static_assert(sizeof(RSBattleEnemy_C_CanTakeBrainField) == 0x000003, "Wrong size on RSBattleEnemy_C_CanTakeBrainField");
static_assert(offsetof(RSBattleEnemy_C_CanTakeBrainField, CanTake) == 0x000000, "Member 'RSBattleEnemy_C_CanTakeBrainField::CanTake' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CanTakeBrainField, L_result) == 0x000001, "Member 'RSBattleEnemy_C_CanTakeBrainField::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_CanTakeBrainField, CallFunc_IsDead_bDead) == 0x000002, "Member 'RSBattleEnemy_C_CanTakeBrainField::CallFunc_IsDead_bDead' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsHitWeak_ChangeDefaultEffect
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect final
{
public:
	bool                                          ChangeDefault;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9284[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHideWeak_IsHideWeak;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCrashChanceAnimKind_ReturnValue;        // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect");
static_assert(sizeof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect) == 0x000020, "Wrong size on RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, ChangeDefault) == 0x000000, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::ChangeDefault' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, L_result) == 0x000001, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000008, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, CallFunc_IsHideWeak_IsHideWeak) == 0x000019, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::CallFunc_IsHideWeak_IsHideWeak' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect, CallFunc_IsCrashChanceAnimKind_ReturnValue) == 0x00001A, "Member 'RSBattleEnemy_C_IsHitWeak_ChangeDefaultEffect::CallFunc_IsCrashChanceAnimKind_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugGetUniqueConditionText
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_DebugGetUniqueConditionText final
{
public:
	TArray<class FText>                           Text;                                              // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FText>                           L_Text;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugGetUniqueConditionText) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugGetUniqueConditionText");
static_assert(sizeof(RSBattleEnemy_C_DebugGetUniqueConditionText) == 0x000030, "Wrong size on RSBattleEnemy_C_DebugGetUniqueConditionText");
static_assert(offsetof(RSBattleEnemy_C_DebugGetUniqueConditionText, Text) == 0x000000, "Member 'RSBattleEnemy_C_DebugGetUniqueConditionText::Text' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugGetUniqueConditionText, L_Text) == 0x000010, "Member 'RSBattleEnemy_C_DebugGetUniqueConditionText::L_Text' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugGetUniqueConditionText, K2Node_MakeArray_Array) == 0x000020, "Member 'RSBattleEnemy_C_DebugGetUniqueConditionText::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCurrentTarget
// 0x0030 (0x0030 - 0x0000)
struct RSBattleEnemy_C_IsCurrentTarget final
{
public:
	bool                                          bTarget;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9285[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9286[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCurrentTarget) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsCurrentTarget");
static_assert(sizeof(RSBattleEnemy_C_IsCurrentTarget) == 0x000030, "Wrong size on RSBattleEnemy_C_IsCurrentTarget");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, bTarget) == 0x000000, "Member 'RSBattleEnemy_C_IsCurrentTarget::bTarget' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, L_result) == 0x000001, "Member 'RSBattleEnemy_C_IsCurrentTarget::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_IsCurrentTarget::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, K2Node_DynamicCast_AsRSBattle_Player) == 0x000010, "Member 'RSBattleEnemy_C_IsCurrentTarget::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RSBattleEnemy_C_IsCurrentTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_IsCurrentTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000020, "Member 'RSBattleEnemy_C_IsCurrentTarget::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_IsCurrentTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCurrentTarget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_IsCurrentTarget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugIsEnableUniqueCondition
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_DebugIsEnableUniqueCondition final
{
public:
	int32                                         ConditionNo;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCondition;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9287[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugIsEnableUniqueCondition) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugIsEnableUniqueCondition");
static_assert(sizeof(RSBattleEnemy_C_DebugIsEnableUniqueCondition) == 0x000018, "Wrong size on RSBattleEnemy_C_DebugIsEnableUniqueCondition");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, ConditionNo) == 0x000000, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::ConditionNo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, EnableCondition) == 0x000004, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::EnableCondition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, L_result) == 0x000005, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugIsEnableUniqueCondition, CallFunc_Array_Get_Item) == 0x000011, "Member 'RSBattleEnemy_C_DebugIsEnableUniqueCondition::CallFunc_Array_Get_Item' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugFindIgnoreAction
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_DebugFindIgnoreAction final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Find;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9288[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_DebugFindIgnoreAction) == 0x000004, "Wrong alignment on RSBattleEnemy_C_DebugFindIgnoreAction");
static_assert(sizeof(RSBattleEnemy_C_DebugFindIgnoreAction) == 0x00000C, "Wrong size on RSBattleEnemy_C_DebugFindIgnoreAction");
static_assert(offsetof(RSBattleEnemy_C_DebugFindIgnoreAction, Action) == 0x000000, "Member 'RSBattleEnemy_C_DebugFindIgnoreAction::Action' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugFindIgnoreAction, Find) == 0x000001, "Member 'RSBattleEnemy_C_DebugFindIgnoreAction::Find' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugFindIgnoreAction, CallFunc_Array_Find_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_DebugFindIgnoreAction::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugFindIgnoreAction, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'RSBattleEnemy_C_DebugFindIgnoreAction::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnableSlashEffect
// 0x01C8 (0x01C8 - 0x0000)
struct RSBattleEnemy_C_IsEnableSlashEffect final
{
public:
	struct FHCHitResult                           HitResult;                                         // 0x0000(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          bEnable;                                           // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmor_Return;                           // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnableSlashEffect) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsEnableSlashEffect");
static_assert(sizeof(RSBattleEnemy_C_IsEnableSlashEffect) == 0x0001C8, "Wrong size on RSBattleEnemy_C_IsEnableSlashEffect");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSlashEffect, HitResult) == 0x000000, "Member 'RSBattleEnemy_C_IsEnableSlashEffect::HitResult' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSlashEffect, bEnable) == 0x0001C0, "Member 'RSBattleEnemy_C_IsEnableSlashEffect::bEnable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSlashEffect, L_result) == 0x0001C1, "Member 'RSBattleEnemy_C_IsEnableSlashEffect::L_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnableSlashEffect, CallFunc_IsArmor_Return) == 0x0001C2, "Member 'RSBattleEnemy_C_IsEnableSlashEffect::CallFunc_IsArmor_Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsIdleMove
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsIdleMove final
{
public:
	bool                                          IsIdle;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsIdleMove) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsIdleMove");
static_assert(sizeof(RSBattleEnemy_C_IsIdleMove) == 0x000001, "Wrong size on RSBattleEnemy_C_IsIdleMove");
static_assert(offsetof(RSBattleEnemy_C_IsIdleMove, IsIdle) == 0x000000, "Member 'RSBattleEnemy_C_IsIdleMove::IsIdle' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetWeakTargetTransform
// 0x0190 (0x0190 - 0x0000)
struct RSBattleEnemy_C_GetWeakTargetTransform final
{
public:
	struct FVector                                AttackerPos;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9289[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WeakTransform;                                     // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	TArray<class FName>                           LWorkSocketNameList;                               // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         LWorkLength;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectIndex;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWorkSocketLocation;                               // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LWeakSocketName;                                   // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_928A[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             L_ResultTransform;                                 // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetWeakTargetSocketName_SocketName;       // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_928B[0x2];                                     // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_928C[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_928D[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_928E[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_928F[0x8];                                     // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9290[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9291[0x2];                                     // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetWeakTargetTransform) == 0x000010, "Wrong alignment on RSBattleEnemy_C_GetWeakTargetTransform");
static_assert(sizeof(RSBattleEnemy_C_GetWeakTargetTransform) == 0x000190, "Wrong size on RSBattleEnemy_C_GetWeakTargetTransform");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, AttackerPos) == 0x000000, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::AttackerPos' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, WeakTransform) == 0x000010, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::WeakTransform' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, LWorkSocketNameList) == 0x000040, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::LWorkSocketNameList' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, LWorkLength) == 0x000050, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::LWorkLength' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, SelectIndex) == 0x000054, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::SelectIndex' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, LWorkSocketLocation) == 0x000058, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::LWorkSocketLocation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, LWeakSocketName) == 0x000064, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::LWeakSocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, L_ResultTransform) == 0x000070, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::L_ResultTransform' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_Get_Item) == 0x0000A4, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_Get_Item_1) == 0x0000AC, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_Length_ReturnValue) == 0x0000B4, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_GetWeakTargetSocketName_SocketName) == 0x0000B8, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_GetWeakTargetSocketName_SocketName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_Length_ReturnValue_1) == 0x0000C8, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Greater_IntInt_ReturnValue) == 0x0000CC, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000CD, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_Get_Item_2) == 0x0000D0, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0000D8, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000DC, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_VSizeSquared_ReturnValue) == 0x0000EC, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000F0, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, Temp_int_Loop_Counter_Variable) == 0x0000F4, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000100, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_BreakTransform_Location) == 0x000130, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_BreakTransform_Rotation) == 0x00013C, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_BreakTransform_Scale) == 0x000148, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000154, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000158, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_NotEqual_NameName_ReturnValue) == 0x00015C, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_IsValid_ReturnValue) == 0x00015D, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetTransform, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000160, "Member 'RSBattleEnemy_C_GetWeakTargetTransform::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.DebugDisplayAiBasic
// 0x0548 (0x0548 - 0x0000)
struct RSBattleEnemy_C_DebugDisplayAiBasic final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9292[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           L_TextArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSearchTestInfo                        L_TestInfo;                                        // 0x0018(0x0003)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_9293[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSearchBasicInfo                       L_BasicInfo;                                       // 0x001C(0x001C)(Edit, BlueprintVisible, NoDestructor)
	float                                         L_TargetDistance;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_TargetAngle;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_TargetName;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EnemyBrainCrashAnimKind                       L_BrainCrashKind;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDeadAnimKind                             L_DeadKind;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       L_DamageDownKind;                                  // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageAnimKind                           L_DamageKind;                                      // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyActionAnimKind                           L_ActionKind;                                      // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAttackAnimKind                           L_AttackKind;                                      // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyMoveAnimKind                             L_MoveKind;                                        // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            L_AliveKind;                                       // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 L_InKindString;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_KindString;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 L_ActionString;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   L_ActionKey;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9294[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSearchTestInfo                        CallFunc_GetTargetSearchTestInfo_ReturnValue;      // 0x00AC(0x0003)(ConstParm, NoDestructor)
	uint8                                         Pad_9295[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFindValue_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9296[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B8(0x0040)(HasGetValueTypeHash)
	struct FSearchBasicInfo                       CallFunc_GetTargetSearchBasicInfo_ReturnValue;     // 0x00F8(0x001C)(ConstParm, NoDestructor)
	struct FSearchTestInfo                        CallFunc_GetMainPlayerSearchTestInfo_ReturnValue;  // 0x0114(0x0003)(ConstParm, NoDestructor)
	uint8                                         Pad_9297[0x1];                                     // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSearchBasicInfo                       CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue; // 0x0118(0x001C)(ConstParm, NoDestructor)
	uint8                                         Pad_9298[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0138(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0178(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x01B8(0x0018)()
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue_1;            // 0x01D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01E8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0228(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0268(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x02A8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x02E8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x0328(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue_2;            // 0x0378(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0390(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x03A8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x03E8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue_3;            // 0x0428(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x0440(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0480(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x0490(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x04A0(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x04B8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x04D0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0510(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0520(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0538(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_DebugDisplayAiBasic) == 0x000008, "Wrong alignment on RSBattleEnemy_C_DebugDisplayAiBasic");
static_assert(sizeof(RSBattleEnemy_C_DebugDisplayAiBasic) == 0x000548, "Wrong size on RSBattleEnemy_C_DebugDisplayAiBasic");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, Dummy) == 0x000000, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::Dummy' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_TextArray) == 0x000008, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_TextArray' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_TestInfo) == 0x000018, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_TestInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_BasicInfo) == 0x00001C, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_BasicInfo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_TargetDistance) == 0x000038, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_TargetDistance' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_TargetAngle) == 0x00003C, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_TargetAngle' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_TargetName) == 0x000040, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_TargetName' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_BrainCrashKind) == 0x000050, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_BrainCrashKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_DeadKind) == 0x000051, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_DeadKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_DamageDownKind) == 0x000052, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_DamageDownKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_DamageKind) == 0x000053, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_DamageKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_ActionKind) == 0x000054, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_ActionKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_AttackKind) == 0x000055, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_AttackKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_MoveKind) == 0x000056, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_MoveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_AliveKind) == 0x000057, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_AliveKind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_InKindString) == 0x000058, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_InKindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_KindString) == 0x000068, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_KindString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_ActionString) == 0x000078, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_ActionString' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, L_ActionKey) == 0x000088, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::L_ActionKey' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeArray_Array) == 0x000090, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, Temp_int_Variable) == 0x0000A0, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A5, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Add_IntInt_ReturnValue) == 0x0000A8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetTargetSearchTestInfo_ReturnValue) == 0x0000AC, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetTargetSearchTestInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetFindValue_ReturnValue) == 0x0000B0, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetFindValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData) == 0x0000B8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetTargetSearchBasicInfo_ReturnValue) == 0x0000F8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetTargetSearchBasicInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetMainPlayerSearchTestInfo_ReturnValue) == 0x000114, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetMainPlayerSearchTestInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue) == 0x000118, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_1) == 0x000138, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_2) == 0x000178, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_BoolToText_ReturnValue) == 0x0001B8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_BoolToText_ReturnValue_1) == 0x0001D0, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_BoolToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001E8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_4) == 0x000228, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_5) == 0x000268, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_6) == 0x0002A8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_7) == 0x0002E8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_8) == 0x000328, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetObjectName_ReturnValue) == 0x000368, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_BoolToText_ReturnValue_2) == 0x000378, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_BoolToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_StringToText_ReturnValue) == 0x000390, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_9) == 0x0003A8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_10) == 0x0003E8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_BoolToText_ReturnValue_3) == 0x000428, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_BoolToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_11) == 0x000440, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeArray_Array_1) == 0x000480, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_GetObjectName_ReturnValue_1) == 0x000490, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Format_ReturnValue) == 0x0004A0, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0004B8, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeStruct_FormatArgumentData_12) == 0x0004D0, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, K2Node_MakeArray_Array_2) == 0x000510, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Format_ReturnValue_1) == 0x000520, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_DebugDisplayAiBasic, CallFunc_Conv_TextToString_ReturnValue) == 0x000538, "Member 'RSBattleEnemy_C_DebugDisplayAiBasic::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEyePosition
// 0x0028 (0x0028 - 0x0000)
struct RSBattleEnemy_C_GetEyePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9299[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEyePosition_ReturnValue;               // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEyePosition) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetEyePosition");
static_assert(sizeof(RSBattleEnemy_C_GetEyePosition) == 0x000028, "Wrong size on RSBattleEnemy_C_GetEyePosition");
static_assert(offsetof(RSBattleEnemy_C_GetEyePosition, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEyePosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEyePosition, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'RSBattleEnemy_C_GetEyePosition::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEyePosition, CallFunc_NotEqual_NameName_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetEyePosition::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetEyePosition, CallFunc_GetEyePosition_ReturnValue) == 0x00001C, "Member 'RSBattleEnemy_C_GetEyePosition::CallFunc_GetEyePosition_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyFindChangeParam
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetEnemyFindChangeParam final
{
public:
	struct FEnemyFindChangeParam                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyFindChangeParam) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetEnemyFindChangeParam");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyFindChangeParam) == 0x000010, "Wrong size on RSBattleEnemy_C_GetEnemyFindChangeParam");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyFindChangeParam, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyFindChangeParam::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBadStateIconParam
// 0x0060 (0x0060 - 0x0000)
struct RSBattleEnemy_C_GetBadStateIconParam final
{
public:
	EHCBadState                                   BadType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_929A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStateAddParticleData               ParamData;                                         // 0x0008(0x0028)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBadStateAddParticleData               L_param;                                           // 0x0030(0x0028)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBadStateIconParam) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBadStateIconParam");
static_assert(sizeof(RSBattleEnemy_C_GetBadStateIconParam) == 0x000060, "Wrong size on RSBattleEnemy_C_GetBadStateIconParam");
static_assert(offsetof(RSBattleEnemy_C_GetBadStateIconParam, BadType) == 0x000000, "Member 'RSBattleEnemy_C_GetBadStateIconParam::BadType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBadStateIconParam, ParamData) == 0x000008, "Member 'RSBattleEnemy_C_GetBadStateIconParam::ParamData' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBadStateIconParam, L_param) == 0x000030, "Member 'RSBattleEnemy_C_GetBadStateIconParam::L_param' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBadStateIconParam, K2Node_SwitchEnum_CmpSuccess) == 0x000058, "Member 'RSBattleEnemy_C_GetBadStateIconParam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBadStateIconCameraOffset
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetBadStateIconCameraOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBadStateIconCameraOffset) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetBadStateIconCameraOffset");
static_assert(sizeof(RSBattleEnemy_C_GetBadStateIconCameraOffset) == 0x000004, "Wrong size on RSBattleEnemy_C_GetBadStateIconCameraOffset");
static_assert(offsetof(RSBattleEnemy_C_GetBadStateIconCameraOffset, Value) == 0x000000, "Member 'RSBattleEnemy_C_GetBadStateIconCameraOffset::Value' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsInvincible
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsInvincible final
{
public:
	bool                                          Param_bInvincible;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsInvincible) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsInvincible");
static_assert(sizeof(RSBattleEnemy_C_IsInvincible) == 0x000002, "Wrong size on RSBattleEnemy_C_IsInvincible");
static_assert(offsetof(RSBattleEnemy_C_IsInvincible, Param_bInvincible) == 0x000000, "Member 'RSBattleEnemy_C_IsInvincible::Param_bInvincible' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsInvincible, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsInvincible::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDownTime
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetDownTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDownTime) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetDownTime");
static_assert(sizeof(RSBattleEnemy_C_GetDownTime) == 0x000004, "Wrong size on RSBattleEnemy_C_GetDownTime");
static_assert(offsetof(RSBattleEnemy_C_GetDownTime, Time) == 0x000000, "Member 'RSBattleEnemy_C_GetDownTime::Time' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsInvisibleMiniMap
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsInvisibleMiniMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          IsStealth;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsInvisibleMiniMap) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsInvisibleMiniMap");
static_assert(sizeof(RSBattleEnemy_C_IsInvisibleMiniMap) == 0x000003, "Wrong size on RSBattleEnemy_C_IsInvisibleMiniMap");
static_assert(offsetof(RSBattleEnemy_C_IsInvisibleMiniMap, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsInvisibleMiniMap::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsInvisibleMiniMap, IsStealth) == 0x000001, "Member 'RSBattleEnemy_C_IsInvisibleMiniMap::IsStealth' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsInvisibleMiniMap, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'RSBattleEnemy_C_IsInvisibleMiniMap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsReceiveSasEffectAttack
// 0x00A0 (0x00A0 - 0x0000)
struct RSBattleEnemy_C_IsReceiveSasEffectAttack final
{
public:
	bool                                          CheckAccelerator;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChackTelepo;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckStealth;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckStealthSee;                                   // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckMetal;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReceivedSas;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMainPlayer_bMainPlayer;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929D[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929E[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_Accelerator_ReturnValue;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929F[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A0[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A1[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthSeeEnable_Return;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A2[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A3[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A4[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_IsReceiveSasEffectAttack) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsReceiveSasEffectAttack");
static_assert(sizeof(RSBattleEnemy_C_IsReceiveSasEffectAttack) == 0x0000A0, "Wrong size on RSBattleEnemy_C_IsReceiveSasEffectAttack");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CheckAccelerator) == 0x000000, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CheckAccelerator' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, ChackTelepo) == 0x000001, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::ChackTelepo' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CheckStealth) == 0x000002, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CheckStealth' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CheckStealthSee) == 0x000003, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CheckStealthSee' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CheckMetal) == 0x000004, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CheckMetal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, AttackActor) == 0x000008, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::AttackActor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, ReceivedSas) == 0x000010, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::ReceivedSas' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Array_Index_Variable) == 0x000014, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000018, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsMainPlayer_bMainPlayer) == 0x000029, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsMainPlayer_bMainPlayer' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000030, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsMetalMode_bMetal) == 0x000041, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_AsPlayer_Interface) == 0x000048, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsActiveSAS_Accelerator_ReturnValue) == 0x000059, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsActiveSAS_Accelerator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Array_Index_Variable_1) == 0x000064, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Loop_Num_Variable) == 0x000068, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Loop_Num_Variable_1) == 0x000070, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsStateStealth_Return) == 0x000074, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_GetEnemyManager_Manager) == 0x000078, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_IsStealthSeeEnable_Return) == 0x000081, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_IsStealthSeeEnable_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000088, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, Temp_int_Loop_Counter_Variable_1) == 0x00008C, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000090, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Less_IntInt_ReturnValue_1) == 0x000091, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsReceiveSasEffectAttack, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'RSBattleEnemy_C_IsReceiveSasEffectAttack::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetAssasinAttackHitType
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetAssasinAttackHitType final
{
public:
	EAssassinAttackHit                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetAssasinAttackHitType) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetAssasinAttackHitType");
static_assert(sizeof(RSBattleEnemy_C_GetAssasinAttackHitType) == 0x000001, "Wrong size on RSBattleEnemy_C_GetAssasinAttackHitType");
static_assert(offsetof(RSBattleEnemy_C_GetAssasinAttackHitType, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetAssasinAttackHitType::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.BadStateEffectDispSwitch
// 0x0078 (0x0078 - 0x0000)
struct RSBattleEnemy_C_BadStateEffectDispSwitch final
{
public:
	bool                                          bInDisp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A5[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BadStateEffectDispSwitch_bSuccess;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A7[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92A9[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateStealth_Return;                    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92AA[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92AB[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92AC[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_3;         // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_BadStateEffectDispSwitch) == 0x000004, "Wrong alignment on RSBattleEnemy_C_BadStateEffectDispSwitch");
static_assert(sizeof(RSBattleEnemy_C_BadStateEffectDispSwitch) == 0x000078, "Wrong size on RSBattleEnemy_C_BadStateEffectDispSwitch");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, bInDisp) == 0x000000, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::bInDisp' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, bSuccess) == 0x000001, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_BadStateEffectDispSwitch_bSuccess) == 0x000008, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_BadStateEffectDispSwitch_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Array_Index_Variable) == 0x000020, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Num_Variable_1) == 0x000024, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Less_IntInt_ReturnValue_1) == 0x000028, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Counter_Variable_2) == 0x00002C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Num_Variable_2) == 0x000030, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Add_IntInt_ReturnValue_2) == 0x000034, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Less_IntInt_ReturnValue_2) == 0x000038, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Counter_Variable_3) == 0x00003C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Add_IntInt_ReturnValue_3) == 0x000040, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Loop_Num_Variable_3) == 0x000048, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Less_IntInt_ReturnValue_3) == 0x00004C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_IsStateStealth_Return) == 0x00004D, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_IsStateStealth_Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Array_Index_Variable_2) == 0x000050, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, Temp_int_Array_Index_Variable_3) == 0x000054, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00005D, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_1) == 0x00005E, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_2) == 0x00005F, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000064, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x00006C, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_Length_ReturnValue_3) == 0x000070, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_IsValid_ReturnValue_3) == 0x000074, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_BadStateEffectDispSwitch, CallFunc_Array_IsValidIndex_ReturnValue_3) == 0x000075, "Member 'RSBattleEnemy_C_BadStateEffectDispSwitch::CallFunc_Array_IsValidIndex_ReturnValue_3' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetWeakTargetSocketName
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetWeakTargetSocketName final
{
public:
	TArray<class FName>                           SocketName;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetWeakTargetSocketName) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetWeakTargetSocketName");
static_assert(sizeof(RSBattleEnemy_C_GetWeakTargetSocketName) == 0x000010, "Wrong size on RSBattleEnemy_C_GetWeakTargetSocketName");
static_assert(offsetof(RSBattleEnemy_C_GetWeakTargetSocketName, SocketName) == 0x000000, "Member 'RSBattleEnemy_C_GetWeakTargetSocketName::SocketName' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTickIntervalSeconds
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_GetTickIntervalSeconds final
{
public:
	EEnemyTickPriorityType                        PriorityType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92AD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultSeconds;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSeconds;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Max;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Default;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetTickIntervalSeconds) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTickIntervalSeconds");
static_assert(sizeof(RSBattleEnemy_C_GetTickIntervalSeconds) == 0x000018, "Wrong size on RSBattleEnemy_C_GetTickIntervalSeconds");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, PriorityType) == 0x000000, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::PriorityType' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, DefaultSeconds) == 0x000004, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::DefaultSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, MaxSeconds) == 0x000008, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::MaxSeconds' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, L_Max) == 0x00000C, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::L_Max' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, L_Default) == 0x000010, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::L_Default' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTickIntervalSeconds, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'RSBattleEnemy_C_GetTickIntervalSeconds::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsExecSometimeTick
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsExecSometimeTick final
{
public:
	bool                                          bExec;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsExecSometimeTick) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsExecSometimeTick");
static_assert(sizeof(RSBattleEnemy_C_IsExecSometimeTick) == 0x000001, "Wrong size on RSBattleEnemy_C_IsExecSometimeTick");
static_assert(offsetof(RSBattleEnemy_C_IsExecSometimeTick, bExec) == 0x000000, "Member 'RSBattleEnemy_C_IsExecSometimeTick::bExec' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainFieldProgress
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetBrainFieldProgress final
{
public:
	Enum_EnemyBrainFieldProgress                  Progress;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainFieldProgress) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetBrainFieldProgress");
static_assert(sizeof(RSBattleEnemy_C_GetBrainFieldProgress) == 0x000001, "Wrong size on RSBattleEnemy_C_GetBrainFieldProgress");
static_assert(offsetof(RSBattleEnemy_C_GetBrainFieldProgress, Progress) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainFieldProgress::Progress' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUseWaitNoInterpolation
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsUseWaitNoInterpolation final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUseWaitNoInterpolation) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUseWaitNoInterpolation");
static_assert(sizeof(RSBattleEnemy_C_IsUseWaitNoInterpolation) == 0x000001, "Wrong size on RSBattleEnemy_C_IsUseWaitNoInterpolation");
static_assert(offsetof(RSBattleEnemy_C_IsUseWaitNoInterpolation, bUse) == 0x000000, "Member 'RSBattleEnemy_C_IsUseWaitNoInterpolation::bUse' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetInitRotationRate
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetInitRotationRate final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetInitRotationRate) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetInitRotationRate");
static_assert(sizeof(RSBattleEnemy_C_GetInitRotationRate) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetInitRotationRate");
static_assert(offsetof(RSBattleEnemy_C_GetInitRotationRate, Rotation) == 0x000000, "Member 'RSBattleEnemy_C_GetInitRotationRate::Rotation' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCurrentActionRotationScaleRate
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetCurrentActionRotationScaleRate final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCurrentActionRotationScaleRate) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetCurrentActionRotationScaleRate");
static_assert(sizeof(RSBattleEnemy_C_GetCurrentActionRotationScaleRate) == 0x000004, "Wrong size on RSBattleEnemy_C_GetCurrentActionRotationScaleRate");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentActionRotationScaleRate, Scale) == 0x000000, "Member 'RSBattleEnemy_C_GetCurrentActionRotationScaleRate::Scale' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetArmorPartsList
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_GetArmorPartsList final
{
public:
	TArray<int32>                                 Armor;                                             // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetArmorPartsList) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetArmorPartsList");
static_assert(sizeof(RSBattleEnemy_C_GetArmorPartsList) == 0x000020, "Wrong size on RSBattleEnemy_C_GetArmorPartsList");
static_assert(offsetof(RSBattleEnemy_C_GetArmorPartsList, Armor) == 0x000000, "Member 'RSBattleEnemy_C_GetArmorPartsList::Armor' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetArmorPartsList, K2Node_MakeArray_Array) == 0x000010, "Member 'RSBattleEnemy_C_GetArmorPartsList::K2Node_MakeArray_Array' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCrashSequenceEm8300
// 0x0058 (0x0058 - 0x0000)
struct RSBattleEnemy_C_GetBrainCrashSequenceEm8300 final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92AE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LIsMulti;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92AF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerNum_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B1[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B2[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B3[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBrainCrashSequenceEm8300");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300) == 0x000058, "Wrong size on RSBattleEnemy_C_GetBrainCrashSequenceEm8300");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, IsUnique) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::IsUnique' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, Sequence) == 0x000008, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::Sequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, LIsMulti) == 0x000010, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::LIsMulti' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_GetPlayerNum_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_GetPlayerNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_MakeLiteralByte_ReturnValue) == 0x000029, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_IsValid_ReturnValue_2) == 0x00002B, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_GetPlayerPawn_ReturnValue) == 0x000030, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_IsValid_ReturnValue_3) == 0x000038, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, K2Node_DynamicCast_AsRSBattle_Character) == 0x000040, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_GetId_ReturnValue) == 0x00004C, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_Conv_IntToByte_ReturnValue) == 0x000050, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequenceEm8300, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'RSBattleEnemy_C_GetBrainCrashSequenceEm8300::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.InBrainFieldProgress
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_InBrainFieldProgress final
{
public:
	bool                                          InBrainField;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_InBrainFieldProgress) == 0x000001, "Wrong alignment on RSBattleEnemy_C_InBrainFieldProgress");
static_assert(sizeof(RSBattleEnemy_C_InBrainFieldProgress) == 0x000002, "Wrong size on RSBattleEnemy_C_InBrainFieldProgress");
static_assert(offsetof(RSBattleEnemy_C_InBrainFieldProgress, InBrainField) == 0x000000, "Member 'RSBattleEnemy_C_InBrainFieldProgress::InBrainField' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_InBrainFieldProgress, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'RSBattleEnemy_C_InBrainFieldProgress::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotAbleBrainCrashTarget
// 0x0020 (0x0020 - 0x0000)
struct RSBattleEnemy_C_IsNotAbleBrainCrashTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotAbleBrainCrashTarget_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B4[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSearchBasicInfo                       CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue; // 0x0004(0x001C)(ConstParm, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotAbleBrainCrashTarget) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsNotAbleBrainCrashTarget");
static_assert(sizeof(RSBattleEnemy_C_IsNotAbleBrainCrashTarget) == 0x000020, "Wrong size on RSBattleEnemy_C_IsNotAbleBrainCrashTarget");
static_assert(offsetof(RSBattleEnemy_C_IsNotAbleBrainCrashTarget, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsNotAbleBrainCrashTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotAbleBrainCrashTarget, CallFunc_IsNotAbleBrainCrashTarget_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsNotAbleBrainCrashTarget::CallFunc_IsNotAbleBrainCrashTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotAbleBrainCrashTarget, CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsNotAbleBrainCrashTarget::CallFunc_GetMainPlayerSearchBasicInfo_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPlayerOutOfBattleFieldFence
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LDebugBroken;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B5[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattlefieldManager*                    LBattleFieldManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LReturn;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence");
static_assert(sizeof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence) == 0x000018, "Wrong size on RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence");
static_assert(offsetof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence, LDebugBroken) == 0x000001, "Member 'RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence::LDebugBroken' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence, LBattleFieldManager) == 0x000008, "Member 'RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence::LBattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence, LReturn) == 0x000010, "Member 'RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence::LReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence, CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_IsPlayerOutOfBattleFieldFence::CallFunc_IsPlayerOutOfBattleFieldFence_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUseBattleFieldFence
// 0x0050 (0x0050 - 0x0000)
struct RSBattleEnemy_C_IsUseBattleFieldFence final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattlefieldManager*                    LBattleFieldManager;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LReturn;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattlefieldWillAppear_ReturnValue;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B8[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattlefieldManager*                    CallFunc_GetBattleFieldManager_BattleFieldManager; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUseBattleFieldFence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_IsUseBattleFieldFence");
static_assert(sizeof(RSBattleEnemy_C_IsUseBattleFieldFence) == 0x000050, "Wrong size on RSBattleEnemy_C_IsUseBattleFieldFence");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, LBattleFieldManager) == 0x000008, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::LBattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, LReturn) == 0x000010, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::LReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_Conv_IntToString_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_IsBattlefieldWillAppear_ReturnValue) == 0x000039, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_IsBattlefieldWillAppear_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_GetBattleFieldManager_BattleFieldManager) == 0x000040, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_GetBattleFieldManager_BattleFieldManager' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUseBattleFieldFence, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000048, "Member 'RSBattleEnemy_C_IsUseBattleFieldFence::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotApplyPhotoModeMeshProfile
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile final
{
public:
	bool                                          bNotApply;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile");
static_assert(sizeof(RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile) == 0x000001, "Wrong size on RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile");
static_assert(offsetof(RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile, bNotApply) == 0x000000, "Member 'RSBattleEnemy_C_IsNotApplyPhotoModeMeshProfile::bNotApply' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDebugInvincible
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsDebugInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDebugEnemyInvincible_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDebugInvincible) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDebugInvincible");
static_assert(sizeof(RSBattleEnemy_C_IsDebugInvincible) == 0x000002, "Wrong size on RSBattleEnemy_C_IsDebugInvincible");
static_assert(offsetof(RSBattleEnemy_C_IsDebugInvincible, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsDebugInvincible::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDebugInvincible, CallFunc_IsDebugEnemyInvincible_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsDebugInvincible::CallFunc_IsDebugEnemyInvincible_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDamageHitDirectionIF
// 0x000C (0x000C - 0x0000)
struct RSBattleEnemy_C_GetDamageHitDirectionIF final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDamageHitDirectionIF) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetDamageHitDirectionIF");
static_assert(sizeof(RSBattleEnemy_C_GetDamageHitDirectionIF) == 0x00000C, "Wrong size on RSBattleEnemy_C_GetDamageHitDirectionIF");
static_assert(offsetof(RSBattleEnemy_C_GetDamageHitDirectionIF, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetDamageHitDirectionIF::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCurrentTarget) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetCurrentTarget");
static_assert(sizeof(RSBattleEnemy_C_GetCurrentTarget) == 0x000008, "Wrong size on RSBattleEnemy_C_GetCurrentTarget");
static_assert(offsetof(RSBattleEnemy_C_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsReflectContainer
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsReflectContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsReflectContainer) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsReflectContainer");
static_assert(sizeof(RSBattleEnemy_C_IsReflectContainer) == 0x000001, "Wrong size on RSBattleEnemy_C_IsReflectContainer");
static_assert(offsetof(RSBattleEnemy_C_IsReflectContainer, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsReflectContainer::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsExecLowProcess
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsExecLowProcess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsExecLowProcess) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsExecLowProcess");
static_assert(sizeof(RSBattleEnemy_C_IsExecLowProcess) == 0x000001, "Wrong size on RSBattleEnemy_C_IsExecLowProcess");
static_assert(offsetof(RSBattleEnemy_C_IsExecLowProcess, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsExecLowProcess::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTopHeightLocation
// 0x0034 (0x0034 - 0x0000)
struct RSBattleEnemy_C_GetTopHeightLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LPoint;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92B9[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTopHeightLocation) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTopHeightLocation");
static_assert(sizeof(RSBattleEnemy_C_GetTopHeightLocation) == 0x000034, "Wrong size on RSBattleEnemy_C_GetTopHeightLocation");
static_assert(offsetof(RSBattleEnemy_C_GetTopHeightLocation, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetTopHeightLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopHeightLocation, LPoint) == 0x00000C, "Member 'RSBattleEnemy_C_GetTopHeightLocation::LPoint' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopHeightLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetTopHeightLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopHeightLocation, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'RSBattleEnemy_C_GetTopHeightLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetTopHeightLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'RSBattleEnemy_C_GetTopHeightLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyAiComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetEnemyAiComponent final
{
public:
	class UEnemyAiComponentBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyAiComponent) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetEnemyAiComponent");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyAiComponent) == 0x000008, "Wrong size on RSBattleEnemy_C_GetEnemyAiComponent");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyAiComponent, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyAiComponent::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetEnemyScriptComponent final
{
public:
	class UEnemyScriptComponent*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyScriptComponent) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetEnemyScriptComponent");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyScriptComponent) == 0x000008, "Wrong size on RSBattleEnemy_C_GetEnemyScriptComponent");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyScriptComponent, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyScriptComponent::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUpdateEnemyTickEnable
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsUpdateEnemyTickEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdateEnemyTickEnableNative_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUpdateEnemyTickEnable) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUpdateEnemyTickEnable");
static_assert(sizeof(RSBattleEnemy_C_IsUpdateEnemyTickEnable) == 0x000002, "Wrong size on RSBattleEnemy_C_IsUpdateEnemyTickEnable");
static_assert(offsetof(RSBattleEnemy_C_IsUpdateEnemyTickEnable, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsUpdateEnemyTickEnable::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUpdateEnemyTickEnable, CallFunc_IsUpdateEnemyTickEnableNative_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsUpdateEnemyTickEnable::CallFunc_IsUpdateEnemyTickEnableNative_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUpdateEnemySpawn
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsUpdateEnemySpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemySpawnNow_SpawnNow;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUpdateEnemySpawn) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUpdateEnemySpawn");
static_assert(sizeof(RSBattleEnemy_C_IsUpdateEnemySpawn) == 0x000002, "Wrong size on RSBattleEnemy_C_IsUpdateEnemySpawn");
static_assert(offsetof(RSBattleEnemy_C_IsUpdateEnemySpawn, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsUpdateEnemySpawn::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsUpdateEnemySpawn, CallFunc_IsEnemySpawnNow_SpawnNow) == 0x000001, "Member 'RSBattleEnemy_C_IsUpdateEnemySpawn::CallFunc_IsEnemySpawnNow_SpawnNow' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsTickDisableCondition
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsTickDisableCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyTickDisableCondition_bDisableCondition; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsTickDisableCondition) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsTickDisableCondition");
static_assert(sizeof(RSBattleEnemy_C_IsTickDisableCondition) == 0x000002, "Wrong size on RSBattleEnemy_C_IsTickDisableCondition");
static_assert(offsetof(RSBattleEnemy_C_IsTickDisableCondition, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsTickDisableCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsTickDisableCondition, CallFunc_IsEnemyTickDisableCondition_bDisableCondition) == 0x000001, "Member 'RSBattleEnemy_C_IsTickDisableCondition::CallFunc_IsEnemyTickDisableCondition_bDisableCondition' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemySpawn_Interface
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemySpawn_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemySpawn_Interface) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemySpawn_Interface");
static_assert(sizeof(RSBattleEnemy_C_IsEnemySpawn_Interface) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemySpawn_Interface");
static_assert(offsetof(RSBattleEnemy_C_IsEnemySpawn_Interface, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemySpawn_Interface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemySpawn_Interface, CallFunc_GetEnemySpawn_return) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemySpawn_Interface::CallFunc_GetEnemySpawn_return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyFalling_Interface
// 0x0090 (0x0090 - 0x0000)
struct RSBattleEnemy_C_IsEnemyFalling_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbReturn;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemySpawn_Interface_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BA[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetCharacterMovementGroundInfoSimple_result; // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue; // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyFalling_Interface) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsEnemyFalling_Interface");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyFalling_Interface) == 0x000090, "Wrong size on RSBattleEnemy_C_IsEnemyFalling_Interface");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, LbReturn) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::LbReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, CallFunc_IsEnemySpawn_Interface_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::CallFunc_IsEnemySpawn_Interface_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, CallFunc_GetCharacterMovementGroundInfoSimple_result) == 0x000004, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::CallFunc_GetCharacterMovementGroundInfoSimple_result' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue) == 0x00008C, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::CallFunc_GetCharacterMovementGroundInfoSimple_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyFalling_Interface, CallFunc_IsFlyEnemyCheck_NewParam) == 0x00008D, "Member 'RSBattleEnemy_C_IsEnemyFalling_Interface::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCheckHeightChangeTick
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_IsCheckHeightChangeTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          LbReturn;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHeightCheckFlag_NewParam;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCheckHeightChangeTick) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsCheckHeightChangeTick");
static_assert(sizeof(RSBattleEnemy_C_IsCheckHeightChangeTick) == 0x000004, "Wrong size on RSBattleEnemy_C_IsCheckHeightChangeTick");
static_assert(offsetof(RSBattleEnemy_C_IsCheckHeightChangeTick, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsCheckHeightChangeTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckHeightChangeTick, LbReturn) == 0x000001, "Member 'RSBattleEnemy_C_IsCheckHeightChangeTick::LbReturn' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckHeightChangeTick, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000002, "Member 'RSBattleEnemy_C_IsCheckHeightChangeTick::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckHeightChangeTick, CallFunc_GetHeightCheckFlag_NewParam) == 0x000003, "Member 'RSBattleEnemy_C_IsCheckHeightChangeTick::CallFunc_GetHeightCheckFlag_NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDisableUroAction_Interface
// 0x0018 (0x0018 - 0x0000)
struct RSBattleEnemy_C_IsDisableUroAction_Interface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDisableUroAction_Interface) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsDisableUroAction_Interface");
static_assert(sizeof(RSBattleEnemy_C_IsDisableUroAction_Interface) == 0x000018, "Wrong size on RSBattleEnemy_C_IsDisableUroAction_Interface");
static_assert(offsetof(RSBattleEnemy_C_IsDisableUroAction_Interface, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsDisableUroAction_Interface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDisableUroAction_Interface, CallFunc_GetVelocity_ReturnValue) == 0x000004, "Member 'RSBattleEnemy_C_IsDisableUroAction_Interface::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDisableUroAction_Interface, CallFunc_VSizeXY_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_IsDisableUroAction_Interface::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsDisableUroAction_Interface, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'RSBattleEnemy_C_IsDisableUroAction_Interface::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsCheckLookTargetTick
// 0x001C (0x001C - 0x0000)
struct RSBattleEnemy_C_IsCheckLookTargetTick final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitScroll_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattling_bBatting;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsCheckLookTargetTick) == 0x000004, "Wrong alignment on RSBattleEnemy_C_IsCheckLookTargetTick");
static_assert(sizeof(RSBattleEnemy_C_IsCheckLookTargetTick) == 0x00001C, "Wrong size on RSBattleEnemy_C_IsCheckLookTargetTick");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, Start) == 0x000000, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::Start' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, End) == 0x00000C, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::End' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, CallFunc_IsHitScroll_ReturnValue) == 0x00001A, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::CallFunc_IsHitScroll_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsCheckLookTargetTick, CallFunc_IsBattling_bBatting) == 0x00001B, "Member 'RSBattleEnemy_C_IsCheckLookTargetTick::CallFunc_IsBattling_bBatting' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemyAnimControllerComponent
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetEnemyAnimControllerComponent final
{
public:
	class UEnemyAnimControllerComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemyAnimControllerComponent) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetEnemyAnimControllerComponent");
static_assert(sizeof(RSBattleEnemy_C_GetEnemyAnimControllerComponent) == 0x000008, "Wrong size on RSBattleEnemy_C_GetEnemyAnimControllerComponent");
static_assert(offsetof(RSBattleEnemy_C_GetEnemyAnimControllerComponent, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemyAnimControllerComponent::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsPressDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsPressDown_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsPressDown_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsPressDown_Native");
static_assert(sizeof(RSBattleEnemy_C_IsPressDown_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsPressDown_Native");
static_assert(offsetof(RSBattleEnemy_C_IsPressDown_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsPressDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsLaunchDown_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsLaunchDown_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsLaunchDown_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsLaunchDown_Native");
static_assert(sizeof(RSBattleEnemy_C_IsLaunchDown_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsLaunchDown_Native");
static_assert(offsetof(RSBattleEnemy_C_IsLaunchDown_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsLaunchDown_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDamageMotionEnd_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsDamageMotionEnd_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDamageMotionEnd_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDamageMotionEnd_Native");
static_assert(sizeof(RSBattleEnemy_C_IsDamageMotionEnd_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsDamageMotionEnd_Native");
static_assert(offsetof(RSBattleEnemy_C_IsDamageMotionEnd_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsDamageMotionEnd_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBrainSuccess_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBrainSuccess_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBrainSuccess_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBrainSuccess_Native");
static_assert(sizeof(RSBattleEnemy_C_IsBrainSuccess_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBrainSuccess_Native");
static_assert(offsetof(RSBattleEnemy_C_IsBrainSuccess_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsBrainSuccess_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetCharacter_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetTargetCharacter_Native final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetCharacter_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetTargetCharacter_Native");
static_assert(sizeof(RSBattleEnemy_C_GetTargetCharacter_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_GetTargetCharacter_Native");
static_assert(offsetof(RSBattleEnemy_C_GetTargetCharacter_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetCharacter_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetPressDownLoop_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetPressDownLoop_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetPressDownLoop_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetPressDownLoop_Native");
static_assert(sizeof(RSBattleEnemy_C_GetPressDownLoop_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetPressDownLoop_Native");
static_assert(offsetof(RSBattleEnemy_C_GetPressDownLoop_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetPressDownLoop_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetNewDamageFloating_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetNewDamageFloating_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetNewDamageFloating_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetNewDamageFloating_Native");
static_assert(sizeof(RSBattleEnemy_C_GetNewDamageFloating_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetNewDamageFloating_Native");
static_assert(offsetof(RSBattleEnemy_C_GetNewDamageFloating_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetNewDamageFloating_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetLostActionInfoList_Native
// 0x0010 (0x0010 - 0x0000)
struct RSBattleEnemy_C_GetLostActionInfoList_Native final
{
public:
	TArray<struct FEmLostActionInfo>              LostActionInfo;                                    // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetLostActionInfoList_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetLostActionInfoList_Native");
static_assert(sizeof(RSBattleEnemy_C_GetLostActionInfoList_Native) == 0x000010, "Wrong size on RSBattleEnemy_C_GetLostActionInfoList_Native");
static_assert(offsetof(RSBattleEnemy_C_GetLostActionInfoList_Native, LostActionInfo) == 0x000000, "Member 'RSBattleEnemy_C_GetLostActionInfoList_Native::LostActionInfo' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetIsLandCheck
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetIsLandCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetIsLandCheck) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetIsLandCheck");
static_assert(sizeof(RSBattleEnemy_C_GetIsLandCheck) == 0x000001, "Wrong size on RSBattleEnemy_C_GetIsLandCheck");
static_assert(offsetof(RSBattleEnemy_C_GetIsLandCheck, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetIsLandCheck::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetIsJumpEnd
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetIsJumpEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetIsJumpEnd) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetIsJumpEnd");
static_assert(sizeof(RSBattleEnemy_C_GetIsJumpEnd) == 0x000001, "Wrong size on RSBattleEnemy_C_GetIsJumpEnd");
static_assert(offsetof(RSBattleEnemy_C_GetIsJumpEnd, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetIsJumpEnd::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHateTarget_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetHateTarget_Native final
{
public:
	class UHateTargetComponent*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetHateTarget_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetHateTarget_Native");
static_assert(sizeof(RSBattleEnemy_C_GetHateTarget_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_GetHateTarget_Native");
static_assert(offsetof(RSBattleEnemy_C_GetHateTarget_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetHateTarget_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDownUpMoveAnimKind_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetDownUpMoveAnimKind_Native final
{
public:
	EnemyMoveAnimKind                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDownUpMoveAnimKind_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetDownUpMoveAnimKind_Native");
static_assert(sizeof(RSBattleEnemy_C_GetDownUpMoveAnimKind_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetDownUpMoveAnimKind_Native");
static_assert(offsetof(RSBattleEnemy_C_GetDownUpMoveAnimKind_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetDownUpMoveAnimKind_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDownTimer_Native
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetDownTimer_Native final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDownTimer_Native) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetDownTimer_Native");
static_assert(sizeof(RSBattleEnemy_C_GetDownTimer_Native) == 0x000004, "Wrong size on RSBattleEnemy_C_GetDownTimer_Native");
static_assert(offsetof(RSBattleEnemy_C_GetDownTimer_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetDownTimer_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDebugEnemyDownInfinity_Native
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native");
static_assert(sizeof(RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native) == 0x000001, "Wrong size on RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native");
static_assert(offsetof(RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetDebugEnemyDownInfinity_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetCapsuleComponent_Native
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_GetCapsuleComponent_Native final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetCapsuleComponent_Native) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetCapsuleComponent_Native");
static_assert(sizeof(RSBattleEnemy_C_GetCapsuleComponent_Native) == 0x000008, "Wrong size on RSBattleEnemy_C_GetCapsuleComponent_Native");
static_assert(offsetof(RSBattleEnemy_C_GetCapsuleComponent_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetCapsuleComponent_Native::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsWeakUiDamageHit_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP) == 0x000001, "Wrong size on RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsWeakUiDamageHit_CallFromCPP::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotFindPlayer_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotFindPlayer_bNotFind;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP) == 0x000002, "Wrong size on RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP, CallFunc_IsNotFindPlayer_bNotFind) == 0x000001, "Member 'RSBattleEnemy_C_IsNotFindPlayer_CallFromCPP::CallFunc_IsNotFindPlayer_bNotFind' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsUniqueAroundEffectPause
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsUniqueAroundEffectPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsUniqueAroundEffectPause) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsUniqueAroundEffectPause");
static_assert(sizeof(RSBattleEnemy_C_IsUniqueAroundEffectPause) == 0x000001, "Wrong size on RSBattleEnemy_C_IsUniqueAroundEffectPause");
static_assert(offsetof(RSBattleEnemy_C_IsUniqueAroundEffectPause, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsUniqueAroundEffectPause::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetUniqueTickEnableRange
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetUniqueTickEnableRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetUniqueTickEnableRange) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetUniqueTickEnableRange");
static_assert(sizeof(RSBattleEnemy_C_GetUniqueTickEnableRange) == 0x000004, "Wrong size on RSBattleEnemy_C_GetUniqueTickEnableRange");
static_assert(offsetof(RSBattleEnemy_C_GetUniqueTickEnableRange, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_GetUniqueTickEnableRange::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBossEnemy_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsBossEnemy_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBossEnemy_bBoss;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBossEnemy_CallFromCPP) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBossEnemy_CallFromCPP");
static_assert(sizeof(RSBattleEnemy_C_IsBossEnemy_CallFromCPP) == 0x000002, "Wrong size on RSBattleEnemy_C_IsBossEnemy_CallFromCPP");
static_assert(offsetof(RSBattleEnemy_C_IsBossEnemy_CallFromCPP, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsBossEnemy_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsBossEnemy_CallFromCPP, CallFunc_IsBossEnemy_bBoss) == 0x000001, "Member 'RSBattleEnemy_C_IsBossEnemy_CallFromCPP::CallFunc_IsBossEnemy_bBoss' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSpawned
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpawnWait_bSpawnWait;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSpawned) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSpawned");
static_assert(sizeof(RSBattleEnemy_C_IsSpawned) == 0x000003, "Wrong size on RSBattleEnemy_C_IsSpawned");
static_assert(offsetof(RSBattleEnemy_C_IsSpawned, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsSpawned::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawned, CallFunc_IsSpawnWait_bSpawnWait) == 0x000001, "Member 'RSBattleEnemy_C_IsSpawned::CallFunc_IsSpawnWait_bSpawnWait' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSpawned, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsSpawned::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsDisableDownMotionInterface
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsDisableDownMotionInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsDisableDownMotionInterface) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsDisableDownMotionInterface");
static_assert(sizeof(RSBattleEnemy_C_IsDisableDownMotionInterface) == 0x000001, "Wrong size on RSBattleEnemy_C_IsDisableDownMotionInterface");
static_assert(offsetof(RSBattleEnemy_C_IsDisableDownMotionInterface, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsDisableDownMotionInterface::ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsSuspendFollowAttackInterface
// 0x0003 (0x0003 - 0x0000)
struct RSBattleEnemy_C_IsSuspendFollowAttackInterface final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuspendFollowAttack_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsSuspendFollowAttackInterface) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsSuspendFollowAttackInterface");
static_assert(sizeof(RSBattleEnemy_C_IsSuspendFollowAttackInterface) == 0x000003, "Wrong size on RSBattleEnemy_C_IsSuspendFollowAttackInterface");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendFollowAttackInterface, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsSuspendFollowAttackInterface::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendFollowAttackInterface, CallFunc_IsSuspendFollowAttack_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsSuspendFollowAttackInterface::CallFunc_IsSuspendFollowAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsSuspendFollowAttackInterface, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RSBattleEnemy_C_IsSuspendFollowAttackInterface::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsInvincible_Native
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsInvincible_Native final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvincible_bInvincible;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsInvincible_Native) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsInvincible_Native");
static_assert(sizeof(RSBattleEnemy_C_IsInvincible_Native) == 0x000002, "Wrong size on RSBattleEnemy_C_IsInvincible_Native");
static_assert(offsetof(RSBattleEnemy_C_IsInvincible_Native, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsInvincible_Native::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsInvincible_Native, CallFunc_IsInvincible_bInvincible) == 0x000001, "Member 'RSBattleEnemy_C_IsInvincible_Native::CallFunc_IsInvincible_bInvincible' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyConsiderDownDead
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyConsiderDownDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConsiderDownDead_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyConsiderDownDead) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyConsiderDownDead");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyConsiderDownDead) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyConsiderDownDead");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyConsiderDownDead, ReturnValue) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyConsiderDownDead::ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyConsiderDownDead, CallFunc_IsConsiderDownDead_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyConsiderDownDead::CallFunc_IsConsiderDownDead_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyActive
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyActive) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyActive");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyActive) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyActive");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyActive, Return) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyActive::Return' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyActive, CallFunc_GetIsBattleMode_IsBattleMode) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyActive::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsBossEnemy
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsBossEnemy final
{
public:
	bool                                          bBoss;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsBossEnemy) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsBossEnemy");
static_assert(sizeof(RSBattleEnemy_C_IsBossEnemy) == 0x000001, "Wrong size on RSBattleEnemy_C_IsBossEnemy");
static_assert(offsetof(RSBattleEnemy_C_IsBossEnemy, bBoss) == 0x000000, "Member 'RSBattleEnemy_C_IsBossEnemy::bBoss' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetDistanceToPlayer
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetDistanceToPlayer final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetDistanceToPlayer) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetDistanceToPlayer");
static_assert(sizeof(RSBattleEnemy_C_GetDistanceToPlayer) == 0x000004, "Wrong size on RSBattleEnemy_C_GetDistanceToPlayer");
static_assert(offsetof(RSBattleEnemy_C_GetDistanceToPlayer, Distance) == 0x000000, "Member 'RSBattleEnemy_C_GetDistanceToPlayer::Distance' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetTargetDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetTargetDistance) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetTargetDistance");
static_assert(sizeof(RSBattleEnemy_C_GetTargetDistance) == 0x000004, "Wrong size on RSBattleEnemy_C_GetTargetDistance");
static_assert(offsetof(RSBattleEnemy_C_GetTargetDistance, Distance) == 0x000000, "Member 'RSBattleEnemy_C_GetTargetDistance::Distance' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetEnemySpawn
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetEnemySpawn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetEnemySpawn) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetEnemySpawn");
static_assert(sizeof(RSBattleEnemy_C_GetEnemySpawn) == 0x000001, "Wrong size on RSBattleEnemy_C_GetEnemySpawn");
static_assert(offsetof(RSBattleEnemy_C_GetEnemySpawn, Return) == 0x000000, "Member 'RSBattleEnemy_C_GetEnemySpawn::Return' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetHeightCheckFlag
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetHeightCheckFlag final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetHeightCheckFlag) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetHeightCheckFlag");
static_assert(sizeof(RSBattleEnemy_C_GetHeightCheckFlag) == 0x000001, "Wrong size on RSBattleEnemy_C_GetHeightCheckFlag");
static_assert(offsetof(RSBattleEnemy_C_GetHeightCheckFlag, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_GetHeightCheckFlag::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsFlyEnemyCheck
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsFlyEnemyCheck final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsFlyEnemyCheck) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsFlyEnemyCheck");
static_assert(sizeof(RSBattleEnemy_C_IsFlyEnemyCheck) == 0x000001, "Wrong size on RSBattleEnemy_C_IsFlyEnemyCheck");
static_assert(offsetof(RSBattleEnemy_C_IsFlyEnemyCheck, NewParam) == 0x000000, "Member 'RSBattleEnemy_C_IsFlyEnemyCheck::NewParam' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetBrainCrashSequence
// 0x0040 (0x0040 - 0x0000)
struct RSBattleEnemy_C_GetBrainCrashSequence final
{
public:
	bool                                          IsUnique;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BD[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92BF[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_GetBrainCrashSequence) == 0x000008, "Wrong alignment on RSBattleEnemy_C_GetBrainCrashSequence");
static_assert(sizeof(RSBattleEnemy_C_GetBrainCrashSequence) == 0x000040, "Wrong size on RSBattleEnemy_C_GetBrainCrashSequence");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, IsUnique) == 0x000000, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::IsUnique' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, Sequence) == 0x000008, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::Sequence' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, K2Node_DynamicCast_AsRSBattle_Character) == 0x000028, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_GetId_ReturnValue) == 0x000034, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_Conv_IntToByte_ReturnValue) == 0x000038, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_GetBrainCrashSequence, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000039, "Member 'RSBattleEnemy_C_GetBrainCrashSequence::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMoveToTargetAnim
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_GetMoveToTargetAnim final
{
public:
	EnemyMoveAnimKind                             MoveAnim;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMoveToTargetAnim) == 0x000001, "Wrong alignment on RSBattleEnemy_C_GetMoveToTargetAnim");
static_assert(sizeof(RSBattleEnemy_C_GetMoveToTargetAnim) == 0x000001, "Wrong size on RSBattleEnemy_C_GetMoveToTargetAnim");
static_assert(offsetof(RSBattleEnemy_C_GetMoveToTargetAnim, MoveAnim) == 0x000000, "Member 'RSBattleEnemy_C_GetMoveToTargetAnim::MoveAnim' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.GetMainPlayerDistance
// 0x0004 (0x0004 - 0x0000)
struct RSBattleEnemy_C_GetMainPlayerDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RSBattleEnemy_C_GetMainPlayerDistance) == 0x000004, "Wrong alignment on RSBattleEnemy_C_GetMainPlayerDistance");
static_assert(sizeof(RSBattleEnemy_C_GetMainPlayerDistance) == 0x000004, "Wrong size on RSBattleEnemy_C_GetMainPlayerDistance");
static_assert(offsetof(RSBattleEnemy_C_GetMainPlayerDistance, Distance) == 0x000000, "Member 'RSBattleEnemy_C_GetMainPlayerDistance::Distance' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsRealThings
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsRealThings final
{
public:
	bool                                          bReal;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsRealThings) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsRealThings");
static_assert(sizeof(RSBattleEnemy_C_IsRealThings) == 0x000001, "Wrong size on RSBattleEnemy_C_IsRealThings");
static_assert(offsetof(RSBattleEnemy_C_IsRealThings, bReal) == 0x000000, "Member 'RSBattleEnemy_C_IsRealThings::bReal' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemySpawnNow
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_IsEnemySpawnNow final
{
public:
	bool                                          SpawnNow;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemySpawnNow) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemySpawnNow");
static_assert(sizeof(RSBattleEnemy_C_IsEnemySpawnNow) == 0x000001, "Wrong size on RSBattleEnemy_C_IsEnemySpawnNow");
static_assert(offsetof(RSBattleEnemy_C_IsEnemySpawnNow, SpawnNow) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemySpawnNow::SpawnNow' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsNotFindPlayer
// 0x0008 (0x0008 - 0x0000)
struct RSBattleEnemy_C_IsNotFindPlayer final
{
public:
	bool                                          bNotFind;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyFindPlayerType                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyFindPlayerType                          CallFunc_GetFindPlayerType_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsNotFindPlayer) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsNotFindPlayer");
static_assert(sizeof(RSBattleEnemy_C_IsNotFindPlayer) == 0x000008, "Wrong size on RSBattleEnemy_C_IsNotFindPlayer");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, bNotFind) == 0x000000, "Member 'RSBattleEnemy_C_IsNotFindPlayer::bNotFind' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, Temp_byte_Variable) == 0x000001, "Member 'RSBattleEnemy_C_IsNotFindPlayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, Temp_bool_Variable) == 0x000002, "Member 'RSBattleEnemy_C_IsNotFindPlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, Temp_bool_Variable_1) == 0x000003, "Member 'RSBattleEnemy_C_IsNotFindPlayer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, Temp_bool_Variable_2) == 0x000004, "Member 'RSBattleEnemy_C_IsNotFindPlayer::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, Temp_bool_Variable_3) == 0x000005, "Member 'RSBattleEnemy_C_IsNotFindPlayer::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, CallFunc_GetFindPlayerType_ReturnValue) == 0x000006, "Member 'RSBattleEnemy_C_IsNotFindPlayer::CallFunc_GetFindPlayerType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsNotFindPlayer, K2Node_Select_Default) == 0x000007, "Member 'RSBattleEnemy_C_IsNotFindPlayer::K2Node_Select_Default' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.IsEnemyTickDisableCondition
// 0x0002 (0x0002 - 0x0000)
struct RSBattleEnemy_C_IsEnemyTickDisableCondition final
{
public:
	bool                                          bDisableCondition;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyTickDisableCondition_Native_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_IsEnemyTickDisableCondition) == 0x000001, "Wrong alignment on RSBattleEnemy_C_IsEnemyTickDisableCondition");
static_assert(sizeof(RSBattleEnemy_C_IsEnemyTickDisableCondition) == 0x000002, "Wrong size on RSBattleEnemy_C_IsEnemyTickDisableCondition");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyTickDisableCondition, bDisableCondition) == 0x000000, "Member 'RSBattleEnemy_C_IsEnemyTickDisableCondition::bDisableCondition' has a wrong offset!");
static_assert(offsetof(RSBattleEnemy_C_IsEnemyTickDisableCondition, CallFunc_IsEnemyTickDisableCondition_Native_ReturnValue) == 0x000001, "Member 'RSBattleEnemy_C_IsEnemyTickDisableCondition::CallFunc_IsEnemyTickDisableCondition_Native_ReturnValue' has a wrong offset!");

// Function RSBattleEnemy.RSBattleEnemy_C.Em8310_IsMaskMan
// 0x0001 (0x0001 - 0x0000)
struct RSBattleEnemy_C_Em8310_IsMaskMan final
{
public:
	bool                                          bMaskMan;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RSBattleEnemy_C_Em8310_IsMaskMan) == 0x000001, "Wrong alignment on RSBattleEnemy_C_Em8310_IsMaskMan");
static_assert(sizeof(RSBattleEnemy_C_Em8310_IsMaskMan) == 0x000001, "Wrong size on RSBattleEnemy_C_Em8310_IsMaskMan");
static_assert(offsetof(RSBattleEnemy_C_Em8310_IsMaskMan, bMaskMan) == 0x000000, "Member 'RSBattleEnemy_C_Em8310_IsMaskMan::bMaskMan' has a wrong offset!");

}

