#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TaskBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TaskBase.TaskBase_C.ExecuteUbergraph_TaskBase
// 0x0018 (0x0018 - 0x0000)
struct TaskBase_C_ExecuteUbergraph_TaskBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4657[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_ExecuteUbergraph_TaskBase) == 0x000008, "Wrong alignment on TaskBase_C_ExecuteUbergraph_TaskBase");
static_assert(sizeof(TaskBase_C_ExecuteUbergraph_TaskBase) == 0x000018, "Wrong size on TaskBase_C_ExecuteUbergraph_TaskBase");
static_assert(offsetof(TaskBase_C_ExecuteUbergraph_TaskBase, EntryPoint) == 0x000000, "Member 'TaskBase_C_ExecuteUbergraph_TaskBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ExecuteUbergraph_TaskBase, K2Node_Event_OwnerController) == 0x000008, "Member 'TaskBase_C_ExecuteUbergraph_TaskBase::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ExecuteUbergraph_TaskBase, K2Node_Event_ControlledPawn) == 0x000010, "Member 'TaskBase_C_ExecuteUbergraph_TaskBase::K2Node_Event_ControlledPawn' has a wrong offset!");

// Function TaskBase.TaskBase_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct TaskBase_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on TaskBase_C_ReceiveAbortAI");
static_assert(sizeof(TaskBase_C_ReceiveAbortAI) == 0x000010, "Wrong size on TaskBase_C_ReceiveAbortAI");
static_assert(offsetof(TaskBase_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'TaskBase_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'TaskBase_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetDirectionVectorXY
// 0x0054 (0x0054 - 0x0000)
struct TaskBase_C_GetDirectionVectorXY final
{
public:
	struct FVector                                From;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                To;                                                // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_GetDirectionVectorXY) == 0x000004, "Wrong alignment on TaskBase_C_GetDirectionVectorXY");
static_assert(sizeof(TaskBase_C_GetDirectionVectorXY) == 0x000054, "Wrong size on TaskBase_C_GetDirectionVectorXY");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, From) == 0x000000, "Member 'TaskBase_C_GetDirectionVectorXY::From' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, To) == 0x00000C, "Member 'TaskBase_C_GetDirectionVectorXY::To' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, Direction) == 0x000018, "Member 'TaskBase_C_GetDirectionVectorXY::Direction' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_BreakVector_X) == 0x000030, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_BreakVector_Y) == 0x000034, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_BreakVector_Z) == 0x000038, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionVectorXY, CallFunc_Normal_ReturnValue) == 0x000048, "Member 'TaskBase_C_GetDirectionVectorXY::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.StopMoveAndAbort
// 0x0008 (0x0008 - 0x0000)
struct TaskBase_C_StopMoveAndAbort final
{
public:
	class AController*                            OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_StopMoveAndAbort) == 0x000008, "Wrong alignment on TaskBase_C_StopMoveAndAbort");
static_assert(sizeof(TaskBase_C_StopMoveAndAbort) == 0x000008, "Wrong size on TaskBase_C_StopMoveAndAbort");
static_assert(offsetof(TaskBase_C_StopMoveAndAbort, OwnerController) == 0x000000, "Member 'TaskBase_C_StopMoveAndAbort::OwnerController' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetDirectionByMovementMode
// 0x0078 (0x0078 - 0x0000)
struct TaskBase_C_GetDirectionByMovementMode final
{
public:
	class APawn*                                  FromControlledPawn;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ToTarget;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DirVector;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4658[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4659[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_IsFlying;                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465A[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionVectorXY_Direction;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_GetDirectionByMovementMode) == 0x000008, "Wrong alignment on TaskBase_C_GetDirectionByMovementMode");
static_assert(sizeof(TaskBase_C_GetDirectionByMovementMode) == 0x000078, "Wrong size on TaskBase_C_GetDirectionByMovementMode");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, FromControlledPawn) == 0x000000, "Member 'TaskBase_C_GetDirectionByMovementMode::FromControlledPawn' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, ToTarget) == 0x000008, "Member 'TaskBase_C_GetDirectionByMovementMode::ToTarget' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, Direction) == 0x000010, "Member 'TaskBase_C_GetDirectionByMovementMode::Direction' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, DirVector) == 0x00001C, "Member 'TaskBase_C_GetDirectionByMovementMode::DirVector' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'TaskBase_C_GetDirectionByMovementMode::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000038, "Member 'TaskBase_C_GetDirectionByMovementMode::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'TaskBase_C_GetDirectionByMovementMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00004C, "Member 'TaskBase_C_GetDirectionByMovementMode::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, CallFunc_IsFlying_IsFlying) == 0x000058, "Member 'TaskBase_C_GetDirectionByMovementMode::CallFunc_IsFlying_IsFlying' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x00005C, "Member 'TaskBase_C_GetDirectionByMovementMode::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetDirectionByMovementMode, CallFunc_GetDirectionVectorXY_Direction) == 0x000068, "Member 'TaskBase_C_GetDirectionByMovementMode::CallFunc_GetDirectionVectorXY_Direction' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetRandomReachablePointFromTarget
// 0x0048 (0x0048 - 0x0000)
struct TaskBase_C_GetRandomReachablePointFromTarget final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_465B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReachablePoint;                                    // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidPoint;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomReachablePointAndCheck_Point;    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRandomReachablePointAndCheck_IsValidPoint; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TaskBase_C_GetRandomReachablePointFromTarget) == 0x000008, "Wrong alignment on TaskBase_C_GetRandomReachablePointFromTarget");
static_assert(sizeof(TaskBase_C_GetRandomReachablePointFromTarget) == 0x000048, "Wrong size on TaskBase_C_GetRandomReachablePointFromTarget");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, TargetActor) == 0x000000, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, Radius) == 0x000008, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::Radius' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, NavData) == 0x000010, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::NavData' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, ReachablePoint) == 0x000018, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::ReachablePoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, IsValidPoint) == 0x000024, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::IsValidPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, CallFunc_GetNavAgentLocation_ReturnValue) == 0x000028, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::CallFunc_GetNavAgentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, CallFunc_GetRandomReachablePointAndCheck_Point) == 0x000034, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::CallFunc_GetRandomReachablePointAndCheck_Point' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointFromTarget, CallFunc_GetRandomReachablePointAndCheck_IsValidPoint) == 0x000040, "Member 'TaskBase_C_GetRandomReachablePointFromTarget::CallFunc_GetRandomReachablePointAndCheck_IsValidPoint' has a wrong offset!");

// Function TaskBase.TaskBase_C.ConvertDistanceAToB
// 0x0058 (0x0058 - 0x0000)
struct TaskBase_C_ConvertDistanceAToB final
{
public:
	class AActor*                                 ActorA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConvertedDistance;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465E[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius_1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_ConvertDistanceAToB) == 0x000008, "Wrong alignment on TaskBase_C_ConvertDistanceAToB");
static_assert(sizeof(TaskBase_C_ConvertDistanceAToB) == 0x000058, "Wrong size on TaskBase_C_ConvertDistanceAToB");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, ActorA) == 0x000000, "Member 'TaskBase_C_ConvertDistanceAToB::ActorA' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, ActorB) == 0x000008, "Member 'TaskBase_C_ConvertDistanceAToB::ActorB' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, Distance) == 0x000010, "Member 'TaskBase_C_ConvertDistanceAToB::Distance' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, ConvertedDistance) == 0x000014, "Member 'TaskBase_C_ConvertDistanceAToB::ConvertedDistance' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000018, "Member 'TaskBase_C_ConvertDistanceAToB::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'TaskBase_C_ConvertDistanceAToB::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, K2Node_DynamicCast_AsCommon_AIInterface_1) == 0x000030, "Member 'TaskBase_C_ConvertDistanceAToB::K2Node_DynamicCast_AsCommon_AIInterface_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'TaskBase_C_ConvertDistanceAToB::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, CallFunc_GetCapsuleRadius_Radius) == 0x000044, "Member 'TaskBase_C_ConvertDistanceAToB::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, CallFunc_GetCapsuleRadius_Radius_1) == 0x000048, "Member 'TaskBase_C_ConvertDistanceAToB::CallFunc_GetCapsuleRadius_Radius_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'TaskBase_C_ConvertDistanceAToB::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_ConvertDistanceAToB, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000050, "Member 'TaskBase_C_ConvertDistanceAToB::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function TaskBase.TaskBase_C.DebugPrintStringWithMyName
// 0x0178 (0x0178 - 0x0000)
struct TaskBase_C_DebugPrintStringWithMyName final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 String;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugDrawAI_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDebugDrawAI_ReturnValue_1;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4660[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0090(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A8(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0110(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0160(0x0018)()
};
static_assert(alignof(TaskBase_C_DebugPrintStringWithMyName) == 0x000008, "Wrong alignment on TaskBase_C_DebugPrintStringWithMyName");
static_assert(sizeof(TaskBase_C_DebugPrintStringWithMyName) == 0x000178, "Wrong size on TaskBase_C_DebugPrintStringWithMyName");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, ControlledPawn) == 0x000000, "Member 'TaskBase_C_DebugPrintStringWithMyName::ControlledPawn' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, String) == 0x000008, "Member 'TaskBase_C_DebugPrintStringWithMyName::String' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_IsDebugDrawAI_ReturnValue) == 0x000018, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_IsDebugDrawAI_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'TaskBase_C_DebugPrintStringWithMyName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_GetDisplayName_ReturnValue) == 0x000078, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_IsDebugDrawAI_ReturnValue_1) == 0x000088, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_IsDebugDrawAI_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000090, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A8, "Member 'TaskBase_C_DebugPrintStringWithMyName::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_GetDisplayName_ReturnValue_1) == 0x0000E8, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0000F8, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, K2Node_MakeStruct_FormatArgumentData_2) == 0x000110, "Member 'TaskBase_C_DebugPrintStringWithMyName::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, K2Node_MakeArray_Array) == 0x000150, "Member 'TaskBase_C_DebugPrintStringWithMyName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(TaskBase_C_DebugPrintStringWithMyName, CallFunc_Format_ReturnValue) == 0x000160, "Member 'TaskBase_C_DebugPrintStringWithMyName::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.TurnToTarget
// 0x0050 (0x0050 - 0x0000)
struct TaskBase_C_TurnToTarget final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4661[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDirectionByMovementMode_Direction;     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TaskBase_C_TurnToTarget) == 0x000008, "Wrong alignment on TaskBase_C_TurnToTarget");
static_assert(sizeof(TaskBase_C_TurnToTarget) == 0x000050, "Wrong size on TaskBase_C_TurnToTarget");
static_assert(offsetof(TaskBase_C_TurnToTarget, ControlledPawn) == 0x000000, "Member 'TaskBase_C_TurnToTarget::ControlledPawn' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, Target) == 0x000008, "Member 'TaskBase_C_TurnToTarget::Target' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, DeltaSeconds) == 0x000010, "Member 'TaskBase_C_TurnToTarget::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, InterpSpeed) == 0x000014, "Member 'TaskBase_C_TurnToTarget::InterpSpeed' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'TaskBase_C_TurnToTarget::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'TaskBase_C_TurnToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_GetDirectionByMovementMode_Direction) == 0x000028, "Member 'TaskBase_C_TurnToTarget::CallFunc_GetDirectionByMovementMode_Direction' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000034, "Member 'TaskBase_C_TurnToTarget::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_RInterpTo_ReturnValue) == 0x000040, "Member 'TaskBase_C_TurnToTarget::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_TurnToTarget, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00004C, "Member 'TaskBase_C_TurnToTarget::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetRandomPointOriginLocation
// 0x0090 (0x0090 - 0x0000)
struct TaskBase_C_GetRandomPointOriginLocation final
{
public:
	struct FVector                                OriginLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlightAltittude;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomPoint;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4662[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4663[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4664[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARecastNavMesh*>                 CallFunc_GetAllActorsOfClass_OutActors;            // 0x0060(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ANavigationData*                        CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomReachablePointAndCheck_Point;    // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRandomReachablePointAndCheck_IsValidPoint; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TaskBase_C_GetRandomPointOriginLocation) == 0x000008, "Wrong alignment on TaskBase_C_GetRandomPointOriginLocation");
static_assert(sizeof(TaskBase_C_GetRandomPointOriginLocation) == 0x000090, "Wrong size on TaskBase_C_GetRandomPointOriginLocation");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, OriginLocation) == 0x000000, "Member 'TaskBase_C_GetRandomPointOriginLocation::OriginLocation' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, Radius) == 0x00000C, "Member 'TaskBase_C_GetRandomPointOriginLocation::Radius' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, FlightAltittude) == 0x000010, "Member 'TaskBase_C_GetRandomPointOriginLocation::FlightAltittude' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, Point) == 0x000014, "Member 'TaskBase_C_GetRandomPointOriginLocation::Point' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, RandomPoint) == 0x000020, "Member 'TaskBase_C_GetRandomPointOriginLocation::RandomPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, Temp_bool_True_if_break_was_hit_Variable) == 0x00002C, "Member 'TaskBase_C_GetRandomPointOriginLocation::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, Temp_int_Array_Index_Variable) == 0x000030, "Member 'TaskBase_C_GetRandomPointOriginLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'TaskBase_C_GetRandomPointOriginLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_BreakVector_X) == 0x00003C, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_BreakVector_Y) == 0x000040, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_BreakVector_Z) == 0x000044, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x00005C, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_GetAllActorsOfClass_OutActors) == 0x000060, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Array_Get_Item) == 0x000070, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_GetRandomReachablePointAndCheck_Point) == 0x00007C, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_GetRandomReachablePointAndCheck_Point' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_GetRandomReachablePointAndCheck_IsValidPoint) == 0x000088, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_GetRandomReachablePointAndCheck_IsValidPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000089, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginLocation, CallFunc_BooleanAND_ReturnValue) == 0x00008A, "Member 'TaskBase_C_GetRandomPointOriginLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetRandomPointOriginTarget
// 0x0090 (0x0090 - 0x0000)
struct TaskBase_C_GetRandomPointOriginTarget final
{
public:
	class AActor*                                 OriginTarget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlightAltittude;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomPoint;                                       // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4665[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4666[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4667[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARecastNavMesh*>                 CallFunc_GetAllActorsOfClass_OutActors;            // 0x0060(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ANavigationData*                        CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomReachablePointFromTarget_ReachablePoint; // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRandomReachablePointFromTarget_IsValidPoint; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TaskBase_C_GetRandomPointOriginTarget) == 0x000008, "Wrong alignment on TaskBase_C_GetRandomPointOriginTarget");
static_assert(sizeof(TaskBase_C_GetRandomPointOriginTarget) == 0x000090, "Wrong size on TaskBase_C_GetRandomPointOriginTarget");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, OriginTarget) == 0x000000, "Member 'TaskBase_C_GetRandomPointOriginTarget::OriginTarget' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, Radius) == 0x000008, "Member 'TaskBase_C_GetRandomPointOriginTarget::Radius' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, FlightAltittude) == 0x00000C, "Member 'TaskBase_C_GetRandomPointOriginTarget::FlightAltittude' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, Point) == 0x000010, "Member 'TaskBase_C_GetRandomPointOriginTarget::Point' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, RandomPoint) == 0x00001C, "Member 'TaskBase_C_GetRandomPointOriginTarget::RandomPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'TaskBase_C_GetRandomPointOriginTarget::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'TaskBase_C_GetRandomPointOriginTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'TaskBase_C_GetRandomPointOriginTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_BreakVector_X) == 0x000038, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_BreakVector_Y) == 0x00003C, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_BreakVector_Z) == 0x000040, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000058, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_GetAllActorsOfClass_OutActors) == 0x000060, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Array_Get_Item) == 0x000070, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_GetRandomReachablePointFromTarget_ReachablePoint) == 0x00007C, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_GetRandomReachablePointFromTarget_ReachablePoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_GetRandomReachablePointFromTarget_IsValidPoint) == 0x000088, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_GetRandomReachablePointFromTarget_IsValidPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000089, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomPointOriginTarget, CallFunc_BooleanAND_ReturnValue) == 0x00008A, "Member 'TaskBase_C_GetRandomPointOriginTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.CalculateSpeedScaleFromDistance
// 0x003C (0x003C - 0x0000)
struct TaskBase_C_CalculateSpeedScaleFromDistance final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Goal;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseRange;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSpeedScale;                                    // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TaskBase_C_CalculateSpeedScaleFromDistance) == 0x000004, "Wrong alignment on TaskBase_C_CalculateSpeedScaleFromDistance");
static_assert(sizeof(TaskBase_C_CalculateSpeedScaleFromDistance) == 0x00003C, "Wrong size on TaskBase_C_CalculateSpeedScaleFromDistance");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, Start) == 0x000000, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::Start' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, Goal) == 0x00000C, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::Goal' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, BaseRange) == 0x000018, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::BaseRange' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, BaseSpeedScale) == 0x00001C, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::BaseSpeedScale' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, Scale) == 0x000020, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::Scale' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_CalculateSpeedScaleFromDistance, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'TaskBase_C_CalculateSpeedScaleFromDistance::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function TaskBase.TaskBase_C.GetRandomReachablePointAndCheck
// 0x0050 (0x0050 - 0x0000)
struct TaskBase_C_GetRandomReachablePointAndCheck final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANavigationData*                        NavData;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidPoint;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4668[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4669[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TaskBase_C_GetRandomReachablePointAndCheck) == 0x000008, "Wrong alignment on TaskBase_C_GetRandomReachablePointAndCheck");
static_assert(sizeof(TaskBase_C_GetRandomReachablePointAndCheck) == 0x000050, "Wrong size on TaskBase_C_GetRandomReachablePointAndCheck");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, Origin) == 0x000000, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::Origin' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, Radius) == 0x00000C, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::Radius' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, NavData) == 0x000010, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::NavData' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, Point) == 0x000018, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::Point' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, IsValidPoint) == 0x000024, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::IsValidPoint' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x000028, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x000034, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_Less_FloatFloat_ReturnValue) == 0x000048, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000049, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TaskBase_C_GetRandomReachablePointAndCheck, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'TaskBase_C_GetRandomReachablePointAndCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

