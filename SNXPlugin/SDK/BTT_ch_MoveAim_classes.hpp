#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ch_MoveAim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BTT_ch_MoveCircle_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_ch_MoveAim.BTT_ch_MoveAim_C
// 0x0020 (0x01C8 - 0x01A8)
class UBTT_ch_MoveAim_C final : public UBTT_ch_MoveCircle_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BTT_ch_MoveAim_C;                   // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Step_0;                                            // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AttackTimer;                                       // 0x01B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AttackInterval;                                    // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_ch_MoveAim(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void Exit(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_ch_MoveAim_C">();
	}
	static class UBTT_ch_MoveAim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_ch_MoveAim_C>();
	}
};
static_assert(alignof(UBTT_ch_MoveAim_C) == 0x000008, "Wrong alignment on UBTT_ch_MoveAim_C");
static_assert(sizeof(UBTT_ch_MoveAim_C) == 0x0001C8, "Wrong size on UBTT_ch_MoveAim_C");
static_assert(offsetof(UBTT_ch_MoveAim_C, UberGraphFrame_BTT_ch_MoveAim_C) == 0x0001A8, "Member 'UBTT_ch_MoveAim_C::UberGraphFrame_BTT_ch_MoveAim_C' has a wrong offset!");
static_assert(offsetof(UBTT_ch_MoveAim_C, Step_0) == 0x0001B0, "Member 'UBTT_ch_MoveAim_C::Step_0' has a wrong offset!");
static_assert(offsetof(UBTT_ch_MoveAim_C, Count) == 0x0001B4, "Member 'UBTT_ch_MoveAim_C::Count' has a wrong offset!");
static_assert(offsetof(UBTT_ch_MoveAim_C, AttackTimer) == 0x0001B8, "Member 'UBTT_ch_MoveAim_C::AttackTimer' has a wrong offset!");
static_assert(offsetof(UBTT_ch_MoveAim_C, AttackInterval) == 0x0001C4, "Member 'UBTT_ch_MoveAim_C::AttackInterval' has a wrong offset!");

}

