#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMoveNPCSpawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMoveNPCSpawner.BP_SplineMoveNPCSpawner_C
// 0x0080 (0x02B0 - 0x0230)
class ABP_SplineMoveNPCSpawner_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineComponent*>               SplineRoute;                                       // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         SpawnIntervalTime;                                 // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnIntervalRandom;                               // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextSpawnIntervalTime;                             // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NpcMoveSpeed;                                      // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NpcRotSpeed;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1B[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CrowdTypeDataTable;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NoCollisionInFar;                                  // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A1C[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnTimer;                                        // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnedActorNum;                                   // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveSpawnedActorNum;                             // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDebug;                                           // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A1D[0x2];                                     // 0x0292(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSpawnNum;                                       // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TownPeopleCrowd_C*                  LastSpawnedActor;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NeedSpawnDistance;                                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENpcAnimationKind                             AnimKind;                                          // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1E[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NPCmoveUpDownSpeedMaxDelta;                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SplineMoveNPCSpawner(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveDestroyed();
	void GetRouteSplineAtRandom(class USplineComponent** SplineComponent);
	void GetFlatSpline(class USplineComponent* Spline, class USplineComponent** Result);
	void SpawnTownPeopleCrowd(class ABP_TownPeopleCrowd_C** Spawned);
	void GetSplinePathAtRandom(class USplineComponent** Spline);
	void InitializeSplinePaths();
	void UpdateSpawnIntervalTime();
	void InitializeSpawn(int32 SpawnActorNum);
	void GetMaxPathLength(float* MaxPathLength);
	void GetRandomCrowdType(struct FNpcTownPeopleCrowdType* CrowdType);
	void MoveNPCDeadCallback(class ABP_TownPeopleCrowd_C* Dead);
	void DestroyAllNPC();
	void CountNPC();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMoveNPCSpawner_C">();
	}
	static class ABP_SplineMoveNPCSpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMoveNPCSpawner_C>();
	}
};
static_assert(alignof(ABP_SplineMoveNPCSpawner_C) == 0x000008, "Wrong alignment on ABP_SplineMoveNPCSpawner_C");
static_assert(sizeof(ABP_SplineMoveNPCSpawner_C) == 0x0002B0, "Wrong size on ABP_SplineMoveNPCSpawner_C");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, UberGraphFrame) == 0x000230, "Member 'ABP_SplineMoveNPCSpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_SplineMoveNPCSpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SplineRoute) == 0x000240, "Member 'ABP_SplineMoveNPCSpawner_C::SplineRoute' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SpawnIntervalTime) == 0x000250, "Member 'ABP_SplineMoveNPCSpawner_C::SpawnIntervalTime' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SpawnIntervalRandom) == 0x000254, "Member 'ABP_SplineMoveNPCSpawner_C::SpawnIntervalRandom' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NextSpawnIntervalTime) == 0x000258, "Member 'ABP_SplineMoveNPCSpawner_C::NextSpawnIntervalTime' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NpcMoveSpeed) == 0x00025C, "Member 'ABP_SplineMoveNPCSpawner_C::NpcMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NpcRotSpeed) == 0x000260, "Member 'ABP_SplineMoveNPCSpawner_C::NpcRotSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, CrowdTypeDataTable) == 0x000268, "Member 'ABP_SplineMoveNPCSpawner_C::CrowdTypeDataTable' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SpawnedActors) == 0x000270, "Member 'ABP_SplineMoveNPCSpawner_C::SpawnedActors' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NoCollisionInFar) == 0x000280, "Member 'ABP_SplineMoveNPCSpawner_C::NoCollisionInFar' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SpawnTimer) == 0x000284, "Member 'ABP_SplineMoveNPCSpawner_C::SpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, SpawnedActorNum) == 0x000288, "Member 'ABP_SplineMoveNPCSpawner_C::SpawnedActorNum' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, ActiveSpawnedActorNum) == 0x00028C, "Member 'ABP_SplineMoveNPCSpawner_C::ActiveSpawnedActorNum' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, IsActive) == 0x000290, "Member 'ABP_SplineMoveNPCSpawner_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, IsDebug) == 0x000291, "Member 'ABP_SplineMoveNPCSpawner_C::IsDebug' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, MaxSpawnNum) == 0x000294, "Member 'ABP_SplineMoveNPCSpawner_C::MaxSpawnNum' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, LastSpawnedActor) == 0x000298, "Member 'ABP_SplineMoveNPCSpawner_C::LastSpawnedActor' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NeedSpawnDistance) == 0x0002A0, "Member 'ABP_SplineMoveNPCSpawner_C::NeedSpawnDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, AnimKind) == 0x0002A4, "Member 'ABP_SplineMoveNPCSpawner_C::AnimKind' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveNPCSpawner_C, NPCmoveUpDownSpeedMaxDelta) == 0x0002A8, "Member 'ABP_SplineMoveNPCSpawner_C::NPCmoveUpDownSpeedMaxDelta' has a wrong offset!");

}

