#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerAIInterface

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "EPlayerAIBattleThinkParam_structs.hpp"
#include "EPlayerAIMoveMode_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetMoveMode
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_SetMoveMode final
{
public:
	EPlayerAIMoveMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetMoveMode) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SetMoveMode");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetMoveMode) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_SetMoveMode");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetMoveMode, Mode) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetMoveMode::Mode' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetMoveMode, Dummy) == 0x000001, "Member 'BPI_PlayerAIInterface_C_SetMoveMode::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_Attack
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_Attack final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_Attack) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_Attack");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_Attack) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_InputAI_Attack");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_Attack, bPressed) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_Attack::bPressed' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_LeftStick
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_LeftStick final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_LeftStick) == 0x000004, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_LeftStick");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_LeftStick) == 0x000008, "Wrong size on BPI_PlayerAIInterface_C_InputAI_LeftStick");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_LeftStick, X) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_LeftStick::X' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_LeftStick, Y) == 0x000004, "Member 'BPI_PlayerAIInterface_C_InputAI_LeftStick::Y' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_Dodge
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_Dodge final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_Dodge) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_Dodge");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_Dodge) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_InputAI_Dodge");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_Dodge, bPressed) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_Dodge::bPressed' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetEnableInputStick
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_SetEnableInputStick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetEnableInputStick) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SetEnableInputStick");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetEnableInputStick) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_SetEnableInputStick");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEnableInputStick, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetEnableInputStick::bEnable' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEnableInputStick, Dummy) == 0x000001, "Member 'BPI_PlayerAIInterface_C_SetEnableInputStick::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.NextBattleThink
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_NextBattleThink final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_NextBattleThink) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_NextBattleThink");
static_assert(sizeof(BPI_PlayerAIInterface_C_NextBattleThink) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_NextBattleThink");
static_assert(offsetof(BPI_PlayerAIInterface_C_NextBattleThink, Dummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_NextBattleThink::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.ResetBattleThink
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_ResetBattleThink final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_ResetBattleThink) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_ResetBattleThink");
static_assert(sizeof(BPI_PlayerAIInterface_C_ResetBattleThink) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_ResetBattleThink");
static_assert(offsetof(BPI_PlayerAIInterface_C_ResetBattleThink, Dummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_ResetBattleThink::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_Jump
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_Jump final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_Jump) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_Jump");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_Jump) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_InputAI_Jump");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_Jump, bPressed) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_Jump::bPressed' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.OnChangeBattleThink
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerAIInterface_C_OnChangeBattleThink final
{
public:
	EPlayerAIBattleThinkType                      NextThinkType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      PrevThinkType;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_OnChangeBattleThink) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_OnChangeBattleThink");
static_assert(sizeof(BPI_PlayerAIInterface_C_OnChangeBattleThink) == 0x000003, "Wrong size on BPI_PlayerAIInterface_C_OnChangeBattleThink");
static_assert(offsetof(BPI_PlayerAIInterface_C_OnChangeBattleThink, NextThinkType) == 0x000000, "Member 'BPI_PlayerAIInterface_C_OnChangeBattleThink::NextThinkType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_OnChangeBattleThink, PrevThinkType) == 0x000001, "Member 'BPI_PlayerAIInterface_C_OnChangeBattleThink::PrevThinkType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_OnChangeBattleThink, bDummy) == 0x000002, "Member 'BPI_PlayerAIInterface_C_OnChangeBattleThink::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetAIMoveStick
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_SetAIMoveStick final
{
public:
	bool                                          bMoveStick;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetAIMoveStick) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SetAIMoveStick");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetAIMoveStick) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_SetAIMoveStick");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetAIMoveStick, bMoveStick) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetAIMoveStick::bMoveStick' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetAIMoveStick, bDummy) == 0x000001, "Member 'BPI_PlayerAIInterface_C_SetAIMoveStick::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.AimStartAI
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_AimStartAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_AimStartAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_AimStartAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_AimStartAI) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_AimStartAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_AimStartAI, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_AimStartAI::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.AimEndAI
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_AimEndAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_AimEndAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_AimEndAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_AimEndAI) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_AimEndAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_AimEndAI, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_AimEndAI::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsUseItemThink
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsUseItemThink final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsUseItemThink) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsUseItemThink");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsUseItemThink) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsUseItemThink");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsUseItemThink, Result) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsUseItemThink::Result' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_UseItem
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_UseItem final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_UseItem) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_UseItem");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_UseItem) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_InputAI_UseItem");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_UseItem, bPressed) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_UseItem::bPressed' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsInputAI_UseItem
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsInputAI_UseItem final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsInputAI_UseItem) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsInputAI_UseItem");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsInputAI_UseItem) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsInputAI_UseItem");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsInputAI_UseItem, bON) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsInputAI_UseItem::bON' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetEventMove
// 0x0030 (0x0030 - 0x0000)
struct BPI_PlayerAIInterface_C_SetEventMove final
{
public:
	TArray<struct FVector>                        Pos_list_in;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<float>                                 Radius_list_in;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Walk;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterWait;                                        // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38D4[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMoveTime;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetEventMove) == 0x000008, "Wrong alignment on BPI_PlayerAIInterface_C_SetEventMove");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetEventMove) == 0x000030, "Wrong size on BPI_PlayerAIInterface_C_SetEventMove");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, Pos_list_in) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetEventMove::Pos_list_in' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, Radius_list_in) == 0x000010, "Member 'BPI_PlayerAIInterface_C_SetEventMove::Radius_list_in' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, Walk) == 0x000020, "Member 'BPI_PlayerAIInterface_C_SetEventMove::Walk' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, bAfterWait) == 0x000021, "Member 'BPI_PlayerAIInterface_C_SetEventMove::bAfterWait' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, MaxMoveTime) == 0x000024, "Member 'BPI_PlayerAIInterface_C_SetEventMove::MaxMoveTime' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventMove, Dummy) == 0x000028, "Member 'BPI_PlayerAIInterface_C_SetEventMove::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetEventMovePosActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerAIInterface_C_GetEventMovePosActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetEventMovePosActor) == 0x000008, "Wrong alignment on BPI_PlayerAIInterface_C_GetEventMovePosActor");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetEventMovePosActor) == 0x000010, "Wrong size on BPI_PlayerAIInterface_C_GetEventMovePosActor");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetEventMovePosActor, Actor) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetEventMovePosActor::Actor' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetEventMovePosActor, Radius) == 0x000008, "Member 'BPI_PlayerAIInterface_C_GetEventMovePosActor::Radius' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.CheckEventMovePos
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_CheckEventMovePos final
{
public:
	bool                                          Goal;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_CheckEventMovePos) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_CheckEventMovePos");
static_assert(sizeof(BPI_PlayerAIInterface_C_CheckEventMovePos) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_CheckEventMovePos");
static_assert(offsetof(BPI_PlayerAIInterface_C_CheckEventMovePos, Goal) == 0x000000, "Member 'BPI_PlayerAIInterface_C_CheckEventMovePos::Goal' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsSelfRecovery
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsSelfRecovery final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsSelfRecovery) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsSelfRecovery");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsSelfRecovery) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsSelfRecovery");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsSelfRecovery, bResult) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsSelfRecovery::bResult' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.NotifyResetBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_NotifyResetBehaviorTree final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_NotifyResetBehaviorTree) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_NotifyResetBehaviorTree");
static_assert(sizeof(BPI_PlayerAIInterface_C_NotifyResetBehaviorTree) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_NotifyResetBehaviorTree");
static_assert(offsetof(BPI_PlayerAIInterface_C_NotifyResetBehaviorTree, Dummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_NotifyResetBehaviorTree::Dummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SearchAIPsychicObject
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_SearchAIPsychicObject final
{
public:
	bool                                          bFiound;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SearchAIPsychicObject) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SearchAIPsychicObject");
static_assert(sizeof(BPI_PlayerAIInterface_C_SearchAIPsychicObject) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_SearchAIPsychicObject");
static_assert(offsetof(BPI_PlayerAIInterface_C_SearchAIPsychicObject, bFiound) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SearchAIPsychicObject::bFiound' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.CheckAIPsychicObject
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerAIInterface_C_CheckAIPsychicObject final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOK;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_CheckAIPsychicObject) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_CheckAIPsychicObject");
static_assert(sizeof(BPI_PlayerAIInterface_C_CheckAIPsychicObject) == 0x000003, "Wrong size on BPI_PlayerAIInterface_C_CheckAIPsychicObject");
static_assert(offsetof(BPI_PlayerAIInterface_C_CheckAIPsychicObject, bCapture) == 0x000000, "Member 'BPI_PlayerAIInterface_C_CheckAIPsychicObject::bCapture' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_CheckAIPsychicObject, bAttack) == 0x000001, "Member 'BPI_PlayerAIInterface_C_CheckAIPsychicObject::bAttack' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_CheckAIPsychicObject, bOK) == 0x000002, "Member 'BPI_PlayerAIInterface_C_CheckAIPsychicObject::bOK' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.InputAI_Psychic
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_InputAI_Psychic final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_InputAI_Psychic) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_InputAI_Psychic");
static_assert(sizeof(BPI_PlayerAIInterface_C_InputAI_Psychic) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_InputAI_Psychic");
static_assert(offsetof(BPI_PlayerAIInterface_C_InputAI_Psychic, bPressed) == 0x000000, "Member 'BPI_PlayerAIInterface_C_InputAI_Psychic::bPressed' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsInputAI_Psychic
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsInputAI_Psychic final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsInputAI_Psychic) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsInputAI_Psychic");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsInputAI_Psychic) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsInputAI_Psychic");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsInputAI_Psychic, bON) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsInputAI_Psychic::bON' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsPsychicAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsPsychicAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsPsychicAble) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsPsychicAble");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsPsychicAble) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsPsychicAble");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsPsychicAble, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsPsychicAble::bEnable' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetMoveStickBack
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_SetMoveStickBack final
{
public:
	bool                                          bBack;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetMoveStickBack) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SetMoveStickBack");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetMoveStickBack) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_SetMoveStickBack");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetMoveStickBack, bBack) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetMoveStickBack::bBack' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetMoveStickBack, bDummy) == 0x000001, "Member 'BPI_PlayerAIInterface_C_SetMoveStickBack::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.SetEventWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_SetEventWait final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_SetEventWait) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_SetEventWait");
static_assert(sizeof(BPI_PlayerAIInterface_C_SetEventWait) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_SetEventWait");
static_assert(offsetof(BPI_PlayerAIInterface_C_SetEventWait, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_SetEventWait::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.EndEventWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_EndEventWait final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_EndEventWait) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_EndEventWait");
static_assert(sizeof(BPI_PlayerAIInterface_C_EndEventWait) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_EndEventWait");
static_assert(offsetof(BPI_PlayerAIInterface_C_EndEventWait, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_EndEventWait::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsUniqueConditionTransition
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerAIInterface_C_IsUniqueConditionTransition final
{
public:
	int32                                         UniqueNo;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsUniqueConditionTransition) == 0x000004, "Wrong alignment on BPI_PlayerAIInterface_C_IsUniqueConditionTransition");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsUniqueConditionTransition) == 0x000008, "Wrong size on BPI_PlayerAIInterface_C_IsUniqueConditionTransition");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsUniqueConditionTransition, UniqueNo) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsUniqueConditionTransition::UniqueNo' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsUniqueConditionTransition, bResult) == 0x000004, "Member 'BPI_PlayerAIInterface_C_IsUniqueConditionTransition::bResult' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.RestartBattleAI
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_RestartBattleAI final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_RestartBattleAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_RestartBattleAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_RestartBattleAI) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_RestartBattleAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_RestartBattleAI, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_RestartBattleAI::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsBattleActionStartAI
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsBattleActionStartAI final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsBattleActionStartAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsBattleActionStartAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsBattleActionStartAI) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsBattleActionStartAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsBattleActionStartAI, bStart) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsBattleActionStartAI::bStart' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsTargetCanBeAttacked
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsTargetCanBeAttacked final
{
public:
	bool                                          CanDo;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsTargetCanBeAttacked) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsTargetCanBeAttacked");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsTargetCanBeAttacked) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsTargetCanBeAttacked");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsTargetCanBeAttacked, CanDo) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsTargetCanBeAttacked::CanDo' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.CancelUseItem
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_CancelUseItem final
{
public:
	bool                                          bDummy;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_CancelUseItem) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_CancelUseItem");
static_assert(sizeof(BPI_PlayerAIInterface_C_CancelUseItem) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_CancelUseItem");
static_assert(offsetof(BPI_PlayerAIInterface_C_CancelUseItem, bDummy) == 0x000000, "Member 'BPI_PlayerAIInterface_C_CancelUseItem::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.BehaviorTreeTaskExit_Attack
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ExitThinkType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack");
static_assert(sizeof(BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack");
static_assert(offsetof(BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack, ExitThinkType) == 0x000000, "Member 'BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack::ExitThinkType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack, bDummy) == 0x000001, "Member 'BPI_PlayerAIInterface_C_BehaviorTreeTaskExit_Attack::bDummy' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetCurrentBattleThinkInterface
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ThinkType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface, ThinkType) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetCurrentBattleThinkInterface::ThinkType' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetControlPlayerDist
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerAIInterface_C_GetControlPlayerDist final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetControlPlayerDist) == 0x000004, "Wrong alignment on BPI_PlayerAIInterface_C_GetControlPlayerDist");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetControlPlayerDist) == 0x00000C, "Wrong size on BPI_PlayerAIInterface_C_GetControlPlayerDist");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetControlPlayerDist, Dist) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetControlPlayerDist::Dist' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsMoveAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsMoveAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsMoveAble) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsMoveAble");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsMoveAble) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsMoveAble");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsMoveAble, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsMoveAble::bEnable' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetMovePosActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerAIInterface_C_GetMovePosActor final
{
public:
	class AActor*                                 MovePosActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetMovePosActor) == 0x000008, "Wrong alignment on BPI_PlayerAIInterface_C_GetMovePosActor");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetMovePosActor) == 0x000008, "Wrong size on BPI_PlayerAIInterface_C_GetMovePosActor");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetMovePosActor, MovePosActor) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetMovePosActor::MovePosActor' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsAttackAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsAttackAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsAttackAble) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsAttackAble");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsAttackAble) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsAttackAble");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsAttackAble, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsAttackAble::bEnable' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsActionStatusAI
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_IsActionStatusAI final
{
public:
	EPlayerActionStatus                           ActionStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsActionStatusAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsActionStatusAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsActionStatusAI) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_IsActionStatusAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsActionStatusAI, ActionStatus) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsActionStatusAI::ActionStatus' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsActionStatusAI, bResult) == 0x000001, "Member 'BPI_PlayerAIInterface_C_IsActionStatusAI::bResult' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsPlayerStatusAI
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_IsPlayerStatusAI final
{
public:
	EPlayerCommonStatus                           PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsPlayerStatusAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsPlayerStatusAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsPlayerStatusAI) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_IsPlayerStatusAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsPlayerStatusAI, PlayerStatus) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsPlayerStatusAI::PlayerStatus' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsPlayerStatusAI, bResult) == 0x000001, "Member 'BPI_PlayerAIInterface_C_IsPlayerStatusAI::bResult' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsInputAI_Attack
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsInputAI_Attack final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsInputAI_Attack) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsInputAI_Attack");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsInputAI_Attack) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsInputAI_Attack");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsInputAI_Attack, bON) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsInputAI_Attack::bON' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsInputAI_Dodge
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsInputAI_Dodge final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsInputAI_Dodge) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsInputAI_Dodge");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsInputAI_Dodge) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsInputAI_Dodge");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsInputAI_Dodge, bON) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsInputAI_Dodge::bON' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsDodgeAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsDodgeAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsDodgeAble) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsDodgeAble");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsDodgeAble) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsDodgeAble");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsDodgeAble, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsDodgeAble::bEnable' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsAIMoveMode
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_IsAIMoveMode final
{
public:
	EPlayerAIMoveMode                             Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsAIMoveMode) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsAIMoveMode");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsAIMoveMode) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_IsAIMoveMode");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsAIMoveMode, Mode) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsAIMoveMode::Mode' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsAIMoveMode, Result) == 0x000001, "Member 'BPI_PlayerAIInterface_C_IsAIMoveMode::Result' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsBattleThink
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_IsBattleThink final
{
public:
	EPlayerAIBattleThinkType                      Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsBattleThink) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsBattleThink");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsBattleThink) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_IsBattleThink");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsBattleThink, Type) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsBattleThink::Type' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsBattleThink, Result) == 0x000001, "Member 'BPI_PlayerAIInterface_C_IsBattleThink::Result' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsBattleThinkParam
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerAIInterface_C_IsBattleThinkParam final
{
public:
	EPlayerAIBattleThinkParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsBattleThinkParam) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsBattleThinkParam");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsBattleThinkParam) == 0x000002, "Wrong size on BPI_PlayerAIInterface_C_IsBattleThinkParam");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsBattleThinkParam, Param) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsBattleThinkParam::Param' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsBattleThinkParam, bResult) == 0x000001, "Member 'BPI_PlayerAIInterface_C_IsBattleThinkParam::bResult' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetBattleTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerAIInterface_C_GetBattleTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetBattleTargetActor) == 0x000008, "Wrong alignment on BPI_PlayerAIInterface_C_GetBattleTargetActor");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetBattleTargetActor) == 0x000008, "Wrong size on BPI_PlayerAIInterface_C_GetBattleTargetActor");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetBattleTargetActor, TargetActor) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetBattleTargetActor::TargetActor' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsInputAI_Jump
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsInputAI_Jump final
{
public:
	bool                                          bON;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsInputAI_Jump) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsInputAI_Jump");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsInputAI_Jump) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsInputAI_Jump");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsInputAI_Jump, bON) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsInputAI_Jump::bON' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsJumpAble
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsJumpAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsJumpAble) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsJumpAble");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsJumpAble) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsJumpAble");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsJumpAble, bEnable) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsJumpAble::bEnable' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetAttackCountAI
// 0x0004 (0x0004 - 0x0000)
struct BPI_PlayerAIInterface_C_GetAttackCountAI final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetAttackCountAI) == 0x000004, "Wrong alignment on BPI_PlayerAIInterface_C_GetAttackCountAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetAttackCountAI) == 0x000004, "Wrong size on BPI_PlayerAIInterface_C_GetAttackCountAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetAttackCountAI, Count) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetAttackCountAI::Count' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.OverwriteAttackInputKindAI
// 0x0003 (0x0003 - 0x0000)
struct BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI final
{
public:
	EPlayerAIBattleThinkType                      ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            InputKind;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Kind;                                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI");
static_assert(sizeof(BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI) == 0x000003, "Wrong size on BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI");
static_assert(offsetof(BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI, ThinkType) == 0x000000, "Member 'BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI::ThinkType' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI, InputKind) == 0x000001, "Member 'BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI::InputKind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI, Kind) == 0x000002, "Member 'BPI_PlayerAIInterface_C_OverwriteAttackInputKindAI::Kind' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsEventMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsEventMove final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsEventMove) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsEventMove");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsEventMove) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsEventMove");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsEventMove, Result) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsEventMove::Result' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsEventMoveEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsEventMoveEnd final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsEventMoveEnd) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsEventMoveEnd");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsEventMoveEnd) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsEventMoveEnd");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsEventMoveEnd, Result) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsEventMoveEnd::Result' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsResetBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsResetBehaviorTree final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsResetBehaviorTree) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsResetBehaviorTree");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsResetBehaviorTree) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsResetBehaviorTree");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsResetBehaviorTree, bReset) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsResetBehaviorTree::bReset' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.IsEventWait
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_IsEventWait final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerAIInterface_C_IsEventWait) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_IsEventWait");
static_assert(sizeof(BPI_PlayerAIInterface_C_IsEventWait) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_IsEventWait");
static_assert(offsetof(BPI_PlayerAIInterface_C_IsEventWait, bWait) == 0x000000, "Member 'BPI_PlayerAIInterface_C_IsEventWait::bWait' has a wrong offset!");

// Function BPI_PlayerAIInterface.BPI_PlayerAIInterface_C.GetUseItemID
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerAIInterface_C_GetUseItemID final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerAIInterface_C_GetUseItemID) == 0x000001, "Wrong alignment on BPI_PlayerAIInterface_C_GetUseItemID");
static_assert(sizeof(BPI_PlayerAIInterface_C_GetUseItemID) == 0x000001, "Wrong size on BPI_PlayerAIInterface_C_GetUseItemID");
static_assert(offsetof(BPI_PlayerAIInterface_C_GetUseItemID, ItemId) == 0x000000, "Member 'BPI_PlayerAIInterface_C_GetUseItemID::ItemId' has a wrong offset!");

}

