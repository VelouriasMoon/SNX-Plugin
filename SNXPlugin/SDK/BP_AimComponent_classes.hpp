#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AimComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AimComponent.BP_AimComponent_C
// 0x0038 (0x00F8 - 0x00C0)
class UBP_AimComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerHologram_C*                   OwnerHologram;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAimWeak;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnd;                                              // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E8E[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AimRotate;                                         // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InterpSpeed;                                       // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitAngle;                                        // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologramMode;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AimComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void AimStart(bool Param_bAimWeak, float Param_LimitAngle);
	void AimEnd(bool bForce);
	void UpdateAim(float DeltaSeconds);
	void EndCompleted();
	void UpdateEnd(float DeltaSeconds);
	void SetAimRotator();
	void GetTargetActor(class AActor** TargetActor);
	void GetAimBaseLocation(struct FVector* Location);

	void GetAimPitch(float* Pitch) const;
	void IsAim(bool* bAim) const;
	void GetAimRotator(struct FRotator* Rotator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AimComponent_C">();
	}
	static class UBP_AimComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AimComponent_C>();
	}
};
static_assert(alignof(UBP_AimComponent_C) == 0x000008, "Wrong alignment on UBP_AimComponent_C");
static_assert(sizeof(UBP_AimComponent_C) == 0x0000F8, "Wrong size on UBP_AimComponent_C");
static_assert(offsetof(UBP_AimComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_AimComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, OwnerPlayer) == 0x0000C8, "Member 'UBP_AimComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, OwnerHologram) == 0x0000D0, "Member 'UBP_AimComponent_C::OwnerHologram' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, bAimWeak) == 0x0000D8, "Member 'UBP_AimComponent_C::bAimWeak' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, bEnd) == 0x0000D9, "Member 'UBP_AimComponent_C::bEnd' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, AimRotate) == 0x0000DC, "Member 'UBP_AimComponent_C::AimRotate' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, InterpSpeed) == 0x0000E8, "Member 'UBP_AimComponent_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, LimitAngle) == 0x0000EC, "Member 'UBP_AimComponent_C::LimitAngle' has a wrong offset!");
static_assert(offsetof(UBP_AimComponent_C, bHologramMode) == 0x0000F0, "Member 'UBP_AimComponent_C::bHologramMode' has a wrong offset!");

}

