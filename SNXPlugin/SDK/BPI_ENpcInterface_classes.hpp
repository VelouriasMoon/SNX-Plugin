#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ENpcInterface

#include "Basic.hpp"

#include "EPlayerAIBattleThinkType_structs.hpp"
#include "EBattlePhase_em8210_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EBulletType_structs.hpp"
#include "Enum_BattleType_em8010_structs.hpp"
#include "EBattleVoice_em8200_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "ETelepoMoveType_em8200_structs.hpp"
#include "Enum_BattleType_em8000_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_ENpcInterface.BPI_ENpcInterface_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_ENpcInterface_C final : public IInterface
{
public:
	void GetBarrierComponent(class UBP_EnemyBarrierComponent_C** Component);
	void GetEnpcComponent(class UBP_ENpcComponent_C** Component);
	void GetEnpcSequencerComponent(class UBP_ENPCSequencerComponent_C** Component);
	void Em8000_GetPartner(class AActor** PartnerActor);
	void Em8200_BulletAttackEnd(EBulletType BulletType, bool* bEnd);
	void Em8200_StartTelepoMove(bool* Dummy);
	void Em8200_EndTelepoMove(bool* Dummy);
	void Em8200_CalcTelepoMoveLocation(ETelepoMoveType_em8200 TelepoType, struct FVector* TelepoMoveLocation);
	void Em8200_GetTelepoMoveLocation(struct FVector* OutputTelepoMoveLocation);
	void Em8200_SetTelepoMoveLocation(const struct FVector& InputTelepoMoveLocation, bool* Dummy);
	void Em8200_CopyActorPlayMontage(int32 Param_Index, class UAnimMontage* Montage, bool* Dummy);
	void Em8200_CopyActorUpdate(int32 Param_Index, float DeltaSec, int32* NextState, bool* bEnd);
	void Em8200_UpdateMoveAssultAttack(int32 NewParam, int32 NewParam1, int32 NewParam2);
	void Em8200_CopyActorActive(bool bActive, int32 Param_Index, bool* Dummy);
	void Em8200_GetCopyActorAssultTotalTime(int32 Param_Index, float* TotalTime);
	void Em8200_GetCopyActorActive(int32 Param_Index, bool* bActive);
	void Em8200_SetCopyActorLocation(int32 Param_Index, const struct FVector& NewLocation, bool* Dummy);
	void Em8200_SetCopyActorRotation(int32 Param_Index, const struct FRotator& NewRotation, bool* Dummy);
	void Em8200_GetTargetableCopyActor(int32 Param_Index, class ARSBattleCharacter_C** RSBattleCharacter);
	void Em8200_StoreHomingElecStartEnd(const struct FVector& StartLocation, const struct FVector& EndLocation, bool* Dummy);
	void Em8200_StartSeeThrough(bool* Dummy);
	void IsSpStart(bool* bSpStart);
	void SetSpStart(bool bSpStart, bool* Dummy);
	void Em8200_PillarIceExtendTime(float ExtendTime, bool* Dummy);
	void Em8200_SetSpShockWaveLocation(const struct FVector& Location, bool* Dummy);
	void Em8210_ApplyCommonBranch(bool* Dummy);
	void Em8000_IsAttackDriveMode(bool* bEnable);
	void Em8000_IsAttackBrainField(bool* bEnable);
	void Em8000_FireBomb(class AActor* Parent, bool bHard, bool* Dummy);
	void Em8000_SetBattleProcess(int32 Process, bool* Dummy);
	void CheckAbleInterceptInReactionChance(bool* bAbleIntercept);
	void Em8010_SetAutoAimRate(float NewRate, bool* Dummy);
	void Ch0500_StartSeeThrough(bool* Dummy);
	void Em8000_SetTriggerLocation(bool* Dummy);
	void SetStealthReactionInterval(bool* Dummy);
	void Np1100_SelectChakramCombo(class FString* ComboType);
	void Np1100_GetChakramComboList(TArray<uint8>* ChakramComboList);
	void Ch0900_CreateCopy(bool* Dummy);
	void Np1100_StartHidden(bool* Dummy);
	void Np1100_EndHidden(bool* Dummy);
	void Np1100_SetBattlePhase(int32 Phase, bool* Dummy);
	void Em8000_SetChangeEm8010Process(int32 Value, bool* Dummy);
	void Em8000_GetChangeEm8010Process(int32* Process);
	void Em8000_ExecChangeEm8010(bool* Dummy);
	void Np1100_SetThrowCount(bool bAdd, bool* Dummy);
	void ForceFinishMetamorphosis(bool bBrainFieldCancel, bool* Dummy);
	void Np1100_UseAttack_BrainTalk(bool* Return);
	void Np1100_UseSpTrigger_BrainTalk(bool* Return);
	void Em8200_UseAttackEnd_BrainTalk(bool* Return);
	void Np1100UseAfterSpAttack_BrainTalk(bool* NewParam);
	void Np1100_StartSpTriggerMove(bool* NewParam);
	void Np1100_EndSpTriggerMove(bool* NewParam);
	void Em8200_SetBattlePhase(EBattlePhase_em8210 BattlePhase, bool* Return);
	void Em8200_GetBattlePhase(EBattlePhase_em8210* BattlePhase);
	void Em8200_CanPlayExtraSasCutin(ESASCutinExtraID CutinID, bool* CanPlay);
	void Em8200_SetCanPlayExtraSasCutin(bool bCanPlay, ESASCutinExtraID CutinID, bool* Return);
	void PassedStartBrainFieldStartHp(bool* bDummy);
	void Em8200_StartDodgeMove(bool* Return);
	void Em8210_CanStartDodgeMove(bool* CanStart);
	void Em8210_EndDodgeMove(bool* Return);
	void Em8200_EnableDodgeJust(bool bEnable, bool* Return);
	void Em8200_IsEnableDodgeJust(bool* bEnable);
	void EnpcBulletAttackEnd(bool* bDummy);
	void Em8010_SetFakeUniqueName(class FName FakeName, bool* bDummy);
	void Em8000_SetFakeUniqueName(class FName FakeName, bool* bDummy);
	void Is_Unique_Enpc_Type(bool* IsUnique);
	void Em8200_AttachMask(bool* Return);
	void Em8200_SetLastPhaseHpRate(bool* Return);
	void Np1100_StartSpAfterVoice(bool* Return);
	void GetEnpcDyingHpRate(float* EnpcDyingHpRate);
	void Em8200_PlayBattleVoice(EBattleVoice_em8200 EBattleVoiceType, bool* Return);
	void Em8010_SetExecRush(bool bExec, bool* bDummy);
	void Em8200_SuicideInformOwner(bool* Return);
	void Em8000_NotifyDead(bool* bDummy);
	void Em8200_HomingElecEnd_BrainTalk(bool* Return);
	void Em8200_SetWaitEventParty(bool InWait, bool* Return);
	void Em8000_SetAction(EPlayerAIBattleThinkType AiType, bool* Dummy);
	void Em8200_UpdateDodgeJust(float DeltaSec, bool* Return);
	void Em8290_StartAppearEffect(bool InAppear, bool* Return);
	void Em8290_SetSafeDestroy(bool* Return);
	void Em8290_StartDisappear(bool* Return);
	void Ch0900_ForceCopyDead(bool* Dummy);
	void Em8200_StartDodgeJustFlash(float FlashIntervalTime, bool* Return);
	void Em8200_UpdateDodgeJustFlash(float DeltaSec, bool* Return);
	void Em8200_EndDodgeJustFlash(bool* Return);
	void Em8200_SetMaskVisibility(bool NewVisibility, bool* Return);
	void Em8200_EnableTargetableCopyActor(int32 Param_Index, bool* Return);
	void Em8200_SetEyeMaterial(bool On, bool* Return);
	void Em8000_1stAttack(bool* bDummy);
	void IsTemporaryDriveMode(bool* IsTempDrive);
	void Em8010_StartFinishMetamorphosis(bool* bDummy);
	void IsUniqueCondition_OpenBrainField(bool* bOK);
	void Em8210_EndUniqueNoDead(bool* Return);
	void Em8200_IsRegisterTelepoMoveLocation(bool* IsRegister);
	void IsUniqueCondition_Drive(bool* bOK);
	void Em8200_IsAttachMask(bool* bAttach);
	void Em8200_IsMaskVisible(bool* IsVisible);
	void Em8200_CopyActorWarmUp(bool* Return);
	void Em8200_StartSpPsychic(int32 StartPsychicType, bool Shot, bool* Return);
	void Em8200_EnableAimCopyActor(bool bEnable, bool* Return);
	void Em8200_StartAimCopyActor(float AimSpeed, float MaxAimAngle, bool InternalLock, bool ToCamera, class FName SocketName, bool* Return);
	void Em8200_TriggerSequenceAfter(bool bAfter, bool* Return);
	void StartDamageMove(const struct FVector& DamageDir, float Power, bool DeadMove, bool* Duumy);
	void Em8200_EnableIntenceVoice(bool* Return);
	void Em8000_GetShockwaveEffectArray(TArray<class URSParticleSystemComponentBase*>* EffectArray);
	void Em8000_ShockwaveEffect_Clear(bool* bDummy);
	void Em8000_ShockwaveEffect_SetElem(int32 Param_Index, class URSParticleSystemComponentBase* Particle, bool* bDummy);
	void Em8000_ShockwaveEffect_Get(int32 Param_Index, class URSParticleSystemComponentBase** Particle);
	void Em8000_ShockwaveEffect_Add(class URSParticleSystemComponentBase* Particle, int32* Param_Index);
	void Em8000_ShockwaveEffect_Deactivate(bool* bDummy);
	void Em8000_PermitBrainField(bool* bDummy);
	void Em8010_GetMetamorphosisParent(class AActor** ParentActor);
	void GetEnpcOutlineAppendMesh(TArray<class UMeshComponent*>* MeshComps);
	void OnStartSequencer(int32 IndexIn);
	void Em8290_ExecAttack(bool* bDummy);
	void Em8220_GetBattlePhase(int32* BattlePhase);
	void Em8220_SetBattlePhase(int32 BattlePhase, bool* Return);
	void Em8220_BeginDispAttackCable(int32 CableIndex, float BeginTime, bool* Return);
	void Em8220_EndDispAttackCable(int32 CableIndex, float EndTime, bool* Return);
	void Em8220_PlayAttackCableAnim(const struct FST_em8220_CableInfo& CableInfo, bool* Return);
	void Em8220_EndAttackCableAnim(int32 CableIndex, bool* Return);
	void Em8200_EndAllAttackCable(bool bForce, float EndTime, bool* Return);
	void Em8220_BeginCablePiller(bool* Return);
	void Em8220_GetCablePillerLocationList(class AActor* IgnoreActor, TArray<struct FVector>* LocationList);
	void Em8220_BeginNextCableSpike(bool* Return);
	void Em8220_BulletAttackHit(EBulletType BulletType, class AActor* HitActor, bool* Return);
	void Em8220_SetCableSpikeStartEffectTime(float StartEffectTime, bool* Return);
	void Em8220_GetCableSpikeStartEffectTime(float* StartEffectTime);
	void EnterDownEnpc(EPlayerDownType DownType, bool* Return);
	void EntryBrainCrashAccessEnpc(bool* Return);
	void Em8220_SetHighSpdLocation(const struct FVector& InLocation, bool* Return);
	void Em8220_GetHighSpdLocation(struct FVector* OutLocation);
	void Em8220_SetHighSpdDistance(float HighSpdDistance, bool* Return);
	void Em8220_GetHighSpdDistance(float* HighSpdDistance);
	void Em8220_RegisterShotData(const struct FFRegisterShotData& RegisterShotData, bool* Return);
	void Em8220_UnregisterAllShotData(bool* Return);
	void Em8220_UpdateShotData(float DeltaSec, bool* Return);
	void Em8220_ChangeAccelerator(bool bStart, bool* Return);
	void Em8220_StartSpCount(bool* Return);
	void Em8220_StartCopyActorSpTimer(class ARSCharacterBase* InActor, bool* Return);
	void Em8220_EndCopyActorSpTimer(class ARSCharacterBase* InActor, bool* Return);
	void PreStartSequencerEnpc(int32 IndexIn, bool* Return);
	void FinishedSequencerEnpc(int32 IndexIn, bool* Return);
	void PostStartSequencerEnpc(int32 IndexIn, bool* Return);
	void GetSequenceActorEnpc(class AActor** SequenceActorEnpc);
	void StartSpSequenceEnpc(bool* Return);
	void Em8220_SetVisibleSpTimer(bool bVisible, bool* Return);
	void Em8220_CalcAttackCollisionInfo(const struct FHCAttackCollisionInfo& CollisionInfo, bool* Return);
	void Em8220_StoreCollisionInfo(const struct FHCSkillCommonInfo& SkillInfo, bool* Return);
	void Em8220_RestoreCollisionInfo(bool* Return);
	void PostFinishedSequencerEnpc(int32 IndexIn, bool* Return);
	void OnSpawnStartEnpc(bool* Return);

	void GetENpcParam(class UBP_ENpc_ParamBase_C** Param) const;
	void Em8000_GetBattleType(Enum_BattleType_em8000* BattleType) const;
	void IsActiveEnpcSAS(E_SASKind Kind, bool* bActive) const;
	void Em8210_IsHomingEnd(bool* bEnd) const;
	void Em8000_GetBattleProcess(int32* CurProcess) const;
	void Em8010_GetBattleType(Enum_BattleType_em8010* BattleType) const;
	void IsNotRequirementPartner(bool* bNotRequirement) const;
	void IsIgnoreForceFinishMetamorphosis(bool* bIgnore) const;
	void Em8010_IsMetamophosis_BaseChara(bool* bIsMetamorphosis) const;
	void Em8010_IsMetamophosis_ChangeChara(bool* bIsMetamorphosis) const;
	void Em8010_IsMetamorphosis_Disappear(bool* bDisappear) const;
	void Em8010_IsMetamorphosis_Appear(bool* bAppear) const;
	void Em8010_GetParameterTableAttackScale(float* Scale) const;
	void Em8220_IsSpFieldOpen(bool* bOpen) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_ENpcInterface_C">();
	}
	static class IBPI_ENpcInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_ENpcInterface_C>();
	}
};
static_assert(alignof(IBPI_ENpcInterface_C) == 0x000008, "Wrong alignment on IBPI_ENpcInterface_C");
static_assert(sizeof(IBPI_ENpcInterface_C) == 0x000028, "Wrong size on IBPI_ENpcInterface_C");

}

