#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PostProcessOverrayVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PostProcessOverrayVolume.BP_PostProcessOverrayVolume_C
// 0x0020 (0x0258 - 0x0238)
class ABP_PostProcessOverrayVolume_C final : public ATriggerBox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          UseGradiationVolume;                               // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          UseScreenLightVolume;                              // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_70CF[0x6];                                     // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessOverraySystem_C*         OverraySystem;                                     // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InVolume;                                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PostProcessOverrayVolume(int32 EntryPoint);
	void GetSystem();
	void ReceiveBeginPlay();
	void BndEvt__CollisionComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__CollisionComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PostProcessOverrayVolume_C">();
	}
	static class ABP_PostProcessOverrayVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PostProcessOverrayVolume_C>();
	}
};
static_assert(alignof(ABP_PostProcessOverrayVolume_C) == 0x000008, "Wrong alignment on ABP_PostProcessOverrayVolume_C");
static_assert(sizeof(ABP_PostProcessOverrayVolume_C) == 0x000258, "Wrong size on ABP_PostProcessOverrayVolume_C");
static_assert(offsetof(ABP_PostProcessOverrayVolume_C, UberGraphFrame) == 0x000238, "Member 'ABP_PostProcessOverrayVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverrayVolume_C, UseGradiationVolume) == 0x000240, "Member 'ABP_PostProcessOverrayVolume_C::UseGradiationVolume' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverrayVolume_C, UseScreenLightVolume) == 0x000241, "Member 'ABP_PostProcessOverrayVolume_C::UseScreenLightVolume' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverrayVolume_C, OverraySystem) == 0x000248, "Member 'ABP_PostProcessOverrayVolume_C::OverraySystem' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverrayVolume_C, InVolume) == 0x000250, "Member 'ABP_PostProcessOverrayVolume_C::InVolume' has a wrong offset!");

}

