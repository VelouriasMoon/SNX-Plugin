#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh_CharaACT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_SplineMesh_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMesh_CharaACT.BP_SplineMesh_CharaACT_C
// 0x0040 (0x0320 - 0x02E0)
class ABP_SplineMesh_CharaACT_C : public ABP_SplineMesh_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SplineMesh_CharaACT_C;           // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_ActorLocation;                                   // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4534[0x4];                                     // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       Sphere;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitSphereRadius;                                   // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialAlpha;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharaPositionUse;                                  // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SplineMesh_CharaACT(int32 EntryPoint);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetMaterialAlpha();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMesh_CharaACT_C">();
	}
	static class ABP_SplineMesh_CharaACT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMesh_CharaACT_C>();
	}
};
static_assert(alignof(ABP_SplineMesh_CharaACT_C) == 0x000008, "Wrong alignment on ABP_SplineMesh_CharaACT_C");
static_assert(sizeof(ABP_SplineMesh_CharaACT_C) == 0x000320, "Wrong size on ABP_SplineMesh_CharaACT_C");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, UberGraphFrame_BP_SplineMesh_CharaACT_C) == 0x0002E0, "Member 'ABP_SplineMesh_CharaACT_C::UberGraphFrame_BP_SplineMesh_CharaACT_C' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, Mid) == 0x0002E8, "Member 'ABP_SplineMesh_CharaACT_C::Mid' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, Actor) == 0x0002F0, "Member 'ABP_SplineMesh_CharaACT_C::Actor' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, L_ActorLocation) == 0x0002F8, "Member 'ABP_SplineMesh_CharaACT_C::L_ActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, Sphere) == 0x000308, "Member 'ABP_SplineMesh_CharaACT_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, HitSphereRadius) == 0x000310, "Member 'ABP_SplineMesh_CharaACT_C::HitSphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, MaterialAlpha) == 0x000314, "Member 'ABP_SplineMesh_CharaACT_C::MaterialAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_CharaACT_C, CharaPositionUse) == 0x000318, "Member 'ABP_SplineMesh_CharaACT_C::CharaPositionUse' has a wrong offset!");

}

