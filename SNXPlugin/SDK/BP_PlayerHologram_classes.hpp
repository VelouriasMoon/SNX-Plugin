#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerHologram

#include "Basic.hpp"

#include "AttackCollisionInfoBP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EHologramKind_structs.hpp"
#include "ECharaExecuteNotifyKind_structs.hpp"
#include "EBonusGhostType_structs.hpp"
#include "EBulletType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerHologram.BP_PlayerHologram_C
// 0x0508 (0x0738 - 0x0230)
class ABP_PlayerHologram_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch1000;               // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0900_copy3;         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0900_copy2;         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0900_copy1;         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0900_copy0;         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0900;               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0800;               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0700;               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0600;               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0500;               // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0400;               // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0300;               // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0200;               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent_ch0100;               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GhostTrailComponent_C*              BP_GhostTrailComponent;                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AimComponent_C*                     BP_AimComponent;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0900_copy4;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0900_copy3;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0900_copy2;                                   // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0900_copy1;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch1000;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0900;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0800;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0700;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0600;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0500;                                         // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0400;                                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0300;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0200;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_ch0100;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     HologramPlayerID;                                  // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7724[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       WeaponCh0100;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               WeaponCh0200;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0300;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0500;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0600;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0700;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0800Right;                                 // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0800Left;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0900Right;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh0900Left;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       WeaponCh1000;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologramOn;                                       // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7725[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      AttachPlayer;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveStart;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveLoop;                                         // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveEnd;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveColorStart;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTime;                                         // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachPlayerVisible;                             // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7726[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CurveStart_Cover;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveLoop_Cover;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveEnd_Cover;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHologramKind                                 HologramKind;                                      // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableHologramRootMotion;                         // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7727[0x6];                                     // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0100;              // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0200;              // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0300;              // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0400;              // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0500;              // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0600;              // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0700;              // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0800;              // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh0900;              // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherOnMontageBlendingOutCh1000;              // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatcherHologramOff;                             // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class URSParticleSystemComponentBase*         WeaponParticleHandle;                              // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               Ch0900CopyWeaponList;                              // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   CopyMontageList;                                   // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         NotifyCount;                                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7728[0x4];                                     // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BulletBase_C*                       BulletCh0900;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HologramBullet_ch0500_C*            BulletCh0500;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CurveColorStart_Cover;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveColorTime;                                    // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7729[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DispatcherHitThrowWeapon;                          // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DispatchAttackNotify;                              // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HologramSASMaterial;                               // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_772A[0x7];                                     // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      SASMaterialCurve;                                  // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SASMaterialTime;                                   // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SASMaterialDefaultLineColor;                       // 0x052C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_772B[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialSwitchCache                   SASMaterialStealthSwitch;                          // 0x0540(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          SASMaterialNowStealth;                             // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_772C[0x7];                                     // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       WeaponCh0400;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             WeaponScaleTimer;                                  // 0x0560(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WeaponScaleSource;                                 // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponScaleDest;                                   // 0x0578(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalWeaponScale;                               // 0x0584(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelDelay;                                      // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_772D[0x7];                                     // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      ProxyPlayer;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NotifyCountCombinationVision;                      // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_772E[0x4];                                     // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CombinationVisionBullet_ch0500_C*> Combination_BulletCh0500;                          // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Combination_BulletCh0500Num;                       // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_772F[0x4];                                     // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAttackCollisionInfoBP>         Combination_Ch0500BulletCollisionInfo;             // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Combination_Ch0500DefaultBulletFirePitch;          // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500PitchCorrectLimitMin;            // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500RotatePitchTarget;               // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500RotatePitchSpeed;                // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LTargetCharacter;                                  // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500RotatePitchOffsetCurrent;        // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Combination_Ch0500bRotatePitchEnable;              // 0x05EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7730[0x3];                                     // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Combination_Ch0500BulletIndex;                     // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500RotateBasePitch;                 // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0500PitchCorrectLimitMax;            // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7731[0x4];                                     // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Combination_Ch0500MuzzleFlash;                     // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CombinationVisionBullet_ch0700_C*   Combination_BulletCh0700;                          // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttackCollisionInfoBP                 Combination_Ch0700BulletCollisionInfo;             // 0x0610(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Combination_Ch0700DefaultBulletFirePitch;          // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0700PitchCorrectLimitMin;            // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Combination_Ch0700PitchCorrectLimitMax;            // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7732[0x4];                                     // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CombinationVisionBullet_ch0900_C*> CombinationVisionBulletCh0900;                     // 0x06E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Combination_Ch0500FireCount;                       // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HologramAttack_Ch0100HeightMin;                    // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LDelayMesh;                                        // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 HologramCostumeID;                                 // 0x0700(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 HologramWeaponID;                                  // 0x0710(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 PhotoModeDitherMeshList;                           // 0x0720(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         BackupPhotoModeLod;                                // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DispatcherOnMontageBlendingOutCh0100__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0200__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0300__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0400__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0500__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0600__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0700__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0800__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh0900__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherOnMontageBlendingOutCh1000__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void DispatcherHologramOff__DelegateSignature();
	void DispatcherHitThrowWeapon__DelegateSignature(const struct FVector& HitLocation);
	void DispatchAttackNotify__DelegateSignature(int32 Param);
	void ExecuteUbergraph_BP_PlayerHologram(int32 EntryPoint);
	void OnMainMenuClose();
	void UnbindMoveRootMotion();
	void BindMoveRootMotion();
	void DelayMeshTickDisable(class USkeletalMeshComponent* Mesh);
	void OnGhostOneShot(float AliveTime);
	void OnMontageBlendingOutCh1000(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0900(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0800(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0700(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0600(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0500(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0400(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0300(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0200(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutCh0100(class UAnimMontage* Montage, bool bInterrupted);
	void BindOnMontageBlendingOut();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void OnBonusGhostOneShot(float AliveTime);
	void OnBonusGhostFromDT(EBonusGhostType Type);
	void OnBonusGhost(float Time);
	void SetGhostActive(bool Active);
	void HologramOn();
	void HologramOff(bool bForceOff);
	void PlayAnimation(EPlayerID InPlayerID, class UAnimMontage* AnimMontage, class UAnimMontage* WeaponMontage, bool bHologramRootMotion, int32 MotionIndex, EHologramKind Param_HologramKind);
	void StopAnimation();
	void GetMesh(EPlayerID PlayerId, class USkeletalMeshComponent** Mesh);
	void CreateWeapon(EPlayerID PlayerId, int32 WeaponId);
	void DestroyWeapon(EPlayerID PlayerId);
	void Initialize();
	void SetMeshVisibility(EPlayerID PlayerId, bool bVisibility);
	void TickHologramOn(float DeltaSeconds);
	void TickHologramOff(float DeltaSeconds);
	void CompleteHologramOff();
	void SetHologramMaterial(float NoiseRate, float VisibleRate, float EmissiveRate);
	void SetAttachPlayerMaterial(float VisibleRate);
	void PlayAnimationSequence(EPlayerID InPlayerID, EPlayerHologramAnimKind InAnimKind);
	void PlayAnimationCommon(EPlayerID InPlayerID, EHologramKind Param_HologramKind);
	void UpdateHologram(float DeltaSeconds);
	void IsUseHologram(bool* bUse);
	void NotifyHologramAttackCh0800();
	void CopyOn(int32 Param_Index);
	void CopyOff(int32 Param_Index);
	void GetCopyMesh(TArray<class USkeletalMeshComponent*>* CopyMeshList);
	void InitializeCopy();
	void NotifyBeginCh0900(int32 Param);
	void NotifyEndCh0900(int32 Param);
	void SetAimRotator(const struct FRotator& Rotate);
	void GetSocketLocation(class FName SocketName, struct FVector* Location);
	void NotifyBeginCh0500(int32 Param);
	void NotifyEndCh0500();
	void SetHologramVisibility(bool bVisibility);
	void OnHitThrowWeapon(const struct FVector& HitLocation);
	void InitializeHologramMaterial(EPlayerID PlayerId);
	void InitializeHologramMaterialMesh(class USkeletalMeshComponent* SkelMeshComp, bool Weapon);
	void NotifyHologramAttackCh0100();
	void SetHologramMaterialMeshInternal(class UMeshComponent* MeshComp, float NoiseRate, float VisibleRate, float EmissiveRate);
	void NotifyHologramAttackCh0700();
	void DebugUpdate();
	void AddScar(class FName SocketName, float RotateAngle);
	void NotifyHologramAttackCh1000();
	void TickHologramSASMaterial(float DeltaSeconds);
	void StartHologramSASMaterial(class UCurveLinearColor* Curve);
	void GetHologramSASMaterialMeshes(E_SASKindNative* SasKind, TArray<class USkeletalMeshComponent*>* CharacterMeshes, TArray<class USkeletalMeshComponent*>* WeaponMeshes, TArray<class UMeshComponent*>* AttachmentMeshes);
	void ResetHologramSASMaterial();
	void NotifyHologramAttackCh0600(int32 Param);
	void ChangeWeaponScale(const struct FVector& InScale, float InTime);
	void ResetWeaponScale(float InTime);
	void UpdateWeaponScale(float DeltaSeconds);
	void SetWeaponScale(const struct FVector& InScale);
	void NotifyCombinationAttackCh0500(int32 InParam);
	void CombinationCh0500OnBeforeFirstPlayAnimation();
	void CombinationCh0500OnCompleteHologramOff();
	void CombinationBulletFireCh0500();
	void NotifyCombinationAttackCh0200();
	void CombinationCh0500RotatePitchStart();
	void CombinationCh0500RotatePitchEnd();
	void CombinationCh0500RotatePitchUpdate();
	void CombinationCh0500CalcTargetPitch(float* TargetPitch, bool* bExistsTarget);
	void CombinationCh0500ApplyRotateTragetPitchOffset();
	void NotifyCombinationAttackCh0700(int32 Param);
	void CombinationBulletFireCh0700();
	void CombinationCh0700CalcTargetPitch(float* TargetPitch, bool* bExistsTarget);
	void NotifyCombinationVisionBeginCH0900();
	void NotifyCombinationVisionEndCh0900();
	void EndAttackBullet(EPlayerID PlayerId);
	void NotifyCombinationVisionCh0900(int32 Param);
	void CombinationVisionCh0900_BulletFire(class UMeshComponent* InMesh, bool bInCopy);
	void OnBeforeFirstPlayAnimation(bool bIsCombinationVision);
	void OnMoveRootMotion(float DeltaSeconds);
	void GetHologramPlayerID(EPlayerID* Param_HologramPlayerID);
	void Equip_Costume(EPlayerID PlayerId, int32 CostumeId, bool bFirst, bool* ChangeCostume);
	void ChangeEquip();
	void EquipWeapon(EPlayerID PlayerId, int32 WeaponId, bool* ChangeWeapon);
	void SetupWeaponHologramMaterial(class ABP_WeaponBase_C* WeaponBase);
	void EquipAttachment();
	void GetAttachmentManageComponent(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class UBP_AttachmentManageComponent_C** Manager);
	void HologramOnInitMaterial();
	void AnimNotifyHologramAttack(int32 Param, bool* bDummy);
	void AnimNotifyHologramAttackBegin(int32 Param, bool* bDummy);
	void AnimNotifyHologramAttackEnd(int32 Param, bool* bDummy);
	void HologramWeaponEmissive(float Emissive, EPlayerID PlayerId, bool* bDummy);
	void HologramAttackScar(class FName HightTargetSocket, float Angle, bool* bDummy);
	void AnimNotifyCombinationAttack(int32 Param, bool* bDummy);
	void AnimNotifyCombinationAttackBegin(int32 Param, bool* bDummy);
	void AnimNotifyCombinationAttackEnd(int32 Param, bool* bDummy);
	void EndAim(bool* bDummy);
	void StartAim(float LimitAngle, bool* bDummy);
	bool SetFlyingInterface(const class FName& Param_ClaimantName);
	bool ClearFlyingInterface(const class FName& Param_ClaimantName);
	bool ClearFlyingForceInterface();
	void GetProxyMesh(class UMeshComponent** Mesh);
	void GetProxyRequestedPlayer(class ARSBattlePlayer_C** Player);
	EFHitEffectPriority GetHitEffectPriorityInterface();
	void CheckExecuteAnimNotifyCharacterKind(ECharaExecuteNotifyKind Kind, bool* bExecute);
	void AttachmentVisibilityOffOnHead(bool bOff, bool* bDummy);
	void DestroyAttachmentMeshComponent(class USceneComponent* DestroyMeshComponent, bool* bDummy);
	void EquipAttachmentInterface(EPlayerAttachment Param_Index, int32 AttachmentItemID, EPlayerID EquipPlayerID, int32 EquipMeshIndex, bool* bDummy);
	void GetAttachedCharacterMesh(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class USkeletalMeshComponent** Mesh);
	void AttachmentVisibilityOffOnBackBody(bool bVisibility, float FadeTime, bool* bDummy);
	bool SetPhotoModeDither(float Value);
	bool EndPhotoMode();
	bool BeginPhotoMode();
	class USkeletalMeshComponent* GetPhotoModeSkeletalMesh();
	class FName GetPhotoModeDitherDataName();
	bool IsPhotoModeManualOverlap();
	class UCapsuleComponent* GetPhotoModeManualOverlapCapsule();
	bool PhotoModeTick();

	void IsPlayAnimation(bool* bPlay) const;
	void GetWeaponClass(EPlayerID PlayerId, class UClass** WeaponClass) const;
	void GetWeapon(EPlayerID PlayerId, TArray<class ABP_WeaponBase_C*>* Weapon) const;
	void GetCurveStart(class UCurveVector** Curve) const;
	void GetCurveLoop(class UCurveVector** Curve) const;
	void GetCurveEnd(class UCurveVector** Curve) const;
	void GetCurveColorStart(class UCurveVector** Curve) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerHologram_C">();
	}
	static class ABP_PlayerHologram_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerHologram_C>();
	}
};
static_assert(alignof(ABP_PlayerHologram_C) == 0x000008, "Wrong alignment on ABP_PlayerHologram_C");
static_assert(sizeof(ABP_PlayerHologram_C) == 0x000738, "Wrong size on ABP_PlayerHologram_C");
static_assert(offsetof(ABP_PlayerHologram_C, UberGraphFrame) == 0x000230, "Member 'ABP_PlayerHologram_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch1000) == 0x000238, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch1000' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0900_copy3) == 0x000240, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0900_copy3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0900_copy2) == 0x000248, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0900_copy2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0900_copy1) == 0x000250, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0900_copy1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0900_copy0) == 0x000258, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0900_copy0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0900) == 0x000260, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0900' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0800) == 0x000268, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0800' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0700) == 0x000270, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0700' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0600) == 0x000278, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0600' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0500) == 0x000280, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0400) == 0x000288, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0400' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0300) == 0x000290, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0300' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0200) == 0x000298, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0200' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AttachmentManageComponent_ch0100) == 0x0002A0, "Member 'ABP_PlayerHologram_C::BP_AttachmentManageComponent_ch0100' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_GhostTrailComponent) == 0x0002A8, "Member 'ABP_PlayerHologram_C::BP_GhostTrailComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BP_AimComponent) == 0x0002B0, "Member 'ABP_PlayerHologram_C::BP_AimComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0900_copy4) == 0x0002B8, "Member 'ABP_PlayerHologram_C::SM_ch0900_copy4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0900_copy3) == 0x0002C0, "Member 'ABP_PlayerHologram_C::SM_ch0900_copy3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0900_copy2) == 0x0002C8, "Member 'ABP_PlayerHologram_C::SM_ch0900_copy2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0900_copy1) == 0x0002D0, "Member 'ABP_PlayerHologram_C::SM_ch0900_copy1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch1000) == 0x0002D8, "Member 'ABP_PlayerHologram_C::SM_ch1000' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0900) == 0x0002E0, "Member 'ABP_PlayerHologram_C::SM_ch0900' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0800) == 0x0002E8, "Member 'ABP_PlayerHologram_C::SM_ch0800' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0700) == 0x0002F0, "Member 'ABP_PlayerHologram_C::SM_ch0700' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0600) == 0x0002F8, "Member 'ABP_PlayerHologram_C::SM_ch0600' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0500) == 0x000300, "Member 'ABP_PlayerHologram_C::SM_ch0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0400) == 0x000308, "Member 'ABP_PlayerHologram_C::SM_ch0400' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0300) == 0x000310, "Member 'ABP_PlayerHologram_C::SM_ch0300' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0200) == 0x000318, "Member 'ABP_PlayerHologram_C::SM_ch0200' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SM_ch0100) == 0x000320, "Member 'ABP_PlayerHologram_C::SM_ch0100' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_PlayerHologram_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramPlayerID) == 0x000330, "Member 'ABP_PlayerHologram_C::HologramPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0100) == 0x000338, "Member 'ABP_PlayerHologram_C::WeaponCh0100' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0200) == 0x000340, "Member 'ABP_PlayerHologram_C::WeaponCh0200' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0300) == 0x000350, "Member 'ABP_PlayerHologram_C::WeaponCh0300' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0500) == 0x000358, "Member 'ABP_PlayerHologram_C::WeaponCh0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0600) == 0x000360, "Member 'ABP_PlayerHologram_C::WeaponCh0600' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0700) == 0x000368, "Member 'ABP_PlayerHologram_C::WeaponCh0700' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0800Right) == 0x000370, "Member 'ABP_PlayerHologram_C::WeaponCh0800Right' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0800Left) == 0x000378, "Member 'ABP_PlayerHologram_C::WeaponCh0800Left' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0900Right) == 0x000380, "Member 'ABP_PlayerHologram_C::WeaponCh0900Right' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0900Left) == 0x000388, "Member 'ABP_PlayerHologram_C::WeaponCh0900Left' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh1000) == 0x000390, "Member 'ABP_PlayerHologram_C::WeaponCh1000' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, bHologramOn) == 0x000398, "Member 'ABP_PlayerHologram_C::bHologramOn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, AttachPlayer) == 0x0003A0, "Member 'ABP_PlayerHologram_C::AttachPlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveStart) == 0x0003A8, "Member 'ABP_PlayerHologram_C::CurveStart' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveLoop) == 0x0003B0, "Member 'ABP_PlayerHologram_C::CurveLoop' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveEnd) == 0x0003B8, "Member 'ABP_PlayerHologram_C::CurveEnd' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveColorStart) == 0x0003C0, "Member 'ABP_PlayerHologram_C::CurveColorStart' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveTime) == 0x0003C8, "Member 'ABP_PlayerHologram_C::CurveTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, IsAttachPlayerVisible) == 0x0003CC, "Member 'ABP_PlayerHologram_C::IsAttachPlayerVisible' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveStart_Cover) == 0x0003D0, "Member 'ABP_PlayerHologram_C::CurveStart_Cover' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveLoop_Cover) == 0x0003D8, "Member 'ABP_PlayerHologram_C::CurveLoop_Cover' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveEnd_Cover) == 0x0003E0, "Member 'ABP_PlayerHologram_C::CurveEnd_Cover' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramKind) == 0x0003E8, "Member 'ABP_PlayerHologram_C::HologramKind' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, bEnableHologramRootMotion) == 0x0003E9, "Member 'ABP_PlayerHologram_C::bEnableHologramRootMotion' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0100) == 0x0003F0, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0100' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0200) == 0x000400, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0200' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0300) == 0x000410, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0300' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0400) == 0x000420, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0400' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0500) == 0x000430, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0600) == 0x000440, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0600' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0700) == 0x000450, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0700' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0800) == 0x000460, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0800' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh0900) == 0x000470, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh0900' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherOnMontageBlendingOutCh1000) == 0x000480, "Member 'ABP_PlayerHologram_C::DispatcherOnMontageBlendingOutCh1000' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherHologramOff) == 0x000490, "Member 'ABP_PlayerHologram_C::DispatcherHologramOff' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponParticleHandle) == 0x0004A0, "Member 'ABP_PlayerHologram_C::WeaponParticleHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Ch0900CopyWeaponList) == 0x0004A8, "Member 'ABP_PlayerHologram_C::Ch0900CopyWeaponList' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CopyMontageList) == 0x0004B8, "Member 'ABP_PlayerHologram_C::CopyMontageList' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, NotifyCount) == 0x0004C8, "Member 'ABP_PlayerHologram_C::NotifyCount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BulletCh0900) == 0x0004D0, "Member 'ABP_PlayerHologram_C::BulletCh0900' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BulletCh0500) == 0x0004D8, "Member 'ABP_PlayerHologram_C::BulletCh0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, ClaimantName) == 0x0004E0, "Member 'ABP_PlayerHologram_C::ClaimantName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveColorStart_Cover) == 0x0004E8, "Member 'ABP_PlayerHologram_C::CurveColorStart_Cover' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CurveColorTime) == 0x0004F0, "Member 'ABP_PlayerHologram_C::CurveColorTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatcherHitThrowWeapon) == 0x0004F8, "Member 'ABP_PlayerHologram_C::DispatcherHitThrowWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, DispatchAttackNotify) == 0x000508, "Member 'ABP_PlayerHologram_C::DispatchAttackNotify' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramSASMaterial) == 0x000518, "Member 'ABP_PlayerHologram_C::HologramSASMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SASMaterialCurve) == 0x000520, "Member 'ABP_PlayerHologram_C::SASMaterialCurve' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SASMaterialTime) == 0x000528, "Member 'ABP_PlayerHologram_C::SASMaterialTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SASMaterialDefaultLineColor) == 0x00052C, "Member 'ABP_PlayerHologram_C::SASMaterialDefaultLineColor' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SASMaterialStealthSwitch) == 0x000540, "Member 'ABP_PlayerHologram_C::SASMaterialStealthSwitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, SASMaterialNowStealth) == 0x000550, "Member 'ABP_PlayerHologram_C::SASMaterialNowStealth' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponCh0400) == 0x000558, "Member 'ABP_PlayerHologram_C::WeaponCh0400' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponScaleTimer) == 0x000560, "Member 'ABP_PlayerHologram_C::WeaponScaleTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponScaleSource) == 0x00056C, "Member 'ABP_PlayerHologram_C::WeaponScaleSource' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, WeaponScaleDest) == 0x000578, "Member 'ABP_PlayerHologram_C::WeaponScaleDest' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, OriginalWeaponScale) == 0x000584, "Member 'ABP_PlayerHologram_C::OriginalWeaponScale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, bCancelDelay) == 0x000590, "Member 'ABP_PlayerHologram_C::bCancelDelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, ProxyPlayer) == 0x000598, "Member 'ABP_PlayerHologram_C::ProxyPlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, NotifyCountCombinationVision) == 0x0005A0, "Member 'ABP_PlayerHologram_C::NotifyCountCombinationVision' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_BulletCh0500) == 0x0005A8, "Member 'ABP_PlayerHologram_C::Combination_BulletCh0500' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_BulletCh0500Num) == 0x0005B8, "Member 'ABP_PlayerHologram_C::Combination_BulletCh0500Num' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500BulletCollisionInfo) == 0x0005C0, "Member 'ABP_PlayerHologram_C::Combination_Ch0500BulletCollisionInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500DefaultBulletFirePitch) == 0x0005D0, "Member 'ABP_PlayerHologram_C::Combination_Ch0500DefaultBulletFirePitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500PitchCorrectLimitMin) == 0x0005D4, "Member 'ABP_PlayerHologram_C::Combination_Ch0500PitchCorrectLimitMin' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500RotatePitchTarget) == 0x0005D8, "Member 'ABP_PlayerHologram_C::Combination_Ch0500RotatePitchTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500RotatePitchSpeed) == 0x0005DC, "Member 'ABP_PlayerHologram_C::Combination_Ch0500RotatePitchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, LTargetCharacter) == 0x0005E0, "Member 'ABP_PlayerHologram_C::LTargetCharacter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500RotatePitchOffsetCurrent) == 0x0005E8, "Member 'ABP_PlayerHologram_C::Combination_Ch0500RotatePitchOffsetCurrent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500bRotatePitchEnable) == 0x0005EC, "Member 'ABP_PlayerHologram_C::Combination_Ch0500bRotatePitchEnable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500BulletIndex) == 0x0005F0, "Member 'ABP_PlayerHologram_C::Combination_Ch0500BulletIndex' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500RotateBasePitch) == 0x0005F4, "Member 'ABP_PlayerHologram_C::Combination_Ch0500RotateBasePitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500PitchCorrectLimitMax) == 0x0005F8, "Member 'ABP_PlayerHologram_C::Combination_Ch0500PitchCorrectLimitMax' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500MuzzleFlash) == 0x000600, "Member 'ABP_PlayerHologram_C::Combination_Ch0500MuzzleFlash' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_BulletCh0700) == 0x000608, "Member 'ABP_PlayerHologram_C::Combination_BulletCh0700' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0700BulletCollisionInfo) == 0x000610, "Member 'ABP_PlayerHologram_C::Combination_Ch0700BulletCollisionInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0700DefaultBulletFirePitch) == 0x0006D0, "Member 'ABP_PlayerHologram_C::Combination_Ch0700DefaultBulletFirePitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0700PitchCorrectLimitMin) == 0x0006D4, "Member 'ABP_PlayerHologram_C::Combination_Ch0700PitchCorrectLimitMin' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0700PitchCorrectLimitMax) == 0x0006D8, "Member 'ABP_PlayerHologram_C::Combination_Ch0700PitchCorrectLimitMax' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, CombinationVisionBulletCh0900) == 0x0006E0, "Member 'ABP_PlayerHologram_C::CombinationVisionBulletCh0900' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, Combination_Ch0500FireCount) == 0x0006F0, "Member 'ABP_PlayerHologram_C::Combination_Ch0500FireCount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramAttack_Ch0100HeightMin) == 0x0006F4, "Member 'ABP_PlayerHologram_C::HologramAttack_Ch0100HeightMin' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, LDelayMesh) == 0x0006F8, "Member 'ABP_PlayerHologram_C::LDelayMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramCostumeID) == 0x000700, "Member 'ABP_PlayerHologram_C::HologramCostumeID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, HologramWeaponID) == 0x000710, "Member 'ABP_PlayerHologram_C::HologramWeaponID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, PhotoModeDitherMeshList) == 0x000720, "Member 'ABP_PlayerHologram_C::PhotoModeDitherMeshList' has a wrong offset!");
static_assert(offsetof(ABP_PlayerHologram_C, BackupPhotoModeLod) == 0x000730, "Member 'ABP_PlayerHologram_C::BackupPhotoModeLod' has a wrong offset!");

}

