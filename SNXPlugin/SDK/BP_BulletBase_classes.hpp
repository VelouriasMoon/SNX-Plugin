#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EBulletParticleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BulletBase.BP_BulletBase_C
// 0x0398 (0x05C8 - 0x0230)
#pragma pack(push, 0x1)
class alignas(0x08) ABP_BulletBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHitCheckReceiverComponent*             HitCheckReceiver;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      AttackCollision;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BulletSpeedPerSecond;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRange;                                          // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitRadius;                                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrate;                                        // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5C[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PenetrateCount;                                    // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C5D[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttackOwner;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBulletParticleType                           ParticleType;                                      // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C5E[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirePoint;                                         // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackDir;                                         // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentPoint;                                      // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleHandle;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRegisterCollision;                                // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bConfusion;                                        // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETeamKind                                     OwnerTeam;                                         // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttackEnd;                                        // 0x02AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         HitCount;                                          // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttack;                                           // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5F[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCAttackCollisionInfo                 CollisionInfo;                                     // 0x02B8(0x0280)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RemainingDistance;                                 // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C60[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactParticle;                                    // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDir;                                            // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableImpactParticle;                            // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C61[0x2];                                     // 0x054A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactLandNormal;                                  // 0x054C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FireRotation;                                      // 0x0558(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TotalDeltaSeconds;                                 // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticlStartPoint;                                 // 0x0568(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrateFrameOnce;                               // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateEnemy;                                   // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C62[0x2];                                     // 0x0576(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempSpeed;                                         // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExecParallelMove;                                 // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C63[0x3];                                     // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndPoint;                                          // 0x0580(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bImpactLand;                                       // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C64[0x3];                                     // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParticleOffset;                                    // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C65[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AttackHitActorList;                                // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPenetrateObj;                                     // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIntercept;                                        // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIgnorePenetrateInvinvible;                        // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESequencerDilationOwner                       DilationOwner;                                     // 0x05AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotRegisterCollision;                             // 0x05AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C66[0x3];                                     // 0x05AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDelayTime;                                   // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AttackDelayTimer;                                  // 0x05B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HitCapsuleHalfHeight;                              // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BulletBase(int32 EntryPoint);
	void BndEvt__HitCheckReceiver_K2Node_ComponentBoundEvent_0_HitResultDelegate__DelegateSignature(const struct FHCHitResult& Result);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ParallelTick(float DeltaTime);
	void PostParallelTick();
	void PreParallelTick();
	void Fire(class AActor* Param_AttackOwner, const struct FVector& Param_FirePoint, const struct FVector& Dir, struct FAttackCollisionInfoBP& Param_CollisionInfo, bool Param_bDisableImpactParticle, bool* bSuccess);
	void OnAttackEnd(bool* bDummy);
	void OnUpdate(float DeltaSeconds, bool* bDummy);
	void AttackEnd();
	void SetBulletVisibility(bool On, bool* Dunnmy);
	void OnMoveUpdate(float DeltaSeconds, struct FVector* ResultLocation, bool* bEnd, bool* Param_bImpactLand);
	struct FVector MoveUpdate(float DeltaSeconds);
	void PostMove();
	void PrevCheckOnAttackActorHit(const struct FHCHitResult& HitResult, bool* bOK);
	void OnAttackActorHit(struct FHCHitResult& HitResult, bool* bDummy);
	void UpdateDilation();
	void SetAttackDelayTime(float AttackCollisionDelayTime);
	void ForceEnd(bool* Return);
	bool IsEnableParallelTick();
	ERSParallelTiming GetParallelTiming();
	void InterceptAttack(class ARSBattleCharacter_C* Intercepter, class ARSBattleCharacter_C* NewTarget, bool* bDummy);
	void InterceptReserve(bool* bDummy);
	void InterceptCancel(bool* bDummy);
	void IsInterceptFail(bool* bFail);

	void IsAttack(bool* Param_bAttack) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BulletBase_C">();
	}
	static class ABP_BulletBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BulletBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_BulletBase_C) == 0x000008, "Wrong alignment on ABP_BulletBase_C");
static_assert(sizeof(ABP_BulletBase_C) == 0x0005C8, "Wrong size on ABP_BulletBase_C");
static_assert(offsetof(ABP_BulletBase_C, UberGraphFrame) == 0x000230, "Member 'ABP_BulletBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, HitCheckReceiver) == 0x000238, "Member 'ABP_BulletBase_C::HitCheckReceiver' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackCollision) == 0x000240, "Member 'ABP_BulletBase_C::AttackCollision' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_BulletBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, BulletSpeedPerSecond) == 0x000250, "Member 'ABP_BulletBase_C::BulletSpeedPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, MaxRange) == 0x000254, "Member 'ABP_BulletBase_C::MaxRange' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, HitRadius) == 0x000258, "Member 'ABP_BulletBase_C::HitRadius' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bPenetrate) == 0x00025C, "Member 'ABP_BulletBase_C::bPenetrate' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, PenetrateCount) == 0x000260, "Member 'ABP_BulletBase_C::PenetrateCount' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackOwner) == 0x000268, "Member 'ABP_BulletBase_C::AttackOwner' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, Particle) == 0x000270, "Member 'ABP_BulletBase_C::Particle' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ParticleType) == 0x000278, "Member 'ABP_BulletBase_C::ParticleType' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, FirePoint) == 0x00027C, "Member 'ABP_BulletBase_C::FirePoint' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackDir) == 0x000288, "Member 'ABP_BulletBase_C::AttackDir' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, CurrentPoint) == 0x000294, "Member 'ABP_BulletBase_C::CurrentPoint' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ParticleHandle) == 0x0002A0, "Member 'ABP_BulletBase_C::ParticleHandle' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bRegisterCollision) == 0x0002A8, "Member 'ABP_BulletBase_C::bRegisterCollision' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bConfusion) == 0x0002A9, "Member 'ABP_BulletBase_C::bConfusion' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, OwnerTeam) == 0x0002AA, "Member 'ABP_BulletBase_C::OwnerTeam' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bAttackEnd) == 0x0002AB, "Member 'ABP_BulletBase_C::bAttackEnd' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, HitCount) == 0x0002AC, "Member 'ABP_BulletBase_C::HitCount' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bAttack) == 0x0002B0, "Member 'ABP_BulletBase_C::bAttack' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, CollisionInfo) == 0x0002B8, "Member 'ABP_BulletBase_C::CollisionInfo' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, RemainingDistance) == 0x000538, "Member 'ABP_BulletBase_C::RemainingDistance' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ImpactParticle) == 0x000540, "Member 'ABP_BulletBase_C::ImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bNoDir) == 0x000548, "Member 'ABP_BulletBase_C::bNoDir' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bDisableImpactParticle) == 0x000549, "Member 'ABP_BulletBase_C::bDisableImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ImpactLandNormal) == 0x00054C, "Member 'ABP_BulletBase_C::ImpactLandNormal' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, FireRotation) == 0x000558, "Member 'ABP_BulletBase_C::FireRotation' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, TotalDeltaSeconds) == 0x000564, "Member 'ABP_BulletBase_C::TotalDeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ParticlStartPoint) == 0x000568, "Member 'ABP_BulletBase_C::ParticlStartPoint' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bPenetrateFrameOnce) == 0x000574, "Member 'ABP_BulletBase_C::bPenetrateFrameOnce' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bPenetrateEnemy) == 0x000575, "Member 'ABP_BulletBase_C::bPenetrateEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, TempSpeed) == 0x000578, "Member 'ABP_BulletBase_C::TempSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bExecParallelMove) == 0x00057C, "Member 'ABP_BulletBase_C::bExecParallelMove' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, EndPoint) == 0x000580, "Member 'ABP_BulletBase_C::EndPoint' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bImpactLand) == 0x00058C, "Member 'ABP_BulletBase_C::bImpactLand' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, ParticleOffset) == 0x000590, "Member 'ABP_BulletBase_C::ParticleOffset' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackHitActorList) == 0x000598, "Member 'ABP_BulletBase_C::AttackHitActorList' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bPenetrateObj) == 0x0005A8, "Member 'ABP_BulletBase_C::bPenetrateObj' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bIntercept) == 0x0005A9, "Member 'ABP_BulletBase_C::bIntercept' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bIgnorePenetrateInvinvible) == 0x0005AA, "Member 'ABP_BulletBase_C::bIgnorePenetrateInvinvible' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, DilationOwner) == 0x0005AB, "Member 'ABP_BulletBase_C::DilationOwner' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, bNotRegisterCollision) == 0x0005AC, "Member 'ABP_BulletBase_C::bNotRegisterCollision' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackDelayTime) == 0x0005B0, "Member 'ABP_BulletBase_C::AttackDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, AttackDelayTimer) == 0x0005B4, "Member 'ABP_BulletBase_C::AttackDelayTimer' has a wrong offset!");
static_assert(offsetof(ABP_BulletBase_C, HitCapsuleHalfHeight) == 0x0005C0, "Member 'ABP_BulletBase_C::HitCapsuleHalfHeight' has a wrong offset!");

}

