#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CaptureBG

#include "Basic.hpp"

#include "BP_CaptureBG_classes.hpp"
#include "BP_CaptureBG_parameters.hpp"


namespace SDK
{

// Function BP_CaptureBG.BP_CaptureBG_C.ExecuteUbergraph_BP_CaptureBG
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::ExecuteUbergraph_BP_CaptureBG(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "ExecuteUbergraph_BP_CaptureBG");

	Params::BP_CaptureBG_C_ExecuteUbergraph_BP_CaptureBG Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "ReceiveEndPlay");

	Params::BP_CaptureBG_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.StopWaitSequencerNoCapture
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::StopWaitSequencerNoCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "StopWaitSequencerNoCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.CaptureSceneBGForLevelSequencer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   InSequence                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewPlaybackPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::CaptureSceneBGForLevelSequencer(class ULevelSequence* InSequence, float NewPlaybackPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "CaptureSceneBGForLevelSequencer");

	Params::BP_CaptureBG_C_CaptureSceneBGForLevelSequencer Parms{};

	Parms.InSequence = InSequence;
	Parms.NewPlaybackPosition = NewPlaybackPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.StopWaitSequencer
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::StopWaitSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "StopWaitSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.PrivateCapturePost
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::PrivateCapturePost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "PrivateCapturePost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.StartBGAlphaCurve
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::StartBGAlphaCurve(class UCurveFloat* Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "StartBGAlphaCurve");

	Params::BP_CaptureBG_C_StartBGAlphaCurve Parms{};

	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "ReceiveTick");

	Params::BP_CaptureBG_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CaptureBG_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_EventEffectStart
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_EventEffectStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_EventEffectStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_EventEffectEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_EventEffectEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_EventEffectEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_TickBlockNoise
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta_Seconds                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::Private_TickBlockNoise(float Delta_Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_TickBlockNoise");

	Params::BP_CaptureBG_C_Private_TickBlockNoise Parms{};

	Parms.Delta_Seconds = Delta_Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_EndBlockNoise
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_EndBlockNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_EndBlockNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_StartBlockNoise
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_StartBlockNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_StartBlockNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_StopEffectCycle
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_StopEffectCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_StopEffectCycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.Private_StartEffectCycle
// (BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::Private_StartEffectCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "Private_StartEffectCycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.AlphaTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_CaptureBG_C::AlphaTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "AlphaTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.AlphaTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_CaptureBG_C::AlphaTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "AlphaTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.CycleEffectTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_CaptureBG_C::CycleEffectTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "CycleEffectTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.CycleEffectTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_CaptureBG_C::CycleEffectTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "CycleEffectTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.CaptureBG
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::CaptureBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "CaptureBG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.PlayBoardBGAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           boardAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAddMotion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::PlayBoardBGAnimation(const class FString& boardAnimationName, bool IsLoop, bool IsAddMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "PlayBoardBGAnimation");

	Params::BP_CaptureBG_C_PlayBoardBGAnimation Parms{};

	Parms.boardAnimationName = std::move(boardAnimationName);
	Parms.IsLoop = IsLoop;
	Parms.IsAddMotion = IsAddMotion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.GetAnimSequenceForAnimNamePath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Path                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimationAsset* ABP_CaptureBG_C::GetAnimSequenceForAnimNamePath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "GetAnimSequenceForAnimNamePath");

	Params::BP_CaptureBG_C_GetAnimSequenceForAnimNamePath Parms{};

	Parms.Path = std::move(Path);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CaptureBG.BP_CaptureBG_C.AddBordBGAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           boardAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::AddBordBGAnimation(const class FString& boardAnimationName, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "AddBordBGAnimation");

	Params::BP_CaptureBG_C_AddBordBGAnimation Parms{};

	Parms.boardAnimationName = std::move(boardAnimationName);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.IsEndMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsEndMotion                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::IsEndMotion(bool* Param_IsEndMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "IsEndMotion");

	Params::BP_CaptureBG_C_IsEndMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsEndMotion != nullptr)
		*Param_IsEndMotion = Parms.Param_IsEndMotion;
}


// Function BP_CaptureBG.BP_CaptureBG_C.StartEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::StartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "StartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EndEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::EndEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EndEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.UpdateBlockNoise
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::UpdateBlockNoise(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "UpdateBlockNoise");

	Params::BP_CaptureBG_C_UpdateBlockNoise Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.InitBlockNoise
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::InitBlockNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "InitBlockNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.UpdateBlockNoiseOne
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::UpdateBlockNoiseOne(float DeltaSeconds, float& Time, float& MaxTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "UpdateBlockNoiseOne");

	Params::BP_CaptureBG_C_UpdateBlockNoiseOne Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Time = Time;
	Parms.MaxTime = MaxTime;

	UObject::ProcessEvent(Func, &Parms);

	Time = Parms.Time;
	MaxTime = Parms.MaxTime;
}


// Function BP_CaptureBG.BP_CaptureBG_C.SetupEventEffect
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::SetupEventEffect(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "SetupEventEffect");

	Params::BP_CaptureBG_C_SetupEventEffect Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EffectFringe
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::EffectFringe(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EffectFringe");

	Params::BP_CaptureBG_C_EffectFringe Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EffectGlitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::EffectGlitch(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EffectGlitch");

	Params::BP_CaptureBG_C_EffectGlitch Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::EffectNoise(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EffectNoise");

	Params::BP_CaptureBG_C_EffectNoise Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EffectScanline
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::EffectScanline(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EffectScanline");

	Params::BP_CaptureBG_C_EffectScanline Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.DebugEffectFringe
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::DebugEffectFringe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "DebugEffectFringe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.DebugEffectGlitch
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::DebugEffectGlitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "DebugEffectGlitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.DebugEffectNoise
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::DebugEffectNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "DebugEffectNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.DebugEffectScanline
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::DebugEffectScanline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "DebugEffectScanline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.EventEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::EventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "EventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.LoadAsset
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CaptureBG.BP_CaptureBG_C.SetTicks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CaptureBG_C::SetTicks(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "SetTicks");

	Params::BP_CaptureBG_C_SetTicks Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.SequenceCaptureBG
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   InSequence                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewPlaybackPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::SequenceCaptureBG(class ULevelSequence* InSequence, float NewPlaybackPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "SequenceCaptureBG");

	Params::BP_CaptureBG_C_SequenceCaptureBG Parms{};

	Parms.InSequence = InSequence;
	Parms.NewPlaybackPosition = NewPlaybackPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.SetupPPM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSSceneCaptureComponent2D*       SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCineCameraComponent*             AddPostProcess                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::SetupPPM(class URSSceneCaptureComponent2D* SceneCapture, class UCineCameraComponent* AddPostProcess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "SetupPPM");

	Params::BP_CaptureBG_C_SetupPPM Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.AddPostProcess = AddPostProcess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.OnResetRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERenderTargetType                       RenderTargetType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CaptureBG_C::OnResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "OnResetRenderTarget");

	Params::BP_CaptureBG_C_OnResetRenderTarget Parms{};

	Parms.RenderTargetType = RenderTargetType;
	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CaptureBG.BP_CaptureBG_C.ClearEventCaptureCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CaptureBG_C::ClearEventCaptureCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CaptureBG_C", "ClearEventCaptureCamera");

	UObject::ProcessEvent(Func, nullptr);
}

}

