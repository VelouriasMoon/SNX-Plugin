#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldSequenceActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BrainFieldSequenceActor.BP_BrainFieldSequenceActor_C
// 0x0198 (0x03C8 - 0x0230)
class ABP_BrainFieldSequenceActor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PlayerMaterialAccessorComponent_C*  BP_PlayerMaterialAccessorComponent;                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  SequencerActor;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ED_OnFinished;                                     // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 BrainFieldUser;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BrainFieldDilationName;                            // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          OpenSequencerActor;                                // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          CloseSequencerActor;                               // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          ReceiveBrainCrashSequencerActor;                   // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          OverrideSequencerActor;                            // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          EnemyOpenSequencerActor;                           // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          EnemyCloseSequencerActor;                          // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          EnemyReceiveBrainCrashSequencerActor;              // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSLevelSequenceActor*>          EnemyOverrideSequencerActor;                       // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              ShadowOffsetMapAsset;                              // 0x02F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UTexture2D*                             ShadowOffsetMap;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DummyActor;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraWatchZoom;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      SequencerTypePlayer;                               // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      SequencerTypeENPC;                                 // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EventCalledStartInput;                             // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AFF[0x1];                                     // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          DamageSequenceAsset;                               // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         NowDamageStep;                                     // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FinalStepEndFrameNumber;                           // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyThroughOneShot;                             // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B00[0x3];                                     // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OneShotEndFrame;                                   // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowLoopDuration;                                   // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B01[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  DamageSequence;                                    // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventPPFuturePrediction_C*          SpawnedPPFuturePredictionBP;                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealingTime;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HealColor;                                         // 0x038C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBeforeFlameHealedFlag;                            // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B02[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitHealDamageStepValue;                           // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ConstHealColor;                                    // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B03[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EventTypeSwitchBase_C*>      MenuSetupPPs;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ED_OnFinished__DelegateSignature();
	void ExecuteUbergraph_BP_BrainFieldSequenceActor(int32 EntryPoint);
	void ENPCWhiteoutEnd();
	void SetupPlayAfterFrameDrop();
	void ASyncLoadDamageSequence();
	void StartENPCPsychicObject();
	void ReceiveTick(float DeltaSeconds);
	void PPMOutlineDefault();
	void PPMOutlineFront();
	void SeamlessEventJump();
	void HiddenNearBG();
	void SetVisibleEnemy(bool Value);
	void SetVisiblePlayer(bool Value);
	void EndPlayerWatchUser();
	void BeginPlayerWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime);
	void ReceiveBrainCrashCheckENPC();
	void PlayerWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime);
	void UserHoodON(bool Value);
	void CameraWatchUser(float BlendTimeSeconds, const struct FVector& WatchOffset);
	void PlayerStopEvent();
	void BrainFieldLightVisible();
	void BrainFieldLightHide();
	void SetVisibleUI(bool Enable);
	void EndSlow();
	void StartSlow();
	void StartInput();
	void Play();
	void OnFinished();
	void SwitchVisibleNormal();
	void SwitchVisibleBrainField();
	void ReceiveBeginPlay();
	void OnLoaded_830D2F464683427EE424F3A810D577C1(class UObject* Loaded);
	void SetSequenceAssetPlayer(EBrainFieldSequencerType SequencerType);
	void SetBrainFieldUser(class AActor* User, class AActor* SubUser);
	void SetupBindingPlayer(class ARSCharacterBase* Player, bool* IsBinding);
	void SetActiveSequencer(bool UserIsPlayer, bool IsOpen, bool IsOverride, EBrainFieldEndType EndType, int32 Param_Index);
	void Stop();
	void SetupBindingPlayerFromText(class ARSCharacterBase* Player, const class FText& BindingText, bool* IsBinding);
	void LoadAsset();
	void SetupBindingDummyFromText(const class FText& BindingText, bool* IsBinding);
	void PrivateLoadSequenceAsset(TArray<TSoftObjectPtr<class ULevelSequence>>& Sequences, TArray<class ARSLevelSequenceActor*>& OutputInstance);
	void SetSequenceAssetENPC(EBrainFieldSequencerType SequencerType);
	void UnloadSequenceAssetENPC();
	void PrivateUnloadSequenceAsset(TArray<class ARSLevelSequenceActor*>& Instance);
	void FinishSequencerFlow();
	void GetCameraWatchZoom(float* Zoom);
	void GetSequencerList(bool UserIsPlayer, bool IsOpen, bool IsOverride, EBrainFieldEndType EndType, TArray<class ARSLevelSequenceActor*>* SequencerList);
	void SetupBindingNPC(class ARSCharacterBase* NPC, bool* IsBinding);
	void SetupBindingENPC(class ARSCharacterBase* ENPC, bool* IsBinding);
	void PrivateSetSequenceAsset(EBrainFieldSequencerType SequencerType, TArray<class ARSLevelSequenceActor*>& OpenList, TArray<class ARSLevelSequenceActor*>& CloseList, TArray<class ARSLevelSequenceActor*>& ReceiveBrainCrashList, TArray<class ARSLevelSequenceActor*>& OverrideList);
	void SetupBindingSystemRoot(class AActor* SystemRoot, bool* IsBinding);
	void PrivateSetupSeamlessEvent();
	void Start_Damage_Sequence();
	void SetDamageStep(int32 AddValue, bool bIgnorHealCheck);
	void StopDamageSequence();
	void GetNowDamageStep(int32* NewParam);
	void RefreshSequencer();
	void GetPPFuturePredictionBP();
	void SetupBindingPlayerFromTextOpt(class ARSCharacterBase* Player, TArray<class FText>& BindingText, TArray<class FText>& BindingCodeText, TArray<class FText>& BindingWeaponText, bool* IsBinding);
	void SetupMenu(bool InMenu);

	void GetSequencerTypePlayer(EBrainFieldSequencerType* SequencerType) const;
	void GetSequencerTypeENPC(EBrainFieldSequencerType* SequencerType) const;
	void IsLoadENPC(bool* Loaded) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BrainFieldSequenceActor_C">();
	}
	static class ABP_BrainFieldSequenceActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BrainFieldSequenceActor_C>();
	}
};
static_assert(alignof(ABP_BrainFieldSequenceActor_C) == 0x000008, "Wrong alignment on ABP_BrainFieldSequenceActor_C");
static_assert(sizeof(ABP_BrainFieldSequenceActor_C) == 0x0003C8, "Wrong size on ABP_BrainFieldSequenceActor_C");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, UberGraphFrame) == 0x000230, "Member 'ABP_BrainFieldSequenceActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, BP_PlayerMaterialAccessorComponent) == 0x000238, "Member 'ABP_BrainFieldSequenceActor_C::BP_PlayerMaterialAccessorComponent' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_BrainFieldSequenceActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, SequencerActor) == 0x000248, "Member 'ABP_BrainFieldSequenceActor_C::SequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, ED_OnFinished) == 0x000250, "Member 'ABP_BrainFieldSequenceActor_C::ED_OnFinished' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, BrainFieldUser) == 0x000260, "Member 'ABP_BrainFieldSequenceActor_C::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, BrainFieldDilationName) == 0x000268, "Member 'ABP_BrainFieldSequenceActor_C::BrainFieldDilationName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, OpenSequencerActor) == 0x000278, "Member 'ABP_BrainFieldSequenceActor_C::OpenSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, CloseSequencerActor) == 0x000288, "Member 'ABP_BrainFieldSequenceActor_C::CloseSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, ReceiveBrainCrashSequencerActor) == 0x000298, "Member 'ABP_BrainFieldSequenceActor_C::ReceiveBrainCrashSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, OverrideSequencerActor) == 0x0002A8, "Member 'ABP_BrainFieldSequenceActor_C::OverrideSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, EnemyOpenSequencerActor) == 0x0002B8, "Member 'ABP_BrainFieldSequenceActor_C::EnemyOpenSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, EnemyCloseSequencerActor) == 0x0002C8, "Member 'ABP_BrainFieldSequenceActor_C::EnemyCloseSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, EnemyReceiveBrainCrashSequencerActor) == 0x0002D8, "Member 'ABP_BrainFieldSequenceActor_C::EnemyReceiveBrainCrashSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, EnemyOverrideSequencerActor) == 0x0002E8, "Member 'ABP_BrainFieldSequenceActor_C::EnemyOverrideSequencerActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, ShadowOffsetMapAsset) == 0x0002F8, "Member 'ABP_BrainFieldSequenceActor_C::ShadowOffsetMapAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, ShadowOffsetMap) == 0x000320, "Member 'ABP_BrainFieldSequenceActor_C::ShadowOffsetMap' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, DummyActor) == 0x000328, "Member 'ABP_BrainFieldSequenceActor_C::DummyActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, CameraWatchZoom) == 0x000330, "Member 'ABP_BrainFieldSequenceActor_C::CameraWatchZoom' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, SequencerTypePlayer) == 0x000334, "Member 'ABP_BrainFieldSequenceActor_C::SequencerTypePlayer' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, SequencerTypeENPC) == 0x000335, "Member 'ABP_BrainFieldSequenceActor_C::SequencerTypeENPC' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, EventCalledStartInput) == 0x000336, "Member 'ABP_BrainFieldSequenceActor_C::EventCalledStartInput' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, DamageSequenceAsset) == 0x000338, "Member 'ABP_BrainFieldSequenceActor_C::DamageSequenceAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, NowDamageStep) == 0x000360, "Member 'ABP_BrainFieldSequenceActor_C::NowDamageStep' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, FinalStepEndFrameNumber) == 0x000364, "Member 'ABP_BrainFieldSequenceActor_C::FinalStepEndFrameNumber' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, AlreadyThroughOneShot) == 0x000368, "Member 'ABP_BrainFieldSequenceActor_C::AlreadyThroughOneShot' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, OneShotEndFrame) == 0x00036C, "Member 'ABP_BrainFieldSequenceActor_C::OneShotEndFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, NowLoopDuration) == 0x000370, "Member 'ABP_BrainFieldSequenceActor_C::NowLoopDuration' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, DamageSequence) == 0x000378, "Member 'ABP_BrainFieldSequenceActor_C::DamageSequence' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, SpawnedPPFuturePredictionBP) == 0x000380, "Member 'ABP_BrainFieldSequenceActor_C::SpawnedPPFuturePredictionBP' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, HealingTime) == 0x000388, "Member 'ABP_BrainFieldSequenceActor_C::HealingTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, HealColor) == 0x00038C, "Member 'ABP_BrainFieldSequenceActor_C::HealColor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, bBeforeFlameHealedFlag) == 0x00039C, "Member 'ABP_BrainFieldSequenceActor_C::bBeforeFlameHealedFlag' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, WaitHealDamageStepValue) == 0x0003A0, "Member 'ABP_BrainFieldSequenceActor_C::WaitHealDamageStepValue' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, ConstHealColor) == 0x0003A4, "Member 'ABP_BrainFieldSequenceActor_C::ConstHealColor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldSequenceActor_C, MenuSetupPPs) == 0x0003B8, "Member 'ABP_BrainFieldSequenceActor_C::MenuSetupPPs' has a wrong offset!");

}

