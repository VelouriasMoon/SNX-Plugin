#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundManager

#include "Basic.hpp"

#include "BP_SoundManager_classes.hpp"
#include "BP_SoundManager_parameters.hpp"


namespace SDK
{

// Function BP_SoundManager.BP_SoundManager_C.ExecuteUbergraph_BP_SoundManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::ExecuteUbergraph_BP_SoundManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ExecuteUbergraph_BP_SoundManager");

	Params::BP_SoundManager_C_ExecuteUbergraph_BP_SoundManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorStartEndBar
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorStartEndBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorStartEndBar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorIndividualRank
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorIndividualRank()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorIndividualRank");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorCompleteLogo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorCompleteLogo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorCompleteLogo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorRecieveMission
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorRecieveMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorRecieveMission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorResultRankSE
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorResultRankSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorResultRankSE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorResult
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.visionSimulatorComplete
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::VisionSimulatorComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "visionSimulatorComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.PlaySE_NoDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::PlaySE_NoDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlaySE_NoDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnSkipEvent
// (Event, Public, BlueprintEvent)

void ABP_SoundManager_C::OnSkipEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnSkipEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnMessageSkipSePlay
// (Event, Public, BlueprintEvent)

void ABP_SoundManager_C::OnMessageSkipSePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnMessageSkipSePlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnEndCutScene
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnEndCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnEndCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStartCutScene
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnStartCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStartCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnChangeArea
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::OnChangeArea(EChangeAreaStatus Status, bool IsChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnChangeArea");

	Params::BP_SoundManager_C_OnChangeArea Parms{};

	Parms.Status = Status;
	Parms.IsChangeLocation = IsChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBattleFieldEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBattleFieldEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBattleFieldEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBattleFieldBegin
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBattleFieldBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBattleFieldBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ReceiveEndPlay");

	Params::BP_SoundManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ReceiveTick");

	Params::BP_SoundManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SoundManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBattleStartDriveBgmModifyResume
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBattleStartDriveBgmModifyResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBattleStartDriveBgmModifyResume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBattleEndDriveBgmModifyPause
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBattleEndDriveBgmModifyPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBattleEndDriveBgmModifyPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnLastBattlePhase3
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnLastBattlePhase3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnLastBattlePhase3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnLastBattlePhase2
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnLastBattlePhase2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnLastBattlePhase2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnChangeDriveLevel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DriveLevel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnChangeDriveLevel(int32 DriveLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnChangeDriveLevel");

	Params::BP_SoundManager_C_OnChangeDriveLevel Parms{};

	Parms.DriveLevel = DriveLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnDriveEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnDriveEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnDriveEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnDriveStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DriveLevel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnDriveStart(int32 DriveLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnDriveStart");

	Params::BP_SoundManager_C_OnDriveStart Parms{};

	Parms.DriveLevel = DriveLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnAreaChangeLocationBgm
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnAreaChangeLocationBgm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnAreaChangeLocationBgm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnTitleEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnTitleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnTitleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnTitleStart
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnTitleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnTitleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnChangeLocationBgm
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnChangeLocationBgm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnChangeLocationBgm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnChangeBattleBgm
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_EnemySound                         EnemySound                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnChangeBattleBgm(Enum_EnemySound EnemySound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnChangeBattleBgm");

	Params::BP_SoundManager_C_OnChangeBattleBgm Parms{};

	Parms.EnemySound = EnemySound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCopyEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCopyParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCopyEnd");

	Params::BP_SoundManager_C_OnCopyEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCopyStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCopyParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCopyStart");

	Params::BP_SoundManager_C_OnCopyStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStealthStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASStealthParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStealthStart");

	Params::BP_SoundManager_C_OnStealthStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStealthEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASStealthParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStealthEnd");

	Params::BP_SoundManager_C_OnStealthEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnMetalEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASMetalParam                  Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnMetalEnd");

	Params::BP_SoundManager_C_OnMetalEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnMetalStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASMetalParam                  Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnMetalStart");

	Params::BP_SoundManager_C_OnMetalStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnTelepoEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASTelepoParam                 Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnTelepoEnd");

	Params::BP_SoundManager_C_OnTelepoEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnTelepoStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASTelepoParam                 Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnTelepoStart");

	Params::BP_SoundManager_C_OnTelepoStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnSeeThroughEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASSeeThroughParam             Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnSeeThroughEnd");

	Params::BP_SoundManager_C_OnSeeThroughEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnSeeThroughStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASSeeThroughParam             Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnSeeThroughStart");

	Params::BP_SoundManager_C_OnSeeThroughStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnFireEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASFireParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnFireEnd(const struct FFSASFireParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnFireEnd");

	Params::BP_SoundManager_C_OnFireEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnFireStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASFireParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnFireStart(const struct FFSASFireParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnFireStart");

	Params::BP_SoundManager_C_OnFireStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnSASCutinStart
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnSASCutinStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnSASCutinStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnElectricEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASElectricParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnElectricEnd");

	Params::BP_SoundManager_C_OnElectricEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnElectricStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASElectricParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnElectricStart");

	Params::BP_SoundManager_C_OnElectricStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnAcceleratorEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologram                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, float RemainTime, bool bHologram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnAcceleratorEnd");

	Params::BP_SoundManager_C_OnAcceleratorEnd Parms{};

	Parms.Parameter = std::move(Parameter);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;
	Parms.bHologram = bHologram;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnAcceleratorStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologram                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, bool bHologram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnAcceleratorStart");

	Params::BP_SoundManager_C_OnAcceleratorStart Parms{};

	Parms.Parameter = std::move(Parameter);
	Parms.Param_Owner = Param_Owner;
	Parms.bHologram = bHologram;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnNoticeQuest
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnNoticeQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnNoticeQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnNoticeQuestRewareOut
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnNoticeQuestRewareOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnNoticeQuestRewareOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnNoticeQuestRewardIn
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnNoticeQuestRewardIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnNoticeQuestRewardIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCrashGuageEmphasis_Boss
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCrashGuageEmphasis_Boss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCrashGuageEmphasis_Boss");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCrashGuageFull_Boss
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCrashGuageFull_Boss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCrashGuageFull_Boss");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCrashGuageFull
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCrashGuageFull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCrashGuageFull");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStaticEventPhaseMove_
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           AnimPath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnStaticEventPhaseMove_(const class FString& AnimPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStaticEventPhaseMove_");

	Params::BP_SoundManager_C_OnStaticEventPhaseMove_ Parms{};

	Parms.AnimPath = std::move(AnimPath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnProceedMessage
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnProceedMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnProceedMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCrashGuageEmphasis
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCrashGuageEmphasis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCrashGuageEmphasis");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeSASCommandPageChange
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeSASCommandPageChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeSASCommandPageChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySoundSASCode
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySoundSASCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySoundSASCode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeEmAppearEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          Creator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnPlaySeEmAppearEnd(const struct FVector& Location, const struct FRotator& Rotation, class UObject* Creator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeEmAppearEnd");

	Params::BP_SoundManager_C_OnPlaySeEmAppearEnd Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Creator = Creator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeEmAppearStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          Creator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnPlaySeEmAppearStart(const struct FVector& Location, const struct FRotator& Rotation, class UObject* Creator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeEmAppearStart");

	Params::BP_SoundManager_C_OnPlaySeEmAppearStart Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Creator = Creator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeBrainGaugeMAX
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeBrainGaugeMAX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeBrainGaugeMAX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeSASCommandOn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSAS                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::OnPlaySeSASCommandOn(bool IsSAS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeSASCommandOn");

	Params::BP_SoundManager_C_OnPlaySeSASCommandOn Parms{};

	Parms.IsSAS = IsSAS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeBrainGaugeUp
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeBrainGaugeUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeBrainGaugeUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeItemUse
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeItemUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeItemUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeItemChange
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeItemChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeItemChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeTargetLockCursor
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeTargetLockCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeTargetLockCursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeTargetLockOff
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeTargetLockOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeTargetLockOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlaySeTargetLockOn
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlaySeTargetLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlaySeTargetLockOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnRevitalizationEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnRevitalizationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnRevitalizationEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnRevitalizationStart
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnRevitalizationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnRevitalizationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBrainCrashOn
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBrainCrashOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBrainCrashOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPlayVoArmorBreak
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnPlayVoArmorBreak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPlayVoArmorBreak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBrainCrashTarget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnBrainCrashTarget(class ARSCharacterBase* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBrainCrashTarget");

	Params::BP_SoundManager_C_OnBrainCrashTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBonusGhostEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBonusGhostEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBonusGhostEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBonusGhostStart
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnBonusGhostStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBonusGhostStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnEndJustDodge
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnEndJustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnEndJustDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStartJustDodge
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnStartJustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStartJustDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnBrainFieldCloseFromNative
// (Event, Public, BlueprintEvent)

void ABP_SoundManager_C::OnBrainFieldCloseFromNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnBrainFieldCloseFromNative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnEndCutScene_SoundSetting
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnEndCutScene_SoundSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnEndCutScene_SoundSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnStartCutScene_SoundSetting
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnStartCutScene_SoundSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnStartCutScene_SoundSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.LoadSASExtraAdlibVoice
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   TargetSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::LoadSASExtraAdlibVoice(class ULevelSequence* TargetSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadSASExtraAdlibVoice");

	Params::BP_SoundManager_C_LoadSASExtraAdlibVoice Parms{};

	Parms.TargetSequence = TargetSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.LoadAdlibVoiceCue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::LoadAdlibVoiceCue(class ULevelSequence* Sequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadAdlibVoiceCue");

	Params::BP_SoundManager_C_LoadAdlibVoiceCue Parms{};

	Parms.Sequencer = Sequencer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.Bgm Selector For Static Event Out
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::Bgm_Selector_For_Static_Event_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Bgm Selector For Static Event Out");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.Bgm Selector For Static Event In
// (BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::Bgm_Selector_For_Static_Event_In()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Bgm Selector For Static Event In");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnEventEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESequencerSoundDemoType                 DemoType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EventID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    SoundCue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnEventEnd(ESequencerSoundDemoType DemoType, int32 EventID, class USoundAtomCue* SoundCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnEventEnd");

	Params::BP_SoundManager_C_OnEventEnd Parms{};

	Parms.DemoType = DemoType;
	Parms.EventID = EventID;
	Parms.SoundCue = SoundCue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnEventStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESequencerSoundDemoType                 DemoType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EventID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    SoundCue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnEventStart(ESequencerSoundDemoType DemoType, int32 EventID, class USoundAtomCue* SoundCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnEventStart");

	Params::BP_SoundManager_C_OnEventStart Parms{};

	Parms.DemoType = DemoType;
	Parms.EventID = EventID;
	Parms.SoundCue = SoundCue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPsychicEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASPsychicParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPsychicEnd");

	Params::BP_SoundManager_C_OnPsychicEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnPsychicStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASPsychicParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnPsychicStart");

	Params::BP_SoundManager_C_OnPsychicStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCutInEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCutInEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCutInEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.OnCutInStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::OnCutInStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnCutInStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.UpdateOcclusion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::UpdateOcclusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "UpdateOcclusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.GetPhyshicsCollisionSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRSCollisionSoundInfo            CollisionSoundInfo                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRSCollisionSound                CollisionSound                                         (Parm, OutParm)

void ABP_SoundManager_C::GetPhyshicsCollisionSound(const struct FRSCollisionSoundInfo& CollisionSoundInfo, struct FRSCollisionSound* CollisionSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "GetPhyshicsCollisionSound");

	Params::BP_SoundManager_C_GetPhyshicsCollisionSound Parms{};

	Parms.CollisionSoundInfo = std::move(CollisionSoundInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (CollisionSound != nullptr)
		*CollisionSound = std::move(Parms.CollisionSound);
}


// Function BP_SoundManager.BP_SoundManager_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.Change Level
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::Change_Level(class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Change Level");

	Params::BP_SoundManager_C_Change_Level Parms{};

	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.Aplly Change Level Sound Setting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::Aplly_Change_Level_Sound_Setting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Aplly Change Level Sound Setting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.ChangeBgmLcOrBt
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBattleIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::ChangeBgmLcOrBt(bool IsBattleIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ChangeBgmLcOrBt");

	Params::BP_SoundManager_C_ChangeBgmLcOrBt Parms{};

	Parms.IsBattleIn = IsBattleIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayBgm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    AtomCue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceFirstStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PlayBgm(EBgmCategory Category, class USoundAtomCue* AtomCue, float FadeTime, float FadeVolume, bool ForceFirstStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayBgm");

	Params::BP_SoundManager_C_PlayBgm Parms{};

	Parms.Category = Category;
	Parms.AtomCue = AtomCue;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;
	Parms.ForceFirstStart = ForceFirstStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.StopBgm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::StopBgm(EBgmCategory Category, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopBgm");

	Params::BP_SoundManager_C_StopBgm Parms{};

	Parms.Category = Category;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.ResumeBgm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::ResumeBgm(EBgmCategory Category, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ResumeBgm");

	Params::BP_SoundManager_C_ResumeBgm Parms{};

	Parms.Category = Category;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PauseBgm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PauseBgm(EBgmCategory Category, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PauseBgm");

	Params::BP_SoundManager_C_PauseBgm Parms{};

	Parms.Category = Category;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PlayEnv
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    AtomCue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PlayEnv(class USoundAtomCue* AtomCue, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayEnv");

	Params::BP_SoundManager_C_PlayEnv Parms{};

	Parms.AtomCue = AtomCue;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.StopEnv
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::StopEnv(float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopEnv");

	Params::BP_SoundManager_C_StopEnv Parms{};

	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PauseEnv
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PauseEnv(float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PauseEnv");

	Params::BP_SoundManager_C_PauseEnv Parms{};

	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.ResumeEnv
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::ResumeEnv(float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ResumeEnv");

	Params::BP_SoundManager_C_ResumeEnv Parms{};

	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.GetBgmComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSAtomComponentBase*             Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::GetBgmComponent(EBgmCategory Category, class URSAtomComponentBase** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "GetBgmComponent");

	Params::BP_SoundManager_C_GetBgmComponent Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function BP_SoundManager.BP_SoundManager_C.SelectBgmCue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    OldCue                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    NewCue                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::SelectBgmCue(class USoundAtomCue* OldCue, class USoundAtomCue* NewCue, class USoundAtomCue** Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SelectBgmCue");

	Params::BP_SoundManager_C_SelectBgmCue Parms{};

	Parms.OldCue = OldCue;
	Parms.NewCue = NewCue;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SoundManager.BP_SoundManager_C.IsBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsBrainField                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsBrainField(bool* Param_IsBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsBrainField");

	Params::BP_SoundManager_C_IsBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsBrainField != nullptr)
		*Param_IsBrainField = Parms.Param_IsBrainField;
}


// Function BP_SoundManager.BP_SoundManager_C.SetLevelSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSoundLevelParam                 LevelParam                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SoundManager_C::SetLevelSound(const struct FSoundLevelParam& LevelParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetLevelSound");

	Params::BP_SoundManager_C_SetLevelSound Parms{};

	Parms.LevelParam = std::move(LevelParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SetSoundEmitterVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::SetSoundEmitterVolume(float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetSoundEmitterVolume");

	Params::BP_SoundManager_C_SetSoundEmitterVolume Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.BgmChangeToShop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::BgmChangeToShop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "BgmChangeToShop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.BgmChangeFromShop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::BgmChangeFromShop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "BgmChangeFromShop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.PlaySoundEmitterByPlayID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PlayID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlaySoundEmitterByPlayID(class FName PlayID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlaySoundEmitterByPlayID");

	Params::BP_SoundManager_C_PlaySoundEmitterByPlayID Parms{};

	Parms.PlayID = PlayID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.StopSoundEmitterByPlayID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PlayID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::StopSoundEmitterByPlayID(class FName PlayID, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopSoundEmitterByPlayID");

	Params::BP_SoundManager_C_StopSoundEmitterByPlayID Parms{};

	Parms.PlayID = PlayID;
	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlaySoundEmitter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlaySoundEmitter(float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlaySoundEmitter");

	Params::BP_SoundManager_C_PlaySoundEmitter Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.StopSoundEmitter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::StopSoundEmitter(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopSoundEmitter");

	Params::BP_SoundManager_C_StopSoundEmitter Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayLoopSe
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    AtomCue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceFirstStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PlayLoopSe(class FName Param_Name, class USoundAtomCue* AtomCue, const struct FVector& Location, const struct FRotator& Rotation, float FadeTime, float FadeVolume, bool ForceFirstStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayLoopSe");

	Params::BP_SoundManager_C_PlayLoopSe Parms{};

	Parms.Param_Name = Param_Name;
	Parms.AtomCue = AtomCue;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;
	Parms.ForceFirstStart = ForceFirstStart;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.StopLoopSe
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::StopLoopSe(class FName Param_Name, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopLoopSe");

	Params::BP_SoundManager_C_StopLoopSe Parms{};

	Parms.Param_Name = Param_Name;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.ReplacedVoiceSheet
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsJapanese                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::ReplacedVoiceSheet(bool IsJapanese)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ReplacedVoiceSheet");

	Params::BP_SoundManager_C_ReplacedVoiceSheet Parms{};

	Parms.IsJapanese = IsJapanese;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.LoadVoiceCueSheetPlayStage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SeName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::LoadVoiceCueSheetPlayStage(const class FString& SeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadVoiceCueSheetPlayStage");

	Params::BP_SoundManager_C_LoadVoiceCueSheetPlayStage Parms{};

	Parms.SeName = std::move(SeName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetBaseSoundVolume
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundCategory                          SoundCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetBaseSoundVolume(ESoundCategory SoundCategory, const class FString& ParamName, float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetBaseSoundVolume");

	Params::BP_SoundManager_C_SetBaseSoundVolume Parms{};

	Parms.SoundCategory = SoundCategory;
	Parms.ParamName = std::move(ParamName);
	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.GetBaseSoundVolume
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundCategory                          SoundCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_SoundManager_C::GetBaseSoundVolume(ESoundCategory SoundCategory, const class FString& ParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "GetBaseSoundVolume");

	Params::BP_SoundManager_C_GetBaseSoundVolume Parms{};

	Parms.SoundCategory = SoundCategory;
	Parms.ParamName = std::move(ParamName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.IsBossBatlle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBossBattle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsBossBatlle(bool* IsBossBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsBossBatlle");

	Params::BP_SoundManager_C_IsBossBatlle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBossBattle != nullptr)
		*IsBossBattle = Parms.IsBossBattle;
}


// Function BP_SoundManager.BP_SoundManager_C.Debug_Print_Sound
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::Debug_Print_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Debug_Print_Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.SetConfigVolumeByCategoryName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundCategory                          SoundCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetConfigVolumeByCategoryName(ESoundCategory SoundCategory, float DestVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetConfigVolumeByCategoryName");

	Params::BP_SoundManager_C_SetConfigVolumeByCategoryName Parms{};

	Parms.SoundCategory = SoundCategory;
	Parms.DestVolume = DestVolume;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetResumeFromMuteAll
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetResumeFromMuteAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetResumeFromMuteAll");

	Params::BP_SoundManager_C_SetResumeFromMuteAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetInGameVolumeByCategoryName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundCategory                          Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestVol                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetInGameVolumeByCategoryName(ESoundCategory Category, float DestVol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetInGameVolumeByCategoryName");

	Params::BP_SoundManager_C_SetInGameVolumeByCategoryName Parms{};

	Parms.Category = Category;
	Parms.DestVol = DestVol;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetMuteAll
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetMuteAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetMuteAll");

	Params::BP_SoundManager_C_SetMuteAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetInGameVolumeAll
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DestVol                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetInGameVolumeAll(float DestVol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetInGameVolumeAll");

	Params::BP_SoundManager_C_SetInGameVolumeAll Parms{};

	Parms.DestVol = DestVol;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetFadeByCategoryName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundCategory                          Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestVol                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetFadeByCategoryName(ESoundCategory Category, float FadeTime, float DestVol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetFadeByCategoryName");

	Params::BP_SoundManager_C_SetFadeByCategoryName Parms{};

	Parms.Category = Category;
	Parms.FadeTime = FadeTime;
	Parms.DestVol = DestVol;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetFadeAllCategory
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestVol                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::SetFadeAllCategory(float FadeTime, float DestVol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetFadeAllCategory");

	Params::BP_SoundManager_C_SetFadeAllCategory Parms{};

	Parms.FadeTime = FadeTime;
	Parms.DestVol = DestVol;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PauseAllSound
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::PauseAllSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PauseAllSound");

	Params::BP_SoundManager_C_PauseAllSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.ResumeFromPauseAllSound
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::ResumeFromPauseAllSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ResumeFromPauseAllSound");

	Params::BP_SoundManager_C_ResumeFromPauseAllSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.ChangeSoundState
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundState                             SndState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::ChangeSoundState(ESoundState SndState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ChangeSoundState");

	Params::BP_SoundManager_C_ChangeSoundState Parms{};

	Parms.SndState = SndState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PlayEnvFromEV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Cue                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlayEnvFromEV(class USoundAtomCue* Cue, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayEnvFromEV");

	Params::BP_SoundManager_C_PlayEnvFromEV Parms{};

	Parms.Cue = Cue;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayBGEffectSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlayBGEffectSound(class FName EventName, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayBGEffectSound");

	Params::BP_SoundManager_C_PlayBGEffectSound Parms{};

	Parms.EventName = EventName;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.LoadScenarioCueSheet
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::LoadScenarioCueSheet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadScenarioCueSheet");

	Params::BP_SoundManager_C_LoadScenarioCueSheet Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.LoadBondsCueSheet
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               HeroID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               PartnerId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::LoadBondsCueSheet(EPlayerID HeroID, EPlayerID PartnerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadBondsCueSheet");

	Params::BP_SoundManager_C_LoadBondsCueSheet Parms{};

	Parms.HeroID = HeroID;
	Parms.PartnerId = PartnerId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.Set Selector Label
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAtomComponent*                   AtomComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SelectorString                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SoundManager_C::Set_Selector_Label(class UAtomComponent* AtomComponent, const class FString& SelectorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Set Selector Label");

	Params::BP_SoundManager_C_Set_Selector_Label Parms{};

	Parms.AtomComponent = AtomComponent;
	Parms.SelectorString = std::move(SelectorString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SetBgmControl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    ControlCue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::SetBgmControl(class USoundAtomCue* ControlCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetBgmControl");

	Params::BP_SoundManager_C_SetBgmControl Parms{};

	Parms.ControlCue = ControlCue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.On Battle Field Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStart                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::On_Battle_Field_Changed(bool IsStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "On Battle Field Changed");

	Params::BP_SoundManager_C_On_Battle_Field_Changed Parms{};

	Parms.IsStart = IsStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.OnChangeArea_SoundSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::OnChangeArea_SoundSetting(EChangeAreaStatus Stat, bool IsChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "OnChangeArea_SoundSetting");

	Params::BP_SoundManager_C_OnChangeArea_SoundSetting Parms{};

	Parms.Stat = Stat;
	Parms.IsChangeLocation = IsChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.ReserveApllyChangeLevelSound
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::ReserveApllyChangeLevelSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "ReserveApllyChangeLevelSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.SetDspSnapShot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSoundSnapshot                   DspSnapShot                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_SoundManager_C::SetDspSnapShot(const struct FSoundSnapshot& DspSnapShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetDspSnapShot");

	Params::BP_SoundManager_C_SetDspSnapShot Parms{};

	Parms.DspSnapShot = std::move(DspSnapShot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlaySoundBySoundManager
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ComponentClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class USoundAtomCue>     AtomSound                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SoundManager_C::PlaySoundBySoundManager(class UClass* ComponentClass, TSoftObjectPtr<class USoundAtomCue> AtomSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlaySoundBySoundManager");

	Params::BP_SoundManager_C_PlaySoundBySoundManager Parms{};

	Parms.ComponentClass = ComponentClass;
	Parms.AtomSound = AtomSound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayVoice
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttache                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAutoActivate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFilterCallbackType                     FilterCallbackType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSAtomComponentBase*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class URSAtomComponentBase* ABP_SoundManager_C::PlayVoice(class USoundAtomCue* Sound, bool IsAttache, bool IsAutoActivate, class USceneComponent* AttachToComponent, class FName AttachPointName, EFilterCallbackType FilterCallbackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayVoice");

	Params::BP_SoundManager_C_PlayVoice Parms{};

	Parms.Sound = Sound;
	Parms.IsAttache = IsAttache;
	Parms.IsAutoActivate = IsAutoActivate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.FilterCallbackType = FilterCallbackType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.PlayCueWeaponLocation
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGetPlayerWeaponType                    WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class URSAtomComponentBase> ComponentClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class USoundAttenuation*                AttenuationSettings                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSAtomComponentBase*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class URSAtomComponentBase* ABP_SoundManager_C::PlayCueWeaponLocation(class AActor* OwnerPlayer, class USoundAtomCue* Sound, EGetPlayerWeaponType WeaponType, TSubclassOf<class URSAtomComponentBase> ComponentClass, class USoundAttenuation* AttenuationSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayCueWeaponLocation");

	Params::BP_SoundManager_C_PlayCueWeaponLocation Parms{};

	Parms.OwnerPlayer = OwnerPlayer;
	Parms.Sound = Sound;
	Parms.WeaponType = WeaponType;
	Parms.ComponentClass = ComponentClass;
	Parms.AttenuationSettings = AttenuationSettings;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.LoadSASExtraAdlibVoiceData
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   TargetSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::LoadSASExtraAdlibVoiceData(class ULevelSequence* TargetSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadSASExtraAdlibVoiceData");

	Params::BP_SoundManager_C_LoadSASExtraAdlibVoiceData Parms{};

	Parms.TargetSequence = TargetSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.Get Movie Volume
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UManaComponent*                   ManaComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Volume                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::Get_Movie_Volume(class UManaComponent* ManaComponent, float* Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "Get Movie Volume");

	Params::BP_SoundManager_C_Get_Movie_Volume Parms{};

	Parms.ManaComponent = ManaComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Volume != nullptr)
		*Volume = Parms.Volume;
}


// Function BP_SoundManager.BP_SoundManager_C.CleanUpBgm
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::CleanUpBgm(EBgmCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "CleanUpBgm");

	Params::BP_SoundManager_C_CleanUpBgm Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.BGMComponentOnPlayEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAtomComponentStatus                    Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAtomComponent*                   AtomComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::BGMComponentOnPlayEnd(EAtomComponentStatus Status, class UAtomComponent* AtomComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "BGMComponentOnPlayEnd");

	Params::BP_SoundManager_C_BGMComponentOnPlayEnd Parms{};

	Parms.Status = Status;
	Parms.AtomComponent = AtomComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.BgmStopAllDestroyReserveList
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::BgmStopAllDestroyReserveList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "BgmStopAllDestroyReserveList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.IsPlayingByBgmComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBgmCategory                            Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::IsPlayingByBgmComponent(EBgmCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsPlayingByBgmComponent");

	Params::BP_SoundManager_C_IsPlayingByBgmComponent Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.GetPlayerIDFromSASKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SASKind                               Sas                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               PlayerId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::GetPlayerIDFromSASKind(E_SASKind Sas, EPlayerID* PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "GetPlayerIDFromSASKind");

	Params::BP_SoundManager_C_GetPlayerIDFromSASKind Parms{};

	Parms.Sas = Sas;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerId != nullptr)
		*PlayerId = Parms.PlayerId;
}


// Function BP_SoundManager.BP_SoundManager_C.PreLoadPhaseAnimSE
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USoundAtomCue*>            OutAtomCues                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_SoundManager_C::PreLoadPhaseAnimSE(TArray<class USoundAtomCue*>& OutAtomCues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PreLoadPhaseAnimSE");

	Params::BP_SoundManager_C_PreLoadPhaseAnimSE Parms{};

	Parms.OutAtomCues = std::move(OutAtomCues);

	UObject::ProcessEvent(Func, &Parms);

	OutAtomCues = std::move(Parms.OutAtomCues);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayAlertAtAC
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::PlayAlertAtAC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayAlertAtAC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.StopAlert
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::StopAlert(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "StopAlert");

	Params::BP_SoundManager_C_StopAlert Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayAlert
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlayAlert(class USoundAtomCue* Sound, float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayAlert");

	Params::BP_SoundManager_C_PlayAlert Parms{};

	Parms.Sound = Sound;
	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SetUpDLCSounds
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::SetUpDLCSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetUpDLCSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.SetUpIsDlcAvailable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::SetUpIsDlcAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetUpIsDlcAvailable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.IsAnyDlcAvailable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsAnyDlcAvailable(bool* Available)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsAnyDlcAvailable");

	Params::BP_SoundManager_C_IsAnyDlcAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;
}


// Function BP_SoundManager.BP_SoundManager_C.LoadDlcSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::LoadDlcSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "LoadDlcSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.SetUpDlcBondsLevelSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::SetUpDlcBondsLevelSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetUpDlcBondsLevelSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.IsDlcBondsPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsDlcBondsPlaying(bool* IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsDlcBondsPlaying");

	Params::BP_SoundManager_C_IsDlcBondsPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function BP_SoundManager.BP_SoundManager_C.DetectDlcBondsLevelSound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDetected                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class USoundAtomCue>     BGMCue                                                 (Parm, OutParm, HasGetValueTypeHash)
// EBgmCategory                            BgmSlot                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class USoundAtomCue>     BGMCtrlCue                                             (Parm, OutParm, HasGetValueTypeHash)
// TSoftObjectPtr<class USoundAtomCue>     EnvCue                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_SoundManager_C::DetectDlcBondsLevelSound(bool* IsDetected, TSoftObjectPtr<class USoundAtomCue>* BGMCue, EBgmCategory* BgmSlot, TSoftObjectPtr<class USoundAtomCue>* BGMCtrlCue, TSoftObjectPtr<class USoundAtomCue>* EnvCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "DetectDlcBondsLevelSound");

	Params::BP_SoundManager_C_DetectDlcBondsLevelSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDetected != nullptr)
		*IsDetected = Parms.IsDetected;

	if (BGMCue != nullptr)
		*BGMCue = Parms.BGMCue;

	if (BgmSlot != nullptr)
		*BgmSlot = Parms.BgmSlot;

	if (BGMCtrlCue != nullptr)
		*BGMCtrlCue = Parms.BGMCtrlCue;

	if (EnvCue != nullptr)
		*EnvCue = Parms.EnvCue;
}


// Function BP_SoundManager.BP_SoundManager_C.SetUpVisionSimulatorSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SoundManager_C::SetUpVisionSimulatorSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetUpVisionSimulatorSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SoundManager.BP_SoundManager_C.PlayNexudDriveSasCutinSE
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::PlayNexudDriveSasCutinSE(E_SASKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "PlayNexudDriveSasCutinSE");

	Params::BP_SoundManager_C_PlayNexudDriveSasCutinSE Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SetDontTouchSeVolumeAtAc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_DontTouchSeVolumeAtAc                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::SetDontTouchSeVolumeAtAc(bool Param_DontTouchSeVolumeAtAc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetDontTouchSeVolumeAtAc");

	Params::BP_SoundManager_C_SetDontTouchSeVolumeAtAc Parms{};

	Parms.Param_DontTouchSeVolumeAtAc = Param_DontTouchSeVolumeAtAc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SetDontPlayAnimNotifySound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDontPlay                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::SetDontPlayAnimNotifySound(bool IsDontPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SetDontPlayAnimNotifySound");

	Params::BP_SoundManager_C_SetDontPlayAnimNotifySound Parms{};

	Parms.IsDontPlay = IsDontPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SoundManager.BP_SoundManager_C.SAS_CommonStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCommand                     SAS_Command                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SAS_CommonStart");

	Params::BP_SoundManager_C_SAS_CommonStart Parms{};

	Parms.SAS_Command = std::move(SAS_Command);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SoundManager.BP_SoundManager_C.SAS_CommonEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SAS_Kind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCancelSASCost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RemainTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SoundManager_C::SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "SAS_CommonEnd");

	Params::BP_SoundManager_C_SAS_CommonEnd Parms{};

	Parms.SAS_Kind = SAS_Kind;
	Parms.bCancelSASCost = bCancelSASCost;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;

	if (RemainTime != nullptr)
		*RemainTime = Parms.RemainTime;
}


// Function BP_SoundManager.BP_SoundManager_C.EventManagerStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::EventManagerStart(bool EnableTick, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "EventManagerStart");

	Params::BP_SoundManager_C_EventManagerStart Parms{};

	Parms.EnableTick = EnableTick;
	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.EventManagerEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SoundManager_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "EventManagerEnd");

	Params::BP_SoundManager_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SoundManager.BP_SoundManager_C.IsValidBgmIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsValidBgmIndex(int32 Param_Index, bool* Valid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsValidBgmIndex");

	Params::BP_SoundManager_C_IsValidBgmIndex Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_SoundManager.BP_SoundManager_C.IsAcceleratorValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsAcceleratorValid(bool* Valid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsAcceleratorValid");

	Params::BP_SoundManager_C_IsAcceleratorValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_SoundManager.BP_SoundManager_C.IsAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Accelerating                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SoundManager_C::IsAccelerating(bool* Accelerating) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SoundManager_C", "IsAccelerating");

	Params::BP_SoundManager_C_IsAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Accelerating != nullptr)
		*Accelerating = Parms.Accelerating;
}

}

